
MINI_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000125d4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f84  08012788  08012788  00022788  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801470c  0801470c  0003034c  2**0
                  CONTENTS
  4 .ARM          00000008  0801470c  0801470c  0002470c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014714  08014714  0003034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014714  08014714  00024714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014718  08014718  00024718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000034c  20000000  0801471c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003034c  2**0
                  CONTENTS
 10 .bss          00005f4c  2000034c  2000034c  0003034c  2**2
                  ALLOC
 11 ._user_heap_stack 00002400  20006298  20006298  0003034c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003034c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00029d82  00000000  00000000  0003037c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006231  00000000  00000000  0005a0fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000022d8  00000000  00000000  00060330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002010  00000000  00000000  00062608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002cd31  00000000  00000000  00064618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002bade  00000000  00000000  00091349  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f5a6c  00000000  00000000  000bce27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001b2893  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a2c4  00000000  00000000  001b28e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000034c 	.word	0x2000034c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801276c 	.word	0x0801276c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000350 	.word	0x20000350
 80001ec:	0801276c 	.word	0x0801276c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b974 	b.w	8000f68 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	468e      	mov	lr, r1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d14d      	bne.n	8000d42 <__udivmoddi4+0xaa>
 8000ca6:	428a      	cmp	r2, r1
 8000ca8:	4694      	mov	ip, r2
 8000caa:	d969      	bls.n	8000d80 <__udivmoddi4+0xe8>
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	b152      	cbz	r2, 8000cc8 <__udivmoddi4+0x30>
 8000cb2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cb6:	f1c2 0120 	rsb	r1, r2, #32
 8000cba:	fa20 f101 	lsr.w	r1, r0, r1
 8000cbe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cc6:	4094      	lsls	r4, r2
 8000cc8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ccc:	0c21      	lsrs	r1, r4, #16
 8000cce:	fbbe f6f8 	udiv	r6, lr, r8
 8000cd2:	fa1f f78c 	uxth.w	r7, ip
 8000cd6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cda:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cde:	fb06 f107 	mul.w	r1, r6, r7
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x64>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cee:	f080 811f 	bcs.w	8000f30 <__udivmoddi4+0x298>
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	f240 811c 	bls.w	8000f30 <__udivmoddi4+0x298>
 8000cf8:	3e02      	subs	r6, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1a5b      	subs	r3, r3, r1
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3310 	mls	r3, r8, r0, r3
 8000d08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d0c:	fb00 f707 	mul.w	r7, r0, r7
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x92>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1c:	f080 810a 	bcs.w	8000f34 <__udivmoddi4+0x29c>
 8000d20:	42a7      	cmp	r7, r4
 8000d22:	f240 8107 	bls.w	8000f34 <__udivmoddi4+0x29c>
 8000d26:	4464      	add	r4, ip
 8000d28:	3802      	subs	r0, #2
 8000d2a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d2e:	1be4      	subs	r4, r4, r7
 8000d30:	2600      	movs	r6, #0
 8000d32:	b11d      	cbz	r5, 8000d3c <__udivmoddi4+0xa4>
 8000d34:	40d4      	lsrs	r4, r2
 8000d36:	2300      	movs	r3, #0
 8000d38:	e9c5 4300 	strd	r4, r3, [r5]
 8000d3c:	4631      	mov	r1, r6
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d909      	bls.n	8000d5a <__udivmoddi4+0xc2>
 8000d46:	2d00      	cmp	r5, #0
 8000d48:	f000 80ef 	beq.w	8000f2a <__udivmoddi4+0x292>
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d52:	4630      	mov	r0, r6
 8000d54:	4631      	mov	r1, r6
 8000d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5a:	fab3 f683 	clz	r6, r3
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	d14a      	bne.n	8000df8 <__udivmoddi4+0x160>
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d302      	bcc.n	8000d6c <__udivmoddi4+0xd4>
 8000d66:	4282      	cmp	r2, r0
 8000d68:	f200 80f9 	bhi.w	8000f5e <__udivmoddi4+0x2c6>
 8000d6c:	1a84      	subs	r4, r0, r2
 8000d6e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d72:	2001      	movs	r0, #1
 8000d74:	469e      	mov	lr, r3
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	d0e0      	beq.n	8000d3c <__udivmoddi4+0xa4>
 8000d7a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d7e:	e7dd      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000d80:	b902      	cbnz	r2, 8000d84 <__udivmoddi4+0xec>
 8000d82:	deff      	udf	#255	; 0xff
 8000d84:	fab2 f282 	clz	r2, r2
 8000d88:	2a00      	cmp	r2, #0
 8000d8a:	f040 8092 	bne.w	8000eb2 <__udivmoddi4+0x21a>
 8000d8e:	eba1 010c 	sub.w	r1, r1, ip
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f fe8c 	uxth.w	lr, ip
 8000d9a:	2601      	movs	r6, #1
 8000d9c:	0c20      	lsrs	r0, r4, #16
 8000d9e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000da2:	fb07 1113 	mls	r1, r7, r3, r1
 8000da6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000daa:	fb0e f003 	mul.w	r0, lr, r3
 8000dae:	4288      	cmp	r0, r1
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0x12c>
 8000db2:	eb1c 0101 	adds.w	r1, ip, r1
 8000db6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x12a>
 8000dbc:	4288      	cmp	r0, r1
 8000dbe:	f200 80cb 	bhi.w	8000f58 <__udivmoddi4+0x2c0>
 8000dc2:	4643      	mov	r3, r8
 8000dc4:	1a09      	subs	r1, r1, r0
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dcc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dd4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d908      	bls.n	8000dee <__udivmoddi4+0x156>
 8000ddc:	eb1c 0404 	adds.w	r4, ip, r4
 8000de0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000de4:	d202      	bcs.n	8000dec <__udivmoddi4+0x154>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f200 80bb 	bhi.w	8000f62 <__udivmoddi4+0x2ca>
 8000dec:	4608      	mov	r0, r1
 8000dee:	eba4 040e 	sub.w	r4, r4, lr
 8000df2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000df6:	e79c      	b.n	8000d32 <__udivmoddi4+0x9a>
 8000df8:	f1c6 0720 	rsb	r7, r6, #32
 8000dfc:	40b3      	lsls	r3, r6
 8000dfe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e02:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e06:	fa20 f407 	lsr.w	r4, r0, r7
 8000e0a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0e:	431c      	orrs	r4, r3
 8000e10:	40f9      	lsrs	r1, r7
 8000e12:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e16:	fa00 f306 	lsl.w	r3, r0, r6
 8000e1a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e1e:	0c20      	lsrs	r0, r4, #16
 8000e20:	fa1f fe8c 	uxth.w	lr, ip
 8000e24:	fb09 1118 	mls	r1, r9, r8, r1
 8000e28:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e2c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e30:	4288      	cmp	r0, r1
 8000e32:	fa02 f206 	lsl.w	r2, r2, r6
 8000e36:	d90b      	bls.n	8000e50 <__udivmoddi4+0x1b8>
 8000e38:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e40:	f080 8088 	bcs.w	8000f54 <__udivmoddi4+0x2bc>
 8000e44:	4288      	cmp	r0, r1
 8000e46:	f240 8085 	bls.w	8000f54 <__udivmoddi4+0x2bc>
 8000e4a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e4e:	4461      	add	r1, ip
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e58:	fb09 1110 	mls	r1, r9, r0, r1
 8000e5c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e60:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e64:	458e      	cmp	lr, r1
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x1e2>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e70:	d26c      	bcs.n	8000f4c <__udivmoddi4+0x2b4>
 8000e72:	458e      	cmp	lr, r1
 8000e74:	d96a      	bls.n	8000f4c <__udivmoddi4+0x2b4>
 8000e76:	3802      	subs	r0, #2
 8000e78:	4461      	add	r1, ip
 8000e7a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e7e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e82:	eba1 010e 	sub.w	r1, r1, lr
 8000e86:	42a1      	cmp	r1, r4
 8000e88:	46c8      	mov	r8, r9
 8000e8a:	46a6      	mov	lr, r4
 8000e8c:	d356      	bcc.n	8000f3c <__udivmoddi4+0x2a4>
 8000e8e:	d053      	beq.n	8000f38 <__udivmoddi4+0x2a0>
 8000e90:	b15d      	cbz	r5, 8000eaa <__udivmoddi4+0x212>
 8000e92:	ebb3 0208 	subs.w	r2, r3, r8
 8000e96:	eb61 010e 	sbc.w	r1, r1, lr
 8000e9a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e9e:	fa22 f306 	lsr.w	r3, r2, r6
 8000ea2:	40f1      	lsrs	r1, r6
 8000ea4:	431f      	orrs	r7, r3
 8000ea6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eaa:	2600      	movs	r6, #0
 8000eac:	4631      	mov	r1, r6
 8000eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb2:	f1c2 0320 	rsb	r3, r2, #32
 8000eb6:	40d8      	lsrs	r0, r3
 8000eb8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ebc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ec0:	4091      	lsls	r1, r2
 8000ec2:	4301      	orrs	r1, r0
 8000ec4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec8:	fa1f fe8c 	uxth.w	lr, ip
 8000ecc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ed0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ed4:	0c0b      	lsrs	r3, r1, #16
 8000ed6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eda:	fb00 f60e 	mul.w	r6, r0, lr
 8000ede:	429e      	cmp	r6, r3
 8000ee0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ee4:	d908      	bls.n	8000ef8 <__udivmoddi4+0x260>
 8000ee6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eea:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eee:	d22f      	bcs.n	8000f50 <__udivmoddi4+0x2b8>
 8000ef0:	429e      	cmp	r6, r3
 8000ef2:	d92d      	bls.n	8000f50 <__udivmoddi4+0x2b8>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4463      	add	r3, ip
 8000ef8:	1b9b      	subs	r3, r3, r6
 8000efa:	b289      	uxth	r1, r1
 8000efc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f00:	fb07 3316 	mls	r3, r7, r6, r3
 8000f04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f08:	fb06 f30e 	mul.w	r3, r6, lr
 8000f0c:	428b      	cmp	r3, r1
 8000f0e:	d908      	bls.n	8000f22 <__udivmoddi4+0x28a>
 8000f10:	eb1c 0101 	adds.w	r1, ip, r1
 8000f14:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f18:	d216      	bcs.n	8000f48 <__udivmoddi4+0x2b0>
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	d914      	bls.n	8000f48 <__udivmoddi4+0x2b0>
 8000f1e:	3e02      	subs	r6, #2
 8000f20:	4461      	add	r1, ip
 8000f22:	1ac9      	subs	r1, r1, r3
 8000f24:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f28:	e738      	b.n	8000d9c <__udivmoddi4+0x104>
 8000f2a:	462e      	mov	r6, r5
 8000f2c:	4628      	mov	r0, r5
 8000f2e:	e705      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000f30:	4606      	mov	r6, r0
 8000f32:	e6e3      	b.n	8000cfc <__udivmoddi4+0x64>
 8000f34:	4618      	mov	r0, r3
 8000f36:	e6f8      	b.n	8000d2a <__udivmoddi4+0x92>
 8000f38:	454b      	cmp	r3, r9
 8000f3a:	d2a9      	bcs.n	8000e90 <__udivmoddi4+0x1f8>
 8000f3c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f40:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f44:	3801      	subs	r0, #1
 8000f46:	e7a3      	b.n	8000e90 <__udivmoddi4+0x1f8>
 8000f48:	4646      	mov	r6, r8
 8000f4a:	e7ea      	b.n	8000f22 <__udivmoddi4+0x28a>
 8000f4c:	4620      	mov	r0, r4
 8000f4e:	e794      	b.n	8000e7a <__udivmoddi4+0x1e2>
 8000f50:	4640      	mov	r0, r8
 8000f52:	e7d1      	b.n	8000ef8 <__udivmoddi4+0x260>
 8000f54:	46d0      	mov	r8, sl
 8000f56:	e77b      	b.n	8000e50 <__udivmoddi4+0x1b8>
 8000f58:	3b02      	subs	r3, #2
 8000f5a:	4461      	add	r1, ip
 8000f5c:	e732      	b.n	8000dc4 <__udivmoddi4+0x12c>
 8000f5e:	4630      	mov	r0, r6
 8000f60:	e709      	b.n	8000d76 <__udivmoddi4+0xde>
 8000f62:	4464      	add	r4, ip
 8000f64:	3802      	subs	r0, #2
 8000f66:	e742      	b.n	8000dee <__udivmoddi4+0x156>

08000f68 <__aeabi_idiv0>:
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop

08000f6c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	4a07      	ldr	r2, [pc, #28]	; (8000f98 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f7c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	4a06      	ldr	r2, [pc, #24]	; (8000f9c <vApplicationGetIdleTaskMemory+0x30>)
 8000f82:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2280      	movs	r2, #128	; 0x80
 8000f88:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f8a:	bf00      	nop
 8000f8c:	3714      	adds	r7, #20
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	20000368 	.word	0x20000368
 8000f9c:	2000041c 	.word	0x2000041c

08000fa0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa0:	b5b0      	push	{r4, r5, r7, lr}
 8000fa2:	b092      	sub	sp, #72	; 0x48
 8000fa4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fa6:	f002 fea9 	bl	8003cfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000faa:	f000 f861 	bl	8001070 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fae:	f000 f8ff 	bl	80011b0 <MX_GPIO_Init>
  MX_SPI5_Init();
 8000fb2:	f000 f8c7 	bl	8001144 <MX_SPI5_Init>
  /* USER CODE BEGIN 2 */
  //MX_USB_DEVICE_Init();
  BSP_GYRO_Init();
 8000fb6:	f001 fe2b 	bl	8002c10 <BSP_GYRO_Init>
  BSP_SDRAM_Init();
 8000fba:	f002 fcd5 	bl	8003968 <BSP_SDRAM_Init>
  BSP_LCD_Init();//init LCD
 8000fbe:	f001 fea1 	bl	8002d04 <BSP_LCD_Init>
  //set the layer buffer address into SDRAM
  BSP_LCD_LayerDefaultInit(1, SDRAM_DEVICE_ADDR);
 8000fc2:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8000fc6:	2001      	movs	r0, #1
 8000fc8:	f001 ff1e 	bl	8002e08 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(1);//select on which layer we write
 8000fcc:	2001      	movs	r0, #1
 8000fce:	f001 ff7f 	bl	8002ed0 <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();//turn on LCD
 8000fd2:	f002 facb 	bl	800356c <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_BLUE);//clear the LCD on blue color
 8000fd6:	4820      	ldr	r0, [pc, #128]	; (8001058 <main+0xb8>)
 8000fd8:	f001 ffd6 	bl	8002f88 <BSP_LCD_Clear>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);//set text background color
 8000fdc:	481e      	ldr	r0, [pc, #120]	; (8001058 <main+0xb8>)
 8000fde:	f001 ff9f 	bl	8002f20 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);//set text color
 8000fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe6:	f001 ff83 	bl	8002ef0 <BSP_LCD_SetTextColor>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myMailQueue */
  osMailQDef(myMailQueue, 16, QUEUE_DATA_STRUCT);
 8000fea:	2310      	movs	r3, #16
 8000fec:	63bb      	str	r3, [r7, #56]	; 0x38
 8000fee:	2310      	movs	r3, #16
 8000ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000ff2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ff6:	643b      	str	r3, [r7, #64]	; 0x40
  myMailQueueHandle = osMailCreate(osMailQ(myMailQueue), NULL);
 8000ff8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4618      	mov	r0, r3
 8001000:	f009 fb64 	bl	800a6cc <osMailCreate>
 8001004:	4603      	mov	r3, r0
 8001006:	4a15      	ldr	r2, [pc, #84]	; (800105c <main+0xbc>)
 8001008:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Task01 */
  osThreadDef(Task01, StartTask01, osPriorityNormal, 0, 512);
 800100a:	4b15      	ldr	r3, [pc, #84]	; (8001060 <main+0xc0>)
 800100c:	f107 041c 	add.w	r4, r7, #28
 8001010:	461d      	mov	r5, r3
 8001012:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001014:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001016:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800101a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task01Handle = osThreadCreate(osThread(Task01), NULL);
 800101e:	f107 031c 	add.w	r3, r7, #28
 8001022:	2100      	movs	r1, #0
 8001024:	4618      	mov	r0, r3
 8001026:	f009 f964 	bl	800a2f2 <osThreadCreate>
 800102a:	4603      	mov	r3, r0
 800102c:	4a0d      	ldr	r2, [pc, #52]	; (8001064 <main+0xc4>)
 800102e:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task02 */
  osThreadDef(Task02, StartTask02, osPriorityNormal, 0, 512);
 8001030:	4b0d      	ldr	r3, [pc, #52]	; (8001068 <main+0xc8>)
 8001032:	463c      	mov	r4, r7
 8001034:	461d      	mov	r5, r3
 8001036:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001038:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800103a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800103e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task02Handle = osThreadCreate(osThread(Task02), NULL);
 8001042:	463b      	mov	r3, r7
 8001044:	2100      	movs	r1, #0
 8001046:	4618      	mov	r0, r3
 8001048:	f009 f953 	bl	800a2f2 <osThreadCreate>
 800104c:	4603      	mov	r3, r0
 800104e:	4a07      	ldr	r2, [pc, #28]	; (800106c <main+0xcc>)
 8001050:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001052:	f009 f947 	bl	800a2e4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001056:	e7fe      	b.n	8001056 <main+0xb6>
 8001058:	ff0000ff 	.word	0xff0000ff
 800105c:	2000067c 	.word	0x2000067c
 8001060:	08012798 	.word	0x08012798
 8001064:	20000674 	.word	0x20000674
 8001068:	080127b4 	.word	0x080127b4
 800106c:	20000678 	.word	0x20000678

08001070 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b094      	sub	sp, #80	; 0x50
 8001074:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001076:	f107 0320 	add.w	r3, r7, #32
 800107a:	2230      	movs	r2, #48	; 0x30
 800107c:	2100      	movs	r1, #0
 800107e:	4618      	mov	r0, r3
 8001080:	f00e fd27 	bl	800fad2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001084:	f107 030c 	add.w	r3, r7, #12
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001094:	2300      	movs	r3, #0
 8001096:	60bb      	str	r3, [r7, #8]
 8001098:	4b28      	ldr	r3, [pc, #160]	; (800113c <SystemClock_Config+0xcc>)
 800109a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109c:	4a27      	ldr	r2, [pc, #156]	; (800113c <SystemClock_Config+0xcc>)
 800109e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a2:	6413      	str	r3, [r2, #64]	; 0x40
 80010a4:	4b25      	ldr	r3, [pc, #148]	; (800113c <SystemClock_Config+0xcc>)
 80010a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ac:	60bb      	str	r3, [r7, #8]
 80010ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010b0:	2300      	movs	r3, #0
 80010b2:	607b      	str	r3, [r7, #4]
 80010b4:	4b22      	ldr	r3, [pc, #136]	; (8001140 <SystemClock_Config+0xd0>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a21      	ldr	r2, [pc, #132]	; (8001140 <SystemClock_Config+0xd0>)
 80010ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010be:	6013      	str	r3, [r2, #0]
 80010c0:	4b1f      	ldr	r3, [pc, #124]	; (8001140 <SystemClock_Config+0xd0>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010cc:	2301      	movs	r3, #1
 80010ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d6:	2302      	movs	r3, #2
 80010d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010e0:	2304      	movs	r3, #4
 80010e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80010e4:	23a8      	movs	r3, #168	; 0xa8
 80010e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010e8:	2302      	movs	r3, #2
 80010ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010ec:	2307      	movs	r3, #7
 80010ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f0:	f107 0320 	add.w	r3, r7, #32
 80010f4:	4618      	mov	r0, r3
 80010f6:	f005 fbc5 	bl	8006884 <HAL_RCC_OscConfig>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001100:	f000 fd1e 	bl	8001b40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001104:	230f      	movs	r3, #15
 8001106:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001108:	2302      	movs	r3, #2
 800110a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001110:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001114:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001116:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800111a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800111c:	f107 030c 	add.w	r3, r7, #12
 8001120:	2105      	movs	r1, #5
 8001122:	4618      	mov	r0, r3
 8001124:	f005 fe26 	bl	8006d74 <HAL_RCC_ClockConfig>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800112e:	f000 fd07 	bl	8001b40 <Error_Handler>
  }
}
 8001132:	bf00      	nop
 8001134:	3750      	adds	r7, #80	; 0x50
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40023800 	.word	0x40023800
 8001140:	40007000 	.word	0x40007000

08001144 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001148:	4b17      	ldr	r3, [pc, #92]	; (80011a8 <MX_SPI5_Init+0x64>)
 800114a:	4a18      	ldr	r2, [pc, #96]	; (80011ac <MX_SPI5_Init+0x68>)
 800114c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800114e:	4b16      	ldr	r3, [pc, #88]	; (80011a8 <MX_SPI5_Init+0x64>)
 8001150:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001154:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001156:	4b14      	ldr	r3, [pc, #80]	; (80011a8 <MX_SPI5_Init+0x64>)
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800115c:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <MX_SPI5_Init+0x64>)
 800115e:	2200      	movs	r2, #0
 8001160:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001162:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <MX_SPI5_Init+0x64>)
 8001164:	2200      	movs	r2, #0
 8001166:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001168:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <MX_SPI5_Init+0x64>)
 800116a:	2200      	movs	r2, #0
 800116c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800116e:	4b0e      	ldr	r3, [pc, #56]	; (80011a8 <MX_SPI5_Init+0x64>)
 8001170:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001174:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001176:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <MX_SPI5_Init+0x64>)
 8001178:	2218      	movs	r2, #24
 800117a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800117c:	4b0a      	ldr	r3, [pc, #40]	; (80011a8 <MX_SPI5_Init+0x64>)
 800117e:	2200      	movs	r2, #0
 8001180:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001182:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <MX_SPI5_Init+0x64>)
 8001184:	2200      	movs	r2, #0
 8001186:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001188:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <MX_SPI5_Init+0x64>)
 800118a:	2200      	movs	r2, #0
 800118c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800118e:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <MX_SPI5_Init+0x64>)
 8001190:	220a      	movs	r2, #10
 8001192:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001194:	4804      	ldr	r0, [pc, #16]	; (80011a8 <MX_SPI5_Init+0x64>)
 8001196:	f006 fa86 	bl	80076a6 <HAL_SPI_Init>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80011a0:	f000 fcce 	bl	8001b40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80011a4:	bf00      	nop
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	2000061c 	.word	0x2000061c
 80011ac:	40015000 	.word	0x40015000

080011b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08c      	sub	sp, #48	; 0x30
 80011b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b6:	f107 031c 	add.w	r3, r7, #28
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]
 80011c2:	60da      	str	r2, [r3, #12]
 80011c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	61bb      	str	r3, [r7, #24]
 80011ca:	4b3f      	ldr	r3, [pc, #252]	; (80012c8 <MX_GPIO_Init+0x118>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	4a3e      	ldr	r2, [pc, #248]	; (80012c8 <MX_GPIO_Init+0x118>)
 80011d0:	f043 0320 	orr.w	r3, r3, #32
 80011d4:	6313      	str	r3, [r2, #48]	; 0x30
 80011d6:	4b3c      	ldr	r3, [pc, #240]	; (80012c8 <MX_GPIO_Init+0x118>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	f003 0320 	and.w	r3, r3, #32
 80011de:	61bb      	str	r3, [r7, #24]
 80011e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	617b      	str	r3, [r7, #20]
 80011e6:	4b38      	ldr	r3, [pc, #224]	; (80012c8 <MX_GPIO_Init+0x118>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	4a37      	ldr	r2, [pc, #220]	; (80012c8 <MX_GPIO_Init+0x118>)
 80011ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011f0:	6313      	str	r3, [r2, #48]	; 0x30
 80011f2:	4b35      	ldr	r3, [pc, #212]	; (80012c8 <MX_GPIO_Init+0x118>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011fa:	617b      	str	r3, [r7, #20]
 80011fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	613b      	str	r3, [r7, #16]
 8001202:	4b31      	ldr	r3, [pc, #196]	; (80012c8 <MX_GPIO_Init+0x118>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	4a30      	ldr	r2, [pc, #192]	; (80012c8 <MX_GPIO_Init+0x118>)
 8001208:	f043 0304 	orr.w	r3, r3, #4
 800120c:	6313      	str	r3, [r2, #48]	; 0x30
 800120e:	4b2e      	ldr	r3, [pc, #184]	; (80012c8 <MX_GPIO_Init+0x118>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	f003 0304 	and.w	r3, r3, #4
 8001216:	613b      	str	r3, [r7, #16]
 8001218:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	4b2a      	ldr	r3, [pc, #168]	; (80012c8 <MX_GPIO_Init+0x118>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	4a29      	ldr	r2, [pc, #164]	; (80012c8 <MX_GPIO_Init+0x118>)
 8001224:	f043 0302 	orr.w	r3, r3, #2
 8001228:	6313      	str	r3, [r2, #48]	; 0x30
 800122a:	4b27      	ldr	r3, [pc, #156]	; (80012c8 <MX_GPIO_Init+0x118>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	60bb      	str	r3, [r7, #8]
 800123a:	4b23      	ldr	r3, [pc, #140]	; (80012c8 <MX_GPIO_Init+0x118>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	4a22      	ldr	r2, [pc, #136]	; (80012c8 <MX_GPIO_Init+0x118>)
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	6313      	str	r3, [r2, #48]	; 0x30
 8001246:	4b20      	ldr	r3, [pc, #128]	; (80012c8 <MX_GPIO_Init+0x118>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	60bb      	str	r3, [r7, #8]
 8001250:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	607b      	str	r3, [r7, #4]
 8001256:	4b1c      	ldr	r3, [pc, #112]	; (80012c8 <MX_GPIO_Init+0x118>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	4a1b      	ldr	r2, [pc, #108]	; (80012c8 <MX_GPIO_Init+0x118>)
 800125c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001260:	6313      	str	r3, [r2, #48]	; 0x30
 8001262:	4b19      	ldr	r3, [pc, #100]	; (80012c8 <MX_GPIO_Init+0x118>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 800126e:	2200      	movs	r2, #0
 8001270:	2102      	movs	r1, #2
 8001272:	4816      	ldr	r0, [pc, #88]	; (80012cc <MX_GPIO_Init+0x11c>)
 8001274:	f003 fd96 	bl	8004da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001278:	2200      	movs	r2, #0
 800127a:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800127e:	4814      	ldr	r0, [pc, #80]	; (80012d0 <MX_GPIO_Init+0x120>)
 8001280:	f003 fd90 	bl	8004da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001284:	2302      	movs	r3, #2
 8001286:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001288:	2301      	movs	r3, #1
 800128a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001290:	2300      	movs	r3, #0
 8001292:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001294:	f107 031c 	add.w	r3, r7, #28
 8001298:	4619      	mov	r1, r3
 800129a:	480c      	ldr	r0, [pc, #48]	; (80012cc <MX_GPIO_Init+0x11c>)
 800129c:	f003 faca 	bl	8004834 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80012a0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80012a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a6:	2301      	movs	r3, #1
 80012a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ae:	2300      	movs	r3, #0
 80012b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012b2:	f107 031c 	add.w	r3, r7, #28
 80012b6:	4619      	mov	r1, r3
 80012b8:	4805      	ldr	r0, [pc, #20]	; (80012d0 <MX_GPIO_Init+0x120>)
 80012ba:	f003 fabb 	bl	8004834 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012be:	bf00      	nop
 80012c0:	3730      	adds	r7, #48	; 0x30
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40023800 	.word	0x40023800
 80012cc:	40020800 	.word	0x40020800
 80012d0:	40021800 	.word	0x40021800

080012d4 <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void const * argument)
{
 80012d4:	b590      	push	{r4, r7, lr}
 80012d6:	b09b      	sub	sp, #108	; 0x6c
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80012dc:	f00d fdac 	bl	800ee38 <MX_USB_DEVICE_Init>
  int16_t 	point;
  int16_t 	a;
  int16_t 	b;
  float 	R;
  int8_t 	game_over_flag;
  uint8_t 	msg_buf[14] = "Hello Player\n\r";
 80012e0:	4b60      	ldr	r3, [pc, #384]	; (8001464 <StartTask01+0x190>)
 80012e2:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80012e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012e8:	c407      	stmia	r4!, {r0, r1, r2}
 80012ea:	8023      	strh	r3, [r4, #0]
  uint8_t 	msg_point[3];
  uint8_t 	msg_score[7] = "Score: ";
 80012ec:	4a5e      	ldr	r2, [pc, #376]	; (8001468 <StartTask01+0x194>)
 80012ee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012f6:	6018      	str	r0, [r3, #0]
 80012f8:	3304      	adds	r3, #4
 80012fa:	8019      	strh	r1, [r3, #0]
 80012fc:	3302      	adds	r3, #2
 80012fe:	0c0a      	lsrs	r2, r1, #16
 8001300:	701a      	strb	r2, [r3, #0]
  uint8_t 	msg_game_over[10] = "GAME OVER!";
 8001302:	4a5a      	ldr	r2, [pc, #360]	; (800146c <StartTask01+0x198>)
 8001304:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001308:	ca07      	ldmia	r2, {r0, r1, r2}
 800130a:	c303      	stmia	r3!, {r0, r1}
 800130c:	801a      	strh	r2, [r3, #0]
  uint8_t 	TxBuffer[6];
  int16_t	total_point = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
  uint8_t 	perfect_hit[10] = "PERFECT!";
 8001314:	4a56      	ldr	r2, [pc, #344]	; (8001470 <StartTask01+0x19c>)
 8001316:	f107 0318 	add.w	r3, r7, #24
 800131a:	ca07      	ldmia	r2, {r0, r1, r2}
 800131c:	c303      	stmia	r3!, {r0, r1}
 800131e:	701a      	strb	r2, [r3, #0]
 8001320:	2300      	movs	r3, #0
 8001322:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

  //osSignalWait(0x1, 10000);
  osSignalSet(Task02Handle, 0x1);
 8001326:	4b53      	ldr	r3, [pc, #332]	; (8001474 <StartTask01+0x1a0>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2101      	movs	r1, #1
 800132c:	4618      	mov	r0, r3
 800132e:	f009 f841 	bl	800a3b4 <osSignalSet>
  CDC_Transmit_HS(msg_buf, strlen((char *)msg_buf));
 8001332:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001336:	4618      	mov	r0, r3
 8001338:	f7fe ff5a 	bl	80001f0 <strlen>
 800133c:	4603      	mov	r3, r0
 800133e:	b29a      	uxth	r2, r3
 8001340:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001344:	4611      	mov	r1, r2
 8001346:	4618      	mov	r0, r3
 8001348:	f00d fe34 	bl	800efb4 <CDC_Transmit_HS>

  /* Infinite loop */
  for(;;)
  {
	osEvent event = osMailGet(myMailQueueHandle, osWaitForever); //Get mail
 800134c:	4b4a      	ldr	r3, [pc, #296]	; (8001478 <StartTask01+0x1a4>)
 800134e:	6819      	ldr	r1, [r3, #0]
 8001350:	f107 030c 	add.w	r3, r7, #12
 8001354:	f04f 32ff 	mov.w	r2, #4294967295
 8001358:	4618      	mov	r0, r3
 800135a:	f009 fa63 	bl	800a824 <osMailGet>
	QUEUE_DATA_STRUCT *queue_rx = event.value.p;
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	663b      	str	r3, [r7, #96]	; 0x60
	point 			= queue_rx->point;
 8001362:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001364:	881b      	ldrh	r3, [r3, #0]
 8001366:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	a				= queue_rx->a;
 800136a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800136c:	885b      	ldrh	r3, [r3, #2]
 800136e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	b				= queue_rx->b;
 8001372:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001374:	889b      	ldrh	r3, [r3, #4]
 8001376:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	R				= queue_rx->R;
 800137a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	657b      	str	r3, [r7, #84]	; 0x54
	game_over_flag 	= queue_rx->game_over_flag;
 8001380:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001382:	7b1b      	ldrb	r3, [r3, #12]
 8001384:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

	if(point > 1){
 8001388:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 800138c:	2b01      	cmp	r3, #1
 800138e:	dd07      	ble.n	80013a0 <StartTask01+0xcc>
		BSP_LCD_DisplayStringAt(10, 300, perfect_hit, CENTER_MODE);	// display perfect hit
 8001390:	f107 0218 	add.w	r2, r7, #24
 8001394:	2301      	movs	r3, #1
 8001396:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800139a:	200a      	movs	r0, #10
 800139c:	f001 fe60 	bl	8003060 <BSP_LCD_DisplayStringAt>
	}

	osMailFree(myMailQueueHandle, queue_rx); //Free mail queue memory
 80013a0:	4b35      	ldr	r3, [pc, #212]	; (8001478 <StartTask01+0x1a4>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80013a6:	4618      	mov	r0, r3
 80013a8:	f009 fab0 	bl	800a90c <osMailFree>

	sprintf(TxBuffer, "%.1f", R);
 80013ac:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80013ae:	f7ff f8db 	bl	8000568 <__aeabi_f2d>
 80013b2:	4602      	mov	r2, r0
 80013b4:	460b      	mov	r3, r1
 80013b6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80013ba:	4930      	ldr	r1, [pc, #192]	; (800147c <StartTask01+0x1a8>)
 80013bc:	f00f f90a 	bl	80105d4 <siprintf>
	TxBuffer[4] = '\n';
 80013c0:	230a      	movs	r3, #10
 80013c2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	TxBuffer[5] = '\r';
 80013c6:	230d      	movs	r3, #13
 80013c8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	CDC_Transmit_HS(TxBuffer, strlen((char *)TxBuffer));  // send R to Virtual COM Port
 80013cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7fe ff0d 	bl	80001f0 <strlen>
 80013d6:	4603      	mov	r3, r0
 80013d8:	b29a      	uxth	r2, r3
 80013da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013de:	4611      	mov	r1, r2
 80013e0:	4618      	mov	r0, r3
 80013e2:	f00d fde7 	bl	800efb4 <CDC_Transmit_HS>

	// calculate total point
	total_point += point;
 80013e6:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80013ea:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80013ee:	4413      	add	r3, r2
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

	// display coding here
	sprintf(msg_point, "%d", total_point);
 80013f6:	f9b7 2066 	ldrsh.w	r2, [r7, #102]	; 0x66
 80013fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013fe:	4920      	ldr	r1, [pc, #128]	; (8001480 <StartTask01+0x1ac>)
 8001400:	4618      	mov	r0, r3
 8001402:	f00f f8e7 	bl	80105d4 <siprintf>
	BSP_LCD_DisplayStringAt(0, 0, msg_score, LEFT_MODE);	// display point
 8001406:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800140a:	2303      	movs	r3, #3
 800140c:	2100      	movs	r1, #0
 800140e:	2000      	movs	r0, #0
 8001410:	f001 fe26 	bl	8003060 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(100, 0, msg_point, LEFT_MODE);
 8001414:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001418:	2303      	movs	r3, #3
 800141a:	2100      	movs	r1, #0
 800141c:	2064      	movs	r0, #100	; 0x64
 800141e:	f001 fe1f 	bl	8003060 <BSP_LCD_DisplayStringAt>
	BSP_LCD_FillCircle(a, b, R);	// draw filled circle
 8001422:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8001426:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 800142a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800142e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001432:	ee17 2a90 	vmov	r2, s15
 8001436:	b292      	uxth	r2, r2
 8001438:	4618      	mov	r0, r3
 800143a:	f001 fff7 	bl	800342c <BSP_LCD_FillCircle>
	if(game_over_flag){
 800143e:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8001442:	2b00      	cmp	r3, #0
 8001444:	d007      	beq.n	8001456 <StartTask01+0x182>
		BSP_LCD_DisplayStringAt(10, 300, msg_game_over, CENTER_MODE);
 8001446:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800144a:	2301      	movs	r3, #1
 800144c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001450:	200a      	movs	r0, #10
 8001452:	f001 fe05 	bl	8003060 <BSP_LCD_DisplayStringAt>
	}

	// for debug


    osDelay(15);
 8001456:	200f      	movs	r0, #15
 8001458:	f008 ff97 	bl	800a38a <osDelay>

    //clear to see what does change in LCD
    BSP_LCD_Clear(LCD_COLOR_BLUE);//clear the LCD on blue color
 800145c:	4809      	ldr	r0, [pc, #36]	; (8001484 <StartTask01+0x1b0>)
 800145e:	f001 fd93 	bl	8002f88 <BSP_LCD_Clear>
  {
 8001462:	e773      	b.n	800134c <StartTask01+0x78>
 8001464:	080127dc 	.word	0x080127dc
 8001468:	080127ec 	.word	0x080127ec
 800146c:	080127f4 	.word	0x080127f4
 8001470:	08012800 	.word	0x08012800
 8001474:	20000678 	.word	0x20000678
 8001478:	2000067c 	.word	0x2000067c
 800147c:	080127d0 	.word	0x080127d0
 8001480:	080127d8 	.word	0x080127d8
 8001484:	ff0000ff 	.word	0xff0000ff

08001488 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8001488:	b5b0      	push	{r4, r5, r7, lr}
 800148a:	b0a2      	sub	sp, #136	; 0x88
 800148c:	af00      	add	r7, sp, #0
 800148e:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */

	float gyro_data[3];
	int16_t 	point = 0;
 8001490:	2300      	movs	r3, #0
 8001492:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	int16_t 	a = 120;
 8001496:	2378      	movs	r3, #120	; 0x78
 8001498:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
    int16_t 	b = 160;
 800149c:	23a0      	movs	r3, #160	; 0xa0
 800149e:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
    float 		R = 15;		//  R_MIN <= R <= R_MAX
 80014a2:	4b97      	ldr	r3, [pc, #604]	; (8001700 <StartTask02+0x278>)
 80014a4:	67fb      	str	r3, [r7, #124]	; 0x7c
    int8_t 		game_over_flag = 0;
 80014a6:	2300      	movs	r3, #0
 80014a8:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
    float		rate_gyr_x;
    float		rate_gyr_y;
    //float		rate_gyr_z;
    float 		gyro_angle_x = 0;
 80014ac:	f04f 0300 	mov.w	r3, #0
 80014b0:	677b      	str	r3, [r7, #116]	; 0x74
    float 		gyro_angle_y = 0;
 80014b2:	f04f 0300 	mov.w	r3, #0
 80014b6:	673b      	str	r3, [r7, #112]	; 0x70
    //float 		gyro_angle_z = 0;
    float 		pre_gyro_angle_x = 0;
 80014b8:	f04f 0300 	mov.w	r3, #0
 80014bc:	66fb      	str	r3, [r7, #108]	; 0x6c
	float 		pre_gyro_angle_y = 0;
 80014be:	f04f 0300 	mov.w	r3, #0
 80014c2:	66bb      	str	r3, [r7, #104]	; 0x68
	//float 		pre_gyro_angle_z = 0;
	float 		delt_angle_x = 0;
 80014c4:	f04f 0300 	mov.w	r3, #0
 80014c8:	65bb      	str	r3, [r7, #88]	; 0x58
	float 		delt_angle_y = 0;
 80014ca:	f04f 0300 	mov.w	r3, #0
 80014ce:	657b      	str	r3, [r7, #84]	; 0x54
	//float 		delt_angle_z = 0;
    float		loop_period = 0.01;
 80014d0:	4b8c      	ldr	r3, [pc, #560]	; (8001704 <StartTask02+0x27c>)
 80014d2:	653b      	str	r3, [r7, #80]	; 0x50
    float 		k = 1.01;
 80014d4:	4b8c      	ldr	r3, [pc, #560]	; (8001708 <StartTask02+0x280>)
 80014d6:	667b      	str	r3, [r7, #100]	; 0x64
    float 		R_MAX = 50;
 80014d8:	4b8c      	ldr	r3, [pc, #560]	; (800170c <StartTask02+0x284>)
 80014da:	64fb      	str	r3, [r7, #76]	; 0x4c
    float 		R_MIN = 15;
 80014dc:	4b88      	ldr	r3, [pc, #544]	; (8001700 <StartTask02+0x278>)
 80014de:	64bb      	str	r3, [r7, #72]	; 0x48
    float 		R_HIT_LEVEL01 = 20;
 80014e0:	4b8b      	ldr	r3, [pc, #556]	; (8001710 <StartTask02+0x288>)
 80014e2:	647b      	str	r3, [r7, #68]	; 0x44
    float 		R_HIT_LEVEL02 = 25;
 80014e4:	4b8b      	ldr	r3, [pc, #556]	; (8001714 <StartTask02+0x28c>)
 80014e6:	643b      	str	r3, [r7, #64]	; 0x40
    float 		R_HIT_LEVEL03 = 30;
 80014e8:	4b8b      	ldr	r3, [pc, #556]	; (8001718 <StartTask02+0x290>)
 80014ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    float		v_x = 40;
 80014ec:	4b8b      	ldr	r3, [pc, #556]	; (800171c <StartTask02+0x294>)
 80014ee:	663b      	str	r3, [r7, #96]	; 0x60
    float 		v_y = 40;
 80014f0:	4b8a      	ldr	r3, [pc, #552]	; (800171c <StartTask02+0x294>)
 80014f2:	65fb      	str	r3, [r7, #92]	; 0x5c
    int16_t THRESHOLD_HIGH = 90;
 80014f4:	235a      	movs	r3, #90	; 0x5a
 80014f6:	877b      	strh	r3, [r7, #58]	; 0x3a
    int16_t THRESHOLD_LOW = -90;
 80014f8:	f64f 73a6 	movw	r3, #65446	; 0xffa6
 80014fc:	873b      	strh	r3, [r7, #56]	; 0x38
	float 		WIDTH = 239;
 80014fe:	4b88      	ldr	r3, [pc, #544]	; (8001720 <StartTask02+0x298>)
 8001500:	637b      	str	r3, [r7, #52]	; 0x34
	float 		HEIGHT = 319;
 8001502:	4b88      	ldr	r3, [pc, #544]	; (8001724 <StartTask02+0x29c>)
 8001504:	633b      	str	r3, [r7, #48]	; 0x30
	//uint8_t 	perfect_hit[10] = "PERFECT!";

	osSignalWait(0x1, osWaitForever); //Wait for signal.
 8001506:	463b      	mov	r3, r7
 8001508:	f04f 32ff 	mov.w	r2, #4294967295
 800150c:	2101      	movs	r1, #1
 800150e:	4618      	mov	r0, r3
 8001510:	f008 ff90 	bl	800a434 <osSignalWait>

  for(;;)
  {
	BSP_GYRO_GetXYZ(gyro_data);		// get raw data from gyroscope
 8001514:	f107 0318 	add.w	r3, r7, #24
 8001518:	4618      	mov	r0, r3
 800151a:	f001 fbdf 	bl	8002cdc <BSP_GYRO_GetXYZ>

	// xu li chuyen doi gyroscope raw data sang angle
	rate_gyr_x = (float) gyro_data[0] * L3GD20_SENSITIVITY_500DPS * 0.001;
 800151e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001522:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8001728 <StartTask02+0x2a0>
 8001526:	ee67 7a87 	vmul.f32	s15, s15, s14
 800152a:	ee17 0a90 	vmov	r0, s15
 800152e:	f7ff f81b 	bl	8000568 <__aeabi_f2d>
 8001532:	a371      	add	r3, pc, #452	; (adr r3, 80016f8 <StartTask02+0x270>)
 8001534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001538:	f7ff f86e 	bl	8000618 <__aeabi_dmul>
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	4610      	mov	r0, r2
 8001542:	4619      	mov	r1, r3
 8001544:	f7ff fb40 	bl	8000bc8 <__aeabi_d2f>
 8001548:	4603      	mov	r3, r0
 800154a:	62fb      	str	r3, [r7, #44]	; 0x2c
	rate_gyr_y = (float) gyro_data[1] * L3GD20_SENSITIVITY_500DPS * 0.001;
 800154c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001550:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8001728 <StartTask02+0x2a0>
 8001554:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001558:	ee17 0a90 	vmov	r0, s15
 800155c:	f7ff f804 	bl	8000568 <__aeabi_f2d>
 8001560:	a365      	add	r3, pc, #404	; (adr r3, 80016f8 <StartTask02+0x270>)
 8001562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001566:	f7ff f857 	bl	8000618 <__aeabi_dmul>
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	4610      	mov	r0, r2
 8001570:	4619      	mov	r1, r3
 8001572:	f7ff fb29 	bl	8000bc8 <__aeabi_d2f>
 8001576:	4603      	mov	r3, r0
 8001578:	62bb      	str	r3, [r7, #40]	; 0x28
	//rate_gyr_z = (float) gyro_data[2] * L3GD20_SENSITIVITY_500DPS * 0.001;

	gyro_angle_x += rate_gyr_x * loop_period;
 800157a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800157e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001586:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800158a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800158e:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	gyro_angle_y += rate_gyr_y * loop_period;
 8001592:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001596:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800159a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800159e:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 80015a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015a6:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	//gyro_angle_z += rate_gyr_z * loop_period;

	gyro_angle_x = (int)gyro_angle_x % 180;
 80015aa:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80015ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015b2:	ee17 3a90 	vmov	r3, s15
 80015b6:	4a5d      	ldr	r2, [pc, #372]	; (800172c <StartTask02+0x2a4>)
 80015b8:	fb82 1203 	smull	r1, r2, r2, r3
 80015bc:	441a      	add	r2, r3
 80015be:	11d1      	asrs	r1, r2, #7
 80015c0:	17da      	asrs	r2, r3, #31
 80015c2:	1a8a      	subs	r2, r1, r2
 80015c4:	21b4      	movs	r1, #180	; 0xb4
 80015c6:	fb01 f202 	mul.w	r2, r1, r2
 80015ca:	1a9a      	subs	r2, r3, r2
 80015cc:	ee07 2a90 	vmov	s15, r2
 80015d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015d4:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	gyro_angle_y = (int)gyro_angle_y % 180;
 80015d8:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80015dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015e0:	ee17 3a90 	vmov	r3, s15
 80015e4:	4a51      	ldr	r2, [pc, #324]	; (800172c <StartTask02+0x2a4>)
 80015e6:	fb82 1203 	smull	r1, r2, r2, r3
 80015ea:	441a      	add	r2, r3
 80015ec:	11d1      	asrs	r1, r2, #7
 80015ee:	17da      	asrs	r2, r3, #31
 80015f0:	1a8a      	subs	r2, r1, r2
 80015f2:	21b4      	movs	r1, #180	; 0xb4
 80015f4:	fb01 f202 	mul.w	r2, r1, r2
 80015f8:	1a9a      	subs	r2, r3, r2
 80015fa:	ee07 2a90 	vmov	s15, r2
 80015fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001602:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	//gyro_angle_z = (int)gyro_angle_z % 180;

	delt_angle_x = gyro_angle_x - pre_gyro_angle_x;
 8001606:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800160a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800160e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001612:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	delt_angle_y = gyro_angle_y - pre_gyro_angle_y;
 8001616:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800161a:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800161e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001622:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	//delt_angle_z = gyro_angle_z - pre_gyro_angle_z;

	pre_gyro_angle_x = gyro_angle_x;
 8001626:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001628:	66fb      	str	r3, [r7, #108]	; 0x6c
	pre_gyro_angle_y = gyro_angle_y;
 800162a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800162c:	66bb      	str	r3, [r7, #104]	; 0x68
	//pre_gyro_angle_z = gyro_angle_z;

	// xu li game tai day: xac dinh point, a, b, R(dua vao he so k va gyroscope data), game_over_flag, blink led
	if ((delt_angle_x <= THRESHOLD_LOW || delt_angle_x >= THRESHOLD_HIGH
 800162e:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8001632:	ee07 3a90 	vmov	s15, r3
 8001636:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800163a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800163e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001646:	d927      	bls.n	8001698 <StartTask02+0x210>
 8001648:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800164c:	ee07 3a90 	vmov	s15, r3
 8001650:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001654:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001658:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800165c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001660:	da1a      	bge.n	8001698 <StartTask02+0x210>
		 || delt_angle_y >= THRESHOLD_HIGH || delt_angle_y <= THRESHOLD_LOW) && game_over_flag == 0 && k < 1){
 8001662:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8001666:	ee07 3a90 	vmov	s15, r3
 800166a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800166e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001672:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800167a:	da0d      	bge.n	8001698 <StartTask02+0x210>
 800167c:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8001680:	ee07 3a90 	vmov	s15, r3
 8001684:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001688:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800168c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001694:	f200 80db 	bhi.w	800184e <StartTask02+0x3c6>
 8001698:	f997 307b 	ldrsb.w	r3, [r7, #123]	; 0x7b
 800169c:	2b00      	cmp	r3, #0
 800169e:	f040 80d6 	bne.w	800184e <StartTask02+0x3c6>
 80016a2:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80016a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80016aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016b2:	f140 80cc 	bpl.w	800184e <StartTask02+0x3c6>
		//BSP_LCD_FillTriangle(120, 90, 150, 320, 290, 290);	// duoi
		if(R < R_HIT_LEVEL01){
 80016b6:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 80016ba:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80016be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c6:	d505      	bpl.n	80016d4 <StartTask02+0x24c>
			k = 1.02;
 80016c8:	4b19      	ldr	r3, [pc, #100]	; (8001730 <StartTask02+0x2a8>)
 80016ca:	667b      	str	r3, [r7, #100]	; 0x64
			point = 2;
 80016cc:	2302      	movs	r3, #2
 80016ce:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 80016d2:	e03f      	b.n	8001754 <StartTask02+0x2cc>
		}
		else if(R < R_HIT_LEVEL02){
 80016d4:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 80016d8:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80016dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e4:	d528      	bpl.n	8001738 <StartTask02+0x2b0>
			k = 1.015;
 80016e6:	4b13      	ldr	r3, [pc, #76]	; (8001734 <StartTask02+0x2ac>)
 80016e8:	667b      	str	r3, [r7, #100]	; 0x64
			point = 1;
 80016ea:	2301      	movs	r3, #1
 80016ec:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 80016f0:	e030      	b.n	8001754 <StartTask02+0x2cc>
 80016f2:	bf00      	nop
 80016f4:	f3af 8000 	nop.w
 80016f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80016fc:	3f50624d 	.word	0x3f50624d
 8001700:	41700000 	.word	0x41700000
 8001704:	3c23d70a 	.word	0x3c23d70a
 8001708:	3f8147ae 	.word	0x3f8147ae
 800170c:	42480000 	.word	0x42480000
 8001710:	41a00000 	.word	0x41a00000
 8001714:	41c80000 	.word	0x41c80000
 8001718:	41f00000 	.word	0x41f00000
 800171c:	42200000 	.word	0x42200000
 8001720:	436f0000 	.word	0x436f0000
 8001724:	439f8000 	.word	0x439f8000
 8001728:	418c0000 	.word	0x418c0000
 800172c:	b60b60b7 	.word	0xb60b60b7
 8001730:	3f828f5c 	.word	0x3f828f5c
 8001734:	3f81eb85 	.word	0x3f81eb85
		}
		else if(R < R_HIT_LEVEL03){
 8001738:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800173c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001740:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001748:	d504      	bpl.n	8001754 <StartTask02+0x2cc>
			k = 1.01;
 800174a:	4bdb      	ldr	r3, [pc, #876]	; (8001ab8 <StartTask02+0x630>)
 800174c:	667b      	str	r3, [r7, #100]	; 0x64
			point = 1;
 800174e:	2301      	movs	r3, #1
 8001750:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
		}

		if(k > 1){
 8001754:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001758:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800175c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001764:	dd05      	ble.n	8001772 <StartTask02+0x2ea>
			//point = 1;
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET);
 8001766:	2201      	movs	r2, #1
 8001768:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800176c:	48d3      	ldr	r0, [pc, #844]	; (8001abc <StartTask02+0x634>)
 800176e:	f003 fb19 	bl	8004da4 <HAL_GPIO_WritePin>
		}

		////////////////////////////////////////// tinh toan huong bong khi cham vot
		if (delt_angle_x >= THRESHOLD_HIGH){	// cham mat tren
 8001772:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8001776:	ee07 3a90 	vmov	s15, r3
 800177a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800177e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001782:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800178a:	db0c      	blt.n	80017a6 <StartTask02+0x31e>
			if (v_y < 0){
 800178c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001790:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001798:	d505      	bpl.n	80017a6 <StartTask02+0x31e>
				v_y = -v_y  ;
 800179a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800179e:	eef1 7a67 	vneg.f32	s15, s15
 80017a2:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
			}
		}

		if (delt_angle_x <= THRESHOLD_LOW){		// cham mat duoi
 80017a6:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 80017aa:	ee07 3a90 	vmov	s15, r3
 80017ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017b2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80017b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017be:	d80c      	bhi.n	80017da <StartTask02+0x352>
			if (v_y > 0){
 80017c0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80017c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017cc:	dd05      	ble.n	80017da <StartTask02+0x352>
				v_y = -v_y;
 80017ce:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80017d2:	eef1 7a67 	vneg.f32	s15, s15
 80017d6:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
			}
		}

		if (delt_angle_y >= THRESHOLD_HIGH){	// cham mat trai
 80017da:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 80017de:	ee07 3a90 	vmov	s15, r3
 80017e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017e6:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80017ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f2:	db0c      	blt.n	800180e <StartTask02+0x386>
			if(v_x < 0){
 80017f4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80017f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001800:	d505      	bpl.n	800180e <StartTask02+0x386>
				v_x = -v_x;
 8001802:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001806:	eef1 7a67 	vneg.f32	s15, s15
 800180a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
			}
		}

		if (delt_angle_y <= THRESHOLD_LOW){		// cham mat phai
 800180e:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8001812:	ee07 3a90 	vmov	s15, r3
 8001816:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800181a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800181e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001826:	d80c      	bhi.n	8001842 <StartTask02+0x3ba>
			if(v_x > 0){
 8001828:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800182c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001834:	dd05      	ble.n	8001842 <StartTask02+0x3ba>
				v_x = -v_x;
 8001836:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800183a:	eef1 7a67 	vneg.f32	s15, s15
 800183e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
			}
		}

		delt_angle_x = 0;
 8001842:	f04f 0300 	mov.w	r3, #0
 8001846:	65bb      	str	r3, [r7, #88]	; 0x58
		delt_angle_y = 0;
 8001848:	f04f 0300 	mov.w	r3, #0
 800184c:	657b      	str	r3, [r7, #84]	; 0x54
	}

	if(a <= R || a >= WIDTH-R){		// cham LEFT-RIGHT
 800184e:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 8001852:	ee07 3a90 	vmov	s15, r3
 8001856:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800185a:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800185e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001866:	da10      	bge.n	800188a <StartTask02+0x402>
 8001868:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 800186c:	ee07 3a90 	vmov	s15, r3
 8001870:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001874:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8001878:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800187c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001880:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001888:	db05      	blt.n	8001896 <StartTask02+0x40e>
		v_x = -v_x;
 800188a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800188e:	eef1 7a67 	vneg.f32	s15, s15
 8001892:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
	}

	if(b <= R || b >= HEIGHT-R){		// cham TOP-BOTTOM
 8001896:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	; 0x82
 800189a:	ee07 3a90 	vmov	s15, r3
 800189e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018a2:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 80018a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ae:	da10      	bge.n	80018d2 <StartTask02+0x44a>
 80018b0:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	; 0x82
 80018b4:	ee07 3a90 	vmov	s15, r3
 80018b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018bc:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80018c0:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80018c4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80018c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d0:	db05      	blt.n	80018de <StartTask02+0x456>
		v_y = -v_y;
 80018d2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80018d6:	eef1 7a67 	vneg.f32	s15, s15
 80018da:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	}

	a += (int) (v_x) * 0.025;	// tinh toa do (a~x, b~y)
 80018de:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7fe fe2e 	bl	8000544 <__aeabi_i2d>
 80018e8:	4604      	mov	r4, r0
 80018ea:	460d      	mov	r5, r1
 80018ec:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80018f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018f4:	ee17 0a90 	vmov	r0, s15
 80018f8:	f7fe fe24 	bl	8000544 <__aeabi_i2d>
 80018fc:	a36c      	add	r3, pc, #432	; (adr r3, 8001ab0 <StartTask02+0x628>)
 80018fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001902:	f7fe fe89 	bl	8000618 <__aeabi_dmul>
 8001906:	4602      	mov	r2, r0
 8001908:	460b      	mov	r3, r1
 800190a:	4620      	mov	r0, r4
 800190c:	4629      	mov	r1, r5
 800190e:	f7fe fccd 	bl	80002ac <__adddf3>
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	4610      	mov	r0, r2
 8001918:	4619      	mov	r1, r3
 800191a:	f7ff f92d 	bl	8000b78 <__aeabi_d2iz>
 800191e:	4603      	mov	r3, r0
 8001920:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
	b += (int) (v_y) * 0.025;
 8001924:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	; 0x82
 8001928:	4618      	mov	r0, r3
 800192a:	f7fe fe0b 	bl	8000544 <__aeabi_i2d>
 800192e:	4604      	mov	r4, r0
 8001930:	460d      	mov	r5, r1
 8001932:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001936:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800193a:	ee17 0a90 	vmov	r0, s15
 800193e:	f7fe fe01 	bl	8000544 <__aeabi_i2d>
 8001942:	a35b      	add	r3, pc, #364	; (adr r3, 8001ab0 <StartTask02+0x628>)
 8001944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001948:	f7fe fe66 	bl	8000618 <__aeabi_dmul>
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
 8001950:	4620      	mov	r0, r4
 8001952:	4629      	mov	r1, r5
 8001954:	f7fe fcaa 	bl	80002ac <__adddf3>
 8001958:	4602      	mov	r2, r0
 800195a:	460b      	mov	r3, r1
 800195c:	4610      	mov	r0, r2
 800195e:	4619      	mov	r1, r3
 8001960:	f7ff f90a 	bl	8000b78 <__aeabi_d2iz>
 8001964:	4603      	mov	r3, r0
 8001966:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82

	if(a <= R){		// cham LEFT-RIGHT
 800196a:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 800196e:	ee07 3a90 	vmov	s15, r3
 8001972:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001976:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800197a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800197e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001982:	db0b      	blt.n	800199c <StartTask02+0x514>
		a = R+1;
 8001984:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001988:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800198c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001990:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001994:	ee17 3a90 	vmov	r3, s15
 8001998:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
	}

	if(b <= R){		// cham TOP-BOTTOM
 800199c:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	; 0x82
 80019a0:	ee07 3a90 	vmov	s15, r3
 80019a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019a8:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 80019ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019b4:	db0b      	blt.n	80019ce <StartTask02+0x546>
		b = R+1;
 80019b6:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80019ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80019be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80019c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019c6:	ee17 3a90 	vmov	r3, s15
 80019ca:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
	}

	if(a >= WIDTH-R){		// cham LEFT-RIGHT
 80019ce:	f9b7 3084 	ldrsh.w	r3, [r7, #132]	; 0x84
 80019d2:	ee07 3a90 	vmov	s15, r3
 80019d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019da:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80019de:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80019e2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80019e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ee:	db0b      	blt.n	8001a08 <StartTask02+0x580>
		a = WIDTH-R;
 80019f0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80019f4:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80019f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a00:	ee17 3a90 	vmov	r3, s15
 8001a04:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
	}

	if(b >= HEIGHT-R){		// cham TOP-BOTTOM
 8001a08:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	; 0x82
 8001a0c:	ee07 3a90 	vmov	s15, r3
 8001a10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a14:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8001a18:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001a1c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001a20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a28:	db0b      	blt.n	8001a42 <StartTask02+0x5ba>
		b = HEIGHT-R;
 8001a2a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001a2e:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001a32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a3a:	ee17 3a90 	vmov	r3, s15
 8001a3e:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
	}

	// kiem tra game over va khoan gioi han cua R
	if(R < R_MIN){
 8001a42:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8001a46:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001a4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a52:	d50b      	bpl.n	8001a6c <StartTask02+0x5e4>
		game_over_flag = 1;
 8001a54:	2301      	movs	r3, #1
 8001a56:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
		k = 1;
 8001a5a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001a5e:	667b      	str	r3, [r7, #100]	; 0x64
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_SET);
 8001a60:	2201      	movs	r2, #1
 8001a62:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a66:	4815      	ldr	r0, [pc, #84]	; (8001abc <StartTask02+0x634>)
 8001a68:	f003 f99c 	bl	8004da4 <HAL_GPIO_WritePin>
	}

	if(R >= R_MAX){
 8001a6c:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8001a70:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001a74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a7c:	db01      	blt.n	8001a82 <StartTask02+0x5fa>
		k = 0.99;
 8001a7e:	4b10      	ldr	r3, [pc, #64]	; (8001ac0 <StartTask02+0x638>)
 8001a80:	667b      	str	r3, [r7, #100]	; 0x64
	}

	R *= k;
 8001a82:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8001a86:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a8e:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c

	QUEUE_DATA_STRUCT *queue_tx;		// declare object to send to queue
	do
	{
		queue_tx = (QUEUE_DATA_STRUCT *)osMailAlloc(myMailQueueHandle, osWaitForever); //Allocate memory slot
 8001a92:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <StartTask02+0x63c>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f04f 31ff 	mov.w	r1, #4294967295
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f008 fe6e 	bl	800a77c <osMailAlloc>
 8001aa0:	6278      	str	r0, [r7, #36]	; 0x24
	} while (NULL == queue_tx);
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d0f4      	beq.n	8001a92 <StartTask02+0x60a>
 8001aa8:	e00e      	b.n	8001ac8 <StartTask02+0x640>
 8001aaa:	bf00      	nop
 8001aac:	f3af 8000 	nop.w
 8001ab0:	9999999a 	.word	0x9999999a
 8001ab4:	3f999999 	.word	0x3f999999
 8001ab8:	3f8147ae 	.word	0x3f8147ae
 8001abc:	40021800 	.word	0x40021800
 8001ac0:	3f7d70a4 	.word	0x3f7d70a4
 8001ac4:	2000067c 	.word	0x2000067c

	queue_tx->point 		 = point;	// Packaging data
 8001ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aca:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 8001ace:	801a      	strh	r2, [r3, #0]
	queue_tx->a 			 = a;
 8001ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad2:	f8b7 2084 	ldrh.w	r2, [r7, #132]	; 0x84
 8001ad6:	805a      	strh	r2, [r3, #2]
	queue_tx->b 			 = b;
 8001ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ada:	f8b7 2082 	ldrh.w	r2, [r7, #130]	; 0x82
 8001ade:	809a      	strh	r2, [r3, #4]
	queue_tx->R 			 = R;
 8001ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001ae4:	609a      	str	r2, [r3, #8]
	queue_tx->game_over_flag = game_over_flag;
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae8:	f897 207b 	ldrb.w	r2, [r7, #123]	; 0x7b
 8001aec:	731a      	strb	r2, [r3, #12]

	osMailPut(myMailQueueHandle, queue_tx); //Put data into mail queue.
 8001aee:	4b09      	ldr	r3, [pc, #36]	; (8001b14 <StartTask02+0x68c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001af4:	4618      	mov	r0, r3
 8001af6:	f008 fe57 	bl	800a7a8 <osMailPut>

	// for debug
	point = 0;
 8001afa:	2300      	movs	r3, #0
 8001afc:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    osDelay(1);
 8001b00:	2001      	movs	r0, #1
 8001b02:	f008 fc42 	bl	800a38a <osDelay>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 8001b06:	2200      	movs	r2, #0
 8001b08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b0c:	4802      	ldr	r0, [pc, #8]	; (8001b18 <StartTask02+0x690>)
 8001b0e:	f003 f949 	bl	8004da4 <HAL_GPIO_WritePin>
  {
 8001b12:	e4ff      	b.n	8001514 <StartTask02+0x8c>
 8001b14:	2000067c 	.word	0x2000067c
 8001b18:	40021800 	.word	0x40021800

08001b1c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a04      	ldr	r2, [pc, #16]	; (8001b3c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d101      	bne.n	8001b32 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b2e:	f002 f907 	bl	8003d40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b32:	bf00      	nop
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40001000 	.word	0x40001000

08001b40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b44:	b672      	cpsid	i
}
 8001b46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b48:	e7fe      	b.n	8001b48 <Error_Handler+0x8>
	...

08001b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	607b      	str	r3, [r7, #4]
 8001b56:	4b12      	ldr	r3, [pc, #72]	; (8001ba0 <HAL_MspInit+0x54>)
 8001b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5a:	4a11      	ldr	r2, [pc, #68]	; (8001ba0 <HAL_MspInit+0x54>)
 8001b5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b60:	6453      	str	r3, [r2, #68]	; 0x44
 8001b62:	4b0f      	ldr	r3, [pc, #60]	; (8001ba0 <HAL_MspInit+0x54>)
 8001b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b6a:	607b      	str	r3, [r7, #4]
 8001b6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	603b      	str	r3, [r7, #0]
 8001b72:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <HAL_MspInit+0x54>)
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	4a0a      	ldr	r2, [pc, #40]	; (8001ba0 <HAL_MspInit+0x54>)
 8001b78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b7e:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <HAL_MspInit+0x54>)
 8001b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b86:	603b      	str	r3, [r7, #0]
 8001b88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	210f      	movs	r1, #15
 8001b8e:	f06f 0001 	mvn.w	r0, #1
 8001b92:	f002 f9d1 	bl	8003f38 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b96:	bf00      	nop
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40023800 	.word	0x40023800

08001ba4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b08a      	sub	sp, #40	; 0x28
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bac:	f107 0314 	add.w	r3, r7, #20
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	60da      	str	r2, [r3, #12]
 8001bba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a19      	ldr	r2, [pc, #100]	; (8001c28 <HAL_SPI_MspInit+0x84>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d12c      	bne.n	8001c20 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	613b      	str	r3, [r7, #16]
 8001bca:	4b18      	ldr	r3, [pc, #96]	; (8001c2c <HAL_SPI_MspInit+0x88>)
 8001bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bce:	4a17      	ldr	r2, [pc, #92]	; (8001c2c <HAL_SPI_MspInit+0x88>)
 8001bd0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001bd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001bd6:	4b15      	ldr	r3, [pc, #84]	; (8001c2c <HAL_SPI_MspInit+0x88>)
 8001bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bde:	613b      	str	r3, [r7, #16]
 8001be0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	4b11      	ldr	r3, [pc, #68]	; (8001c2c <HAL_SPI_MspInit+0x88>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	4a10      	ldr	r2, [pc, #64]	; (8001c2c <HAL_SPI_MspInit+0x88>)
 8001bec:	f043 0320 	orr.w	r3, r3, #32
 8001bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf2:	4b0e      	ldr	r3, [pc, #56]	; (8001c2c <HAL_SPI_MspInit+0x88>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	f003 0320 	and.w	r3, r3, #32
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001bfe:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001c02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c04:	2302      	movs	r3, #2
 8001c06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001c10:	2305      	movs	r3, #5
 8001c12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c14:	f107 0314 	add.w	r3, r7, #20
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4805      	ldr	r0, [pc, #20]	; (8001c30 <HAL_SPI_MspInit+0x8c>)
 8001c1c:	f002 fe0a 	bl	8004834 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001c20:	bf00      	nop
 8001c22:	3728      	adds	r7, #40	; 0x28
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40015000 	.word	0x40015000
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	40021400 	.word	0x40021400

08001c34 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a08      	ldr	r2, [pc, #32]	; (8001c64 <HAL_SPI_MspDeInit+0x30>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d10a      	bne.n	8001c5c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8001c46:	4b08      	ldr	r3, [pc, #32]	; (8001c68 <HAL_SPI_MspDeInit+0x34>)
 8001c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4a:	4a07      	ldr	r2, [pc, #28]	; (8001c68 <HAL_SPI_MspDeInit+0x34>)
 8001c4c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001c50:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 8001c52:	f44f 7160 	mov.w	r1, #896	; 0x380
 8001c56:	4805      	ldr	r0, [pc, #20]	; (8001c6c <HAL_SPI_MspDeInit+0x38>)
 8001c58:	f002 ff98 	bl	8004b8c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8001c5c:	bf00      	nop
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40015000 	.word	0x40015000
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	40021400 	.word	0x40021400

08001c70 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08e      	sub	sp, #56	; 0x38
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001c80:	2300      	movs	r3, #0
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	4b33      	ldr	r3, [pc, #204]	; (8001d54 <HAL_InitTick+0xe4>)
 8001c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c88:	4a32      	ldr	r2, [pc, #200]	; (8001d54 <HAL_InitTick+0xe4>)
 8001c8a:	f043 0310 	orr.w	r3, r3, #16
 8001c8e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c90:	4b30      	ldr	r3, [pc, #192]	; (8001d54 <HAL_InitTick+0xe4>)
 8001c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c94:	f003 0310 	and.w	r3, r3, #16
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c9c:	f107 0210 	add.w	r2, r7, #16
 8001ca0:	f107 0314 	add.w	r3, r7, #20
 8001ca4:	4611      	mov	r1, r2
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f005 fa70 	bl	800718c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001cac:	6a3b      	ldr	r3, [r7, #32]
 8001cae:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d103      	bne.n	8001cbe <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001cb6:	f005 fa55 	bl	8007164 <HAL_RCC_GetPCLK1Freq>
 8001cba:	6378      	str	r0, [r7, #52]	; 0x34
 8001cbc:	e004      	b.n	8001cc8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001cbe:	f005 fa51 	bl	8007164 <HAL_RCC_GetPCLK1Freq>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cca:	4a23      	ldr	r2, [pc, #140]	; (8001d58 <HAL_InitTick+0xe8>)
 8001ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd0:	0c9b      	lsrs	r3, r3, #18
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001cd6:	4b21      	ldr	r3, [pc, #132]	; (8001d5c <HAL_InitTick+0xec>)
 8001cd8:	4a21      	ldr	r2, [pc, #132]	; (8001d60 <HAL_InitTick+0xf0>)
 8001cda:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001cdc:	4b1f      	ldr	r3, [pc, #124]	; (8001d5c <HAL_InitTick+0xec>)
 8001cde:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ce2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001ce4:	4a1d      	ldr	r2, [pc, #116]	; (8001d5c <HAL_InitTick+0xec>)
 8001ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ce8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001cea:	4b1c      	ldr	r3, [pc, #112]	; (8001d5c <HAL_InitTick+0xec>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cf0:	4b1a      	ldr	r3, [pc, #104]	; (8001d5c <HAL_InitTick+0xec>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cf6:	4b19      	ldr	r3, [pc, #100]	; (8001d5c <HAL_InitTick+0xec>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001cfc:	4817      	ldr	r0, [pc, #92]	; (8001d5c <HAL_InitTick+0xec>)
 8001cfe:	f006 fab1 	bl	8008264 <HAL_TIM_Base_Init>
 8001d02:	4603      	mov	r3, r0
 8001d04:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001d08:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d11b      	bne.n	8001d48 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001d10:	4812      	ldr	r0, [pc, #72]	; (8001d5c <HAL_InitTick+0xec>)
 8001d12:	f006 fb01 	bl	8008318 <HAL_TIM_Base_Start_IT>
 8001d16:	4603      	mov	r3, r0
 8001d18:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001d1c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d111      	bne.n	8001d48 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d24:	2036      	movs	r0, #54	; 0x36
 8001d26:	f002 f923 	bl	8003f70 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2b0f      	cmp	r3, #15
 8001d2e:	d808      	bhi.n	8001d42 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001d30:	2200      	movs	r2, #0
 8001d32:	6879      	ldr	r1, [r7, #4]
 8001d34:	2036      	movs	r0, #54	; 0x36
 8001d36:	f002 f8ff 	bl	8003f38 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d3a:	4a0a      	ldr	r2, [pc, #40]	; (8001d64 <HAL_InitTick+0xf4>)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6013      	str	r3, [r2, #0]
 8001d40:	e002      	b.n	8001d48 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001d48:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3738      	adds	r7, #56	; 0x38
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40023800 	.word	0x40023800
 8001d58:	431bde83 	.word	0x431bde83
 8001d5c:	20000680 	.word	0x20000680
 8001d60:	40001000 	.word	0x40001000
 8001d64:	20000080 	.word	0x20000080

08001d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d6c:	e7fe      	b.n	8001d6c <NMI_Handler+0x4>

08001d6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d72:	e7fe      	b.n	8001d72 <HardFault_Handler+0x4>

08001d74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d78:	e7fe      	b.n	8001d78 <MemManage_Handler+0x4>

08001d7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d7e:	e7fe      	b.n	8001d7e <BusFault_Handler+0x4>

08001d80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d84:	e7fe      	b.n	8001d84 <UsageFault_Handler+0x4>

08001d86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d86:	b480      	push	{r7}
 8001d88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001d98:	4802      	ldr	r0, [pc, #8]	; (8001da4 <TIM6_DAC_IRQHandler+0x10>)
 8001d9a:	f006 fb2d 	bl	80083f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	20000680 	.word	0x20000680

08001da8 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001dac:	4802      	ldr	r0, [pc, #8]	; (8001db8 <OTG_HS_IRQHandler+0x10>)
 8001dae:	f003 fc3c 	bl	800562a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20005b5c 	.word	0x20005b5c

08001dbc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  return 1;
 8001dc0:	2301      	movs	r3, #1
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <_kill>:

int _kill(int pid, int sig)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001dd6:	f00d fd4b 	bl	800f870 <__errno>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2216      	movs	r2, #22
 8001dde:	601a      	str	r2, [r3, #0]
  return -1;
 8001de0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <_exit>:

void _exit (int status)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001df4:	f04f 31ff 	mov.w	r1, #4294967295
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f7ff ffe7 	bl	8001dcc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001dfe:	e7fe      	b.n	8001dfe <_exit+0x12>

08001e00 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60f8      	str	r0, [r7, #12]
 8001e08:	60b9      	str	r1, [r7, #8]
 8001e0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	617b      	str	r3, [r7, #20]
 8001e10:	e00a      	b.n	8001e28 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e12:	f3af 8000 	nop.w
 8001e16:	4601      	mov	r1, r0
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	1c5a      	adds	r2, r3, #1
 8001e1c:	60ba      	str	r2, [r7, #8]
 8001e1e:	b2ca      	uxtb	r2, r1
 8001e20:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	3301      	adds	r3, #1
 8001e26:	617b      	str	r3, [r7, #20]
 8001e28:	697a      	ldr	r2, [r7, #20]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	dbf0      	blt.n	8001e12 <_read+0x12>
  }

  return len;
 8001e30:	687b      	ldr	r3, [r7, #4]
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3718      	adds	r7, #24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b086      	sub	sp, #24
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	60f8      	str	r0, [r7, #12]
 8001e42:	60b9      	str	r1, [r7, #8]
 8001e44:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e46:	2300      	movs	r3, #0
 8001e48:	617b      	str	r3, [r7, #20]
 8001e4a:	e009      	b.n	8001e60 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	1c5a      	adds	r2, r3, #1
 8001e50:	60ba      	str	r2, [r7, #8]
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	617b      	str	r3, [r7, #20]
 8001e60:	697a      	ldr	r2, [r7, #20]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	dbf1      	blt.n	8001e4c <_write+0x12>
  }
  return len;
 8001e68:	687b      	ldr	r3, [r7, #4]
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3718      	adds	r7, #24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <_close>:

int _close(int file)
{
 8001e72:	b480      	push	{r7}
 8001e74:	b083      	sub	sp, #12
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr

08001e8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b083      	sub	sp, #12
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
 8001e92:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e9a:	605a      	str	r2, [r3, #4]
  return 0;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr

08001eaa <_isatty>:

int _isatty(int file)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	b083      	sub	sp, #12
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001eb2:	2301      	movs	r3, #1
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3714      	adds	r7, #20
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
	...

08001edc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ee4:	4a14      	ldr	r2, [pc, #80]	; (8001f38 <_sbrk+0x5c>)
 8001ee6:	4b15      	ldr	r3, [pc, #84]	; (8001f3c <_sbrk+0x60>)
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ef0:	4b13      	ldr	r3, [pc, #76]	; (8001f40 <_sbrk+0x64>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d102      	bne.n	8001efe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ef8:	4b11      	ldr	r3, [pc, #68]	; (8001f40 <_sbrk+0x64>)
 8001efa:	4a12      	ldr	r2, [pc, #72]	; (8001f44 <_sbrk+0x68>)
 8001efc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001efe:	4b10      	ldr	r3, [pc, #64]	; (8001f40 <_sbrk+0x64>)
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4413      	add	r3, r2
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d207      	bcs.n	8001f1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f0c:	f00d fcb0 	bl	800f870 <__errno>
 8001f10:	4603      	mov	r3, r0
 8001f12:	220c      	movs	r2, #12
 8001f14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f16:	f04f 33ff 	mov.w	r3, #4294967295
 8001f1a:	e009      	b.n	8001f30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f1c:	4b08      	ldr	r3, [pc, #32]	; (8001f40 <_sbrk+0x64>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f22:	4b07      	ldr	r3, [pc, #28]	; (8001f40 <_sbrk+0x64>)
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4413      	add	r3, r2
 8001f2a:	4a05      	ldr	r2, [pc, #20]	; (8001f40 <_sbrk+0x64>)
 8001f2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3718      	adds	r7, #24
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	20030000 	.word	0x20030000
 8001f3c:	00000400 	.word	0x00000400
 8001f40:	200006c8 	.word	0x200006c8
 8001f44:	20006298 	.word	0x20006298

08001f48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f4c:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <SystemInit+0x20>)
 8001f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f52:	4a05      	ldr	r2, [pc, #20]	; (8001f68 <SystemInit+0x20>)
 8001f54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f5c:	bf00      	nop
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	e000ed00 	.word	0xe000ed00

08001f6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001f6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fa4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f70:	480d      	ldr	r0, [pc, #52]	; (8001fa8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f72:	490e      	ldr	r1, [pc, #56]	; (8001fac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f74:	4a0e      	ldr	r2, [pc, #56]	; (8001fb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f78:	e002      	b.n	8001f80 <LoopCopyDataInit>

08001f7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f7e:	3304      	adds	r3, #4

08001f80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f84:	d3f9      	bcc.n	8001f7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f86:	4a0b      	ldr	r2, [pc, #44]	; (8001fb4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f88:	4c0b      	ldr	r4, [pc, #44]	; (8001fb8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f8c:	e001      	b.n	8001f92 <LoopFillZerobss>

08001f8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f90:	3204      	adds	r2, #4

08001f92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f94:	d3fb      	bcc.n	8001f8e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f96:	f7ff ffd7 	bl	8001f48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f9a:	f00d fd65 	bl	800fa68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f9e:	f7fe ffff 	bl	8000fa0 <main>
  bx  lr    
 8001fa2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001fa4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001fa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fac:	2000034c 	.word	0x2000034c
  ldr r2, =_sidata
 8001fb0:	0801471c 	.word	0x0801471c
  ldr r2, =_sbss
 8001fb4:	2000034c 	.word	0x2000034c
  ldr r4, =_ebss
 8001fb8:	20006298 	.word	0x20006298

08001fbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fbc:	e7fe      	b.n	8001fbc <ADC_IRQHandler>

08001fbe <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001fc2:	f000 fc73 	bl	80028ac <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8001fc6:	20ca      	movs	r0, #202	; 0xca
 8001fc8:	f000 f95d 	bl	8002286 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8001fcc:	20c3      	movs	r0, #195	; 0xc3
 8001fce:	f000 f967 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8001fd2:	2008      	movs	r0, #8
 8001fd4:	f000 f964 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8001fd8:	2050      	movs	r0, #80	; 0x50
 8001fda:	f000 f961 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8001fde:	20cf      	movs	r0, #207	; 0xcf
 8001fe0:	f000 f951 	bl	8002286 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001fe4:	2000      	movs	r0, #0
 8001fe6:	f000 f95b 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8001fea:	20c1      	movs	r0, #193	; 0xc1
 8001fec:	f000 f958 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8001ff0:	2030      	movs	r0, #48	; 0x30
 8001ff2:	f000 f955 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8001ff6:	20ed      	movs	r0, #237	; 0xed
 8001ff8:	f000 f945 	bl	8002286 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8001ffc:	2064      	movs	r0, #100	; 0x64
 8001ffe:	f000 f94f 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8002002:	2003      	movs	r0, #3
 8002004:	f000 f94c 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8002008:	2012      	movs	r0, #18
 800200a:	f000 f949 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 800200e:	2081      	movs	r0, #129	; 0x81
 8002010:	f000 f946 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8002014:	20e8      	movs	r0, #232	; 0xe8
 8002016:	f000 f936 	bl	8002286 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 800201a:	2085      	movs	r0, #133	; 0x85
 800201c:	f000 f940 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002020:	2000      	movs	r0, #0
 8002022:	f000 f93d 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8002026:	2078      	movs	r0, #120	; 0x78
 8002028:	f000 f93a 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 800202c:	20cb      	movs	r0, #203	; 0xcb
 800202e:	f000 f92a 	bl	8002286 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8002032:	2039      	movs	r0, #57	; 0x39
 8002034:	f000 f934 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8002038:	202c      	movs	r0, #44	; 0x2c
 800203a:	f000 f931 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800203e:	2000      	movs	r0, #0
 8002040:	f000 f92e 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8002044:	2034      	movs	r0, #52	; 0x34
 8002046:	f000 f92b 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 800204a:	2002      	movs	r0, #2
 800204c:	f000 f928 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8002050:	20f7      	movs	r0, #247	; 0xf7
 8002052:	f000 f918 	bl	8002286 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8002056:	2020      	movs	r0, #32
 8002058:	f000 f922 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 800205c:	20ea      	movs	r0, #234	; 0xea
 800205e:	f000 f912 	bl	8002286 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002062:	2000      	movs	r0, #0
 8002064:	f000 f91c 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002068:	2000      	movs	r0, #0
 800206a:	f000 f919 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 800206e:	20b1      	movs	r0, #177	; 0xb1
 8002070:	f000 f909 	bl	8002286 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002074:	2000      	movs	r0, #0
 8002076:	f000 f913 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 800207a:	201b      	movs	r0, #27
 800207c:	f000 f910 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002080:	20b6      	movs	r0, #182	; 0xb6
 8002082:	f000 f900 	bl	8002286 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8002086:	200a      	movs	r0, #10
 8002088:	f000 f90a 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 800208c:	20a2      	movs	r0, #162	; 0xa2
 800208e:	f000 f907 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8002092:	20c0      	movs	r0, #192	; 0xc0
 8002094:	f000 f8f7 	bl	8002286 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002098:	2010      	movs	r0, #16
 800209a:	f000 f901 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 800209e:	20c1      	movs	r0, #193	; 0xc1
 80020a0:	f000 f8f1 	bl	8002286 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80020a4:	2010      	movs	r0, #16
 80020a6:	f000 f8fb 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 80020aa:	20c5      	movs	r0, #197	; 0xc5
 80020ac:	f000 f8eb 	bl	8002286 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 80020b0:	2045      	movs	r0, #69	; 0x45
 80020b2:	f000 f8f5 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 80020b6:	2015      	movs	r0, #21
 80020b8:	f000 f8f2 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 80020bc:	20c7      	movs	r0, #199	; 0xc7
 80020be:	f000 f8e2 	bl	8002286 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 80020c2:	2090      	movs	r0, #144	; 0x90
 80020c4:	f000 f8ec 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 80020c8:	2036      	movs	r0, #54	; 0x36
 80020ca:	f000 f8dc 	bl	8002286 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 80020ce:	20c8      	movs	r0, #200	; 0xc8
 80020d0:	f000 f8e6 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 80020d4:	20f2      	movs	r0, #242	; 0xf2
 80020d6:	f000 f8d6 	bl	8002286 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80020da:	2000      	movs	r0, #0
 80020dc:	f000 f8e0 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 80020e0:	20b0      	movs	r0, #176	; 0xb0
 80020e2:	f000 f8d0 	bl	8002286 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 80020e6:	20c2      	movs	r0, #194	; 0xc2
 80020e8:	f000 f8da 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80020ec:	20b6      	movs	r0, #182	; 0xb6
 80020ee:	f000 f8ca 	bl	8002286 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80020f2:	200a      	movs	r0, #10
 80020f4:	f000 f8d4 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 80020f8:	20a7      	movs	r0, #167	; 0xa7
 80020fa:	f000 f8d1 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 80020fe:	2027      	movs	r0, #39	; 0x27
 8002100:	f000 f8ce 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8002104:	2004      	movs	r0, #4
 8002106:	f000 f8cb 	bl	80022a0 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 800210a:	202a      	movs	r0, #42	; 0x2a
 800210c:	f000 f8bb 	bl	8002286 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002110:	2000      	movs	r0, #0
 8002112:	f000 f8c5 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002116:	2000      	movs	r0, #0
 8002118:	f000 f8c2 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800211c:	2000      	movs	r0, #0
 800211e:	f000 f8bf 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8002122:	20ef      	movs	r0, #239	; 0xef
 8002124:	f000 f8bc 	bl	80022a0 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8002128:	202b      	movs	r0, #43	; 0x2b
 800212a:	f000 f8ac 	bl	8002286 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800212e:	2000      	movs	r0, #0
 8002130:	f000 f8b6 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002134:	2000      	movs	r0, #0
 8002136:	f000 f8b3 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 800213a:	2001      	movs	r0, #1
 800213c:	f000 f8b0 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8002140:	203f      	movs	r0, #63	; 0x3f
 8002142:	f000 f8ad 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8002146:	20f6      	movs	r0, #246	; 0xf6
 8002148:	f000 f89d 	bl	8002286 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 800214c:	2001      	movs	r0, #1
 800214e:	f000 f8a7 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002152:	2000      	movs	r0, #0
 8002154:	f000 f8a4 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8002158:	2006      	movs	r0, #6
 800215a:	f000 f8a1 	bl	80022a0 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 800215e:	202c      	movs	r0, #44	; 0x2c
 8002160:	f000 f891 	bl	8002286 <ili9341_WriteReg>
  LCD_Delay(200);
 8002164:	20c8      	movs	r0, #200	; 0xc8
 8002166:	f000 fc8f 	bl	8002a88 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 800216a:	2026      	movs	r0, #38	; 0x26
 800216c:	f000 f88b 	bl	8002286 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002170:	2001      	movs	r0, #1
 8002172:	f000 f895 	bl	80022a0 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8002176:	20e0      	movs	r0, #224	; 0xe0
 8002178:	f000 f885 	bl	8002286 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 800217c:	200f      	movs	r0, #15
 800217e:	f000 f88f 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8002182:	2029      	movs	r0, #41	; 0x29
 8002184:	f000 f88c 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8002188:	2024      	movs	r0, #36	; 0x24
 800218a:	f000 f889 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 800218e:	200c      	movs	r0, #12
 8002190:	f000 f886 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8002194:	200e      	movs	r0, #14
 8002196:	f000 f883 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800219a:	2009      	movs	r0, #9
 800219c:	f000 f880 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 80021a0:	204e      	movs	r0, #78	; 0x4e
 80021a2:	f000 f87d 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80021a6:	2078      	movs	r0, #120	; 0x78
 80021a8:	f000 f87a 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 80021ac:	203c      	movs	r0, #60	; 0x3c
 80021ae:	f000 f877 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80021b2:	2009      	movs	r0, #9
 80021b4:	f000 f874 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 80021b8:	2013      	movs	r0, #19
 80021ba:	f000 f871 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80021be:	2005      	movs	r0, #5
 80021c0:	f000 f86e 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 80021c4:	2017      	movs	r0, #23
 80021c6:	f000 f86b 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80021ca:	2011      	movs	r0, #17
 80021cc:	f000 f868 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80021d0:	2000      	movs	r0, #0
 80021d2:	f000 f865 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 80021d6:	20e1      	movs	r0, #225	; 0xe1
 80021d8:	f000 f855 	bl	8002286 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80021dc:	2000      	movs	r0, #0
 80021de:	f000 f85f 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 80021e2:	2016      	movs	r0, #22
 80021e4:	f000 f85c 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80021e8:	201b      	movs	r0, #27
 80021ea:	f000 f859 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80021ee:	2004      	movs	r0, #4
 80021f0:	f000 f856 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80021f4:	2011      	movs	r0, #17
 80021f6:	f000 f853 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 80021fa:	2007      	movs	r0, #7
 80021fc:	f000 f850 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8002200:	2031      	movs	r0, #49	; 0x31
 8002202:	f000 f84d 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8002206:	2033      	movs	r0, #51	; 0x33
 8002208:	f000 f84a 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 800220c:	2042      	movs	r0, #66	; 0x42
 800220e:	f000 f847 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8002212:	2005      	movs	r0, #5
 8002214:	f000 f844 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002218:	200c      	movs	r0, #12
 800221a:	f000 f841 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 800221e:	200a      	movs	r0, #10
 8002220:	f000 f83e 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8002224:	2028      	movs	r0, #40	; 0x28
 8002226:	f000 f83b 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 800222a:	202f      	movs	r0, #47	; 0x2f
 800222c:	f000 f838 	bl	80022a0 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8002230:	200f      	movs	r0, #15
 8002232:	f000 f835 	bl	80022a0 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8002236:	2011      	movs	r0, #17
 8002238:	f000 f825 	bl	8002286 <ili9341_WriteReg>
  LCD_Delay(200);
 800223c:	20c8      	movs	r0, #200	; 0xc8
 800223e:	f000 fc23 	bl	8002a88 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8002242:	2029      	movs	r0, #41	; 0x29
 8002244:	f000 f81f 	bl	8002286 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8002248:	202c      	movs	r0, #44	; 0x2c
 800224a:	f000 f81c 	bl	8002286 <ili9341_WriteReg>
}
 800224e:	bf00      	nop
 8002250:	bd80      	pop	{r7, pc}

08002252 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8002256:	f000 fb29 	bl	80028ac <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 800225a:	2103      	movs	r1, #3
 800225c:	20d3      	movs	r0, #211	; 0xd3
 800225e:	f000 f82c 	bl	80022ba <ili9341_ReadData>
 8002262:	4603      	mov	r3, r0
 8002264:	b29b      	uxth	r3, r3
}
 8002266:	4618      	mov	r0, r3
 8002268:	bd80      	pop	{r7, pc}

0800226a <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800226e:	2029      	movs	r0, #41	; 0x29
 8002270:	f000 f809 	bl	8002286 <ili9341_WriteReg>
}
 8002274:	bf00      	nop
 8002276:	bd80      	pop	{r7, pc}

08002278 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 800227c:	2028      	movs	r0, #40	; 0x28
 800227e:	f000 f802 	bl	8002286 <ili9341_WriteReg>
}
 8002282:	bf00      	nop
 8002284:	bd80      	pop	{r7, pc}

08002286 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b082      	sub	sp, #8
 800228a:	af00      	add	r7, sp, #0
 800228c:	4603      	mov	r3, r0
 800228e:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8002290:	79fb      	ldrb	r3, [r7, #7]
 8002292:	4618      	mov	r0, r3
 8002294:	f000 fba4 	bl	80029e0 <LCD_IO_WriteReg>
}
 8002298:	bf00      	nop
 800229a:	3708      	adds	r7, #8
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80022aa:	88fb      	ldrh	r3, [r7, #6]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f000 fb75 	bl	800299c <LCD_IO_WriteData>
}
 80022b2:	bf00      	nop
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b082      	sub	sp, #8
 80022be:	af00      	add	r7, sp, #0
 80022c0:	4603      	mov	r3, r0
 80022c2:	460a      	mov	r2, r1
 80022c4:	80fb      	strh	r3, [r7, #6]
 80022c6:	4613      	mov	r3, r2
 80022c8:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 80022ca:	797a      	ldrb	r2, [r7, #5]
 80022cc:	88fb      	ldrh	r3, [r7, #6]
 80022ce:	4611      	mov	r1, r2
 80022d0:	4618      	mov	r0, r3
 80022d2:	f000 fba7 	bl	8002a24 <LCD_IO_ReadData>
 80022d6:	4603      	mov	r3, r0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 80022e4:	23f0      	movs	r3, #240	; 0xf0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 80022f4:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr

08002302 <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 8002302:	b580      	push	{r7, lr}
 8002304:	b084      	sub	sp, #16
 8002306:	af00      	add	r7, sp, #0
 8002308:	4603      	mov	r3, r0
 800230a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800230c:	2300      	movs	r3, #0
 800230e:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8002310:	f000 fbc6 	bl	8002aa0 <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8002314:	88fb      	ldrh	r3, [r7, #6]
 8002316:	b2db      	uxtb	r3, r3
 8002318:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 800231a:	f107 030f 	add.w	r3, r7, #15
 800231e:	2201      	movs	r2, #1
 8002320:	2120      	movs	r1, #32
 8002322:	4618      	mov	r0, r3
 8002324:	f000 fc08 	bl	8002b38 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 8002328:	88fb      	ldrh	r3, [r7, #6]
 800232a:	0a1b      	lsrs	r3, r3, #8
 800232c:	b29b      	uxth	r3, r3
 800232e:	b2db      	uxtb	r3, r3
 8002330:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 8002332:	f107 030f 	add.w	r3, r7, #15
 8002336:	2201      	movs	r2, #1
 8002338:	2123      	movs	r1, #35	; 0x23
 800233a:	4618      	mov	r0, r3
 800233c:	f000 fbfc 	bl	8002b38 <GYRO_IO_Write>
}
 8002340:	bf00      	nop
 8002342:	3710      	adds	r7, #16
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
}
 800234c:	bf00      	nop
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b082      	sub	sp, #8
 800235a:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 800235c:	f000 fba0 	bl	8002aa0 <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 8002360:	1dfb      	adds	r3, r7, #7
 8002362:	2201      	movs	r2, #1
 8002364:	210f      	movs	r1, #15
 8002366:	4618      	mov	r0, r3
 8002368:	f000 fc18 	bl	8002b9c <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 800236c:	79fb      	ldrb	r3, [r7, #7]
}
 800236e:	4618      	mov	r0, r3
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b082      	sub	sp, #8
 800237a:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800237c:	1dfb      	adds	r3, r7, #7
 800237e:	2201      	movs	r2, #1
 8002380:	2124      	movs	r1, #36	; 0x24
 8002382:	4618      	mov	r0, r3
 8002384:	f000 fc0a 	bl	8002b9c <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8002388:	79fb      	ldrb	r3, [r7, #7]
 800238a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800238e:	b2db      	uxtb	r3, r3
 8002390:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8002392:	1dfb      	adds	r3, r7, #7
 8002394:	2201      	movs	r2, #1
 8002396:	2124      	movs	r1, #36	; 0x24
 8002398:	4618      	mov	r0, r3
 800239a:	f000 fbcd 	bl	8002b38 <GYRO_IO_Write>
}
 800239e:	bf00      	nop
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b084      	sub	sp, #16
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	4603      	mov	r3, r0
 80023ae:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80023b0:	2300      	movs	r3, #0
 80023b2:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80023b4:	88fb      	ldrh	r3, [r7, #6]
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 80023ba:	f107 030f 	add.w	r3, r7, #15
 80023be:	2201      	movs	r2, #1
 80023c0:	2120      	movs	r1, #32
 80023c2:	4618      	mov	r0, r3
 80023c4:	f000 fbb8 	bl	8002b38 <GYRO_IO_Write>
}
 80023c8:	bf00      	nop
 80023ca:	3710      	adds	r7, #16
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 80023da:	2300      	movs	r3, #0
 80023dc:	73fb      	strb	r3, [r7, #15]
 80023de:	2300      	movs	r3, #0
 80023e0:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 80023e2:	f107 030f 	add.w	r3, r7, #15
 80023e6:	2201      	movs	r2, #1
 80023e8:	2130      	movs	r1, #48	; 0x30
 80023ea:	4618      	mov	r0, r3
 80023ec:	f000 fbd6 	bl	8002b9c <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 80023f0:	f107 030e 	add.w	r3, r7, #14
 80023f4:	2201      	movs	r2, #1
 80023f6:	2122      	movs	r1, #34	; 0x22
 80023f8:	4618      	mov	r0, r3
 80023fa:	f000 fbcf 	bl	8002b9c <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 80023fe:	7bfb      	ldrb	r3, [r7, #15]
 8002400:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002404:	b2db      	uxtb	r3, r3
 8002406:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8002408:	88fb      	ldrh	r3, [r7, #6]
 800240a:	b2db      	uxtb	r3, r3
 800240c:	121b      	asrs	r3, r3, #8
 800240e:	b25a      	sxtb	r2, r3
 8002410:	7bfb      	ldrb	r3, [r7, #15]
 8002412:	b25b      	sxtb	r3, r3
 8002414:	4313      	orrs	r3, r2
 8002416:	b25b      	sxtb	r3, r3
 8002418:	b2db      	uxtb	r3, r3
 800241a:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 800241c:	7bbb      	ldrb	r3, [r7, #14]
 800241e:	f023 0320 	bic.w	r3, r3, #32
 8002422:	b2db      	uxtb	r3, r3
 8002424:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 8002426:	88fb      	ldrh	r3, [r7, #6]
 8002428:	b2da      	uxtb	r2, r3
 800242a:	7bbb      	ldrb	r3, [r7, #14]
 800242c:	4313      	orrs	r3, r2
 800242e:	b2db      	uxtb	r3, r3
 8002430:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8002432:	f107 030f 	add.w	r3, r7, #15
 8002436:	2201      	movs	r2, #1
 8002438:	2130      	movs	r1, #48	; 0x30
 800243a:	4618      	mov	r0, r3
 800243c:	f000 fb7c 	bl	8002b38 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8002440:	f107 030e 	add.w	r3, r7, #14
 8002444:	2201      	movs	r2, #1
 8002446:	2122      	movs	r1, #34	; 0x22
 8002448:	4618      	mov	r0, r3
 800244a:	f000 fb75 	bl	8002b38 <GYRO_IO_Write>
}
 800244e:	bf00      	nop
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 8002456:	b580      	push	{r7, lr}
 8002458:	b084      	sub	sp, #16
 800245a:	af00      	add	r7, sp, #0
 800245c:	4603      	mov	r3, r0
 800245e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8002460:	f107 030f 	add.w	r3, r7, #15
 8002464:	2201      	movs	r2, #1
 8002466:	2122      	movs	r1, #34	; 0x22
 8002468:	4618      	mov	r0, r3
 800246a:	f000 fb97 	bl	8002b9c <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 800246e:	79fb      	ldrb	r3, [r7, #7]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d10a      	bne.n	800248a <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 8002474:	7bfb      	ldrb	r3, [r7, #15]
 8002476:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800247a:	b2db      	uxtb	r3, r3
 800247c:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 800247e:	7bfb      	ldrb	r3, [r7, #15]
 8002480:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002484:	b2db      	uxtb	r3, r3
 8002486:	73fb      	strb	r3, [r7, #15]
 8002488:	e00c      	b.n	80024a4 <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 800248a:	79fb      	ldrb	r3, [r7, #7]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d109      	bne.n	80024a4 <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 8002490:	7bfb      	ldrb	r3, [r7, #15]
 8002492:	f023 0308 	bic.w	r3, r3, #8
 8002496:	b2db      	uxtb	r3, r3
 8002498:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 800249a:	7bfb      	ldrb	r3, [r7, #15]
 800249c:	f043 0308 	orr.w	r3, r3, #8
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80024a4:	f107 030f 	add.w	r3, r7, #15
 80024a8:	2201      	movs	r2, #1
 80024aa:	2122      	movs	r1, #34	; 0x22
 80024ac:	4618      	mov	r0, r3
 80024ae:	f000 fb43 	bl	8002b38 <GYRO_IO_Write>
}
 80024b2:	bf00      	nop
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b084      	sub	sp, #16
 80024be:	af00      	add	r7, sp, #0
 80024c0:	4603      	mov	r3, r0
 80024c2:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80024c4:	f107 030f 	add.w	r3, r7, #15
 80024c8:	2201      	movs	r2, #1
 80024ca:	2122      	movs	r1, #34	; 0x22
 80024cc:	4618      	mov	r0, r3
 80024ce:	f000 fb65 	bl	8002b9c <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 80024d2:	79fb      	ldrb	r3, [r7, #7]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d107      	bne.n	80024e8 <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 80024d8:	7bfb      	ldrb	r3, [r7, #15]
 80024da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 80024e2:	7bfb      	ldrb	r3, [r7, #15]
 80024e4:	73fb      	strb	r3, [r7, #15]
 80024e6:	e009      	b.n	80024fc <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 80024e8:	79fb      	ldrb	r3, [r7, #7]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d106      	bne.n	80024fc <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 80024ee:	7bfb      	ldrb	r3, [r7, #15]
 80024f0:	f023 0308 	bic.w	r3, r3, #8
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 80024f8:	7bfb      	ldrb	r3, [r7, #15]
 80024fa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80024fc:	f107 030f 	add.w	r3, r7, #15
 8002500:	2201      	movs	r2, #1
 8002502:	2122      	movs	r1, #34	; 0x22
 8002504:	4618      	mov	r0, r3
 8002506:	f000 fb17 	bl	8002b38 <GYRO_IO_Write>
}
 800250a:	bf00      	nop
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b084      	sub	sp, #16
 8002516:	af00      	add	r7, sp, #0
 8002518:	4603      	mov	r3, r0
 800251a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 800251c:	f107 030f 	add.w	r3, r7, #15
 8002520:	2201      	movs	r2, #1
 8002522:	2121      	movs	r1, #33	; 0x21
 8002524:	4618      	mov	r0, r3
 8002526:	f000 fb39 	bl	8002b9c <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 800252a:	7bfb      	ldrb	r3, [r7, #15]
 800252c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002530:	b2db      	uxtb	r3, r3
 8002532:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 8002534:	7bfa      	ldrb	r2, [r7, #15]
 8002536:	79fb      	ldrb	r3, [r7, #7]
 8002538:	4313      	orrs	r3, r2
 800253a:	b2db      	uxtb	r3, r3
 800253c:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 800253e:	f107 030f 	add.w	r3, r7, #15
 8002542:	2201      	movs	r2, #1
 8002544:	2121      	movs	r1, #33	; 0x21
 8002546:	4618      	mov	r0, r3
 8002548:	f000 faf6 	bl	8002b38 <GYRO_IO_Write>
}
 800254c:	bf00      	nop
 800254e:	3710      	adds	r7, #16
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	4603      	mov	r3, r0
 800255c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800255e:	f107 030f 	add.w	r3, r7, #15
 8002562:	2201      	movs	r2, #1
 8002564:	2124      	movs	r1, #36	; 0x24
 8002566:	4618      	mov	r0, r3
 8002568:	f000 fb18 	bl	8002b9c <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 800256c:	7bfb      	ldrb	r3, [r7, #15]
 800256e:	f023 0310 	bic.w	r3, r3, #16
 8002572:	b2db      	uxtb	r3, r3
 8002574:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8002576:	7bfa      	ldrb	r2, [r7, #15]
 8002578:	79fb      	ldrb	r3, [r7, #7]
 800257a:	4313      	orrs	r3, r2
 800257c:	b2db      	uxtb	r3, r3
 800257e:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8002580:	f107 030f 	add.w	r3, r7, #15
 8002584:	2201      	movs	r2, #1
 8002586:	2124      	movs	r1, #36	; 0x24
 8002588:	4618      	mov	r0, r3
 800258a:	f000 fad5 	bl	8002b38 <GYRO_IO_Write>
}
 800258e:	bf00      	nop
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
	...

08002598 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b08a      	sub	sp, #40	; 0x28
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 80025a0:	2300      	movs	r3, #0
 80025a2:	61bb      	str	r3, [r7, #24]
 80025a4:	2300      	movs	r3, #0
 80025a6:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 80025a8:	f107 0310 	add.w	r3, r7, #16
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 80025b2:	2300      	movs	r3, #0
 80025b4:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 80025b6:	f04f 0300 	mov.w	r3, #0
 80025ba:	627b      	str	r3, [r7, #36]	; 0x24
  int i =0;
 80025bc:	2300      	movs	r3, #0
 80025be:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 80025c0:	f107 030f 	add.w	r3, r7, #15
 80025c4:	2201      	movs	r2, #1
 80025c6:	2123      	movs	r1, #35	; 0x23
 80025c8:	4618      	mov	r0, r3
 80025ca:	f000 fae7 	bl	8002b9c <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 80025ce:	f107 0318 	add.w	r3, r7, #24
 80025d2:	2206      	movs	r2, #6
 80025d4:	2128      	movs	r1, #40	; 0x28
 80025d6:	4618      	mov	r0, r3
 80025d8:	f000 fae0 	bl	8002b9c <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 80025dc:	7bfb      	ldrb	r3, [r7, #15]
 80025de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d123      	bne.n	800262e <L3GD20_ReadXYZAngRate+0x96>
  {
    for(i=0; i<3; i++)
 80025e6:	2300      	movs	r3, #0
 80025e8:	623b      	str	r3, [r7, #32]
 80025ea:	e01c      	b.n	8002626 <L3GD20_ReadXYZAngRate+0x8e>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 80025ec:	6a3b      	ldr	r3, [r7, #32]
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	3301      	adds	r3, #1
 80025f2:	3328      	adds	r3, #40	; 0x28
 80025f4:	443b      	add	r3, r7
 80025f6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	021b      	lsls	r3, r3, #8
 80025fe:	b29a      	uxth	r2, r3
 8002600:	6a3b      	ldr	r3, [r7, #32]
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	3328      	adds	r3, #40	; 0x28
 8002606:	443b      	add	r3, r7
 8002608:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800260c:	b29b      	uxth	r3, r3
 800260e:	4413      	add	r3, r2
 8002610:	b29b      	uxth	r3, r3
 8002612:	b21a      	sxth	r2, r3
 8002614:	6a3b      	ldr	r3, [r7, #32]
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	3328      	adds	r3, #40	; 0x28
 800261a:	443b      	add	r3, r7
 800261c:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8002620:	6a3b      	ldr	r3, [r7, #32]
 8002622:	3301      	adds	r3, #1
 8002624:	623b      	str	r3, [r7, #32]
 8002626:	6a3b      	ldr	r3, [r7, #32]
 8002628:	2b02      	cmp	r3, #2
 800262a:	dddf      	ble.n	80025ec <L3GD20_ReadXYZAngRate+0x54>
 800262c:	e022      	b.n	8002674 <L3GD20_ReadXYZAngRate+0xdc>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 800262e:	2300      	movs	r3, #0
 8002630:	623b      	str	r3, [r7, #32]
 8002632:	e01c      	b.n	800266e <L3GD20_ReadXYZAngRate+0xd6>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 8002634:	6a3b      	ldr	r3, [r7, #32]
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	3328      	adds	r3, #40	; 0x28
 800263a:	443b      	add	r3, r7
 800263c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002640:	b29b      	uxth	r3, r3
 8002642:	021b      	lsls	r3, r3, #8
 8002644:	b29a      	uxth	r2, r3
 8002646:	6a3b      	ldr	r3, [r7, #32]
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	3301      	adds	r3, #1
 800264c:	3328      	adds	r3, #40	; 0x28
 800264e:	443b      	add	r3, r7
 8002650:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002654:	b29b      	uxth	r3, r3
 8002656:	4413      	add	r3, r2
 8002658:	b29b      	uxth	r3, r3
 800265a:	b21a      	sxth	r2, r3
 800265c:	6a3b      	ldr	r3, [r7, #32]
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	3328      	adds	r3, #40	; 0x28
 8002662:	443b      	add	r3, r7
 8002664:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8002668:	6a3b      	ldr	r3, [r7, #32]
 800266a:	3301      	adds	r3, #1
 800266c:	623b      	str	r3, [r7, #32]
 800266e:	6a3b      	ldr	r3, [r7, #32]
 8002670:	2b02      	cmp	r3, #2
 8002672:	dddf      	ble.n	8002634 <L3GD20_ReadXYZAngRate+0x9c>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8002674:	7bfb      	ldrb	r3, [r7, #15]
 8002676:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800267a:	2b20      	cmp	r3, #32
 800267c:	d00c      	beq.n	8002698 <L3GD20_ReadXYZAngRate+0x100>
 800267e:	2b20      	cmp	r3, #32
 8002680:	dc0d      	bgt.n	800269e <L3GD20_ReadXYZAngRate+0x106>
 8002682:	2b00      	cmp	r3, #0
 8002684:	d002      	beq.n	800268c <L3GD20_ReadXYZAngRate+0xf4>
 8002686:	2b10      	cmp	r3, #16
 8002688:	d003      	beq.n	8002692 <L3GD20_ReadXYZAngRate+0xfa>
 800268a:	e008      	b.n	800269e <L3GD20_ReadXYZAngRate+0x106>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 800268c:	4b15      	ldr	r3, [pc, #84]	; (80026e4 <L3GD20_ReadXYZAngRate+0x14c>)
 800268e:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8002690:	e005      	b.n	800269e <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 8002692:	4b15      	ldr	r3, [pc, #84]	; (80026e8 <L3GD20_ReadXYZAngRate+0x150>)
 8002694:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8002696:	e002      	b.n	800269e <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8002698:	4b14      	ldr	r3, [pc, #80]	; (80026ec <L3GD20_ReadXYZAngRate+0x154>)
 800269a:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 800269c:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 800269e:	2300      	movs	r3, #0
 80026a0:	623b      	str	r3, [r7, #32]
 80026a2:	e016      	b.n	80026d2 <L3GD20_ReadXYZAngRate+0x13a>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 80026a4:	6a3b      	ldr	r3, [r7, #32]
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	3328      	adds	r3, #40	; 0x28
 80026aa:	443b      	add	r3, r7
 80026ac:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 80026b0:	ee07 3a90 	vmov	s15, r3
 80026b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026b8:	6a3b      	ldr	r3, [r7, #32]
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	4413      	add	r3, r2
 80026c0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80026c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026c8:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 80026cc:	6a3b      	ldr	r3, [r7, #32]
 80026ce:	3301      	adds	r3, #1
 80026d0:	623b      	str	r3, [r7, #32]
 80026d2:	6a3b      	ldr	r3, [r7, #32]
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	dde5      	ble.n	80026a4 <L3GD20_ReadXYZAngRate+0x10c>
  }
}
 80026d8:	bf00      	nop
 80026da:	bf00      	nop
 80026dc:	3728      	adds	r7, #40	; 0x28
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	410c0000 	.word	0x410c0000
 80026e8:	418c0000 	.word	0x418c0000
 80026ec:	428c0000 	.word	0x428c0000

080026f0 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80026f4:	4819      	ldr	r0, [pc, #100]	; (800275c <SPIx_Init+0x6c>)
 80026f6:	f005 fc76 	bl	8007fe6 <HAL_SPI_GetState>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d12b      	bne.n	8002758 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8002700:	4b16      	ldr	r3, [pc, #88]	; (800275c <SPIx_Init+0x6c>)
 8002702:	4a17      	ldr	r2, [pc, #92]	; (8002760 <SPIx_Init+0x70>)
 8002704:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002706:	4b15      	ldr	r3, [pc, #84]	; (800275c <SPIx_Init+0x6c>)
 8002708:	2218      	movs	r2, #24
 800270a:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 800270c:	4b13      	ldr	r3, [pc, #76]	; (800275c <SPIx_Init+0x6c>)
 800270e:	2200      	movs	r2, #0
 8002710:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8002712:	4b12      	ldr	r3, [pc, #72]	; (800275c <SPIx_Init+0x6c>)
 8002714:	2200      	movs	r2, #0
 8002716:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002718:	4b10      	ldr	r3, [pc, #64]	; (800275c <SPIx_Init+0x6c>)
 800271a:	2200      	movs	r2, #0
 800271c:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800271e:	4b0f      	ldr	r3, [pc, #60]	; (800275c <SPIx_Init+0x6c>)
 8002720:	2200      	movs	r2, #0
 8002722:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8002724:	4b0d      	ldr	r3, [pc, #52]	; (800275c <SPIx_Init+0x6c>)
 8002726:	2207      	movs	r2, #7
 8002728:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800272a:	4b0c      	ldr	r3, [pc, #48]	; (800275c <SPIx_Init+0x6c>)
 800272c:	2200      	movs	r2, #0
 800272e:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002730:	4b0a      	ldr	r3, [pc, #40]	; (800275c <SPIx_Init+0x6c>)
 8002732:	2200      	movs	r2, #0
 8002734:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8002736:	4b09      	ldr	r3, [pc, #36]	; (800275c <SPIx_Init+0x6c>)
 8002738:	f44f 7200 	mov.w	r2, #512	; 0x200
 800273c:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800273e:	4b07      	ldr	r3, [pc, #28]	; (800275c <SPIx_Init+0x6c>)
 8002740:	2200      	movs	r2, #0
 8002742:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002744:	4b05      	ldr	r3, [pc, #20]	; (800275c <SPIx_Init+0x6c>)
 8002746:	f44f 7282 	mov.w	r2, #260	; 0x104
 800274a:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 800274c:	4803      	ldr	r0, [pc, #12]	; (800275c <SPIx_Init+0x6c>)
 800274e:	f000 f873 	bl	8002838 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8002752:	4802      	ldr	r0, [pc, #8]	; (800275c <SPIx_Init+0x6c>)
 8002754:	f004 ffa7 	bl	80076a6 <HAL_SPI_Init>
  } 
}
 8002758:	bf00      	nop
 800275a:	bd80      	pop	{r7, pc}
 800275c:	200006cc 	.word	0x200006cc
 8002760:	40015000 	.word	0x40015000

08002764 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	4603      	mov	r3, r0
 800276c:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800276e:	2300      	movs	r3, #0
 8002770:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8002772:	79fb      	ldrb	r3, [r7, #7]
 8002774:	b29a      	uxth	r2, r3
 8002776:	4b09      	ldr	r3, [pc, #36]	; (800279c <SPIx_Read+0x38>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f107 0108 	add.w	r1, r7, #8
 800277e:	4808      	ldr	r0, [pc, #32]	; (80027a0 <SPIx_Read+0x3c>)
 8002780:	f005 f97e 	bl	8007a80 <HAL_SPI_Receive>
 8002784:	4603      	mov	r3, r0
 8002786:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002788:	7bfb      	ldrb	r3, [r7, #15]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800278e:	f000 f847 	bl	8002820 <SPIx_Error>
  }
  
  return readvalue;
 8002792:	68bb      	ldr	r3, [r7, #8]
}
 8002794:	4618      	mov	r0, r3
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	20000070 	.word	0x20000070
 80027a0:	200006cc 	.word	0x200006cc

080027a4 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	4603      	mov	r3, r0
 80027ac:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80027ae:	2300      	movs	r3, #0
 80027b0:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 80027b2:	4b09      	ldr	r3, [pc, #36]	; (80027d8 <SPIx_Write+0x34>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	1db9      	adds	r1, r7, #6
 80027b8:	2201      	movs	r2, #1
 80027ba:	4808      	ldr	r0, [pc, #32]	; (80027dc <SPIx_Write+0x38>)
 80027bc:	f005 f824 	bl	8007808 <HAL_SPI_Transmit>
 80027c0:	4603      	mov	r3, r0
 80027c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80027c4:	7bfb      	ldrb	r3, [r7, #15]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80027ca:	f000 f829 	bl	8002820 <SPIx_Error>
  }
}
 80027ce:	bf00      	nop
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	20000070 	.word	0x20000070
 80027dc:	200006cc 	.word	0x200006cc

080027e0 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af02      	add	r7, sp, #8
 80027e6:	4603      	mov	r3, r0
 80027e8:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 80027ea:	2300      	movs	r3, #0
 80027ec:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 80027ee:	4b0a      	ldr	r3, [pc, #40]	; (8002818 <SPIx_WriteRead+0x38>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f107 020f 	add.w	r2, r7, #15
 80027f6:	1df9      	adds	r1, r7, #7
 80027f8:	9300      	str	r3, [sp, #0]
 80027fa:	2301      	movs	r3, #1
 80027fc:	4807      	ldr	r0, [pc, #28]	; (800281c <SPIx_WriteRead+0x3c>)
 80027fe:	f005 fa50 	bl	8007ca2 <HAL_SPI_TransmitReceive>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 8002808:	f000 f80a 	bl	8002820 <SPIx_Error>
  }
  
  return receivedbyte;
 800280c:	7bfb      	ldrb	r3, [r7, #15]
}
 800280e:	4618      	mov	r0, r3
 8002810:	3710      	adds	r7, #16
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	20000070 	.word	0x20000070
 800281c:	200006cc 	.word	0x200006cc

08002820 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002824:	4803      	ldr	r0, [pc, #12]	; (8002834 <SPIx_Error+0x14>)
 8002826:	f004 ffc7 	bl	80077b8 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 800282a:	f7ff ff61 	bl	80026f0 <SPIx_Init>
}
 800282e:	bf00      	nop
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	200006cc 	.word	0x200006cc

08002838 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b08a      	sub	sp, #40	; 0x28
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8002840:	2300      	movs	r3, #0
 8002842:	613b      	str	r3, [r7, #16]
 8002844:	4b17      	ldr	r3, [pc, #92]	; (80028a4 <SPIx_MspInit+0x6c>)
 8002846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002848:	4a16      	ldr	r2, [pc, #88]	; (80028a4 <SPIx_MspInit+0x6c>)
 800284a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800284e:	6453      	str	r3, [r2, #68]	; 0x44
 8002850:	4b14      	ldr	r3, [pc, #80]	; (80028a4 <SPIx_MspInit+0x6c>)
 8002852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002854:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002858:	613b      	str	r3, [r7, #16]
 800285a:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 800285c:	2300      	movs	r3, #0
 800285e:	60fb      	str	r3, [r7, #12]
 8002860:	4b10      	ldr	r3, [pc, #64]	; (80028a4 <SPIx_MspInit+0x6c>)
 8002862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002864:	4a0f      	ldr	r2, [pc, #60]	; (80028a4 <SPIx_MspInit+0x6c>)
 8002866:	f043 0320 	orr.w	r3, r3, #32
 800286a:	6313      	str	r3, [r2, #48]	; 0x30
 800286c:	4b0d      	ldr	r3, [pc, #52]	; (80028a4 <SPIx_MspInit+0x6c>)
 800286e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002870:	f003 0320 	and.w	r3, r3, #32
 8002874:	60fb      	str	r3, [r7, #12]
 8002876:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8002878:	f44f 7360 	mov.w	r3, #896	; 0x380
 800287c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800287e:	2302      	movs	r3, #2
 8002880:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8002882:	2302      	movs	r3, #2
 8002884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8002886:	2301      	movs	r3, #1
 8002888:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800288a:	2305      	movs	r3, #5
 800288c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800288e:	f107 0314 	add.w	r3, r7, #20
 8002892:	4619      	mov	r1, r3
 8002894:	4804      	ldr	r0, [pc, #16]	; (80028a8 <SPIx_MspInit+0x70>)
 8002896:	f001 ffcd 	bl	8004834 <HAL_GPIO_Init>
}
 800289a:	bf00      	nop
 800289c:	3728      	adds	r7, #40	; 0x28
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	40023800 	.word	0x40023800
 80028a8:	40021400 	.word	0x40021400

080028ac <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b088      	sub	sp, #32
 80028b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 80028b2:	4b36      	ldr	r3, [pc, #216]	; (800298c <LCD_IO_Init+0xe0>)
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d164      	bne.n	8002984 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 80028ba:	4b34      	ldr	r3, [pc, #208]	; (800298c <LCD_IO_Init+0xe0>)
 80028bc:	2201      	movs	r2, #1
 80028be:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80028c0:	2300      	movs	r3, #0
 80028c2:	60bb      	str	r3, [r7, #8]
 80028c4:	4b32      	ldr	r3, [pc, #200]	; (8002990 <LCD_IO_Init+0xe4>)
 80028c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c8:	4a31      	ldr	r2, [pc, #196]	; (8002990 <LCD_IO_Init+0xe4>)
 80028ca:	f043 0308 	orr.w	r3, r3, #8
 80028ce:	6313      	str	r3, [r2, #48]	; 0x30
 80028d0:	4b2f      	ldr	r3, [pc, #188]	; (8002990 <LCD_IO_Init+0xe4>)
 80028d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d4:	f003 0308 	and.w	r3, r3, #8
 80028d8:	60bb      	str	r3, [r7, #8]
 80028da:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80028dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028e0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80028e2:	2301      	movs	r3, #1
 80028e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80028e6:	2300      	movs	r3, #0
 80028e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80028ea:	2302      	movs	r3, #2
 80028ec:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80028ee:	f107 030c 	add.w	r3, r7, #12
 80028f2:	4619      	mov	r1, r3
 80028f4:	4827      	ldr	r0, [pc, #156]	; (8002994 <LCD_IO_Init+0xe8>)
 80028f6:	f001 ff9d 	bl	8004834 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 80028fa:	2300      	movs	r3, #0
 80028fc:	607b      	str	r3, [r7, #4]
 80028fe:	4b24      	ldr	r3, [pc, #144]	; (8002990 <LCD_IO_Init+0xe4>)
 8002900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002902:	4a23      	ldr	r2, [pc, #140]	; (8002990 <LCD_IO_Init+0xe4>)
 8002904:	f043 0308 	orr.w	r3, r3, #8
 8002908:	6313      	str	r3, [r2, #48]	; 0x30
 800290a:	4b21      	ldr	r3, [pc, #132]	; (8002990 <LCD_IO_Init+0xe4>)
 800290c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290e:	f003 0308 	and.w	r3, r3, #8
 8002912:	607b      	str	r3, [r7, #4]
 8002914:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8002916:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800291a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800291c:	2301      	movs	r3, #1
 800291e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002920:	2300      	movs	r3, #0
 8002922:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002924:	2302      	movs	r3, #2
 8002926:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002928:	f107 030c 	add.w	r3, r7, #12
 800292c:	4619      	mov	r1, r3
 800292e:	4819      	ldr	r0, [pc, #100]	; (8002994 <LCD_IO_Init+0xe8>)
 8002930:	f001 ff80 	bl	8004834 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002934:	2300      	movs	r3, #0
 8002936:	603b      	str	r3, [r7, #0]
 8002938:	4b15      	ldr	r3, [pc, #84]	; (8002990 <LCD_IO_Init+0xe4>)
 800293a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293c:	4a14      	ldr	r2, [pc, #80]	; (8002990 <LCD_IO_Init+0xe4>)
 800293e:	f043 0304 	orr.w	r3, r3, #4
 8002942:	6313      	str	r3, [r2, #48]	; 0x30
 8002944:	4b12      	ldr	r3, [pc, #72]	; (8002990 <LCD_IO_Init+0xe4>)
 8002946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002948:	f003 0304 	and.w	r3, r3, #4
 800294c:	603b      	str	r3, [r7, #0]
 800294e:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002950:	2304      	movs	r3, #4
 8002952:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002954:	2301      	movs	r3, #1
 8002956:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002958:	2300      	movs	r3, #0
 800295a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800295c:	2302      	movs	r3, #2
 800295e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002960:	f107 030c 	add.w	r3, r7, #12
 8002964:	4619      	mov	r1, r3
 8002966:	480c      	ldr	r0, [pc, #48]	; (8002998 <LCD_IO_Init+0xec>)
 8002968:	f001 ff64 	bl	8004834 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 800296c:	2200      	movs	r2, #0
 800296e:	2104      	movs	r1, #4
 8002970:	4809      	ldr	r0, [pc, #36]	; (8002998 <LCD_IO_Init+0xec>)
 8002972:	f002 fa17 	bl	8004da4 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8002976:	2201      	movs	r2, #1
 8002978:	2104      	movs	r1, #4
 800297a:	4807      	ldr	r0, [pc, #28]	; (8002998 <LCD_IO_Init+0xec>)
 800297c:	f002 fa12 	bl	8004da4 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8002980:	f7ff feb6 	bl	80026f0 <SPIx_Init>
  }
}
 8002984:	bf00      	nop
 8002986:	3720      	adds	r7, #32
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	20000724 	.word	0x20000724
 8002990:	40023800 	.word	0x40023800
 8002994:	40020c00 	.word	0x40020c00
 8002998:	40020800 	.word	0x40020800

0800299c <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	4603      	mov	r3, r0
 80029a4:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80029a6:	2201      	movs	r2, #1
 80029a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80029ac:	480a      	ldr	r0, [pc, #40]	; (80029d8 <LCD_IO_WriteData+0x3c>)
 80029ae:	f002 f9f9 	bl	8004da4 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 80029b2:	2200      	movs	r2, #0
 80029b4:	2104      	movs	r1, #4
 80029b6:	4809      	ldr	r0, [pc, #36]	; (80029dc <LCD_IO_WriteData+0x40>)
 80029b8:	f002 f9f4 	bl	8004da4 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 80029bc:	88fb      	ldrh	r3, [r7, #6]
 80029be:	4618      	mov	r0, r3
 80029c0:	f7ff fef0 	bl	80027a4 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80029c4:	2201      	movs	r2, #1
 80029c6:	2104      	movs	r1, #4
 80029c8:	4804      	ldr	r0, [pc, #16]	; (80029dc <LCD_IO_WriteData+0x40>)
 80029ca:	f002 f9eb 	bl	8004da4 <HAL_GPIO_WritePin>
}
 80029ce:	bf00      	nop
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	40020c00 	.word	0x40020c00
 80029dc:	40020800 	.word	0x40020800

080029e0 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	4603      	mov	r3, r0
 80029e8:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80029ea:	2200      	movs	r2, #0
 80029ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80029f0:	480a      	ldr	r0, [pc, #40]	; (8002a1c <LCD_IO_WriteReg+0x3c>)
 80029f2:	f002 f9d7 	bl	8004da4 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80029f6:	2200      	movs	r2, #0
 80029f8:	2104      	movs	r1, #4
 80029fa:	4809      	ldr	r0, [pc, #36]	; (8002a20 <LCD_IO_WriteReg+0x40>)
 80029fc:	f002 f9d2 	bl	8004da4 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8002a00:	79fb      	ldrb	r3, [r7, #7]
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff fecd 	bl	80027a4 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	2104      	movs	r1, #4
 8002a0e:	4804      	ldr	r0, [pc, #16]	; (8002a20 <LCD_IO_WriteReg+0x40>)
 8002a10:	f002 f9c8 	bl	8004da4 <HAL_GPIO_WritePin>
}
 8002a14:	bf00      	nop
 8002a16:	3708      	adds	r7, #8
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	40020c00 	.word	0x40020c00
 8002a20:	40020800 	.word	0x40020800

08002a24 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	460a      	mov	r2, r1
 8002a2e:	80fb      	strh	r3, [r7, #6]
 8002a30:	4613      	mov	r3, r2
 8002a32:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8002a34:	2300      	movs	r3, #0
 8002a36:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8002a38:	2200      	movs	r2, #0
 8002a3a:	2104      	movs	r1, #4
 8002a3c:	4810      	ldr	r0, [pc, #64]	; (8002a80 <LCD_IO_ReadData+0x5c>)
 8002a3e:	f002 f9b1 	bl	8004da4 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002a42:	2200      	movs	r2, #0
 8002a44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a48:	480e      	ldr	r0, [pc, #56]	; (8002a84 <LCD_IO_ReadData+0x60>)
 8002a4a:	f002 f9ab 	bl	8004da4 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8002a4e:	88fb      	ldrh	r3, [r7, #6]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7ff fea7 	bl	80027a4 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8002a56:	797b      	ldrb	r3, [r7, #5]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7ff fe83 	bl	8002764 <SPIx_Read>
 8002a5e:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002a60:	2201      	movs	r2, #1
 8002a62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a66:	4807      	ldr	r0, [pc, #28]	; (8002a84 <LCD_IO_ReadData+0x60>)
 8002a68:	f002 f99c 	bl	8004da4 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	2104      	movs	r1, #4
 8002a70:	4803      	ldr	r0, [pc, #12]	; (8002a80 <LCD_IO_ReadData+0x5c>)
 8002a72:	f002 f997 	bl	8004da4 <HAL_GPIO_WritePin>
  
  return readvalue;
 8002a76:	68fb      	ldr	r3, [r7, #12]
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3710      	adds	r7, #16
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	40020800 	.word	0x40020800
 8002a84:	40020c00 	.word	0x40020c00

08002a88 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f001 f975 	bl	8003d80 <HAL_Delay>
}
 8002a96:	bf00      	nop
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
	...

08002aa0 <GYRO_IO_Init>:

/**
  * @brief  Configures the Gyroscope SPI interface.
  */
void GYRO_IO_Init(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b088      	sub	sp, #32
 8002aa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------*/
  /* Enable CS GPIO clock and Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	60bb      	str	r3, [r7, #8]
 8002aaa:	4b20      	ldr	r3, [pc, #128]	; (8002b2c <GYRO_IO_Init+0x8c>)
 8002aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aae:	4a1f      	ldr	r2, [pc, #124]	; (8002b2c <GYRO_IO_Init+0x8c>)
 8002ab0:	f043 0304 	orr.w	r3, r3, #4
 8002ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ab6:	4b1d      	ldr	r3, [pc, #116]	; (8002b2c <GYRO_IO_Init+0x8c>)
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aba:	f003 0304 	and.w	r3, r3, #4
 8002abe:	60bb      	str	r3, [r7, #8]
 8002ac0:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 8002ac2:	2302      	movs	r3, #2
 8002ac4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8002aca:	2300      	movs	r3, #0
 8002acc:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 8002ad2:	f107 030c 	add.w	r3, r7, #12
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4815      	ldr	r0, [pc, #84]	; (8002b30 <GYRO_IO_Init+0x90>)
 8002ada:	f001 feab 	bl	8004834 <HAL_GPIO_Init>
  
  /* Deselect: Chip Select high */
  GYRO_CS_HIGH();
 8002ade:	2201      	movs	r2, #1
 8002ae0:	2102      	movs	r1, #2
 8002ae2:	4813      	ldr	r0, [pc, #76]	; (8002b30 <GYRO_IO_Init+0x90>)
 8002ae4:	f002 f95e 	bl	8004da4 <HAL_GPIO_WritePin>
  
  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 8002ae8:	2300      	movs	r3, #0
 8002aea:	607b      	str	r3, [r7, #4]
 8002aec:	4b0f      	ldr	r3, [pc, #60]	; (8002b2c <GYRO_IO_Init+0x8c>)
 8002aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af0:	4a0e      	ldr	r2, [pc, #56]	; (8002b2c <GYRO_IO_Init+0x8c>)
 8002af2:	f043 0301 	orr.w	r3, r3, #1
 8002af6:	6313      	str	r3, [r2, #48]	; 0x30
 8002af8:	4b0c      	ldr	r3, [pc, #48]	; (8002b2c <GYRO_IO_Init+0x8c>)
 8002afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afc:	f003 0301 	and.w	r3, r3, #1
 8002b00:	607b      	str	r3, [r7, #4]
 8002b02:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 8002b04:	2306      	movs	r3, #6
 8002b06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 8002b10:	2300      	movs	r3, #0
 8002b12:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8002b14:	f107 030c 	add.w	r3, r7, #12
 8002b18:	4619      	mov	r1, r3
 8002b1a:	4806      	ldr	r0, [pc, #24]	; (8002b34 <GYRO_IO_Init+0x94>)
 8002b1c:	f001 fe8a 	bl	8004834 <HAL_GPIO_Init>

  SPIx_Init();
 8002b20:	f7ff fde6 	bl	80026f0 <SPIx_Init>
}
 8002b24:	bf00      	nop
 8002b26:	3720      	adds	r7, #32
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	40023800 	.word	0x40023800
 8002b30:	40020800 	.word	0x40020800
 8002b34:	40020000 	.word	0x40020000

08002b38 <GYRO_IO_Write>:
  * @param  pBuffer: Pointer to the buffer containing the data to be written to the Gyroscope.
  * @param  WriteAddr: Gyroscope's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	460b      	mov	r3, r1
 8002b42:	70fb      	strb	r3, [r7, #3]
 8002b44:	4613      	mov	r3, r2
 8002b46:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 8002b48:	883b      	ldrh	r3, [r7, #0]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d903      	bls.n	8002b56 <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8002b4e:	78fb      	ldrb	r3, [r7, #3]
 8002b50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b54:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8002b56:	2200      	movs	r2, #0
 8002b58:	2102      	movs	r1, #2
 8002b5a:	480f      	ldr	r0, [pc, #60]	; (8002b98 <GYRO_IO_Write+0x60>)
 8002b5c:	f002 f922 	bl	8004da4 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 8002b60:	78fb      	ldrb	r3, [r7, #3]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7ff fe3c 	bl	80027e0 <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 8002b68:	e00a      	b.n	8002b80 <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff fe36 	bl	80027e0 <SPIx_WriteRead>
    NumByteToWrite--;
 8002b74:	883b      	ldrh	r3, [r7, #0]
 8002b76:	3b01      	subs	r3, #1
 8002b78:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 8002b80:	883b      	ldrh	r3, [r7, #0]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1f1      	bne.n	8002b6a <GYRO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8002b86:	2201      	movs	r2, #1
 8002b88:	2102      	movs	r1, #2
 8002b8a:	4803      	ldr	r0, [pc, #12]	; (8002b98 <GYRO_IO_Write+0x60>)
 8002b8c:	f002 f90a 	bl	8004da4 <HAL_GPIO_WritePin>
}
 8002b90:	bf00      	nop
 8002b92:	3708      	adds	r7, #8
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	40020800 	.word	0x40020800

08002b9c <GYRO_IO_Read>:
  * @param  pBuffer: Pointer to the buffer that receives the data read from the Gyroscope.
  * @param  ReadAddr: Gyroscope's internal address to read from.
  * @param  NumByteToRead: Number of bytes to read from the Gyroscope.
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	70fb      	strb	r3, [r7, #3]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 8002bac:	883b      	ldrh	r3, [r7, #0]
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d904      	bls.n	8002bbc <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8002bb2:	78fb      	ldrb	r3, [r7, #3]
 8002bb4:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8002bb8:	70fb      	strb	r3, [r7, #3]
 8002bba:	e003      	b.n	8002bc4 <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8002bbc:	78fb      	ldrb	r3, [r7, #3]
 8002bbe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002bc2:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	2102      	movs	r1, #2
 8002bc8:	4810      	ldr	r0, [pc, #64]	; (8002c0c <GYRO_IO_Read+0x70>)
 8002bca:	f002 f8eb 	bl	8004da4 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 8002bce:	78fb      	ldrb	r3, [r7, #3]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7ff fe05 	bl	80027e0 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 8002bd6:	e00c      	b.n	8002bf2 <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to Gyroscope (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8002bd8:	2000      	movs	r0, #0
 8002bda:	f7ff fe01 	bl	80027e0 <SPIx_WriteRead>
 8002bde:	4603      	mov	r3, r0
 8002be0:	461a      	mov	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 8002be6:	883b      	ldrh	r3, [r7, #0]
 8002be8:	3b01      	subs	r3, #1
 8002bea:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	3301      	adds	r3, #1
 8002bf0:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 8002bf2:	883b      	ldrh	r3, [r7, #0]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d1ef      	bne.n	8002bd8 <GYRO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	2102      	movs	r1, #2
 8002bfc:	4803      	ldr	r0, [pc, #12]	; (8002c0c <GYRO_IO_Read+0x70>)
 8002bfe:	f002 f8d1 	bl	8004da4 <HAL_GPIO_WritePin>
}  
 8002c02:	bf00      	nop
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	40020800 	.word	0x40020800

08002c10 <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{  
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0,0};
 8002c1e:	2300      	movs	r3, #0
 8002c20:	703b      	strb	r3, [r7, #0]
 8002c22:	2300      	movs	r3, #0
 8002c24:	707b      	strb	r3, [r7, #1]

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 8002c26:	4b2b      	ldr	r3, [pc, #172]	; (8002cd4 <BSP_GYRO_Init+0xc4>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	4798      	blx	r3
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2bd4      	cmp	r3, #212	; 0xd4
 8002c30:	d005      	beq.n	8002c3e <BSP_GYRO_Init+0x2e>
 8002c32:	4b28      	ldr	r3, [pc, #160]	; (8002cd4 <BSP_GYRO_Init+0xc4>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	4798      	blx	r3
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2bd5      	cmp	r3, #213	; 0xd5
 8002c3c:	d145      	bne.n	8002cca <BSP_GYRO_Init+0xba>
  {	
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 8002c3e:	4b26      	ldr	r3, [pc, #152]	; (8002cd8 <BSP_GYRO_Init+0xc8>)
 8002c40:	4a24      	ldr	r2, [pc, #144]	; (8002cd4 <BSP_GYRO_Init+0xc4>)
 8002c42:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the gyroscope structure */
    Gyro_InitStructure.Power_Mode       = L3GD20_MODE_ACTIVE;
 8002c44:	2308      	movs	r3, #8
 8002c46:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = L3GD20_OUTPUT_DATARATE_1;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = L3GD20_AXES_ENABLE;
 8002c4c:	2307      	movs	r3, #7
 8002c4e:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = L3GD20_BANDWIDTH_4;
 8002c50:	2330      	movs	r3, #48	; 0x30
 8002c52:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 8002c54:	2300      	movs	r3, #0
 8002c56:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = L3GD20_BLE_LSB;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = L3GD20_FULLSCALE_500;
 8002c5c:	2310      	movs	r3, #16
 8002c5e:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8002c60:	793a      	ldrb	r2, [r7, #4]
 8002c62:	797b      	ldrb	r3, [r7, #5]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8002c68:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8002c6e:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8002c70:	4313      	orrs	r3, r2
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8002c76:	7a3a      	ldrb	r2, [r7, #8]
 8002c78:	7a7b      	ldrb	r3, [r7, #9]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 8002c7e:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8002c80:	4313      	orrs	r3, r2
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	021b      	lsls	r3, r3, #8
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	89bb      	ldrh	r3, [r7, #12]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	81bb      	strh	r3, [r7, #12]
    
    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 8002c90:	4b11      	ldr	r3, [pc, #68]	; (8002cd8 <BSP_GYRO_Init+0xc8>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	89ba      	ldrh	r2, [r7, #12]
 8002c98:	4610      	mov	r0, r2
 8002c9a:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = L3GD20_HPM_NORMAL_MODE_RES;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8002ca4:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 8002ca6:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 8002cae:	4b0a      	ldr	r3, [pc, #40]	; (8002cd8 <BSP_GYRO_Init+0xc8>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb4:	89ba      	ldrh	r2, [r7, #12]
 8002cb6:	b2d2      	uxtb	r2, r2
 8002cb8:	4610      	mov	r0, r2
 8002cba:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 8002cbc:	4b06      	ldr	r3, [pc, #24]	; (8002cd8 <BSP_GYRO_Init+0xc8>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc2:	2010      	movs	r0, #16
 8002cc4:	4798      	blx	r3

    ret = GYRO_OK;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	73fb      	strb	r3, [r7, #15]
    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);

    ret = GYRO_OK;
  }
#endif /* USE_STM32F429I_DISCOVERY_REVD */
  return ret;
 8002cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3710      	adds	r7, #16
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	2000003c 	.word	0x2000003c
 8002cd8:	20000728 	.word	0x20000728

08002cdc <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float *pfData)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv->GetXYZ!= NULL)
 8002ce4:	4b06      	ldr	r3, [pc, #24]	; (8002d00 <BSP_GYRO_GetXYZ+0x24>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d004      	beq.n	8002cf8 <BSP_GYRO_GetXYZ+0x1c>
  {
    GyroscopeDrv->GetXYZ(pfData);
 8002cee:	4b04      	ldr	r3, [pc, #16]	; (8002d00 <BSP_GYRO_GetXYZ+0x24>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	4798      	blx	r3
  }
}
 8002cf8:	bf00      	nop
 8002cfa:	3708      	adds	r7, #8
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	20000728 	.word	0x20000728

08002d04 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8002d08:	4b2d      	ldr	r3, [pc, #180]	; (8002dc0 <BSP_LCD_Init+0xbc>)
 8002d0a:	4a2e      	ldr	r2, [pc, #184]	; (8002dc4 <BSP_LCD_Init+0xc0>)
 8002d0c:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8002d0e:	4b2c      	ldr	r3, [pc, #176]	; (8002dc0 <BSP_LCD_Init+0xbc>)
 8002d10:	2209      	movs	r2, #9
 8002d12:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8002d14:	4b2a      	ldr	r3, [pc, #168]	; (8002dc0 <BSP_LCD_Init+0xbc>)
 8002d16:	2201      	movs	r2, #1
 8002d18:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8002d1a:	4b29      	ldr	r3, [pc, #164]	; (8002dc0 <BSP_LCD_Init+0xbc>)
 8002d1c:	221d      	movs	r2, #29
 8002d1e:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8002d20:	4b27      	ldr	r3, [pc, #156]	; (8002dc0 <BSP_LCD_Init+0xbc>)
 8002d22:	2203      	movs	r2, #3
 8002d24:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8002d26:	4b26      	ldr	r3, [pc, #152]	; (8002dc0 <BSP_LCD_Init+0xbc>)
 8002d28:	f240 120d 	movw	r2, #269	; 0x10d
 8002d2c:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8002d2e:	4b24      	ldr	r3, [pc, #144]	; (8002dc0 <BSP_LCD_Init+0xbc>)
 8002d30:	f240 1243 	movw	r2, #323	; 0x143
 8002d34:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8002d36:	4b22      	ldr	r3, [pc, #136]	; (8002dc0 <BSP_LCD_Init+0xbc>)
 8002d38:	f240 1217 	movw	r2, #279	; 0x117
 8002d3c:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8002d3e:	4b20      	ldr	r3, [pc, #128]	; (8002dc0 <BSP_LCD_Init+0xbc>)
 8002d40:	f240 1247 	movw	r2, #327	; 0x147
 8002d44:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8002d46:	4b1e      	ldr	r3, [pc, #120]	; (8002dc0 <BSP_LCD_Init+0xbc>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8002d4e:	4b1c      	ldr	r3, [pc, #112]	; (8002dc0 <BSP_LCD_Init+0xbc>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8002d56:	4b1a      	ldr	r3, [pc, #104]	; (8002dc0 <BSP_LCD_Init+0xbc>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002d5e:	4b1a      	ldr	r3, [pc, #104]	; (8002dc8 <BSP_LCD_Init+0xc4>)
 8002d60:	2208      	movs	r2, #8
 8002d62:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002d64:	4b18      	ldr	r3, [pc, #96]	; (8002dc8 <BSP_LCD_Init+0xc4>)
 8002d66:	22c0      	movs	r2, #192	; 0xc0
 8002d68:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8002d6a:	4b17      	ldr	r3, [pc, #92]	; (8002dc8 <BSP_LCD_Init+0xc4>)
 8002d6c:	2204      	movs	r2, #4
 8002d6e:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002d70:	4b15      	ldr	r3, [pc, #84]	; (8002dc8 <BSP_LCD_Init+0xc4>)
 8002d72:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d76:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8002d78:	4813      	ldr	r0, [pc, #76]	; (8002dc8 <BSP_LCD_Init+0xc4>)
 8002d7a:	f004 fa39 	bl	80071f0 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002d7e:	4b10      	ldr	r3, [pc, #64]	; (8002dc0 <BSP_LCD_Init+0xbc>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002d84:	4b0e      	ldr	r3, [pc, #56]	; (8002dc0 <BSP_LCD_Init+0xbc>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002d8a:	4b0d      	ldr	r3, [pc, #52]	; (8002dc0 <BSP_LCD_Init+0xbc>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002d90:	4b0b      	ldr	r3, [pc, #44]	; (8002dc0 <BSP_LCD_Init+0xbc>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8002d96:	f000 fbf9 	bl	800358c <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8002d9a:	4809      	ldr	r0, [pc, #36]	; (8002dc0 <BSP_LCD_Init+0xbc>)
 8002d9c:	f002 f81c 	bl	8004dd8 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8002da0:	4b0a      	ldr	r3, [pc, #40]	; (8002dcc <BSP_LCD_Init+0xc8>)
 8002da2:	4a0b      	ldr	r2, [pc, #44]	; (8002dd0 <BSP_LCD_Init+0xcc>)
 8002da4:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8002da6:	4b09      	ldr	r3, [pc, #36]	; (8002dcc <BSP_LCD_Init+0xc8>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8002dae:	f000 fddb 	bl	8003968 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002db2:	4808      	ldr	r0, [pc, #32]	; (8002dd4 <BSP_LCD_Init+0xd0>)
 8002db4:	f000 f8ce 	bl	8002f54 <BSP_LCD_SetFont>

  return LCD_OK;
 8002db8:	2300      	movs	r3, #0
}  
 8002dba:	4618      	mov	r0, r3
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	2000072c 	.word	0x2000072c
 8002dc4:	40016800 	.word	0x40016800
 8002dc8:	20000814 	.word	0x20000814
 8002dcc:	20000860 	.word	0x20000860
 8002dd0:	20000004 	.word	0x20000004
 8002dd4:	20000074 	.word	0x20000074

08002dd8 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8002ddc:	4b03      	ldr	r3, [pc, #12]	; (8002dec <BSP_LCD_GetXSize+0x14>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de2:	4798      	blx	r3
 8002de4:	4603      	mov	r3, r0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	20000860 	.word	0x20000860

08002df0 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8002df4:	4b03      	ldr	r3, [pc, #12]	; (8002e04 <BSP_LCD_GetYSize+0x14>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfa:	4798      	blx	r3
 8002dfc:	4603      	mov	r3, r0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	20000860 	.word	0x20000860

08002e08 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b090      	sub	sp, #64	; 0x40
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	4603      	mov	r3, r0
 8002e10:	6039      	str	r1, [r7, #0]
 8002e12:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8002e14:	2300      	movs	r3, #0
 8002e16:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8002e18:	f7ff ffde 	bl	8002dd8 <BSP_LCD_GetXSize>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8002e20:	2300      	movs	r3, #0
 8002e22:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002e24:	f7ff ffe4 	bl	8002df0 <BSP_LCD_GetYSize>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8002e34:	23ff      	movs	r3, #255	; 0xff
 8002e36:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8002e42:	2300      	movs	r3, #0
 8002e44:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002e4e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002e52:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002e54:	2307      	movs	r3, #7
 8002e56:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8002e58:	f7ff ffbe 	bl	8002dd8 <BSP_LCD_GetXSize>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8002e60:	f7ff ffc6 	bl	8002df0 <BSP_LCD_GetYSize>
 8002e64:	4603      	mov	r3, r0
 8002e66:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8002e68:	88fa      	ldrh	r2, [r7, #6]
 8002e6a:	f107 030c 	add.w	r3, r7, #12
 8002e6e:	4619      	mov	r1, r3
 8002e70:	4814      	ldr	r0, [pc, #80]	; (8002ec4 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002e72:	f002 f88b 	bl	8004f8c <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002e76:	88fa      	ldrh	r2, [r7, #6]
 8002e78:	4913      	ldr	r1, [pc, #76]	; (8002ec8 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	4413      	add	r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	440b      	add	r3, r1
 8002e84:	3304      	adds	r3, #4
 8002e86:	f04f 32ff 	mov.w	r2, #4294967295
 8002e8a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002e8c:	88fa      	ldrh	r2, [r7, #6]
 8002e8e:	490e      	ldr	r1, [pc, #56]	; (8002ec8 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002e90:	4613      	mov	r3, r2
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	4413      	add	r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	440b      	add	r3, r1
 8002e9a:	3308      	adds	r3, #8
 8002e9c:	4a0b      	ldr	r2, [pc, #44]	; (8002ecc <BSP_LCD_LayerDefaultInit+0xc4>)
 8002e9e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002ea0:	88fa      	ldrh	r2, [r7, #6]
 8002ea2:	4909      	ldr	r1, [pc, #36]	; (8002ec8 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	4413      	add	r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	440b      	add	r3, r1
 8002eae:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002eb2:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8002eb4:	4803      	ldr	r0, [pc, #12]	; (8002ec4 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002eb6:	f002 f8a7 	bl	8005008 <HAL_LTDC_EnableDither>
}
 8002eba:	bf00      	nop
 8002ebc:	3740      	adds	r7, #64	; 0x40
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	2000072c 	.word	0x2000072c
 8002ec8:	20000848 	.word	0x20000848
 8002ecc:	20000074 	.word	0x20000074

08002ed0 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002ed8:	4a04      	ldr	r2, [pc, #16]	; (8002eec <BSP_LCD_SelectLayer+0x1c>)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6013      	str	r3, [r2, #0]
}
 8002ede:	bf00      	nop
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	20000844 	.word	0x20000844

08002ef0 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002ef8:	4b07      	ldr	r3, [pc, #28]	; (8002f18 <BSP_LCD_SetTextColor+0x28>)
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	4907      	ldr	r1, [pc, #28]	; (8002f1c <BSP_LCD_SetTextColor+0x2c>)
 8002efe:	4613      	mov	r3, r2
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	4413      	add	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	440b      	add	r3, r1
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	601a      	str	r2, [r3, #0]
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr
 8002f18:	20000844 	.word	0x20000844
 8002f1c:	20000848 	.word	0x20000848

08002f20 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002f28:	4b08      	ldr	r3, [pc, #32]	; (8002f4c <BSP_LCD_SetBackColor+0x2c>)
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	4908      	ldr	r1, [pc, #32]	; (8002f50 <BSP_LCD_SetBackColor+0x30>)
 8002f2e:	4613      	mov	r3, r2
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	4413      	add	r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	440b      	add	r3, r1
 8002f38:	3304      	adds	r3, #4
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	601a      	str	r2, [r3, #0]
}
 8002f3e:	bf00      	nop
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	20000844 	.word	0x20000844
 8002f50:	20000848 	.word	0x20000848

08002f54 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8002f5c:	4b08      	ldr	r3, [pc, #32]	; (8002f80 <BSP_LCD_SetFont+0x2c>)
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	4908      	ldr	r1, [pc, #32]	; (8002f84 <BSP_LCD_SetFont+0x30>)
 8002f62:	4613      	mov	r3, r2
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	4413      	add	r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	440b      	add	r3, r1
 8002f6c:	3308      	adds	r3, #8
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	601a      	str	r2, [r3, #0]
}
 8002f72:	bf00      	nop
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	20000844 	.word	0x20000844
 8002f84:	20000848 	.word	0x20000848

08002f88 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af02      	add	r7, sp, #8
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002f90:	4b0f      	ldr	r3, [pc, #60]	; (8002fd0 <BSP_LCD_Clear+0x48>)
 8002f92:	681c      	ldr	r4, [r3, #0]
 8002f94:	4b0e      	ldr	r3, [pc, #56]	; (8002fd0 <BSP_LCD_Clear+0x48>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a0e      	ldr	r2, [pc, #56]	; (8002fd4 <BSP_LCD_Clear+0x4c>)
 8002f9a:	2134      	movs	r1, #52	; 0x34
 8002f9c:	fb01 f303 	mul.w	r3, r1, r3
 8002fa0:	4413      	add	r3, r2
 8002fa2:	335c      	adds	r3, #92	; 0x5c
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	461e      	mov	r6, r3
 8002fa8:	f7ff ff16 	bl	8002dd8 <BSP_LCD_GetXSize>
 8002fac:	4605      	mov	r5, r0
 8002fae:	f7ff ff1f 	bl	8002df0 <BSP_LCD_GetYSize>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	9301      	str	r3, [sp, #4]
 8002fb8:	2300      	movs	r3, #0
 8002fba:	9300      	str	r3, [sp, #0]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	462a      	mov	r2, r5
 8002fc0:	4631      	mov	r1, r6
 8002fc2:	4620      	mov	r0, r4
 8002fc4:	f000 fc98 	bl	80038f8 <FillBuffer>
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fd0:	20000844 	.word	0x20000844
 8002fd4:	2000072c 	.word	0x2000072c

08002fd8 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002fd8:	b590      	push	{r4, r7, lr}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	4603      	mov	r3, r0
 8002fe0:	80fb      	strh	r3, [r7, #6]
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	80bb      	strh	r3, [r7, #4]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002fea:	4b1b      	ldr	r3, [pc, #108]	; (8003058 <BSP_LCD_DisplayChar+0x80>)
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	491b      	ldr	r1, [pc, #108]	; (800305c <BSP_LCD_DisplayChar+0x84>)
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	4413      	add	r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	440b      	add	r3, r1
 8002ffa:	3308      	adds	r3, #8
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	6819      	ldr	r1, [r3, #0]
 8003000:	78fb      	ldrb	r3, [r7, #3]
 8003002:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003006:	4b14      	ldr	r3, [pc, #80]	; (8003058 <BSP_LCD_DisplayChar+0x80>)
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	4c14      	ldr	r4, [pc, #80]	; (800305c <BSP_LCD_DisplayChar+0x84>)
 800300c:	4613      	mov	r3, r2
 800300e:	005b      	lsls	r3, r3, #1
 8003010:	4413      	add	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4423      	add	r3, r4
 8003016:	3308      	adds	r3, #8
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800301c:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003020:	4b0d      	ldr	r3, [pc, #52]	; (8003058 <BSP_LCD_DisplayChar+0x80>)
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	4c0d      	ldr	r4, [pc, #52]	; (800305c <BSP_LCD_DisplayChar+0x84>)
 8003026:	4613      	mov	r3, r2
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	4413      	add	r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	4423      	add	r3, r4
 8003030:	3308      	adds	r3, #8
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	889b      	ldrh	r3, [r3, #4]
 8003036:	3307      	adds	r3, #7
 8003038:	2b00      	cmp	r3, #0
 800303a:	da00      	bge.n	800303e <BSP_LCD_DisplayChar+0x66>
 800303c:	3307      	adds	r3, #7
 800303e:	10db      	asrs	r3, r3, #3
 8003040:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003044:	18ca      	adds	r2, r1, r3
 8003046:	88b9      	ldrh	r1, [r7, #4]
 8003048:	88fb      	ldrh	r3, [r7, #6]
 800304a:	4618      	mov	r0, r3
 800304c:	f000 fb9a 	bl	8003784 <DrawChar>
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	bd90      	pop	{r4, r7, pc}
 8003058:	20000844 	.word	0x20000844
 800305c:	20000848 	.word	0x20000848

08003060 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8003060:	b5b0      	push	{r4, r5, r7, lr}
 8003062:	b088      	sub	sp, #32
 8003064:	af00      	add	r7, sp, #0
 8003066:	60ba      	str	r2, [r7, #8]
 8003068:	461a      	mov	r2, r3
 800306a:	4603      	mov	r3, r0
 800306c:	81fb      	strh	r3, [r7, #14]
 800306e:	460b      	mov	r3, r1
 8003070:	81bb      	strh	r3, [r7, #12]
 8003072:	4613      	mov	r3, r2
 8003074:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8003076:	2301      	movs	r3, #1
 8003078:	83fb      	strh	r3, [r7, #30]
 800307a:	2300      	movs	r3, #0
 800307c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800307e:	2300      	movs	r3, #0
 8003080:	61bb      	str	r3, [r7, #24]
 8003082:	2300      	movs	r3, #0
 8003084:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800308a:	e002      	b.n	8003092 <BSP_LCD_DisplayStringAt+0x32>
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	3301      	adds	r3, #1
 8003090:	61bb      	str	r3, [r7, #24]
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	1c5a      	adds	r2, r3, #1
 8003096:	617a      	str	r2, [r7, #20]
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1f6      	bne.n	800308c <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800309e:	f7ff fe9b 	bl	8002dd8 <BSP_LCD_GetXSize>
 80030a2:	4601      	mov	r1, r0
 80030a4:	4b4b      	ldr	r3, [pc, #300]	; (80031d4 <BSP_LCD_DisplayStringAt+0x174>)
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	484b      	ldr	r0, [pc, #300]	; (80031d8 <BSP_LCD_DisplayStringAt+0x178>)
 80030aa:	4613      	mov	r3, r2
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	4413      	add	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	4403      	add	r3, r0
 80030b4:	3308      	adds	r3, #8
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	889b      	ldrh	r3, [r3, #4]
 80030ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80030be:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 80030c0:	79fb      	ldrb	r3, [r7, #7]
 80030c2:	2b03      	cmp	r3, #3
 80030c4:	d01c      	beq.n	8003100 <BSP_LCD_DisplayStringAt+0xa0>
 80030c6:	2b03      	cmp	r3, #3
 80030c8:	dc33      	bgt.n	8003132 <BSP_LCD_DisplayStringAt+0xd2>
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d002      	beq.n	80030d4 <BSP_LCD_DisplayStringAt+0x74>
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d019      	beq.n	8003106 <BSP_LCD_DisplayStringAt+0xa6>
 80030d2:	e02e      	b.n	8003132 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	1ad1      	subs	r1, r2, r3
 80030da:	4b3e      	ldr	r3, [pc, #248]	; (80031d4 <BSP_LCD_DisplayStringAt+0x174>)
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	483e      	ldr	r0, [pc, #248]	; (80031d8 <BSP_LCD_DisplayStringAt+0x178>)
 80030e0:	4613      	mov	r3, r2
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	4413      	add	r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	4403      	add	r3, r0
 80030ea:	3308      	adds	r3, #8
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	889b      	ldrh	r3, [r3, #4]
 80030f0:	fb01 f303 	mul.w	r3, r1, r3
 80030f4:	085b      	lsrs	r3, r3, #1
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	89fb      	ldrh	r3, [r7, #14]
 80030fa:	4413      	add	r3, r2
 80030fc:	83fb      	strh	r3, [r7, #30]
      break;
 80030fe:	e01b      	b.n	8003138 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8003100:	89fb      	ldrh	r3, [r7, #14]
 8003102:	83fb      	strh	r3, [r7, #30]
      break;
 8003104:	e018      	b.n	8003138 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8003106:	693a      	ldr	r2, [r7, #16]
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	b299      	uxth	r1, r3
 800310e:	4b31      	ldr	r3, [pc, #196]	; (80031d4 <BSP_LCD_DisplayStringAt+0x174>)
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	4831      	ldr	r0, [pc, #196]	; (80031d8 <BSP_LCD_DisplayStringAt+0x178>)
 8003114:	4613      	mov	r3, r2
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	4413      	add	r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	4403      	add	r3, r0
 800311e:	3308      	adds	r3, #8
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	889b      	ldrh	r3, [r3, #4]
 8003124:	fb11 f303 	smulbb	r3, r1, r3
 8003128:	b29a      	uxth	r2, r3
 800312a:	89fb      	ldrh	r3, [r7, #14]
 800312c:	4413      	add	r3, r2
 800312e:	83fb      	strh	r3, [r7, #30]
      break;
 8003130:	e002      	b.n	8003138 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 8003132:	89fb      	ldrh	r3, [r7, #14]
 8003134:	83fb      	strh	r3, [r7, #30]
      break;
 8003136:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003138:	e01a      	b.n	8003170 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	781a      	ldrb	r2, [r3, #0]
 800313e:	89b9      	ldrh	r1, [r7, #12]
 8003140:	8bfb      	ldrh	r3, [r7, #30]
 8003142:	4618      	mov	r0, r3
 8003144:	f7ff ff48 	bl	8002fd8 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8003148:	4b22      	ldr	r3, [pc, #136]	; (80031d4 <BSP_LCD_DisplayStringAt+0x174>)
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	4922      	ldr	r1, [pc, #136]	; (80031d8 <BSP_LCD_DisplayStringAt+0x178>)
 800314e:	4613      	mov	r3, r2
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	4413      	add	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	440b      	add	r3, r1
 8003158:	3308      	adds	r3, #8
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	889a      	ldrh	r2, [r3, #4]
 800315e:	8bfb      	ldrh	r3, [r7, #30]
 8003160:	4413      	add	r3, r2
 8003162:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	3301      	adds	r3, #1
 8003168:	60bb      	str	r3, [r7, #8]
    i++;
 800316a:	8bbb      	ldrh	r3, [r7, #28]
 800316c:	3301      	adds	r3, #1
 800316e:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	2b00      	cmp	r3, #0
 8003176:	bf14      	ite	ne
 8003178:	2301      	movne	r3, #1
 800317a:	2300      	moveq	r3, #0
 800317c:	b2dc      	uxtb	r4, r3
 800317e:	f7ff fe2b 	bl	8002dd8 <BSP_LCD_GetXSize>
 8003182:	8bb9      	ldrh	r1, [r7, #28]
 8003184:	4b13      	ldr	r3, [pc, #76]	; (80031d4 <BSP_LCD_DisplayStringAt+0x174>)
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	4d13      	ldr	r5, [pc, #76]	; (80031d8 <BSP_LCD_DisplayStringAt+0x178>)
 800318a:	4613      	mov	r3, r2
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	4413      	add	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	442b      	add	r3, r5
 8003194:	3308      	adds	r3, #8
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	889b      	ldrh	r3, [r3, #4]
 800319a:	fb01 f303 	mul.w	r3, r1, r3
 800319e:	1ac3      	subs	r3, r0, r3
 80031a0:	b299      	uxth	r1, r3
 80031a2:	4b0c      	ldr	r3, [pc, #48]	; (80031d4 <BSP_LCD_DisplayStringAt+0x174>)
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	480c      	ldr	r0, [pc, #48]	; (80031d8 <BSP_LCD_DisplayStringAt+0x178>)
 80031a8:	4613      	mov	r3, r2
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	4413      	add	r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	4403      	add	r3, r0
 80031b2:	3308      	adds	r3, #8
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	889b      	ldrh	r3, [r3, #4]
 80031b8:	4299      	cmp	r1, r3
 80031ba:	bf2c      	ite	cs
 80031bc:	2301      	movcs	r3, #1
 80031be:	2300      	movcc	r3, #0
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	4023      	ands	r3, r4
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1b7      	bne.n	800313a <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 80031ca:	bf00      	nop
 80031cc:	bf00      	nop
 80031ce:	3720      	adds	r7, #32
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bdb0      	pop	{r4, r5, r7, pc}
 80031d4:	20000844 	.word	0x20000844
 80031d8:	20000848 	.word	0x20000848

080031dc <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80031dc:	b5b0      	push	{r4, r5, r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af02      	add	r7, sp, #8
 80031e2:	4603      	mov	r3, r0
 80031e4:	80fb      	strh	r3, [r7, #6]
 80031e6:	460b      	mov	r3, r1
 80031e8:	80bb      	strh	r3, [r7, #4]
 80031ea:	4613      	mov	r3, r2
 80031ec:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 80031ee:	2300      	movs	r3, #0
 80031f0:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80031f2:	4b16      	ldr	r3, [pc, #88]	; (800324c <BSP_LCD_DrawHLine+0x70>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a16      	ldr	r2, [pc, #88]	; (8003250 <BSP_LCD_DrawHLine+0x74>)
 80031f8:	2134      	movs	r1, #52	; 0x34
 80031fa:	fb01 f303 	mul.w	r3, r1, r3
 80031fe:	4413      	add	r3, r2
 8003200:	335c      	adds	r3, #92	; 0x5c
 8003202:	681c      	ldr	r4, [r3, #0]
 8003204:	f7ff fde8 	bl	8002dd8 <BSP_LCD_GetXSize>
 8003208:	4602      	mov	r2, r0
 800320a:	88bb      	ldrh	r3, [r7, #4]
 800320c:	fb03 f202 	mul.w	r2, r3, r2
 8003210:	88fb      	ldrh	r3, [r7, #6]
 8003212:	4413      	add	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	4423      	add	r3, r4
 8003218:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 800321a:	4b0c      	ldr	r3, [pc, #48]	; (800324c <BSP_LCD_DrawHLine+0x70>)
 800321c:	6818      	ldr	r0, [r3, #0]
 800321e:	68f9      	ldr	r1, [r7, #12]
 8003220:	887c      	ldrh	r4, [r7, #2]
 8003222:	4b0a      	ldr	r3, [pc, #40]	; (800324c <BSP_LCD_DrawHLine+0x70>)
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	4d0b      	ldr	r5, [pc, #44]	; (8003254 <BSP_LCD_DrawHLine+0x78>)
 8003228:	4613      	mov	r3, r2
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	4413      	add	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	442b      	add	r3, r5
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	9301      	str	r3, [sp, #4]
 8003236:	2300      	movs	r3, #0
 8003238:	9300      	str	r3, [sp, #0]
 800323a:	2301      	movs	r3, #1
 800323c:	4622      	mov	r2, r4
 800323e:	f000 fb5b 	bl	80038f8 <FillBuffer>
}
 8003242:	bf00      	nop
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bdb0      	pop	{r4, r5, r7, pc}
 800324a:	bf00      	nop
 800324c:	20000844 	.word	0x20000844
 8003250:	2000072c 	.word	0x2000072c
 8003254:	20000848 	.word	0x20000848

08003258 <BSP_LCD_DrawCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003258:	b590      	push	{r4, r7, lr}
 800325a:	b087      	sub	sp, #28
 800325c:	af00      	add	r7, sp, #0
 800325e:	4603      	mov	r3, r0
 8003260:	80fb      	strh	r3, [r7, #6]
 8003262:	460b      	mov	r3, r1
 8003264:	80bb      	strh	r3, [r7, #4]
 8003266:	4613      	mov	r3, r2
 8003268:	807b      	strh	r3, [r7, #2]
  int32_t  d;/* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 800326a:	887b      	ldrh	r3, [r7, #2]
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	f1c3 0303 	rsb	r3, r3, #3
 8003272:	617b      	str	r3, [r7, #20]
  curx = 0;
 8003274:	2300      	movs	r3, #0
 8003276:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8003278:	887b      	ldrh	r3, [r7, #2]
 800327a:	60fb      	str	r3, [r7, #12]
  
  while (curx <= cury)
 800327c:	e0c7      	b.n	800340e <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	b29a      	uxth	r2, r3
 8003282:	88fb      	ldrh	r3, [r7, #6]
 8003284:	4413      	add	r3, r2
 8003286:	b298      	uxth	r0, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	b29b      	uxth	r3, r3
 800328c:	88ba      	ldrh	r2, [r7, #4]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	b299      	uxth	r1, r3
 8003292:	4b64      	ldr	r3, [pc, #400]	; (8003424 <BSP_LCD_DrawCircle+0x1cc>)
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	4c64      	ldr	r4, [pc, #400]	; (8003428 <BSP_LCD_DrawCircle+0x1d0>)
 8003298:	4613      	mov	r3, r2
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	4413      	add	r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	4423      	add	r3, r4
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	461a      	mov	r2, r3
 80032a6:	f000 fa47 	bl	8003738 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	88fa      	ldrh	r2, [r7, #6]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	b298      	uxth	r0, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	88ba      	ldrh	r2, [r7, #4]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	b299      	uxth	r1, r3
 80032be:	4b59      	ldr	r3, [pc, #356]	; (8003424 <BSP_LCD_DrawCircle+0x1cc>)
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	4c59      	ldr	r4, [pc, #356]	; (8003428 <BSP_LCD_DrawCircle+0x1d0>)
 80032c4:	4613      	mov	r3, r2
 80032c6:	005b      	lsls	r3, r3, #1
 80032c8:	4413      	add	r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4423      	add	r3, r4
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	461a      	mov	r2, r3
 80032d2:	f000 fa31 	bl	8003738 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	b29a      	uxth	r2, r3
 80032da:	88fb      	ldrh	r3, [r7, #6]
 80032dc:	4413      	add	r3, r2
 80032de:	b298      	uxth	r0, r3
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	88ba      	ldrh	r2, [r7, #4]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	b299      	uxth	r1, r3
 80032ea:	4b4e      	ldr	r3, [pc, #312]	; (8003424 <BSP_LCD_DrawCircle+0x1cc>)
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	4c4e      	ldr	r4, [pc, #312]	; (8003428 <BSP_LCD_DrawCircle+0x1d0>)
 80032f0:	4613      	mov	r3, r2
 80032f2:	005b      	lsls	r3, r3, #1
 80032f4:	4413      	add	r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	4423      	add	r3, r4
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	461a      	mov	r2, r3
 80032fe:	f000 fa1b 	bl	8003738 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	b29b      	uxth	r3, r3
 8003306:	88fa      	ldrh	r2, [r7, #6]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	b298      	uxth	r0, r3
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	b29b      	uxth	r3, r3
 8003310:	88ba      	ldrh	r2, [r7, #4]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	b299      	uxth	r1, r3
 8003316:	4b43      	ldr	r3, [pc, #268]	; (8003424 <BSP_LCD_DrawCircle+0x1cc>)
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	4c43      	ldr	r4, [pc, #268]	; (8003428 <BSP_LCD_DrawCircle+0x1d0>)
 800331c:	4613      	mov	r3, r2
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	4413      	add	r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	4423      	add	r3, r4
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	461a      	mov	r2, r3
 800332a:	f000 fa05 	bl	8003738 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	b29a      	uxth	r2, r3
 8003332:	88fb      	ldrh	r3, [r7, #6]
 8003334:	4413      	add	r3, r2
 8003336:	b298      	uxth	r0, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	b29a      	uxth	r2, r3
 800333c:	88bb      	ldrh	r3, [r7, #4]
 800333e:	4413      	add	r3, r2
 8003340:	b299      	uxth	r1, r3
 8003342:	4b38      	ldr	r3, [pc, #224]	; (8003424 <BSP_LCD_DrawCircle+0x1cc>)
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	4c38      	ldr	r4, [pc, #224]	; (8003428 <BSP_LCD_DrawCircle+0x1d0>)
 8003348:	4613      	mov	r3, r2
 800334a:	005b      	lsls	r3, r3, #1
 800334c:	4413      	add	r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	4423      	add	r3, r4
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	461a      	mov	r2, r3
 8003356:	f000 f9ef 	bl	8003738 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	b29b      	uxth	r3, r3
 800335e:	88fa      	ldrh	r2, [r7, #6]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	b298      	uxth	r0, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	b29a      	uxth	r2, r3
 8003368:	88bb      	ldrh	r3, [r7, #4]
 800336a:	4413      	add	r3, r2
 800336c:	b299      	uxth	r1, r3
 800336e:	4b2d      	ldr	r3, [pc, #180]	; (8003424 <BSP_LCD_DrawCircle+0x1cc>)
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	4c2d      	ldr	r4, [pc, #180]	; (8003428 <BSP_LCD_DrawCircle+0x1d0>)
 8003374:	4613      	mov	r3, r2
 8003376:	005b      	lsls	r3, r3, #1
 8003378:	4413      	add	r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	4423      	add	r3, r4
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	461a      	mov	r2, r3
 8003382:	f000 f9d9 	bl	8003738 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	b29a      	uxth	r2, r3
 800338a:	88fb      	ldrh	r3, [r7, #6]
 800338c:	4413      	add	r3, r2
 800338e:	b298      	uxth	r0, r3
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	b29a      	uxth	r2, r3
 8003394:	88bb      	ldrh	r3, [r7, #4]
 8003396:	4413      	add	r3, r2
 8003398:	b299      	uxth	r1, r3
 800339a:	4b22      	ldr	r3, [pc, #136]	; (8003424 <BSP_LCD_DrawCircle+0x1cc>)
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	4c22      	ldr	r4, [pc, #136]	; (8003428 <BSP_LCD_DrawCircle+0x1d0>)
 80033a0:	4613      	mov	r3, r2
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	4413      	add	r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	4423      	add	r3, r4
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	461a      	mov	r2, r3
 80033ae:	f000 f9c3 	bl	8003738 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);   
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	88fa      	ldrh	r2, [r7, #6]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	b298      	uxth	r0, r3
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	b29a      	uxth	r2, r3
 80033c0:	88bb      	ldrh	r3, [r7, #4]
 80033c2:	4413      	add	r3, r2
 80033c4:	b299      	uxth	r1, r3
 80033c6:	4b17      	ldr	r3, [pc, #92]	; (8003424 <BSP_LCD_DrawCircle+0x1cc>)
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	4c17      	ldr	r4, [pc, #92]	; (8003428 <BSP_LCD_DrawCircle+0x1d0>)
 80033cc:	4613      	mov	r3, r2
 80033ce:	005b      	lsls	r3, r3, #1
 80033d0:	4413      	add	r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	4423      	add	r3, r4
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	461a      	mov	r2, r3
 80033da:	f000 f9ad 	bl	8003738 <BSP_LCD_DrawPixel>

    if (d < 0)
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	da06      	bge.n	80033f2 <BSP_LCD_DrawCircle+0x19a>
    { 
      d += (curx << 2) + 6;
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	009a      	lsls	r2, r3, #2
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	4413      	add	r3, r2
 80033ec:	3306      	adds	r3, #6
 80033ee:	617b      	str	r3, [r7, #20]
 80033f0:	e00a      	b.n	8003408 <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	009a      	lsls	r2, r3, #2
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	4413      	add	r3, r2
 80033fe:	330a      	adds	r3, #10
 8003400:	617b      	str	r3, [r7, #20]
      cury--;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	3b01      	subs	r3, #1
 8003406:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	3301      	adds	r3, #1
 800340c:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	429a      	cmp	r2, r3
 8003414:	f67f af33 	bls.w	800327e <BSP_LCD_DrawCircle+0x26>
  } 
}
 8003418:	bf00      	nop
 800341a:	bf00      	nop
 800341c:	371c      	adds	r7, #28
 800341e:	46bd      	mov	sp, r7
 8003420:	bd90      	pop	{r4, r7, pc}
 8003422:	bf00      	nop
 8003424:	20000844 	.word	0x20000844
 8003428:	20000848 	.word	0x20000848

0800342c <BSP_LCD_FillCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af00      	add	r7, sp, #0
 8003432:	4603      	mov	r3, r0
 8003434:	80fb      	strh	r3, [r7, #6]
 8003436:	460b      	mov	r3, r1
 8003438:	80bb      	strh	r3, [r7, #4]
 800343a:	4613      	mov	r3, r2
 800343c:	807b      	strh	r3, [r7, #2]
  int32_t  d;    /* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 800343e:	887b      	ldrh	r3, [r7, #2]
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	f1c3 0303 	rsb	r3, r3, #3
 8003446:	617b      	str	r3, [r7, #20]

  curx = 0;
 8003448:	2300      	movs	r3, #0
 800344a:	613b      	str	r3, [r7, #16]
  cury = Radius;
 800344c:	887b      	ldrh	r3, [r7, #2]
 800344e:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003450:	4b44      	ldr	r3, [pc, #272]	; (8003564 <BSP_LCD_FillCircle+0x138>)
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	4944      	ldr	r1, [pc, #272]	; (8003568 <BSP_LCD_FillCircle+0x13c>)
 8003456:	4613      	mov	r3, r2
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	4413      	add	r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	440b      	add	r3, r1
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4618      	mov	r0, r3
 8003464:	f7ff fd44 	bl	8002ef0 <BSP_LCD_SetTextColor>

  while (curx <= cury)
 8003468:	e061      	b.n	800352e <BSP_LCD_FillCircle+0x102>
  {
    if(cury > 0) 
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d021      	beq.n	80034b4 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2*cury);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	b29b      	uxth	r3, r3
 8003474:	88fa      	ldrh	r2, [r7, #6]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	b298      	uxth	r0, r3
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	b29a      	uxth	r2, r3
 800347e:	88bb      	ldrh	r3, [r7, #4]
 8003480:	4413      	add	r3, r2
 8003482:	b299      	uxth	r1, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	b29b      	uxth	r3, r3
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	b29b      	uxth	r3, r3
 800348c:	461a      	mov	r2, r3
 800348e:	f7ff fea5 	bl	80031dc <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2*cury);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	b29b      	uxth	r3, r3
 8003496:	88fa      	ldrh	r2, [r7, #6]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	b298      	uxth	r0, r3
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	b29b      	uxth	r3, r3
 80034a0:	88ba      	ldrh	r2, [r7, #4]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	b299      	uxth	r1, r3
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	461a      	mov	r2, r3
 80034b0:	f7ff fe94 	bl	80031dc <BSP_LCD_DrawHLine>
    }

    if(curx > 0) 
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d021      	beq.n	80034fe <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2*curx);
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	b29b      	uxth	r3, r3
 80034be:	88fa      	ldrh	r2, [r7, #6]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	b298      	uxth	r0, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	88ba      	ldrh	r2, [r7, #4]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	b299      	uxth	r1, r3
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	005b      	lsls	r3, r3, #1
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	461a      	mov	r2, r3
 80034d8:	f7ff fe80 	bl	80031dc <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2*curx);
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	b29b      	uxth	r3, r3
 80034e0:	88fa      	ldrh	r2, [r7, #6]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	b298      	uxth	r0, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	88bb      	ldrh	r3, [r7, #4]
 80034ec:	4413      	add	r3, r2
 80034ee:	b299      	uxth	r1, r3
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	461a      	mov	r2, r3
 80034fa:	f7ff fe6f 	bl	80031dc <BSP_LCD_DrawHLine>
    }
    if (d < 0)
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	2b00      	cmp	r3, #0
 8003502:	da06      	bge.n	8003512 <BSP_LCD_FillCircle+0xe6>
    { 
      d += (curx << 2) + 6;
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	009a      	lsls	r2, r3, #2
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	4413      	add	r3, r2
 800350c:	3306      	adds	r3, #6
 800350e:	617b      	str	r3, [r7, #20]
 8003510:	e00a      	b.n	8003528 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	009a      	lsls	r2, r3, #2
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	4413      	add	r3, r2
 800351e:	330a      	adds	r3, #10
 8003520:	617b      	str	r3, [r7, #20]
      cury--;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	3b01      	subs	r3, #1
 8003526:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	3301      	adds	r3, #1
 800352c:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	429a      	cmp	r2, r3
 8003534:	d999      	bls.n	800346a <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003536:	4b0b      	ldr	r3, [pc, #44]	; (8003564 <BSP_LCD_FillCircle+0x138>)
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	490b      	ldr	r1, [pc, #44]	; (8003568 <BSP_LCD_FillCircle+0x13c>)
 800353c:	4613      	mov	r3, r2
 800353e:	005b      	lsls	r3, r3, #1
 8003540:	4413      	add	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	440b      	add	r3, r1
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4618      	mov	r0, r3
 800354a:	f7ff fcd1 	bl	8002ef0 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 800354e:	887a      	ldrh	r2, [r7, #2]
 8003550:	88b9      	ldrh	r1, [r7, #4]
 8003552:	88fb      	ldrh	r3, [r7, #6]
 8003554:	4618      	mov	r0, r3
 8003556:	f7ff fe7f 	bl	8003258 <BSP_LCD_DrawCircle>
}
 800355a:	bf00      	nop
 800355c:	3718      	adds	r7, #24
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	20000844 	.word	0x20000844
 8003568:	20000848 	.word	0x20000848

0800356c <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8003570:	4b05      	ldr	r3, [pc, #20]	; (8003588 <BSP_LCD_DisplayOn+0x1c>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d003      	beq.n	8003582 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 800357a:	4b03      	ldr	r3, [pc, #12]	; (8003588 <BSP_LCD_DisplayOn+0x1c>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	4798      	blx	r3
  }
}
 8003582:	bf00      	nop
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	20000860 	.word	0x20000860

0800358c <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b08e      	sub	sp, #56	; 0x38
 8003590:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003592:	2300      	movs	r3, #0
 8003594:	623b      	str	r3, [r7, #32]
 8003596:	4b61      	ldr	r3, [pc, #388]	; (800371c <BSP_LCD_MspInit+0x190>)
 8003598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359a:	4a60      	ldr	r2, [pc, #384]	; (800371c <BSP_LCD_MspInit+0x190>)
 800359c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80035a0:	6453      	str	r3, [r2, #68]	; 0x44
 80035a2:	4b5e      	ldr	r3, [pc, #376]	; (800371c <BSP_LCD_MspInit+0x190>)
 80035a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035aa:	623b      	str	r3, [r7, #32]
 80035ac:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 80035ae:	2300      	movs	r3, #0
 80035b0:	61fb      	str	r3, [r7, #28]
 80035b2:	4b5a      	ldr	r3, [pc, #360]	; (800371c <BSP_LCD_MspInit+0x190>)
 80035b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b6:	4a59      	ldr	r2, [pc, #356]	; (800371c <BSP_LCD_MspInit+0x190>)
 80035b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80035bc:	6313      	str	r3, [r2, #48]	; 0x30
 80035be:	4b57      	ldr	r3, [pc, #348]	; (800371c <BSP_LCD_MspInit+0x190>)
 80035c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035c6:	61fb      	str	r3, [r7, #28]
 80035c8:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80035ca:	2300      	movs	r3, #0
 80035cc:	61bb      	str	r3, [r7, #24]
 80035ce:	4b53      	ldr	r3, [pc, #332]	; (800371c <BSP_LCD_MspInit+0x190>)
 80035d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d2:	4a52      	ldr	r2, [pc, #328]	; (800371c <BSP_LCD_MspInit+0x190>)
 80035d4:	f043 0301 	orr.w	r3, r3, #1
 80035d8:	6313      	str	r3, [r2, #48]	; 0x30
 80035da:	4b50      	ldr	r3, [pc, #320]	; (800371c <BSP_LCD_MspInit+0x190>)
 80035dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	61bb      	str	r3, [r7, #24]
 80035e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80035e6:	2300      	movs	r3, #0
 80035e8:	617b      	str	r3, [r7, #20]
 80035ea:	4b4c      	ldr	r3, [pc, #304]	; (800371c <BSP_LCD_MspInit+0x190>)
 80035ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ee:	4a4b      	ldr	r2, [pc, #300]	; (800371c <BSP_LCD_MspInit+0x190>)
 80035f0:	f043 0302 	orr.w	r3, r3, #2
 80035f4:	6313      	str	r3, [r2, #48]	; 0x30
 80035f6:	4b49      	ldr	r3, [pc, #292]	; (800371c <BSP_LCD_MspInit+0x190>)
 80035f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	617b      	str	r3, [r7, #20]
 8003600:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003602:	2300      	movs	r3, #0
 8003604:	613b      	str	r3, [r7, #16]
 8003606:	4b45      	ldr	r3, [pc, #276]	; (800371c <BSP_LCD_MspInit+0x190>)
 8003608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360a:	4a44      	ldr	r2, [pc, #272]	; (800371c <BSP_LCD_MspInit+0x190>)
 800360c:	f043 0304 	orr.w	r3, r3, #4
 8003610:	6313      	str	r3, [r2, #48]	; 0x30
 8003612:	4b42      	ldr	r3, [pc, #264]	; (800371c <BSP_LCD_MspInit+0x190>)
 8003614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003616:	f003 0304 	and.w	r3, r3, #4
 800361a:	613b      	str	r3, [r7, #16]
 800361c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800361e:	2300      	movs	r3, #0
 8003620:	60fb      	str	r3, [r7, #12]
 8003622:	4b3e      	ldr	r3, [pc, #248]	; (800371c <BSP_LCD_MspInit+0x190>)
 8003624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003626:	4a3d      	ldr	r2, [pc, #244]	; (800371c <BSP_LCD_MspInit+0x190>)
 8003628:	f043 0308 	orr.w	r3, r3, #8
 800362c:	6313      	str	r3, [r2, #48]	; 0x30
 800362e:	4b3b      	ldr	r3, [pc, #236]	; (800371c <BSP_LCD_MspInit+0x190>)
 8003630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003632:	f003 0308 	and.w	r3, r3, #8
 8003636:	60fb      	str	r3, [r7, #12]
 8003638:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800363a:	2300      	movs	r3, #0
 800363c:	60bb      	str	r3, [r7, #8]
 800363e:	4b37      	ldr	r3, [pc, #220]	; (800371c <BSP_LCD_MspInit+0x190>)
 8003640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003642:	4a36      	ldr	r2, [pc, #216]	; (800371c <BSP_LCD_MspInit+0x190>)
 8003644:	f043 0320 	orr.w	r3, r3, #32
 8003648:	6313      	str	r3, [r2, #48]	; 0x30
 800364a:	4b34      	ldr	r3, [pc, #208]	; (800371c <BSP_LCD_MspInit+0x190>)
 800364c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364e:	f003 0320 	and.w	r3, r3, #32
 8003652:	60bb      	str	r3, [r7, #8]
 8003654:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003656:	2300      	movs	r3, #0
 8003658:	607b      	str	r3, [r7, #4]
 800365a:	4b30      	ldr	r3, [pc, #192]	; (800371c <BSP_LCD_MspInit+0x190>)
 800365c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365e:	4a2f      	ldr	r2, [pc, #188]	; (800371c <BSP_LCD_MspInit+0x190>)
 8003660:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003664:	6313      	str	r3, [r2, #48]	; 0x30
 8003666:	4b2d      	ldr	r3, [pc, #180]	; (800371c <BSP_LCD_MspInit+0x190>)
 8003668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800366e:	607b      	str	r3, [r7, #4]
 8003670:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8003672:	f641 0358 	movw	r3, #6232	; 0x1858
 8003676:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8003678:	2302      	movs	r3, #2
 800367a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800367c:	2300      	movs	r3, #0
 800367e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003680:	2302      	movs	r3, #2
 8003682:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8003684:	230e      	movs	r3, #14
 8003686:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003688:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800368c:	4619      	mov	r1, r3
 800368e:	4824      	ldr	r0, [pc, #144]	; (8003720 <BSP_LCD_MspInit+0x194>)
 8003690:	f001 f8d0 	bl	8004834 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8003694:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003698:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800369a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800369e:	4619      	mov	r1, r3
 80036a0:	4820      	ldr	r0, [pc, #128]	; (8003724 <BSP_LCD_MspInit+0x198>)
 80036a2:	f001 f8c7 	bl	8004834 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80036a6:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80036aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80036ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036b0:	4619      	mov	r1, r3
 80036b2:	481d      	ldr	r0, [pc, #116]	; (8003728 <BSP_LCD_MspInit+0x19c>)
 80036b4:	f001 f8be 	bl	8004834 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80036b8:	2348      	movs	r3, #72	; 0x48
 80036ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80036bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036c0:	4619      	mov	r1, r3
 80036c2:	481a      	ldr	r0, [pc, #104]	; (800372c <BSP_LCD_MspInit+0x1a0>)
 80036c4:	f001 f8b6 	bl	8004834 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80036c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 80036ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036d2:	4619      	mov	r1, r3
 80036d4:	4816      	ldr	r0, [pc, #88]	; (8003730 <BSP_LCD_MspInit+0x1a4>)
 80036d6:	f001 f8ad 	bl	8004834 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80036da:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80036de:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80036e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036e4:	4619      	mov	r1, r3
 80036e6:	4813      	ldr	r0, [pc, #76]	; (8003734 <BSP_LCD_MspInit+0x1a8>)
 80036e8:	f001 f8a4 	bl	8004834 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80036ec:	2303      	movs	r3, #3
 80036ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80036f0:	2309      	movs	r3, #9
 80036f2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80036f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036f8:	4619      	mov	r1, r3
 80036fa:	480a      	ldr	r0, [pc, #40]	; (8003724 <BSP_LCD_MspInit+0x198>)
 80036fc:	f001 f89a 	bl	8004834 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8003700:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003704:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003706:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800370a:	4619      	mov	r1, r3
 800370c:	4809      	ldr	r0, [pc, #36]	; (8003734 <BSP_LCD_MspInit+0x1a8>)
 800370e:	f001 f891 	bl	8004834 <HAL_GPIO_Init>
}
 8003712:	bf00      	nop
 8003714:	3738      	adds	r7, #56	; 0x38
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	40023800 	.word	0x40023800
 8003720:	40020000 	.word	0x40020000
 8003724:	40020400 	.word	0x40020400
 8003728:	40020800 	.word	0x40020800
 800372c:	40020c00 	.word	0x40020c00
 8003730:	40021400 	.word	0x40021400
 8003734:	40021800 	.word	0x40021800

08003738 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003738:	b5b0      	push	{r4, r5, r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	4603      	mov	r3, r0
 8003740:	603a      	str	r2, [r7, #0]
 8003742:	80fb      	strh	r3, [r7, #6]
 8003744:	460b      	mov	r3, r1
 8003746:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8003748:	4b0c      	ldr	r3, [pc, #48]	; (800377c <BSP_LCD_DrawPixel+0x44>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a0c      	ldr	r2, [pc, #48]	; (8003780 <BSP_LCD_DrawPixel+0x48>)
 800374e:	2134      	movs	r1, #52	; 0x34
 8003750:	fb01 f303 	mul.w	r3, r1, r3
 8003754:	4413      	add	r3, r2
 8003756:	335c      	adds	r3, #92	; 0x5c
 8003758:	681c      	ldr	r4, [r3, #0]
 800375a:	88bd      	ldrh	r5, [r7, #4]
 800375c:	f7ff fb3c 	bl	8002dd8 <BSP_LCD_GetXSize>
 8003760:	4603      	mov	r3, r0
 8003762:	fb03 f205 	mul.w	r2, r3, r5
 8003766:	88fb      	ldrh	r3, [r7, #6]
 8003768:	4413      	add	r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	4423      	add	r3, r4
 800376e:	461a      	mov	r2, r3
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	6013      	str	r3, [r2, #0]
}
 8003774:	bf00      	nop
 8003776:	3708      	adds	r7, #8
 8003778:	46bd      	mov	sp, r7
 800377a:	bdb0      	pop	{r4, r5, r7, pc}
 800377c:	20000844 	.word	0x20000844
 8003780:	2000072c 	.word	0x2000072c

08003784 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b088      	sub	sp, #32
 8003788:	af00      	add	r7, sp, #0
 800378a:	4603      	mov	r3, r0
 800378c:	603a      	str	r2, [r7, #0]
 800378e:	80fb      	strh	r3, [r7, #6]
 8003790:	460b      	mov	r3, r1
 8003792:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003794:	2300      	movs	r3, #0
 8003796:	61fb      	str	r3, [r7, #28]
 8003798:	2300      	movs	r3, #0
 800379a:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 800379c:	2300      	movs	r3, #0
 800379e:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 80037a0:	4b53      	ldr	r3, [pc, #332]	; (80038f0 <DrawChar+0x16c>)
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	4953      	ldr	r1, [pc, #332]	; (80038f4 <DrawChar+0x170>)
 80037a6:	4613      	mov	r3, r2
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	4413      	add	r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	440b      	add	r3, r1
 80037b0:	3308      	adds	r3, #8
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	88db      	ldrh	r3, [r3, #6]
 80037b6:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80037b8:	4b4d      	ldr	r3, [pc, #308]	; (80038f0 <DrawChar+0x16c>)
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	494d      	ldr	r1, [pc, #308]	; (80038f4 <DrawChar+0x170>)
 80037be:	4613      	mov	r3, r2
 80037c0:	005b      	lsls	r3, r3, #1
 80037c2:	4413      	add	r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	440b      	add	r3, r1
 80037c8:	3308      	adds	r3, #8
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	889b      	ldrh	r3, [r3, #4]
 80037ce:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 80037d0:	8a3b      	ldrh	r3, [r7, #16]
 80037d2:	3307      	adds	r3, #7
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	da00      	bge.n	80037da <DrawChar+0x56>
 80037d8:	3307      	adds	r3, #7
 80037da:	10db      	asrs	r3, r3, #3
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	00db      	lsls	r3, r3, #3
 80037e0:	b2da      	uxtb	r2, r3
 80037e2:	8a3b      	ldrh	r3, [r7, #16]
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 80037ea:	2300      	movs	r3, #0
 80037ec:	61fb      	str	r3, [r7, #28]
 80037ee:	e076      	b.n	80038de <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80037f0:	8a3b      	ldrh	r3, [r7, #16]
 80037f2:	3307      	adds	r3, #7
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	da00      	bge.n	80037fa <DrawChar+0x76>
 80037f8:	3307      	adds	r3, #7
 80037fa:	10db      	asrs	r3, r3, #3
 80037fc:	461a      	mov	r2, r3
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	fb02 f303 	mul.w	r3, r2, r3
 8003804:	683a      	ldr	r2, [r7, #0]
 8003806:	4413      	add	r3, r2
 8003808:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 800380a:	8a3b      	ldrh	r3, [r7, #16]
 800380c:	3307      	adds	r3, #7
 800380e:	2b00      	cmp	r3, #0
 8003810:	da00      	bge.n	8003814 <DrawChar+0x90>
 8003812:	3307      	adds	r3, #7
 8003814:	10db      	asrs	r3, r3, #3
 8003816:	2b01      	cmp	r3, #1
 8003818:	d002      	beq.n	8003820 <DrawChar+0x9c>
 800381a:	2b02      	cmp	r3, #2
 800381c:	d004      	beq.n	8003828 <DrawChar+0xa4>
 800381e:	e00c      	b.n	800383a <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	617b      	str	r3, [r7, #20]
      break;
 8003826:	e016      	b.n	8003856 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	021b      	lsls	r3, r3, #8
 800382e:	68ba      	ldr	r2, [r7, #8]
 8003830:	3201      	adds	r2, #1
 8003832:	7812      	ldrb	r2, [r2, #0]
 8003834:	4313      	orrs	r3, r2
 8003836:	617b      	str	r3, [r7, #20]
      break;
 8003838:	e00d      	b.n	8003856 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	041a      	lsls	r2, r3, #16
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	3301      	adds	r3, #1
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	021b      	lsls	r3, r3, #8
 8003848:	4313      	orrs	r3, r2
 800384a:	68ba      	ldr	r2, [r7, #8]
 800384c:	3202      	adds	r2, #2
 800384e:	7812      	ldrb	r2, [r2, #0]
 8003850:	4313      	orrs	r3, r2
 8003852:	617b      	str	r3, [r7, #20]
      break;
 8003854:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8003856:	2300      	movs	r3, #0
 8003858:	61bb      	str	r3, [r7, #24]
 800385a:	e036      	b.n	80038ca <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 800385c:	8a3a      	ldrh	r2, [r7, #16]
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	1ad2      	subs	r2, r2, r3
 8003862:	7bfb      	ldrb	r3, [r7, #15]
 8003864:	4413      	add	r3, r2
 8003866:	3b01      	subs	r3, #1
 8003868:	2201      	movs	r2, #1
 800386a:	fa02 f303 	lsl.w	r3, r2, r3
 800386e:	461a      	mov	r2, r3
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	4013      	ands	r3, r2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d012      	beq.n	800389e <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	b29a      	uxth	r2, r3
 800387c:	88fb      	ldrh	r3, [r7, #6]
 800387e:	4413      	add	r3, r2
 8003880:	b298      	uxth	r0, r3
 8003882:	4b1b      	ldr	r3, [pc, #108]	; (80038f0 <DrawChar+0x16c>)
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	491b      	ldr	r1, [pc, #108]	; (80038f4 <DrawChar+0x170>)
 8003888:	4613      	mov	r3, r2
 800388a:	005b      	lsls	r3, r3, #1
 800388c:	4413      	add	r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	440b      	add	r3, r1
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	88bb      	ldrh	r3, [r7, #4]
 8003896:	4619      	mov	r1, r3
 8003898:	f7ff ff4e 	bl	8003738 <BSP_LCD_DrawPixel>
 800389c:	e012      	b.n	80038c4 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	b29a      	uxth	r2, r3
 80038a2:	88fb      	ldrh	r3, [r7, #6]
 80038a4:	4413      	add	r3, r2
 80038a6:	b298      	uxth	r0, r3
 80038a8:	4b11      	ldr	r3, [pc, #68]	; (80038f0 <DrawChar+0x16c>)
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	4911      	ldr	r1, [pc, #68]	; (80038f4 <DrawChar+0x170>)
 80038ae:	4613      	mov	r3, r2
 80038b0:	005b      	lsls	r3, r3, #1
 80038b2:	4413      	add	r3, r2
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	440b      	add	r3, r1
 80038b8:	3304      	adds	r3, #4
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	88bb      	ldrh	r3, [r7, #4]
 80038be:	4619      	mov	r1, r3
 80038c0:	f7ff ff3a 	bl	8003738 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	3301      	adds	r3, #1
 80038c8:	61bb      	str	r3, [r7, #24]
 80038ca:	8a3b      	ldrh	r3, [r7, #16]
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d3c4      	bcc.n	800385c <DrawChar+0xd8>
      } 
    }
    Ypos++;
 80038d2:	88bb      	ldrh	r3, [r7, #4]
 80038d4:	3301      	adds	r3, #1
 80038d6:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	3301      	adds	r3, #1
 80038dc:	61fb      	str	r3, [r7, #28]
 80038de:	8a7b      	ldrh	r3, [r7, #18]
 80038e0:	69fa      	ldr	r2, [r7, #28]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d384      	bcc.n	80037f0 <DrawChar+0x6c>
  }
}
 80038e6:	bf00      	nop
 80038e8:	bf00      	nop
 80038ea:	3720      	adds	r7, #32
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	20000844 	.word	0x20000844
 80038f4:	20000848 	.word	0x20000848

080038f8 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b086      	sub	sp, #24
 80038fc:	af02      	add	r7, sp, #8
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
 8003904:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8003906:	4b16      	ldr	r3, [pc, #88]	; (8003960 <FillBuffer+0x68>)
 8003908:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800390c:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800390e:	4b14      	ldr	r3, [pc, #80]	; (8003960 <FillBuffer+0x68>)
 8003910:	2200      	movs	r2, #0
 8003912:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8003914:	4a12      	ldr	r2, [pc, #72]	; (8003960 <FillBuffer+0x68>)
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 800391a:	4b11      	ldr	r3, [pc, #68]	; (8003960 <FillBuffer+0x68>)
 800391c:	4a11      	ldr	r2, [pc, #68]	; (8003964 <FillBuffer+0x6c>)
 800391e:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8003920:	480f      	ldr	r0, [pc, #60]	; (8003960 <FillBuffer+0x68>)
 8003922:	f000 fcf1 	bl	8004308 <HAL_DMA2D_Init>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d115      	bne.n	8003958 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 800392c:	68f9      	ldr	r1, [r7, #12]
 800392e:	480c      	ldr	r0, [pc, #48]	; (8003960 <FillBuffer+0x68>)
 8003930:	f000 fe52 	bl	80045d8 <HAL_DMA2D_ConfigLayer>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d10e      	bne.n	8003958 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800393a:	68ba      	ldr	r2, [r7, #8]
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	9300      	str	r3, [sp, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	69f9      	ldr	r1, [r7, #28]
 8003944:	4806      	ldr	r0, [pc, #24]	; (8003960 <FillBuffer+0x68>)
 8003946:	f000 fd32 	bl	80043ae <HAL_DMA2D_Start>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d103      	bne.n	8003958 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8003950:	210a      	movs	r1, #10
 8003952:	4803      	ldr	r0, [pc, #12]	; (8003960 <FillBuffer+0x68>)
 8003954:	f000 fd56 	bl	8004404 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003958:	bf00      	nop
 800395a:	3710      	adds	r7, #16
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	200007d4 	.word	0x200007d4
 8003964:	4002b000 	.word	0x4002b000

08003968 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 800396c:	4b29      	ldr	r3, [pc, #164]	; (8003a14 <BSP_SDRAM_Init+0xac>)
 800396e:	4a2a      	ldr	r2, [pc, #168]	; (8003a18 <BSP_SDRAM_Init+0xb0>)
 8003970:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8003972:	4b2a      	ldr	r3, [pc, #168]	; (8003a1c <BSP_SDRAM_Init+0xb4>)
 8003974:	2202      	movs	r2, #2
 8003976:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8003978:	4b28      	ldr	r3, [pc, #160]	; (8003a1c <BSP_SDRAM_Init+0xb4>)
 800397a:	2207      	movs	r2, #7
 800397c:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 800397e:	4b27      	ldr	r3, [pc, #156]	; (8003a1c <BSP_SDRAM_Init+0xb4>)
 8003980:	2204      	movs	r2, #4
 8003982:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8003984:	4b25      	ldr	r3, [pc, #148]	; (8003a1c <BSP_SDRAM_Init+0xb4>)
 8003986:	2207      	movs	r2, #7
 8003988:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 800398a:	4b24      	ldr	r3, [pc, #144]	; (8003a1c <BSP_SDRAM_Init+0xb4>)
 800398c:	2202      	movs	r2, #2
 800398e:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8003990:	4b22      	ldr	r3, [pc, #136]	; (8003a1c <BSP_SDRAM_Init+0xb4>)
 8003992:	2202      	movs	r2, #2
 8003994:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8003996:	4b21      	ldr	r3, [pc, #132]	; (8003a1c <BSP_SDRAM_Init+0xb4>)
 8003998:	2202      	movs	r2, #2
 800399a:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 800399c:	4b1d      	ldr	r3, [pc, #116]	; (8003a14 <BSP_SDRAM_Init+0xac>)
 800399e:	2201      	movs	r2, #1
 80039a0:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80039a2:	4b1c      	ldr	r3, [pc, #112]	; (8003a14 <BSP_SDRAM_Init+0xac>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80039a8:	4b1a      	ldr	r3, [pc, #104]	; (8003a14 <BSP_SDRAM_Init+0xac>)
 80039aa:	2204      	movs	r2, #4
 80039ac:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80039ae:	4b19      	ldr	r3, [pc, #100]	; (8003a14 <BSP_SDRAM_Init+0xac>)
 80039b0:	2210      	movs	r2, #16
 80039b2:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80039b4:	4b17      	ldr	r3, [pc, #92]	; (8003a14 <BSP_SDRAM_Init+0xac>)
 80039b6:	2240      	movs	r2, #64	; 0x40
 80039b8:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 80039ba:	4b16      	ldr	r3, [pc, #88]	; (8003a14 <BSP_SDRAM_Init+0xac>)
 80039bc:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80039c0:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80039c2:	4b14      	ldr	r3, [pc, #80]	; (8003a14 <BSP_SDRAM_Init+0xac>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80039c8:	4b12      	ldr	r3, [pc, #72]	; (8003a14 <BSP_SDRAM_Init+0xac>)
 80039ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039ce:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 80039d0:	4b10      	ldr	r3, [pc, #64]	; (8003a14 <BSP_SDRAM_Init+0xac>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 80039d6:	4b0f      	ldr	r3, [pc, #60]	; (8003a14 <BSP_SDRAM_Init+0xac>)
 80039d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80039dc:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 80039de:	2100      	movs	r1, #0
 80039e0:	480c      	ldr	r0, [pc, #48]	; (8003a14 <BSP_SDRAM_Init+0xac>)
 80039e2:	f000 f87f 	bl	8003ae4 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 80039e6:	490d      	ldr	r1, [pc, #52]	; (8003a1c <BSP_SDRAM_Init+0xb4>)
 80039e8:	480a      	ldr	r0, [pc, #40]	; (8003a14 <BSP_SDRAM_Init+0xac>)
 80039ea:	f003 fdc1 	bl	8007570 <HAL_SDRAM_Init>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d003      	beq.n	80039fc <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80039f4:	4b0a      	ldr	r3, [pc, #40]	; (8003a20 <BSP_SDRAM_Init+0xb8>)
 80039f6:	2201      	movs	r2, #1
 80039f8:	701a      	strb	r2, [r3, #0]
 80039fa:	e002      	b.n	8003a02 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80039fc:	4b08      	ldr	r3, [pc, #32]	; (8003a20 <BSP_SDRAM_Init+0xb8>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003a02:	f240 506a 	movw	r0, #1386	; 0x56a
 8003a06:	f000 f80d 	bl	8003a24 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8003a0a:	4b05      	ldr	r3, [pc, #20]	; (8003a20 <BSP_SDRAM_Init+0xb8>)
 8003a0c:	781b      	ldrb	r3, [r3, #0]
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	20000864 	.word	0x20000864
 8003a18:	a0000140 	.word	0xa0000140
 8003a1c:	20000898 	.word	0x20000898
 8003a20:	2000007c 	.word	0x2000007c

08003a24 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8003a30:	4b2a      	ldr	r3, [pc, #168]	; (8003adc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a32:	2201      	movs	r2, #1
 8003a34:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003a36:	4b29      	ldr	r3, [pc, #164]	; (8003adc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a38:	2208      	movs	r2, #8
 8003a3a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003a3c:	4b27      	ldr	r3, [pc, #156]	; (8003adc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a3e:	2201      	movs	r2, #1
 8003a40:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003a42:	4b26      	ldr	r3, [pc, #152]	; (8003adc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003a48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a4c:	4923      	ldr	r1, [pc, #140]	; (8003adc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a4e:	4824      	ldr	r0, [pc, #144]	; (8003ae0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003a50:	f003 fdcc 	bl	80075ec <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003a54:	2001      	movs	r0, #1
 8003a56:	f000 f993 	bl	8003d80 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8003a5a:	4b20      	ldr	r3, [pc, #128]	; (8003adc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a5c:	2202      	movs	r2, #2
 8003a5e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003a60:	4b1e      	ldr	r3, [pc, #120]	; (8003adc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a62:	2208      	movs	r2, #8
 8003a64:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003a66:	4b1d      	ldr	r3, [pc, #116]	; (8003adc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a68:	2201      	movs	r2, #1
 8003a6a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003a6c:	4b1b      	ldr	r3, [pc, #108]	; (8003adc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8003a72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a76:	4919      	ldr	r1, [pc, #100]	; (8003adc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a78:	4819      	ldr	r0, [pc, #100]	; (8003ae0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003a7a:	f003 fdb7 	bl	80075ec <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003a7e:	4b17      	ldr	r3, [pc, #92]	; (8003adc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a80:	2203      	movs	r2, #3
 8003a82:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003a84:	4b15      	ldr	r3, [pc, #84]	; (8003adc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a86:	2208      	movs	r2, #8
 8003a88:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8003a8a:	4b14      	ldr	r3, [pc, #80]	; (8003adc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a8c:	2204      	movs	r2, #4
 8003a8e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003a90:	4b12      	ldr	r3, [pc, #72]	; (8003adc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003a96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a9a:	4910      	ldr	r1, [pc, #64]	; (8003adc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a9c:	4810      	ldr	r0, [pc, #64]	; (8003ae0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003a9e:	f003 fda5 	bl	80075ec <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8003aa2:	f44f 730c 	mov.w	r3, #560	; 0x230
 8003aa6:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8003aa8:	4b0c      	ldr	r3, [pc, #48]	; (8003adc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003aaa:	2204      	movs	r2, #4
 8003aac:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003aae:	4b0b      	ldr	r3, [pc, #44]	; (8003adc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ab0:	2208      	movs	r2, #8
 8003ab2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003ab4:	4b09      	ldr	r3, [pc, #36]	; (8003adc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	4a07      	ldr	r2, [pc, #28]	; (8003adc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003abe:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003ac0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ac4:	4905      	ldr	r1, [pc, #20]	; (8003adc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ac6:	4806      	ldr	r0, [pc, #24]	; (8003ae0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003ac8:	f003 fd90 	bl	80075ec <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8003acc:	6879      	ldr	r1, [r7, #4]
 8003ace:	4804      	ldr	r0, [pc, #16]	; (8003ae0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003ad0:	f003 fdc1 	bl	8007656 <HAL_SDRAM_ProgramRefreshRate>
}
 8003ad4:	bf00      	nop
 8003ad6:	3710      	adds	r7, #16
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	200008b4 	.word	0x200008b4
 8003ae0:	20000864 	.word	0x20000864

08003ae4 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b090      	sub	sp, #64	; 0x40
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f000 80ec 	beq.w	8003cce <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003af6:	2300      	movs	r3, #0
 8003af8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003afa:	4b77      	ldr	r3, [pc, #476]	; (8003cd8 <BSP_SDRAM_MspInit+0x1f4>)
 8003afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afe:	4a76      	ldr	r2, [pc, #472]	; (8003cd8 <BSP_SDRAM_MspInit+0x1f4>)
 8003b00:	f043 0301 	orr.w	r3, r3, #1
 8003b04:	6393      	str	r3, [r2, #56]	; 0x38
 8003b06:	4b74      	ldr	r3, [pc, #464]	; (8003cd8 <BSP_SDRAM_MspInit+0x1f4>)
 8003b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b10:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8003b12:	2300      	movs	r3, #0
 8003b14:	627b      	str	r3, [r7, #36]	; 0x24
 8003b16:	4b70      	ldr	r3, [pc, #448]	; (8003cd8 <BSP_SDRAM_MspInit+0x1f4>)
 8003b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1a:	4a6f      	ldr	r2, [pc, #444]	; (8003cd8 <BSP_SDRAM_MspInit+0x1f4>)
 8003b1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b20:	6313      	str	r3, [r2, #48]	; 0x30
 8003b22:	4b6d      	ldr	r3, [pc, #436]	; (8003cd8 <BSP_SDRAM_MspInit+0x1f4>)
 8003b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b2a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b2e:	2300      	movs	r3, #0
 8003b30:	623b      	str	r3, [r7, #32]
 8003b32:	4b69      	ldr	r3, [pc, #420]	; (8003cd8 <BSP_SDRAM_MspInit+0x1f4>)
 8003b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b36:	4a68      	ldr	r2, [pc, #416]	; (8003cd8 <BSP_SDRAM_MspInit+0x1f4>)
 8003b38:	f043 0302 	orr.w	r3, r3, #2
 8003b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b3e:	4b66      	ldr	r3, [pc, #408]	; (8003cd8 <BSP_SDRAM_MspInit+0x1f4>)
 8003b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	623b      	str	r3, [r7, #32]
 8003b48:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	61fb      	str	r3, [r7, #28]
 8003b4e:	4b62      	ldr	r3, [pc, #392]	; (8003cd8 <BSP_SDRAM_MspInit+0x1f4>)
 8003b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b52:	4a61      	ldr	r2, [pc, #388]	; (8003cd8 <BSP_SDRAM_MspInit+0x1f4>)
 8003b54:	f043 0304 	orr.w	r3, r3, #4
 8003b58:	6313      	str	r3, [r2, #48]	; 0x30
 8003b5a:	4b5f      	ldr	r3, [pc, #380]	; (8003cd8 <BSP_SDRAM_MspInit+0x1f4>)
 8003b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5e:	f003 0304 	and.w	r3, r3, #4
 8003b62:	61fb      	str	r3, [r7, #28]
 8003b64:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b66:	2300      	movs	r3, #0
 8003b68:	61bb      	str	r3, [r7, #24]
 8003b6a:	4b5b      	ldr	r3, [pc, #364]	; (8003cd8 <BSP_SDRAM_MspInit+0x1f4>)
 8003b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6e:	4a5a      	ldr	r2, [pc, #360]	; (8003cd8 <BSP_SDRAM_MspInit+0x1f4>)
 8003b70:	f043 0308 	orr.w	r3, r3, #8
 8003b74:	6313      	str	r3, [r2, #48]	; 0x30
 8003b76:	4b58      	ldr	r3, [pc, #352]	; (8003cd8 <BSP_SDRAM_MspInit+0x1f4>)
 8003b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7a:	f003 0308 	and.w	r3, r3, #8
 8003b7e:	61bb      	str	r3, [r7, #24]
 8003b80:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003b82:	2300      	movs	r3, #0
 8003b84:	617b      	str	r3, [r7, #20]
 8003b86:	4b54      	ldr	r3, [pc, #336]	; (8003cd8 <BSP_SDRAM_MspInit+0x1f4>)
 8003b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8a:	4a53      	ldr	r2, [pc, #332]	; (8003cd8 <BSP_SDRAM_MspInit+0x1f4>)
 8003b8c:	f043 0310 	orr.w	r3, r3, #16
 8003b90:	6313      	str	r3, [r2, #48]	; 0x30
 8003b92:	4b51      	ldr	r3, [pc, #324]	; (8003cd8 <BSP_SDRAM_MspInit+0x1f4>)
 8003b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b96:	f003 0310 	and.w	r3, r3, #16
 8003b9a:	617b      	str	r3, [r7, #20]
 8003b9c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	613b      	str	r3, [r7, #16]
 8003ba2:	4b4d      	ldr	r3, [pc, #308]	; (8003cd8 <BSP_SDRAM_MspInit+0x1f4>)
 8003ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba6:	4a4c      	ldr	r2, [pc, #304]	; (8003cd8 <BSP_SDRAM_MspInit+0x1f4>)
 8003ba8:	f043 0320 	orr.w	r3, r3, #32
 8003bac:	6313      	str	r3, [r2, #48]	; 0x30
 8003bae:	4b4a      	ldr	r3, [pc, #296]	; (8003cd8 <BSP_SDRAM_MspInit+0x1f4>)
 8003bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb2:	f003 0320 	and.w	r3, r3, #32
 8003bb6:	613b      	str	r3, [r7, #16]
 8003bb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003bba:	2300      	movs	r3, #0
 8003bbc:	60fb      	str	r3, [r7, #12]
 8003bbe:	4b46      	ldr	r3, [pc, #280]	; (8003cd8 <BSP_SDRAM_MspInit+0x1f4>)
 8003bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc2:	4a45      	ldr	r2, [pc, #276]	; (8003cd8 <BSP_SDRAM_MspInit+0x1f4>)
 8003bc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8003bca:	4b43      	ldr	r3, [pc, #268]	; (8003cd8 <BSP_SDRAM_MspInit+0x1f4>)
 8003bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd2:	60fb      	str	r3, [r7, #12]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003bda:	2302      	movs	r3, #2
 8003bdc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8003bde:	2300      	movs	r3, #0
 8003be0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8003be2:	230c      	movs	r3, #12
 8003be4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8003be6:	2360      	movs	r3, #96	; 0x60
 8003be8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8003bea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003bee:	4619      	mov	r1, r3
 8003bf0:	483a      	ldr	r0, [pc, #232]	; (8003cdc <BSP_SDRAM_MspInit+0x1f8>)
 8003bf2:	f000 fe1f 	bl	8004834 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8003bfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003bfe:	4619      	mov	r1, r3
 8003c00:	4837      	ldr	r0, [pc, #220]	; (8003ce0 <BSP_SDRAM_MspInit+0x1fc>)
 8003c02:	f000 fe17 	bl	8004834 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8003c06:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003c0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c10:	4619      	mov	r1, r3
 8003c12:	4834      	ldr	r0, [pc, #208]	; (8003ce4 <BSP_SDRAM_MspInit+0x200>)
 8003c14:	f000 fe0e 	bl	8004834 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8003c18:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8003c1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c22:	4619      	mov	r1, r3
 8003c24:	4830      	ldr	r0, [pc, #192]	; (8003ce8 <BSP_SDRAM_MspInit+0x204>)
 8003c26:	f000 fe05 	bl	8004834 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8003c2a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8003c30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c34:	4619      	mov	r1, r3
 8003c36:	482d      	ldr	r0, [pc, #180]	; (8003cec <BSP_SDRAM_MspInit+0x208>)
 8003c38:	f000 fdfc 	bl	8004834 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8003c3c:	f248 1333 	movw	r3, #33075	; 0x8133
 8003c40:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003c42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003c46:	4619      	mov	r1, r3
 8003c48:	4829      	ldr	r0, [pc, #164]	; (8003cf0 <BSP_SDRAM_MspInit+0x20c>)
 8003c4a:	f000 fdf3 	bl	8004834 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003c4e:	4b29      	ldr	r3, [pc, #164]	; (8003cf4 <BSP_SDRAM_MspInit+0x210>)
 8003c50:	2200      	movs	r2, #0
 8003c52:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003c54:	4b27      	ldr	r3, [pc, #156]	; (8003cf4 <BSP_SDRAM_MspInit+0x210>)
 8003c56:	2280      	movs	r2, #128	; 0x80
 8003c58:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003c5a:	4b26      	ldr	r3, [pc, #152]	; (8003cf4 <BSP_SDRAM_MspInit+0x210>)
 8003c5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c60:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8003c62:	4b24      	ldr	r3, [pc, #144]	; (8003cf4 <BSP_SDRAM_MspInit+0x210>)
 8003c64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c68:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003c6a:	4b22      	ldr	r3, [pc, #136]	; (8003cf4 <BSP_SDRAM_MspInit+0x210>)
 8003c6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003c70:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003c72:	4b20      	ldr	r3, [pc, #128]	; (8003cf4 <BSP_SDRAM_MspInit+0x210>)
 8003c74:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003c78:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8003c7a:	4b1e      	ldr	r3, [pc, #120]	; (8003cf4 <BSP_SDRAM_MspInit+0x210>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003c80:	4b1c      	ldr	r3, [pc, #112]	; (8003cf4 <BSP_SDRAM_MspInit+0x210>)
 8003c82:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c86:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8003c88:	4b1a      	ldr	r3, [pc, #104]	; (8003cf4 <BSP_SDRAM_MspInit+0x210>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003c8e:	4b19      	ldr	r3, [pc, #100]	; (8003cf4 <BSP_SDRAM_MspInit+0x210>)
 8003c90:	2203      	movs	r2, #3
 8003c92:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003c94:	4b17      	ldr	r3, [pc, #92]	; (8003cf4 <BSP_SDRAM_MspInit+0x210>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003c9a:	4b16      	ldr	r3, [pc, #88]	; (8003cf4 <BSP_SDRAM_MspInit+0x210>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8003ca0:	4b14      	ldr	r3, [pc, #80]	; (8003cf4 <BSP_SDRAM_MspInit+0x210>)
 8003ca2:	4a15      	ldr	r2, [pc, #84]	; (8003cf8 <BSP_SDRAM_MspInit+0x214>)
 8003ca4:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a12      	ldr	r2, [pc, #72]	; (8003cf4 <BSP_SDRAM_MspInit+0x210>)
 8003caa:	631a      	str	r2, [r3, #48]	; 0x30
 8003cac:	4a11      	ldr	r2, [pc, #68]	; (8003cf4 <BSP_SDRAM_MspInit+0x210>)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8003cb2:	4810      	ldr	r0, [pc, #64]	; (8003cf4 <BSP_SDRAM_MspInit+0x210>)
 8003cb4:	f000 fa18 	bl	80040e8 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8003cb8:	480e      	ldr	r0, [pc, #56]	; (8003cf4 <BSP_SDRAM_MspInit+0x210>)
 8003cba:	f000 f967 	bl	8003f8c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	210f      	movs	r1, #15
 8003cc2:	2038      	movs	r0, #56	; 0x38
 8003cc4:	f000 f938 	bl	8003f38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003cc8:	2038      	movs	r0, #56	; 0x38
 8003cca:	f000 f951 	bl	8003f70 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8003cce:	bf00      	nop
 8003cd0:	3740      	adds	r7, #64	; 0x40
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	40023800 	.word	0x40023800
 8003cdc:	40020400 	.word	0x40020400
 8003ce0:	40020800 	.word	0x40020800
 8003ce4:	40020c00 	.word	0x40020c00
 8003ce8:	40021000 	.word	0x40021000
 8003cec:	40021400 	.word	0x40021400
 8003cf0:	40021800 	.word	0x40021800
 8003cf4:	200008c4 	.word	0x200008c4
 8003cf8:	40026410 	.word	0x40026410

08003cfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003d00:	4b0e      	ldr	r3, [pc, #56]	; (8003d3c <HAL_Init+0x40>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a0d      	ldr	r2, [pc, #52]	; (8003d3c <HAL_Init+0x40>)
 8003d06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003d0c:	4b0b      	ldr	r3, [pc, #44]	; (8003d3c <HAL_Init+0x40>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a0a      	ldr	r2, [pc, #40]	; (8003d3c <HAL_Init+0x40>)
 8003d12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d18:	4b08      	ldr	r3, [pc, #32]	; (8003d3c <HAL_Init+0x40>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a07      	ldr	r2, [pc, #28]	; (8003d3c <HAL_Init+0x40>)
 8003d1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d24:	2003      	movs	r0, #3
 8003d26:	f000 f8fc 	bl	8003f22 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d2a:	200f      	movs	r0, #15
 8003d2c:	f7fd ffa0 	bl	8001c70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d30:	f7fd ff0c 	bl	8001b4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	40023c00 	.word	0x40023c00

08003d40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d40:	b480      	push	{r7}
 8003d42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d44:	4b06      	ldr	r3, [pc, #24]	; (8003d60 <HAL_IncTick+0x20>)
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	461a      	mov	r2, r3
 8003d4a:	4b06      	ldr	r3, [pc, #24]	; (8003d64 <HAL_IncTick+0x24>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4413      	add	r3, r2
 8003d50:	4a04      	ldr	r2, [pc, #16]	; (8003d64 <HAL_IncTick+0x24>)
 8003d52:	6013      	str	r3, [r2, #0]
}
 8003d54:	bf00      	nop
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	20000084 	.word	0x20000084
 8003d64:	20000924 	.word	0x20000924

08003d68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	af00      	add	r7, sp, #0
  return uwTick;
 8003d6c:	4b03      	ldr	r3, [pc, #12]	; (8003d7c <HAL_GetTick+0x14>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	20000924 	.word	0x20000924

08003d80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d88:	f7ff ffee 	bl	8003d68 <HAL_GetTick>
 8003d8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d98:	d005      	beq.n	8003da6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d9a:	4b0a      	ldr	r3, [pc, #40]	; (8003dc4 <HAL_Delay+0x44>)
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	461a      	mov	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	4413      	add	r3, r2
 8003da4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003da6:	bf00      	nop
 8003da8:	f7ff ffde 	bl	8003d68 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d8f7      	bhi.n	8003da8 <HAL_Delay+0x28>
  {
  }
}
 8003db8:	bf00      	nop
 8003dba:	bf00      	nop
 8003dbc:	3710      	adds	r7, #16
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	20000084 	.word	0x20000084

08003dc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b085      	sub	sp, #20
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f003 0307 	and.w	r3, r3, #7
 8003dd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003dd8:	4b0c      	ldr	r3, [pc, #48]	; (8003e0c <__NVIC_SetPriorityGrouping+0x44>)
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dde:	68ba      	ldr	r2, [r7, #8]
 8003de0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003de4:	4013      	ands	r3, r2
 8003de6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003df0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003df4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003df8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dfa:	4a04      	ldr	r2, [pc, #16]	; (8003e0c <__NVIC_SetPriorityGrouping+0x44>)
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	60d3      	str	r3, [r2, #12]
}
 8003e00:	bf00      	nop
 8003e02:	3714      	adds	r7, #20
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr
 8003e0c:	e000ed00 	.word	0xe000ed00

08003e10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e10:	b480      	push	{r7}
 8003e12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e14:	4b04      	ldr	r3, [pc, #16]	; (8003e28 <__NVIC_GetPriorityGrouping+0x18>)
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	0a1b      	lsrs	r3, r3, #8
 8003e1a:	f003 0307 	and.w	r3, r3, #7
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr
 8003e28:	e000ed00 	.word	0xe000ed00

08003e2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	4603      	mov	r3, r0
 8003e34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	db0b      	blt.n	8003e56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e3e:	79fb      	ldrb	r3, [r7, #7]
 8003e40:	f003 021f 	and.w	r2, r3, #31
 8003e44:	4907      	ldr	r1, [pc, #28]	; (8003e64 <__NVIC_EnableIRQ+0x38>)
 8003e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e4a:	095b      	lsrs	r3, r3, #5
 8003e4c:	2001      	movs	r0, #1
 8003e4e:	fa00 f202 	lsl.w	r2, r0, r2
 8003e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e56:	bf00      	nop
 8003e58:	370c      	adds	r7, #12
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	e000e100 	.word	0xe000e100

08003e68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	4603      	mov	r3, r0
 8003e70:	6039      	str	r1, [r7, #0]
 8003e72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	db0a      	blt.n	8003e92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	b2da      	uxtb	r2, r3
 8003e80:	490c      	ldr	r1, [pc, #48]	; (8003eb4 <__NVIC_SetPriority+0x4c>)
 8003e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e86:	0112      	lsls	r2, r2, #4
 8003e88:	b2d2      	uxtb	r2, r2
 8003e8a:	440b      	add	r3, r1
 8003e8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e90:	e00a      	b.n	8003ea8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	b2da      	uxtb	r2, r3
 8003e96:	4908      	ldr	r1, [pc, #32]	; (8003eb8 <__NVIC_SetPriority+0x50>)
 8003e98:	79fb      	ldrb	r3, [r7, #7]
 8003e9a:	f003 030f 	and.w	r3, r3, #15
 8003e9e:	3b04      	subs	r3, #4
 8003ea0:	0112      	lsls	r2, r2, #4
 8003ea2:	b2d2      	uxtb	r2, r2
 8003ea4:	440b      	add	r3, r1
 8003ea6:	761a      	strb	r2, [r3, #24]
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr
 8003eb4:	e000e100 	.word	0xe000e100
 8003eb8:	e000ed00 	.word	0xe000ed00

08003ebc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b089      	sub	sp, #36	; 0x24
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f003 0307 	and.w	r3, r3, #7
 8003ece:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	f1c3 0307 	rsb	r3, r3, #7
 8003ed6:	2b04      	cmp	r3, #4
 8003ed8:	bf28      	it	cs
 8003eda:	2304      	movcs	r3, #4
 8003edc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	3304      	adds	r3, #4
 8003ee2:	2b06      	cmp	r3, #6
 8003ee4:	d902      	bls.n	8003eec <NVIC_EncodePriority+0x30>
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	3b03      	subs	r3, #3
 8003eea:	e000      	b.n	8003eee <NVIC_EncodePriority+0x32>
 8003eec:	2300      	movs	r3, #0
 8003eee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8003efa:	43da      	mvns	r2, r3
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	401a      	ands	r2, r3
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f04:	f04f 31ff 	mov.w	r1, #4294967295
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f0e:	43d9      	mvns	r1, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f14:	4313      	orrs	r3, r2
         );
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3724      	adds	r7, #36	; 0x24
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr

08003f22 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b082      	sub	sp, #8
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f7ff ff4c 	bl	8003dc8 <__NVIC_SetPriorityGrouping>
}
 8003f30:	bf00      	nop
 8003f32:	3708      	adds	r7, #8
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b086      	sub	sp, #24
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	4603      	mov	r3, r0
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
 8003f44:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f46:	2300      	movs	r3, #0
 8003f48:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f4a:	f7ff ff61 	bl	8003e10 <__NVIC_GetPriorityGrouping>
 8003f4e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	68b9      	ldr	r1, [r7, #8]
 8003f54:	6978      	ldr	r0, [r7, #20]
 8003f56:	f7ff ffb1 	bl	8003ebc <NVIC_EncodePriority>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f60:	4611      	mov	r1, r2
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7ff ff80 	bl	8003e68 <__NVIC_SetPriority>
}
 8003f68:	bf00      	nop
 8003f6a:	3718      	adds	r7, #24
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	4603      	mov	r3, r0
 8003f78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7ff ff54 	bl	8003e2c <__NVIC_EnableIRQ>
}
 8003f84:	bf00      	nop
 8003f86:	3708      	adds	r7, #8
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b086      	sub	sp, #24
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003f94:	2300      	movs	r3, #0
 8003f96:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003f98:	f7ff fee6 	bl	8003d68 <HAL_GetTick>
 8003f9c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d101      	bne.n	8003fa8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e099      	b.n	80040dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2202      	movs	r2, #2
 8003fac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f022 0201 	bic.w	r2, r2, #1
 8003fc6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fc8:	e00f      	b.n	8003fea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003fca:	f7ff fecd 	bl	8003d68 <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	2b05      	cmp	r3, #5
 8003fd6:	d908      	bls.n	8003fea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2220      	movs	r2, #32
 8003fdc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2203      	movs	r2, #3
 8003fe2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e078      	b.n	80040dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1e8      	bne.n	8003fca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004000:	697a      	ldr	r2, [r7, #20]
 8004002:	4b38      	ldr	r3, [pc, #224]	; (80040e4 <HAL_DMA_Init+0x158>)
 8004004:	4013      	ands	r3, r2
 8004006:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685a      	ldr	r2, [r3, #4]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004016:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004022:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800402e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a1b      	ldr	r3, [r3, #32]
 8004034:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004036:	697a      	ldr	r2, [r7, #20]
 8004038:	4313      	orrs	r3, r2
 800403a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004040:	2b04      	cmp	r3, #4
 8004042:	d107      	bne.n	8004054 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404c:	4313      	orrs	r3, r2
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	4313      	orrs	r3, r2
 8004052:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	697a      	ldr	r2, [r7, #20]
 800405a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	f023 0307 	bic.w	r3, r3, #7
 800406a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004070:	697a      	ldr	r2, [r7, #20]
 8004072:	4313      	orrs	r3, r2
 8004074:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407a:	2b04      	cmp	r3, #4
 800407c:	d117      	bne.n	80040ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004082:	697a      	ldr	r2, [r7, #20]
 8004084:	4313      	orrs	r3, r2
 8004086:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408c:	2b00      	cmp	r3, #0
 800408e:	d00e      	beq.n	80040ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f000 f8bd 	bl	8004210 <DMA_CheckFifoParam>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d008      	beq.n	80040ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2240      	movs	r2, #64	; 0x40
 80040a0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2201      	movs	r2, #1
 80040a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80040aa:	2301      	movs	r3, #1
 80040ac:	e016      	b.n	80040dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 f874 	bl	80041a4 <DMA_CalcBaseAndBitshift>
 80040bc:	4603      	mov	r3, r0
 80040be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040c4:	223f      	movs	r2, #63	; 0x3f
 80040c6:	409a      	lsls	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80040da:	2300      	movs	r3, #0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3718      	adds	r7, #24
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	f010803f 	.word	0xf010803f

080040e8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d101      	bne.n	80040fa <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e050      	b.n	800419c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004100:	b2db      	uxtb	r3, r3
 8004102:	2b02      	cmp	r3, #2
 8004104:	d101      	bne.n	800410a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004106:	2302      	movs	r3, #2
 8004108:	e048      	b.n	800419c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f022 0201 	bic.w	r2, r2, #1
 8004118:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2200      	movs	r2, #0
 8004120:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2200      	movs	r2, #0
 8004128:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2200      	movs	r2, #0
 8004130:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2200      	movs	r2, #0
 8004138:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	2200      	movs	r2, #0
 8004140:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2221      	movs	r2, #33	; 0x21
 8004148:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 f82a 	bl	80041a4 <DMA_CalcBaseAndBitshift>
 8004150:	4603      	mov	r3, r0
 8004152:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800417c:	223f      	movs	r2, #63	; 0x3f
 800417e:	409a      	lsls	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	3710      	adds	r7, #16
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	3b10      	subs	r3, #16
 80041b4:	4a14      	ldr	r2, [pc, #80]	; (8004208 <DMA_CalcBaseAndBitshift+0x64>)
 80041b6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ba:	091b      	lsrs	r3, r3, #4
 80041bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80041be:	4a13      	ldr	r2, [pc, #76]	; (800420c <DMA_CalcBaseAndBitshift+0x68>)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	4413      	add	r3, r2
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	461a      	mov	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2b03      	cmp	r3, #3
 80041d0:	d909      	bls.n	80041e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80041da:	f023 0303 	bic.w	r3, r3, #3
 80041de:	1d1a      	adds	r2, r3, #4
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	659a      	str	r2, [r3, #88]	; 0x58
 80041e4:	e007      	b.n	80041f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80041ee:	f023 0303 	bic.w	r3, r3, #3
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3714      	adds	r7, #20
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	aaaaaaab 	.word	0xaaaaaaab
 800420c:	0801432c 	.word	0x0801432c

08004210 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004210:	b480      	push	{r7}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004218:	2300      	movs	r3, #0
 800421a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004220:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d11f      	bne.n	800426a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	2b03      	cmp	r3, #3
 800422e:	d856      	bhi.n	80042de <DMA_CheckFifoParam+0xce>
 8004230:	a201      	add	r2, pc, #4	; (adr r2, 8004238 <DMA_CheckFifoParam+0x28>)
 8004232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004236:	bf00      	nop
 8004238:	08004249 	.word	0x08004249
 800423c:	0800425b 	.word	0x0800425b
 8004240:	08004249 	.word	0x08004249
 8004244:	080042df 	.word	0x080042df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004250:	2b00      	cmp	r3, #0
 8004252:	d046      	beq.n	80042e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004258:	e043      	b.n	80042e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004262:	d140      	bne.n	80042e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004268:	e03d      	b.n	80042e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004272:	d121      	bne.n	80042b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	2b03      	cmp	r3, #3
 8004278:	d837      	bhi.n	80042ea <DMA_CheckFifoParam+0xda>
 800427a:	a201      	add	r2, pc, #4	; (adr r2, 8004280 <DMA_CheckFifoParam+0x70>)
 800427c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004280:	08004291 	.word	0x08004291
 8004284:	08004297 	.word	0x08004297
 8004288:	08004291 	.word	0x08004291
 800428c:	080042a9 	.word	0x080042a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	73fb      	strb	r3, [r7, #15]
      break;
 8004294:	e030      	b.n	80042f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d025      	beq.n	80042ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042a6:	e022      	b.n	80042ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80042b0:	d11f      	bne.n	80042f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80042b6:	e01c      	b.n	80042f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d903      	bls.n	80042c6 <DMA_CheckFifoParam+0xb6>
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	2b03      	cmp	r3, #3
 80042c2:	d003      	beq.n	80042cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80042c4:	e018      	b.n	80042f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	73fb      	strb	r3, [r7, #15]
      break;
 80042ca:	e015      	b.n	80042f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d00e      	beq.n	80042f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	73fb      	strb	r3, [r7, #15]
      break;
 80042dc:	e00b      	b.n	80042f6 <DMA_CheckFifoParam+0xe6>
      break;
 80042de:	bf00      	nop
 80042e0:	e00a      	b.n	80042f8 <DMA_CheckFifoParam+0xe8>
      break;
 80042e2:	bf00      	nop
 80042e4:	e008      	b.n	80042f8 <DMA_CheckFifoParam+0xe8>
      break;
 80042e6:	bf00      	nop
 80042e8:	e006      	b.n	80042f8 <DMA_CheckFifoParam+0xe8>
      break;
 80042ea:	bf00      	nop
 80042ec:	e004      	b.n	80042f8 <DMA_CheckFifoParam+0xe8>
      break;
 80042ee:	bf00      	nop
 80042f0:	e002      	b.n	80042f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80042f2:	bf00      	nop
 80042f4:	e000      	b.n	80042f8 <DMA_CheckFifoParam+0xe8>
      break;
 80042f6:	bf00      	nop
    }
  } 
  
  return status; 
 80042f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3714      	adds	r7, #20
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop

08004308 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d101      	bne.n	800431a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e03b      	b.n	8004392 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004320:	b2db      	uxtb	r3, r3
 8004322:	2b00      	cmp	r3, #0
 8004324:	d106      	bne.n	8004334 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 f833 	bl	800439a <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2202      	movs	r2, #2
 8004338:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685a      	ldr	r2, [r3, #4]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	430a      	orrs	r2, r1
 8004350:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004358:	f023 0107 	bic.w	r1, r3, #7
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	689a      	ldr	r2, [r3, #8]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	430a      	orrs	r2, r1
 8004366:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004372:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	68d1      	ldr	r1, [r2, #12]
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	6812      	ldr	r2, [r2, #0]
 800437e:	430b      	orrs	r3, r1
 8004380:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3708      	adds	r7, #8
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}

0800439a <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 800439a:	b480      	push	{r7}
 800439c:	b083      	sub	sp, #12
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 80043a2:	bf00      	nop
 80043a4:	370c      	adds	r7, #12
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr

080043ae <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b086      	sub	sp, #24
 80043b2:	af02      	add	r7, sp, #8
 80043b4:	60f8      	str	r0, [r7, #12]
 80043b6:	60b9      	str	r1, [r7, #8]
 80043b8:	607a      	str	r2, [r7, #4]
 80043ba:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d101      	bne.n	80043ca <HAL_DMA2D_Start+0x1c>
 80043c6:	2302      	movs	r3, #2
 80043c8:	e018      	b.n	80043fc <HAL_DMA2D_Start+0x4e>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2201      	movs	r2, #1
 80043ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2202      	movs	r2, #2
 80043d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	9300      	str	r3, [sp, #0]
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	68b9      	ldr	r1, [r7, #8]
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	f000 f989 	bl	80046fc <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f042 0201 	orr.w	r2, r2, #1
 80043f8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3710      	adds	r7, #16
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b086      	sub	sp, #24
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800440e:	2300      	movs	r3, #0
 8004410:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 0301 	and.w	r3, r3, #1
 800441c:	2b00      	cmp	r3, #0
 800441e:	d056      	beq.n	80044ce <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004420:	f7ff fca2 	bl	8003d68 <HAL_GetTick>
 8004424:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004426:	e04b      	b.n	80044c0 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004436:	2b00      	cmp	r3, #0
 8004438:	d023      	beq.n	8004482 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f003 0320 	and.w	r3, r3, #32
 8004440:	2b00      	cmp	r3, #0
 8004442:	d005      	beq.n	8004450 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004448:	f043 0202 	orr.w	r2, r3, #2
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	2b00      	cmp	r3, #0
 8004458:	d005      	beq.n	8004466 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800445e:	f043 0201 	orr.w	r2, r3, #1
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2221      	movs	r2, #33	; 0x21
 800446c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2204      	movs	r2, #4
 8004472:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e0a5      	b.n	80045ce <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004488:	d01a      	beq.n	80044c0 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800448a:	f7ff fc6d 	bl	8003d68 <HAL_GetTick>
 800448e:	4602      	mov	r2, r0
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	683a      	ldr	r2, [r7, #0]
 8004496:	429a      	cmp	r2, r3
 8004498:	d302      	bcc.n	80044a0 <HAL_DMA2D_PollForTransfer+0x9c>
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d10f      	bne.n	80044c0 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044a4:	f043 0220 	orr.w	r2, r3, #32
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2203      	movs	r2, #3
 80044b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e086      	b.n	80045ce <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d0ac      	beq.n	8004428 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	69db      	ldr	r3, [r3, #28]
 80044d4:	f003 0320 	and.w	r3, r3, #32
 80044d8:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e0:	f003 0320 	and.w	r3, r3, #32
 80044e4:	693a      	ldr	r2, [r7, #16]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d061      	beq.n	80045b4 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80044f0:	f7ff fc3a 	bl	8003d68 <HAL_GetTick>
 80044f4:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80044f6:	e056      	b.n	80045a6 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8004506:	2b00      	cmp	r3, #0
 8004508:	d02e      	beq.n	8004568 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f003 0308 	and.w	r3, r3, #8
 8004510:	2b00      	cmp	r3, #0
 8004512:	d005      	beq.n	8004520 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004518:	f043 0204 	orr.w	r2, r3, #4
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f003 0320 	and.w	r3, r3, #32
 8004526:	2b00      	cmp	r3, #0
 8004528:	d005      	beq.n	8004536 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800452e:	f043 0202 	orr.w	r2, r3, #2
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f003 0301 	and.w	r3, r3, #1
 800453c:	2b00      	cmp	r3, #0
 800453e:	d005      	beq.n	800454c <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004544:	f043 0201 	orr.w	r2, r3, #1
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2229      	movs	r2, #41	; 0x29
 8004552:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2204      	movs	r2, #4
 8004558:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e032      	b.n	80045ce <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800456e:	d01a      	beq.n	80045a6 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004570:	f7ff fbfa 	bl	8003d68 <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	683a      	ldr	r2, [r7, #0]
 800457c:	429a      	cmp	r2, r3
 800457e:	d302      	bcc.n	8004586 <HAL_DMA2D_PollForTransfer+0x182>
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10f      	bne.n	80045a6 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800458a:	f043 0220 	orr.w	r2, r3, #32
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2203      	movs	r2, #3
 8004596:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e013      	b.n	80045ce <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f003 0310 	and.w	r3, r3, #16
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d0a1      	beq.n	80044f8 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2212      	movs	r2, #18
 80045ba:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3718      	adds	r7, #24
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
	...

080045d8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80045d8:	b480      	push	{r7}
 80045da:	b087      	sub	sp, #28
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d101      	bne.n	80045f8 <HAL_DMA2D_ConfigLayer+0x20>
 80045f4:	2302      	movs	r3, #2
 80045f6:	e079      	b.n	80046ec <HAL_DMA2D_ConfigLayer+0x114>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2202      	movs	r2, #2
 8004604:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	011b      	lsls	r3, r3, #4
 800460c:	3318      	adds	r3, #24
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	4413      	add	r3, r2
 8004612:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	685a      	ldr	r2, [r3, #4]
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	041b      	lsls	r3, r3, #16
 800461e:	4313      	orrs	r3, r2
 8004620:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004622:	4b35      	ldr	r3, [pc, #212]	; (80046f8 <HAL_DMA2D_ConfigLayer+0x120>)
 8004624:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	2b0a      	cmp	r3, #10
 800462c:	d003      	beq.n	8004636 <HAL_DMA2D_ConfigLayer+0x5e>
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	2b09      	cmp	r3, #9
 8004634:	d107      	bne.n	8004646 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800463e:	697a      	ldr	r2, [r7, #20]
 8004640:	4313      	orrs	r3, r2
 8004642:	617b      	str	r3, [r7, #20]
 8004644:	e005      	b.n	8004652 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	061b      	lsls	r3, r3, #24
 800464c:	697a      	ldr	r2, [r7, #20]
 800464e:	4313      	orrs	r3, r2
 8004650:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d120      	bne.n	800469a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	43db      	mvns	r3, r3
 8004662:	ea02 0103 	and.w	r1, r2, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	697a      	ldr	r2, [r7, #20]
 800466c:	430a      	orrs	r2, r1
 800466e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	693a      	ldr	r2, [r7, #16]
 8004676:	6812      	ldr	r2, [r2, #0]
 8004678:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	2b0a      	cmp	r3, #10
 8004680:	d003      	beq.n	800468a <HAL_DMA2D_ConfigLayer+0xb2>
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	2b09      	cmp	r3, #9
 8004688:	d127      	bne.n	80046da <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	68da      	ldr	r2, [r3, #12]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004696:	629a      	str	r2, [r3, #40]	; 0x28
 8004698:	e01f      	b.n	80046da <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	69da      	ldr	r2, [r3, #28]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	43db      	mvns	r3, r3
 80046a4:	ea02 0103 	and.w	r1, r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	697a      	ldr	r2, [r7, #20]
 80046ae:	430a      	orrs	r2, r1
 80046b0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	6812      	ldr	r2, [r2, #0]
 80046ba:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	2b0a      	cmp	r3, #10
 80046c2:	d003      	beq.n	80046cc <HAL_DMA2D_ConfigLayer+0xf4>
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	2b09      	cmp	r3, #9
 80046ca:	d106      	bne.n	80046da <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	68da      	ldr	r2, [r3, #12]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80046d8:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2201      	movs	r2, #1
 80046de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	371c      	adds	r7, #28
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr
 80046f8:	ff03000f 	.word	0xff03000f

080046fc <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b08b      	sub	sp, #44	; 0x2c
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	607a      	str	r2, [r7, #4]
 8004708:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004710:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	041a      	lsls	r2, r3, #16
 8004718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800471a:	431a      	orrs	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	430a      	orrs	r2, r1
 8004722:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004734:	d174      	bne.n	8004820 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800473c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004744:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800474c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	b2db      	uxtb	r3, r3
 8004752:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d108      	bne.n	800476e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 800475c:	69ba      	ldr	r2, [r7, #24]
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	431a      	orrs	r2, r3
 8004762:	6a3b      	ldr	r3, [r7, #32]
 8004764:	4313      	orrs	r3, r2
 8004766:	697a      	ldr	r2, [r7, #20]
 8004768:	4313      	orrs	r3, r2
 800476a:	627b      	str	r3, [r7, #36]	; 0x24
 800476c:	e053      	b.n	8004816 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	2b01      	cmp	r3, #1
 8004774:	d106      	bne.n	8004784 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8004776:	69ba      	ldr	r2, [r7, #24]
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	4313      	orrs	r3, r2
 800477c:	697a      	ldr	r2, [r7, #20]
 800477e:	4313      	orrs	r3, r2
 8004780:	627b      	str	r3, [r7, #36]	; 0x24
 8004782:	e048      	b.n	8004816 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	2b02      	cmp	r3, #2
 800478a:	d111      	bne.n	80047b0 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	0cdb      	lsrs	r3, r3, #19
 8004790:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	0a9b      	lsrs	r3, r3, #10
 8004796:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	08db      	lsrs	r3, r3, #3
 800479c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	015a      	lsls	r2, r3, #5
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	02db      	lsls	r3, r3, #11
 80047a6:	4313      	orrs	r3, r2
 80047a8:	697a      	ldr	r2, [r7, #20]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	627b      	str	r3, [r7, #36]	; 0x24
 80047ae:	e032      	b.n	8004816 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	2b03      	cmp	r3, #3
 80047b6:	d117      	bne.n	80047e8 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80047b8:	6a3b      	ldr	r3, [r7, #32]
 80047ba:	0fdb      	lsrs	r3, r3, #31
 80047bc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	0cdb      	lsrs	r3, r3, #19
 80047c2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	0adb      	lsrs	r3, r3, #11
 80047c8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	08db      	lsrs	r3, r3, #3
 80047ce:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	015a      	lsls	r2, r3, #5
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	029b      	lsls	r3, r3, #10
 80047d8:	431a      	orrs	r2, r3
 80047da:	6a3b      	ldr	r3, [r7, #32]
 80047dc:	03db      	lsls	r3, r3, #15
 80047de:	4313      	orrs	r3, r2
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	627b      	str	r3, [r7, #36]	; 0x24
 80047e6:	e016      	b.n	8004816 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80047e8:	6a3b      	ldr	r3, [r7, #32]
 80047ea:	0f1b      	lsrs	r3, r3, #28
 80047ec:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	0d1b      	lsrs	r3, r3, #20
 80047f2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	0b1b      	lsrs	r3, r3, #12
 80047f8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	091b      	lsrs	r3, r3, #4
 80047fe:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	011a      	lsls	r2, r3, #4
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	021b      	lsls	r3, r3, #8
 8004808:	431a      	orrs	r2, r3
 800480a:	6a3b      	ldr	r3, [r7, #32]
 800480c:	031b      	lsls	r3, r3, #12
 800480e:	4313      	orrs	r3, r2
 8004810:	697a      	ldr	r2, [r7, #20]
 8004812:	4313      	orrs	r3, r2
 8004814:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800481c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800481e:	e003      	b.n	8004828 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68ba      	ldr	r2, [r7, #8]
 8004826:	60da      	str	r2, [r3, #12]
}
 8004828:	bf00      	nop
 800482a:	372c      	adds	r7, #44	; 0x2c
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004834:	b480      	push	{r7}
 8004836:	b089      	sub	sp, #36	; 0x24
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800483e:	2300      	movs	r3, #0
 8004840:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004842:	2300      	movs	r3, #0
 8004844:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004846:	2300      	movs	r3, #0
 8004848:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800484a:	2300      	movs	r3, #0
 800484c:	61fb      	str	r3, [r7, #28]
 800484e:	e177      	b.n	8004b40 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004850:	2201      	movs	r2, #1
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	fa02 f303 	lsl.w	r3, r2, r3
 8004858:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	4013      	ands	r3, r2
 8004862:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004864:	693a      	ldr	r2, [r7, #16]
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	429a      	cmp	r2, r3
 800486a:	f040 8166 	bne.w	8004b3a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f003 0303 	and.w	r3, r3, #3
 8004876:	2b01      	cmp	r3, #1
 8004878:	d005      	beq.n	8004886 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004882:	2b02      	cmp	r3, #2
 8004884:	d130      	bne.n	80048e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	005b      	lsls	r3, r3, #1
 8004890:	2203      	movs	r2, #3
 8004892:	fa02 f303 	lsl.w	r3, r2, r3
 8004896:	43db      	mvns	r3, r3
 8004898:	69ba      	ldr	r2, [r7, #24]
 800489a:	4013      	ands	r3, r2
 800489c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	68da      	ldr	r2, [r3, #12]
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	005b      	lsls	r3, r3, #1
 80048a6:	fa02 f303 	lsl.w	r3, r2, r3
 80048aa:	69ba      	ldr	r2, [r7, #24]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	69ba      	ldr	r2, [r7, #24]
 80048b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80048bc:	2201      	movs	r2, #1
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	fa02 f303 	lsl.w	r3, r2, r3
 80048c4:	43db      	mvns	r3, r3
 80048c6:	69ba      	ldr	r2, [r7, #24]
 80048c8:	4013      	ands	r3, r2
 80048ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	091b      	lsrs	r3, r3, #4
 80048d2:	f003 0201 	and.w	r2, r3, #1
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	fa02 f303 	lsl.w	r3, r2, r3
 80048dc:	69ba      	ldr	r2, [r7, #24]
 80048de:	4313      	orrs	r3, r2
 80048e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	69ba      	ldr	r2, [r7, #24]
 80048e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f003 0303 	and.w	r3, r3, #3
 80048f0:	2b03      	cmp	r3, #3
 80048f2:	d017      	beq.n	8004924 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	005b      	lsls	r3, r3, #1
 80048fe:	2203      	movs	r2, #3
 8004900:	fa02 f303 	lsl.w	r3, r2, r3
 8004904:	43db      	mvns	r3, r3
 8004906:	69ba      	ldr	r2, [r7, #24]
 8004908:	4013      	ands	r3, r2
 800490a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	689a      	ldr	r2, [r3, #8]
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	005b      	lsls	r3, r3, #1
 8004914:	fa02 f303 	lsl.w	r3, r2, r3
 8004918:	69ba      	ldr	r2, [r7, #24]
 800491a:	4313      	orrs	r3, r2
 800491c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	69ba      	ldr	r2, [r7, #24]
 8004922:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f003 0303 	and.w	r3, r3, #3
 800492c:	2b02      	cmp	r3, #2
 800492e:	d123      	bne.n	8004978 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	08da      	lsrs	r2, r3, #3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	3208      	adds	r2, #8
 8004938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800493c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	f003 0307 	and.w	r3, r3, #7
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	220f      	movs	r2, #15
 8004948:	fa02 f303 	lsl.w	r3, r2, r3
 800494c:	43db      	mvns	r3, r3
 800494e:	69ba      	ldr	r2, [r7, #24]
 8004950:	4013      	ands	r3, r2
 8004952:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	691a      	ldr	r2, [r3, #16]
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	f003 0307 	and.w	r3, r3, #7
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	fa02 f303 	lsl.w	r3, r2, r3
 8004964:	69ba      	ldr	r2, [r7, #24]
 8004966:	4313      	orrs	r3, r2
 8004968:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	08da      	lsrs	r2, r3, #3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	3208      	adds	r2, #8
 8004972:	69b9      	ldr	r1, [r7, #24]
 8004974:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	005b      	lsls	r3, r3, #1
 8004982:	2203      	movs	r2, #3
 8004984:	fa02 f303 	lsl.w	r3, r2, r3
 8004988:	43db      	mvns	r3, r3
 800498a:	69ba      	ldr	r2, [r7, #24]
 800498c:	4013      	ands	r3, r2
 800498e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	f003 0203 	and.w	r2, r3, #3
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	005b      	lsls	r3, r3, #1
 800499c:	fa02 f303 	lsl.w	r3, r2, r3
 80049a0:	69ba      	ldr	r2, [r7, #24]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	69ba      	ldr	r2, [r7, #24]
 80049aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	f000 80c0 	beq.w	8004b3a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049ba:	2300      	movs	r3, #0
 80049bc:	60fb      	str	r3, [r7, #12]
 80049be:	4b66      	ldr	r3, [pc, #408]	; (8004b58 <HAL_GPIO_Init+0x324>)
 80049c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049c2:	4a65      	ldr	r2, [pc, #404]	; (8004b58 <HAL_GPIO_Init+0x324>)
 80049c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049c8:	6453      	str	r3, [r2, #68]	; 0x44
 80049ca:	4b63      	ldr	r3, [pc, #396]	; (8004b58 <HAL_GPIO_Init+0x324>)
 80049cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049d2:	60fb      	str	r3, [r7, #12]
 80049d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80049d6:	4a61      	ldr	r2, [pc, #388]	; (8004b5c <HAL_GPIO_Init+0x328>)
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	089b      	lsrs	r3, r3, #2
 80049dc:	3302      	adds	r3, #2
 80049de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	f003 0303 	and.w	r3, r3, #3
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	220f      	movs	r2, #15
 80049ee:	fa02 f303 	lsl.w	r3, r2, r3
 80049f2:	43db      	mvns	r3, r3
 80049f4:	69ba      	ldr	r2, [r7, #24]
 80049f6:	4013      	ands	r3, r2
 80049f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a58      	ldr	r2, [pc, #352]	; (8004b60 <HAL_GPIO_Init+0x32c>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d037      	beq.n	8004a72 <HAL_GPIO_Init+0x23e>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a57      	ldr	r2, [pc, #348]	; (8004b64 <HAL_GPIO_Init+0x330>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d031      	beq.n	8004a6e <HAL_GPIO_Init+0x23a>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a56      	ldr	r2, [pc, #344]	; (8004b68 <HAL_GPIO_Init+0x334>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d02b      	beq.n	8004a6a <HAL_GPIO_Init+0x236>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a55      	ldr	r2, [pc, #340]	; (8004b6c <HAL_GPIO_Init+0x338>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d025      	beq.n	8004a66 <HAL_GPIO_Init+0x232>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a54      	ldr	r2, [pc, #336]	; (8004b70 <HAL_GPIO_Init+0x33c>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d01f      	beq.n	8004a62 <HAL_GPIO_Init+0x22e>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a53      	ldr	r2, [pc, #332]	; (8004b74 <HAL_GPIO_Init+0x340>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d019      	beq.n	8004a5e <HAL_GPIO_Init+0x22a>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a52      	ldr	r2, [pc, #328]	; (8004b78 <HAL_GPIO_Init+0x344>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d013      	beq.n	8004a5a <HAL_GPIO_Init+0x226>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a51      	ldr	r2, [pc, #324]	; (8004b7c <HAL_GPIO_Init+0x348>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d00d      	beq.n	8004a56 <HAL_GPIO_Init+0x222>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a50      	ldr	r2, [pc, #320]	; (8004b80 <HAL_GPIO_Init+0x34c>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d007      	beq.n	8004a52 <HAL_GPIO_Init+0x21e>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a4f      	ldr	r2, [pc, #316]	; (8004b84 <HAL_GPIO_Init+0x350>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d101      	bne.n	8004a4e <HAL_GPIO_Init+0x21a>
 8004a4a:	2309      	movs	r3, #9
 8004a4c:	e012      	b.n	8004a74 <HAL_GPIO_Init+0x240>
 8004a4e:	230a      	movs	r3, #10
 8004a50:	e010      	b.n	8004a74 <HAL_GPIO_Init+0x240>
 8004a52:	2308      	movs	r3, #8
 8004a54:	e00e      	b.n	8004a74 <HAL_GPIO_Init+0x240>
 8004a56:	2307      	movs	r3, #7
 8004a58:	e00c      	b.n	8004a74 <HAL_GPIO_Init+0x240>
 8004a5a:	2306      	movs	r3, #6
 8004a5c:	e00a      	b.n	8004a74 <HAL_GPIO_Init+0x240>
 8004a5e:	2305      	movs	r3, #5
 8004a60:	e008      	b.n	8004a74 <HAL_GPIO_Init+0x240>
 8004a62:	2304      	movs	r3, #4
 8004a64:	e006      	b.n	8004a74 <HAL_GPIO_Init+0x240>
 8004a66:	2303      	movs	r3, #3
 8004a68:	e004      	b.n	8004a74 <HAL_GPIO_Init+0x240>
 8004a6a:	2302      	movs	r3, #2
 8004a6c:	e002      	b.n	8004a74 <HAL_GPIO_Init+0x240>
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e000      	b.n	8004a74 <HAL_GPIO_Init+0x240>
 8004a72:	2300      	movs	r3, #0
 8004a74:	69fa      	ldr	r2, [r7, #28]
 8004a76:	f002 0203 	and.w	r2, r2, #3
 8004a7a:	0092      	lsls	r2, r2, #2
 8004a7c:	4093      	lsls	r3, r2
 8004a7e:	69ba      	ldr	r2, [r7, #24]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a84:	4935      	ldr	r1, [pc, #212]	; (8004b5c <HAL_GPIO_Init+0x328>)
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	089b      	lsrs	r3, r3, #2
 8004a8a:	3302      	adds	r3, #2
 8004a8c:	69ba      	ldr	r2, [r7, #24]
 8004a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a92:	4b3d      	ldr	r3, [pc, #244]	; (8004b88 <HAL_GPIO_Init+0x354>)
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	43db      	mvns	r3, r3
 8004a9c:	69ba      	ldr	r2, [r7, #24]
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d003      	beq.n	8004ab6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004aae:	69ba      	ldr	r2, [r7, #24]
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004ab6:	4a34      	ldr	r2, [pc, #208]	; (8004b88 <HAL_GPIO_Init+0x354>)
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004abc:	4b32      	ldr	r3, [pc, #200]	; (8004b88 <HAL_GPIO_Init+0x354>)
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	43db      	mvns	r3, r3
 8004ac6:	69ba      	ldr	r2, [r7, #24]
 8004ac8:	4013      	ands	r3, r2
 8004aca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d003      	beq.n	8004ae0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004ad8:	69ba      	ldr	r2, [r7, #24]
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ae0:	4a29      	ldr	r2, [pc, #164]	; (8004b88 <HAL_GPIO_Init+0x354>)
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004ae6:	4b28      	ldr	r3, [pc, #160]	; (8004b88 <HAL_GPIO_Init+0x354>)
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	43db      	mvns	r3, r3
 8004af0:	69ba      	ldr	r2, [r7, #24]
 8004af2:	4013      	ands	r3, r2
 8004af4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d003      	beq.n	8004b0a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004b02:	69ba      	ldr	r2, [r7, #24]
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004b0a:	4a1f      	ldr	r2, [pc, #124]	; (8004b88 <HAL_GPIO_Init+0x354>)
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004b10:	4b1d      	ldr	r3, [pc, #116]	; (8004b88 <HAL_GPIO_Init+0x354>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	43db      	mvns	r3, r3
 8004b1a:	69ba      	ldr	r2, [r7, #24]
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d003      	beq.n	8004b34 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004b2c:	69ba      	ldr	r2, [r7, #24]
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004b34:	4a14      	ldr	r2, [pc, #80]	; (8004b88 <HAL_GPIO_Init+0x354>)
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	61fb      	str	r3, [r7, #28]
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	2b0f      	cmp	r3, #15
 8004b44:	f67f ae84 	bls.w	8004850 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004b48:	bf00      	nop
 8004b4a:	bf00      	nop
 8004b4c:	3724      	adds	r7, #36	; 0x24
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	40023800 	.word	0x40023800
 8004b5c:	40013800 	.word	0x40013800
 8004b60:	40020000 	.word	0x40020000
 8004b64:	40020400 	.word	0x40020400
 8004b68:	40020800 	.word	0x40020800
 8004b6c:	40020c00 	.word	0x40020c00
 8004b70:	40021000 	.word	0x40021000
 8004b74:	40021400 	.word	0x40021400
 8004b78:	40021800 	.word	0x40021800
 8004b7c:	40021c00 	.word	0x40021c00
 8004b80:	40022000 	.word	0x40022000
 8004b84:	40022400 	.word	0x40022400
 8004b88:	40013c00 	.word	0x40013c00

08004b8c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b087      	sub	sp, #28
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004b96:	2300      	movs	r3, #0
 8004b98:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	617b      	str	r3, [r7, #20]
 8004ba6:	e0d9      	b.n	8004d5c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004ba8:	2201      	movs	r2, #1
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004bb2:	683a      	ldr	r2, [r7, #0]
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	f040 80c9 	bne.w	8004d56 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004bc4:	4a6b      	ldr	r2, [pc, #428]	; (8004d74 <HAL_GPIO_DeInit+0x1e8>)
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	089b      	lsrs	r3, r3, #2
 8004bca:	3302      	adds	r3, #2
 8004bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bd0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	f003 0303 	and.w	r3, r3, #3
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	220f      	movs	r2, #15
 8004bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004be0:	68ba      	ldr	r2, [r7, #8]
 8004be2:	4013      	ands	r3, r2
 8004be4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a63      	ldr	r2, [pc, #396]	; (8004d78 <HAL_GPIO_DeInit+0x1ec>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d037      	beq.n	8004c5e <HAL_GPIO_DeInit+0xd2>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a62      	ldr	r2, [pc, #392]	; (8004d7c <HAL_GPIO_DeInit+0x1f0>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d031      	beq.n	8004c5a <HAL_GPIO_DeInit+0xce>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a61      	ldr	r2, [pc, #388]	; (8004d80 <HAL_GPIO_DeInit+0x1f4>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d02b      	beq.n	8004c56 <HAL_GPIO_DeInit+0xca>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a60      	ldr	r2, [pc, #384]	; (8004d84 <HAL_GPIO_DeInit+0x1f8>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d025      	beq.n	8004c52 <HAL_GPIO_DeInit+0xc6>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a5f      	ldr	r2, [pc, #380]	; (8004d88 <HAL_GPIO_DeInit+0x1fc>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d01f      	beq.n	8004c4e <HAL_GPIO_DeInit+0xc2>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a5e      	ldr	r2, [pc, #376]	; (8004d8c <HAL_GPIO_DeInit+0x200>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d019      	beq.n	8004c4a <HAL_GPIO_DeInit+0xbe>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a5d      	ldr	r2, [pc, #372]	; (8004d90 <HAL_GPIO_DeInit+0x204>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d013      	beq.n	8004c46 <HAL_GPIO_DeInit+0xba>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a5c      	ldr	r2, [pc, #368]	; (8004d94 <HAL_GPIO_DeInit+0x208>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d00d      	beq.n	8004c42 <HAL_GPIO_DeInit+0xb6>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a5b      	ldr	r2, [pc, #364]	; (8004d98 <HAL_GPIO_DeInit+0x20c>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d007      	beq.n	8004c3e <HAL_GPIO_DeInit+0xb2>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a5a      	ldr	r2, [pc, #360]	; (8004d9c <HAL_GPIO_DeInit+0x210>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d101      	bne.n	8004c3a <HAL_GPIO_DeInit+0xae>
 8004c36:	2309      	movs	r3, #9
 8004c38:	e012      	b.n	8004c60 <HAL_GPIO_DeInit+0xd4>
 8004c3a:	230a      	movs	r3, #10
 8004c3c:	e010      	b.n	8004c60 <HAL_GPIO_DeInit+0xd4>
 8004c3e:	2308      	movs	r3, #8
 8004c40:	e00e      	b.n	8004c60 <HAL_GPIO_DeInit+0xd4>
 8004c42:	2307      	movs	r3, #7
 8004c44:	e00c      	b.n	8004c60 <HAL_GPIO_DeInit+0xd4>
 8004c46:	2306      	movs	r3, #6
 8004c48:	e00a      	b.n	8004c60 <HAL_GPIO_DeInit+0xd4>
 8004c4a:	2305      	movs	r3, #5
 8004c4c:	e008      	b.n	8004c60 <HAL_GPIO_DeInit+0xd4>
 8004c4e:	2304      	movs	r3, #4
 8004c50:	e006      	b.n	8004c60 <HAL_GPIO_DeInit+0xd4>
 8004c52:	2303      	movs	r3, #3
 8004c54:	e004      	b.n	8004c60 <HAL_GPIO_DeInit+0xd4>
 8004c56:	2302      	movs	r3, #2
 8004c58:	e002      	b.n	8004c60 <HAL_GPIO_DeInit+0xd4>
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e000      	b.n	8004c60 <HAL_GPIO_DeInit+0xd4>
 8004c5e:	2300      	movs	r3, #0
 8004c60:	697a      	ldr	r2, [r7, #20]
 8004c62:	f002 0203 	and.w	r2, r2, #3
 8004c66:	0092      	lsls	r2, r2, #2
 8004c68:	4093      	lsls	r3, r2
 8004c6a:	68ba      	ldr	r2, [r7, #8]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d132      	bne.n	8004cd6 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004c70:	4b4b      	ldr	r3, [pc, #300]	; (8004da0 <HAL_GPIO_DeInit+0x214>)
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	43db      	mvns	r3, r3
 8004c78:	4949      	ldr	r1, [pc, #292]	; (8004da0 <HAL_GPIO_DeInit+0x214>)
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004c7e:	4b48      	ldr	r3, [pc, #288]	; (8004da0 <HAL_GPIO_DeInit+0x214>)
 8004c80:	685a      	ldr	r2, [r3, #4]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	43db      	mvns	r3, r3
 8004c86:	4946      	ldr	r1, [pc, #280]	; (8004da0 <HAL_GPIO_DeInit+0x214>)
 8004c88:	4013      	ands	r3, r2
 8004c8a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004c8c:	4b44      	ldr	r3, [pc, #272]	; (8004da0 <HAL_GPIO_DeInit+0x214>)
 8004c8e:	68da      	ldr	r2, [r3, #12]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	43db      	mvns	r3, r3
 8004c94:	4942      	ldr	r1, [pc, #264]	; (8004da0 <HAL_GPIO_DeInit+0x214>)
 8004c96:	4013      	ands	r3, r2
 8004c98:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004c9a:	4b41      	ldr	r3, [pc, #260]	; (8004da0 <HAL_GPIO_DeInit+0x214>)
 8004c9c:	689a      	ldr	r2, [r3, #8]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	43db      	mvns	r3, r3
 8004ca2:	493f      	ldr	r1, [pc, #252]	; (8004da0 <HAL_GPIO_DeInit+0x214>)
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	f003 0303 	and.w	r3, r3, #3
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	220f      	movs	r2, #15
 8004cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004cb8:	4a2e      	ldr	r2, [pc, #184]	; (8004d74 <HAL_GPIO_DeInit+0x1e8>)
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	089b      	lsrs	r3, r3, #2
 8004cbe:	3302      	adds	r3, #2
 8004cc0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	43da      	mvns	r2, r3
 8004cc8:	482a      	ldr	r0, [pc, #168]	; (8004d74 <HAL_GPIO_DeInit+0x1e8>)
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	089b      	lsrs	r3, r3, #2
 8004cce:	400a      	ands	r2, r1
 8004cd0:	3302      	adds	r3, #2
 8004cd2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	005b      	lsls	r3, r3, #1
 8004cde:	2103      	movs	r1, #3
 8004ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ce4:	43db      	mvns	r3, r3
 8004ce6:	401a      	ands	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	08da      	lsrs	r2, r3, #3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	3208      	adds	r2, #8
 8004cf4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	f003 0307 	and.w	r3, r3, #7
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	220f      	movs	r2, #15
 8004d02:	fa02 f303 	lsl.w	r3, r2, r3
 8004d06:	43db      	mvns	r3, r3
 8004d08:	697a      	ldr	r2, [r7, #20]
 8004d0a:	08d2      	lsrs	r2, r2, #3
 8004d0c:	4019      	ands	r1, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	3208      	adds	r2, #8
 8004d12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	68da      	ldr	r2, [r3, #12]
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	005b      	lsls	r3, r3, #1
 8004d1e:	2103      	movs	r1, #3
 8004d20:	fa01 f303 	lsl.w	r3, r1, r3
 8004d24:	43db      	mvns	r3, r3
 8004d26:	401a      	ands	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	685a      	ldr	r2, [r3, #4]
 8004d30:	2101      	movs	r1, #1
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	fa01 f303 	lsl.w	r3, r1, r3
 8004d38:	43db      	mvns	r3, r3
 8004d3a:	401a      	ands	r2, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	689a      	ldr	r2, [r3, #8]
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	005b      	lsls	r3, r3, #1
 8004d48:	2103      	movs	r1, #3
 8004d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d4e:	43db      	mvns	r3, r3
 8004d50:	401a      	ands	r2, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	3301      	adds	r3, #1
 8004d5a:	617b      	str	r3, [r7, #20]
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	2b0f      	cmp	r3, #15
 8004d60:	f67f af22 	bls.w	8004ba8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004d64:	bf00      	nop
 8004d66:	bf00      	nop
 8004d68:	371c      	adds	r7, #28
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	40013800 	.word	0x40013800
 8004d78:	40020000 	.word	0x40020000
 8004d7c:	40020400 	.word	0x40020400
 8004d80:	40020800 	.word	0x40020800
 8004d84:	40020c00 	.word	0x40020c00
 8004d88:	40021000 	.word	0x40021000
 8004d8c:	40021400 	.word	0x40021400
 8004d90:	40021800 	.word	0x40021800
 8004d94:	40021c00 	.word	0x40021c00
 8004d98:	40022000 	.word	0x40022000
 8004d9c:	40022400 	.word	0x40022400
 8004da0:	40013c00 	.word	0x40013c00

08004da4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	460b      	mov	r3, r1
 8004dae:	807b      	strh	r3, [r7, #2]
 8004db0:	4613      	mov	r3, r2
 8004db2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004db4:	787b      	ldrb	r3, [r7, #1]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d003      	beq.n	8004dc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004dba:	887a      	ldrh	r2, [r7, #2]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004dc0:	e003      	b.n	8004dca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004dc2:	887b      	ldrh	r3, [r7, #2]
 8004dc4:	041a      	lsls	r2, r3, #16
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	619a      	str	r2, [r3, #24]
}
 8004dca:	bf00      	nop
 8004dcc:	370c      	adds	r7, #12
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
	...

08004dd8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d101      	bne.n	8004dea <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e0bf      	b.n	8004f6a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d106      	bne.n	8004e04 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 f8ba 	bl	8004f78 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2202      	movs	r2, #2
 8004e08:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	699a      	ldr	r2, [r3, #24]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004e1a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	6999      	ldr	r1, [r3, #24]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685a      	ldr	r2, [r3, #4]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004e30:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	430a      	orrs	r2, r1
 8004e3e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	6899      	ldr	r1, [r3, #8]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	4b4a      	ldr	r3, [pc, #296]	; (8004f74 <HAL_LTDC_Init+0x19c>)
 8004e4c:	400b      	ands	r3, r1
 8004e4e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	695b      	ldr	r3, [r3, #20]
 8004e54:	041b      	lsls	r3, r3, #16
 8004e56:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	6899      	ldr	r1, [r3, #8]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	699a      	ldr	r2, [r3, #24]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	431a      	orrs	r2, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	430a      	orrs	r2, r1
 8004e6c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68d9      	ldr	r1, [r3, #12]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	4b3e      	ldr	r3, [pc, #248]	; (8004f74 <HAL_LTDC_Init+0x19c>)
 8004e7a:	400b      	ands	r3, r1
 8004e7c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	69db      	ldr	r3, [r3, #28]
 8004e82:	041b      	lsls	r3, r3, #16
 8004e84:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68d9      	ldr	r1, [r3, #12]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a1a      	ldr	r2, [r3, #32]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	431a      	orrs	r2, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	430a      	orrs	r2, r1
 8004e9a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	6919      	ldr	r1, [r3, #16]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	4b33      	ldr	r3, [pc, #204]	; (8004f74 <HAL_LTDC_Init+0x19c>)
 8004ea8:	400b      	ands	r3, r1
 8004eaa:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb0:	041b      	lsls	r3, r3, #16
 8004eb2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	6919      	ldr	r1, [r3, #16]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	431a      	orrs	r2, r3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	430a      	orrs	r2, r1
 8004ec8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	6959      	ldr	r1, [r3, #20]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	4b27      	ldr	r3, [pc, #156]	; (8004f74 <HAL_LTDC_Init+0x19c>)
 8004ed6:	400b      	ands	r3, r1
 8004ed8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ede:	041b      	lsls	r3, r3, #16
 8004ee0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	6959      	ldr	r1, [r3, #20]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	431a      	orrs	r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004efe:	021b      	lsls	r3, r3, #8
 8004f00:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004f08:	041b      	lsls	r3, r3, #16
 8004f0a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004f1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004f22:	68ba      	ldr	r2, [r7, #8]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004f2e:	431a      	orrs	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	430a      	orrs	r2, r1
 8004f36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f042 0206 	orr.w	r2, r2, #6
 8004f46:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	699a      	ldr	r2, [r3, #24]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f042 0201 	orr.w	r2, r2, #1
 8004f56:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3710      	adds	r7, #16
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	f000f800 	.word	0xf000f800

08004f78 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8004f80:	bf00      	nop
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004f8c:	b5b0      	push	{r4, r5, r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	60b9      	str	r1, [r7, #8]
 8004f96:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d101      	bne.n	8004fa6 <HAL_LTDC_ConfigLayer+0x1a>
 8004fa2:	2302      	movs	r3, #2
 8004fa4:	e02c      	b.n	8005000 <HAL_LTDC_ConfigLayer+0x74>
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2202      	movs	r2, #2
 8004fb2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2134      	movs	r1, #52	; 0x34
 8004fbc:	fb01 f303 	mul.w	r3, r1, r3
 8004fc0:	4413      	add	r3, r2
 8004fc2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	4614      	mov	r4, r2
 8004fca:	461d      	mov	r5, r3
 8004fcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004fce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004fd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004fd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004fd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004fd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004fd8:	682b      	ldr	r3, [r5, #0]
 8004fda:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	68b9      	ldr	r1, [r7, #8]
 8004fe0:	68f8      	ldr	r0, [r7, #12]
 8004fe2:	f000 f83b 	bl	800505c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2201      	movs	r2, #1
 8004fec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004ffe:	2300      	movs	r3, #0
}
 8005000:	4618      	mov	r0, r3
 8005002:	3710      	adds	r7, #16
 8005004:	46bd      	mov	sp, r7
 8005006:	bdb0      	pop	{r4, r5, r7, pc}

08005008 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005016:	2b01      	cmp	r3, #1
 8005018:	d101      	bne.n	800501e <HAL_LTDC_EnableDither+0x16>
 800501a:	2302      	movs	r3, #2
 800501c:	e016      	b.n	800504c <HAL_LTDC_EnableDither+0x44>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2201      	movs	r2, #1
 8005022:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2202      	movs	r2, #2
 800502a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 800502e:	4b0a      	ldr	r3, [pc, #40]	; (8005058 <HAL_LTDC_EnableDither+0x50>)
 8005030:	699b      	ldr	r3, [r3, #24]
 8005032:	4a09      	ldr	r2, [pc, #36]	; (8005058 <HAL_LTDC_EnableDither+0x50>)
 8005034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005038:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2201      	movs	r2, #1
 800503e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800504a:	2300      	movs	r3, #0
}
 800504c:	4618      	mov	r0, r3
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr
 8005058:	40016800 	.word	0x40016800

0800505c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800505c:	b480      	push	{r7}
 800505e:	b089      	sub	sp, #36	; 0x24
 8005060:	af00      	add	r7, sp, #0
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	685a      	ldr	r2, [r3, #4]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	0c1b      	lsrs	r3, r3, #16
 8005074:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005078:	4413      	add	r3, r2
 800507a:	041b      	lsls	r3, r3, #16
 800507c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	461a      	mov	r2, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	01db      	lsls	r3, r3, #7
 8005088:	4413      	add	r3, r2
 800508a:	3384      	adds	r3, #132	; 0x84
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	6812      	ldr	r2, [r2, #0]
 8005092:	4611      	mov	r1, r2
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	01d2      	lsls	r2, r2, #7
 8005098:	440a      	add	r2, r1
 800509a:	3284      	adds	r2, #132	; 0x84
 800509c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80050a0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	0c1b      	lsrs	r3, r3, #16
 80050ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80050b2:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80050b4:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4619      	mov	r1, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	01db      	lsls	r3, r3, #7
 80050c0:	440b      	add	r3, r1
 80050c2:	3384      	adds	r3, #132	; 0x84
 80050c4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80050ca:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	68da      	ldr	r2, [r3, #12]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050da:	4413      	add	r3, r2
 80050dc:	041b      	lsls	r3, r3, #16
 80050de:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	461a      	mov	r2, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	01db      	lsls	r3, r3, #7
 80050ea:	4413      	add	r3, r2
 80050ec:	3384      	adds	r3, #132	; 0x84
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	6812      	ldr	r2, [r2, #0]
 80050f4:	4611      	mov	r1, r2
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	01d2      	lsls	r2, r2, #7
 80050fa:	440a      	add	r2, r1
 80050fc:	3284      	adds	r2, #132	; 0x84
 80050fe:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005102:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	689a      	ldr	r2, [r3, #8]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005112:	4413      	add	r3, r2
 8005114:	1c5a      	adds	r2, r3, #1
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4619      	mov	r1, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	01db      	lsls	r3, r3, #7
 8005120:	440b      	add	r3, r1
 8005122:	3384      	adds	r3, #132	; 0x84
 8005124:	4619      	mov	r1, r3
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	4313      	orrs	r3, r2
 800512a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	461a      	mov	r2, r3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	01db      	lsls	r3, r3, #7
 8005136:	4413      	add	r3, r2
 8005138:	3384      	adds	r3, #132	; 0x84
 800513a:	691b      	ldr	r3, [r3, #16]
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	6812      	ldr	r2, [r2, #0]
 8005140:	4611      	mov	r1, r2
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	01d2      	lsls	r2, r2, #7
 8005146:	440a      	add	r2, r1
 8005148:	3284      	adds	r2, #132	; 0x84
 800514a:	f023 0307 	bic.w	r3, r3, #7
 800514e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	461a      	mov	r2, r3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	01db      	lsls	r3, r3, #7
 800515a:	4413      	add	r3, r2
 800515c:	3384      	adds	r3, #132	; 0x84
 800515e:	461a      	mov	r2, r3
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800516c:	021b      	lsls	r3, r3, #8
 800516e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005176:	041b      	lsls	r3, r3, #16
 8005178:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	699b      	ldr	r3, [r3, #24]
 800517e:	061b      	lsls	r3, r3, #24
 8005180:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	461a      	mov	r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	01db      	lsls	r3, r3, #7
 800518c:	4413      	add	r3, r2
 800518e:	3384      	adds	r3, #132	; 0x84
 8005190:	699b      	ldr	r3, [r3, #24]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	461a      	mov	r2, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	01db      	lsls	r3, r3, #7
 800519c:	4413      	add	r3, r2
 800519e:	3384      	adds	r3, #132	; 0x84
 80051a0:	461a      	mov	r2, r3
 80051a2:	2300      	movs	r3, #0
 80051a4:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80051ac:	461a      	mov	r2, r3
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	431a      	orrs	r2, r3
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	431a      	orrs	r2, r3
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4619      	mov	r1, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	01db      	lsls	r3, r3, #7
 80051c0:	440b      	add	r3, r1
 80051c2:	3384      	adds	r3, #132	; 0x84
 80051c4:	4619      	mov	r1, r3
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	461a      	mov	r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	01db      	lsls	r3, r3, #7
 80051d6:	4413      	add	r3, r2
 80051d8:	3384      	adds	r3, #132	; 0x84
 80051da:	695b      	ldr	r3, [r3, #20]
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	6812      	ldr	r2, [r2, #0]
 80051e0:	4611      	mov	r1, r2
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	01d2      	lsls	r2, r2, #7
 80051e6:	440a      	add	r2, r1
 80051e8:	3284      	adds	r2, #132	; 0x84
 80051ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80051ee:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	461a      	mov	r2, r3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	01db      	lsls	r3, r3, #7
 80051fa:	4413      	add	r3, r2
 80051fc:	3384      	adds	r3, #132	; 0x84
 80051fe:	461a      	mov	r2, r3
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	695b      	ldr	r3, [r3, #20]
 8005204:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	461a      	mov	r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	01db      	lsls	r3, r3, #7
 8005210:	4413      	add	r3, r2
 8005212:	3384      	adds	r3, #132	; 0x84
 8005214:	69db      	ldr	r3, [r3, #28]
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	6812      	ldr	r2, [r2, #0]
 800521a:	4611      	mov	r1, r2
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	01d2      	lsls	r2, r2, #7
 8005220:	440a      	add	r2, r1
 8005222:	3284      	adds	r2, #132	; 0x84
 8005224:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005228:	f023 0307 	bic.w	r3, r3, #7
 800522c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	69da      	ldr	r2, [r3, #28]
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	6a1b      	ldr	r3, [r3, #32]
 8005236:	68f9      	ldr	r1, [r7, #12]
 8005238:	6809      	ldr	r1, [r1, #0]
 800523a:	4608      	mov	r0, r1
 800523c:	6879      	ldr	r1, [r7, #4]
 800523e:	01c9      	lsls	r1, r1, #7
 8005240:	4401      	add	r1, r0
 8005242:	3184      	adds	r1, #132	; 0x84
 8005244:	4313      	orrs	r3, r2
 8005246:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	461a      	mov	r2, r3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	01db      	lsls	r3, r3, #7
 8005252:	4413      	add	r3, r2
 8005254:	3384      	adds	r3, #132	; 0x84
 8005256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	461a      	mov	r2, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	01db      	lsls	r3, r3, #7
 8005262:	4413      	add	r3, r2
 8005264:	3384      	adds	r3, #132	; 0x84
 8005266:	461a      	mov	r2, r3
 8005268:	2300      	movs	r3, #0
 800526a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	461a      	mov	r2, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	01db      	lsls	r3, r3, #7
 8005276:	4413      	add	r3, r2
 8005278:	3384      	adds	r3, #132	; 0x84
 800527a:	461a      	mov	r2, r3
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005280:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d102      	bne.n	8005290 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800528a:	2304      	movs	r3, #4
 800528c:	61fb      	str	r3, [r7, #28]
 800528e:	e01b      	b.n	80052c8 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	2b01      	cmp	r3, #1
 8005296:	d102      	bne.n	800529e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005298:	2303      	movs	r3, #3
 800529a:	61fb      	str	r3, [r7, #28]
 800529c:	e014      	b.n	80052c8 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	691b      	ldr	r3, [r3, #16]
 80052a2:	2b04      	cmp	r3, #4
 80052a4:	d00b      	beq.n	80052be <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d007      	beq.n	80052be <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80052b2:	2b03      	cmp	r3, #3
 80052b4:	d003      	beq.n	80052be <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80052ba:	2b07      	cmp	r3, #7
 80052bc:	d102      	bne.n	80052c4 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80052be:	2302      	movs	r3, #2
 80052c0:	61fb      	str	r3, [r7, #28]
 80052c2:	e001      	b.n	80052c8 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80052c4:	2301      	movs	r3, #1
 80052c6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	461a      	mov	r2, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	01db      	lsls	r3, r3, #7
 80052d2:	4413      	add	r3, r2
 80052d4:	3384      	adds	r3, #132	; 0x84
 80052d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	6812      	ldr	r2, [r2, #0]
 80052dc:	4611      	mov	r1, r2
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	01d2      	lsls	r2, r2, #7
 80052e2:	440a      	add	r2, r1
 80052e4:	3284      	adds	r2, #132	; 0x84
 80052e6:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80052ea:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f0:	69fa      	ldr	r2, [r7, #28]
 80052f2:	fb02 f303 	mul.w	r3, r2, r3
 80052f6:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	6859      	ldr	r1, [r3, #4]
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	1acb      	subs	r3, r1, r3
 8005302:	69f9      	ldr	r1, [r7, #28]
 8005304:	fb01 f303 	mul.w	r3, r1, r3
 8005308:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800530a:	68f9      	ldr	r1, [r7, #12]
 800530c:	6809      	ldr	r1, [r1, #0]
 800530e:	4608      	mov	r0, r1
 8005310:	6879      	ldr	r1, [r7, #4]
 8005312:	01c9      	lsls	r1, r1, #7
 8005314:	4401      	add	r1, r0
 8005316:	3184      	adds	r1, #132	; 0x84
 8005318:	4313      	orrs	r3, r2
 800531a:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	461a      	mov	r2, r3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	01db      	lsls	r3, r3, #7
 8005326:	4413      	add	r3, r2
 8005328:	3384      	adds	r3, #132	; 0x84
 800532a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	6812      	ldr	r2, [r2, #0]
 8005330:	4611      	mov	r1, r2
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	01d2      	lsls	r2, r2, #7
 8005336:	440a      	add	r2, r1
 8005338:	3284      	adds	r2, #132	; 0x84
 800533a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800533e:	f023 0307 	bic.w	r3, r3, #7
 8005342:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	461a      	mov	r2, r3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	01db      	lsls	r3, r3, #7
 800534e:	4413      	add	r3, r2
 8005350:	3384      	adds	r3, #132	; 0x84
 8005352:	461a      	mov	r2, r3
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005358:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	461a      	mov	r2, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	01db      	lsls	r3, r3, #7
 8005364:	4413      	add	r3, r2
 8005366:	3384      	adds	r3, #132	; 0x84
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	6812      	ldr	r2, [r2, #0]
 800536e:	4611      	mov	r1, r2
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	01d2      	lsls	r2, r2, #7
 8005374:	440a      	add	r2, r1
 8005376:	3284      	adds	r2, #132	; 0x84
 8005378:	f043 0301 	orr.w	r3, r3, #1
 800537c:	6013      	str	r3, [r2, #0]
}
 800537e:	bf00      	nop
 8005380:	3724      	adds	r7, #36	; 0x24
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr

0800538a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800538a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800538c:	b08f      	sub	sp, #60	; 0x3c
 800538e:	af0a      	add	r7, sp, #40	; 0x28
 8005390:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d101      	bne.n	800539c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e10f      	b.n	80055bc <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d106      	bne.n	80053bc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f009 ff44 	bl	800f244 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2203      	movs	r2, #3
 80053c0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d102      	bne.n	80053d6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4618      	mov	r0, r3
 80053dc:	f003 fc1f 	bl	8008c1e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	603b      	str	r3, [r7, #0]
 80053e6:	687e      	ldr	r6, [r7, #4]
 80053e8:	466d      	mov	r5, sp
 80053ea:	f106 0410 	add.w	r4, r6, #16
 80053ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80053f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80053f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80053fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80053fe:	1d33      	adds	r3, r6, #4
 8005400:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005402:	6838      	ldr	r0, [r7, #0]
 8005404:	f003 faf6 	bl	80089f4 <USB_CoreInit>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d005      	beq.n	800541a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2202      	movs	r2, #2
 8005412:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e0d0      	b.n	80055bc <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2100      	movs	r1, #0
 8005420:	4618      	mov	r0, r3
 8005422:	f003 fc0d 	bl	8008c40 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005426:	2300      	movs	r3, #0
 8005428:	73fb      	strb	r3, [r7, #15]
 800542a:	e04a      	b.n	80054c2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800542c:	7bfa      	ldrb	r2, [r7, #15]
 800542e:	6879      	ldr	r1, [r7, #4]
 8005430:	4613      	mov	r3, r2
 8005432:	00db      	lsls	r3, r3, #3
 8005434:	4413      	add	r3, r2
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	440b      	add	r3, r1
 800543a:	333d      	adds	r3, #61	; 0x3d
 800543c:	2201      	movs	r2, #1
 800543e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005440:	7bfa      	ldrb	r2, [r7, #15]
 8005442:	6879      	ldr	r1, [r7, #4]
 8005444:	4613      	mov	r3, r2
 8005446:	00db      	lsls	r3, r3, #3
 8005448:	4413      	add	r3, r2
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	440b      	add	r3, r1
 800544e:	333c      	adds	r3, #60	; 0x3c
 8005450:	7bfa      	ldrb	r2, [r7, #15]
 8005452:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005454:	7bfa      	ldrb	r2, [r7, #15]
 8005456:	7bfb      	ldrb	r3, [r7, #15]
 8005458:	b298      	uxth	r0, r3
 800545a:	6879      	ldr	r1, [r7, #4]
 800545c:	4613      	mov	r3, r2
 800545e:	00db      	lsls	r3, r3, #3
 8005460:	4413      	add	r3, r2
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	440b      	add	r3, r1
 8005466:	3344      	adds	r3, #68	; 0x44
 8005468:	4602      	mov	r2, r0
 800546a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800546c:	7bfa      	ldrb	r2, [r7, #15]
 800546e:	6879      	ldr	r1, [r7, #4]
 8005470:	4613      	mov	r3, r2
 8005472:	00db      	lsls	r3, r3, #3
 8005474:	4413      	add	r3, r2
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	440b      	add	r3, r1
 800547a:	3340      	adds	r3, #64	; 0x40
 800547c:	2200      	movs	r2, #0
 800547e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005480:	7bfa      	ldrb	r2, [r7, #15]
 8005482:	6879      	ldr	r1, [r7, #4]
 8005484:	4613      	mov	r3, r2
 8005486:	00db      	lsls	r3, r3, #3
 8005488:	4413      	add	r3, r2
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	440b      	add	r3, r1
 800548e:	3348      	adds	r3, #72	; 0x48
 8005490:	2200      	movs	r2, #0
 8005492:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005494:	7bfa      	ldrb	r2, [r7, #15]
 8005496:	6879      	ldr	r1, [r7, #4]
 8005498:	4613      	mov	r3, r2
 800549a:	00db      	lsls	r3, r3, #3
 800549c:	4413      	add	r3, r2
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	440b      	add	r3, r1
 80054a2:	334c      	adds	r3, #76	; 0x4c
 80054a4:	2200      	movs	r2, #0
 80054a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80054a8:	7bfa      	ldrb	r2, [r7, #15]
 80054aa:	6879      	ldr	r1, [r7, #4]
 80054ac:	4613      	mov	r3, r2
 80054ae:	00db      	lsls	r3, r3, #3
 80054b0:	4413      	add	r3, r2
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	440b      	add	r3, r1
 80054b6:	3354      	adds	r3, #84	; 0x54
 80054b8:	2200      	movs	r2, #0
 80054ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054bc:	7bfb      	ldrb	r3, [r7, #15]
 80054be:	3301      	adds	r3, #1
 80054c0:	73fb      	strb	r3, [r7, #15]
 80054c2:	7bfa      	ldrb	r2, [r7, #15]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d3af      	bcc.n	800542c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054cc:	2300      	movs	r3, #0
 80054ce:	73fb      	strb	r3, [r7, #15]
 80054d0:	e044      	b.n	800555c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80054d2:	7bfa      	ldrb	r2, [r7, #15]
 80054d4:	6879      	ldr	r1, [r7, #4]
 80054d6:	4613      	mov	r3, r2
 80054d8:	00db      	lsls	r3, r3, #3
 80054da:	4413      	add	r3, r2
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	440b      	add	r3, r1
 80054e0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80054e4:	2200      	movs	r2, #0
 80054e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80054e8:	7bfa      	ldrb	r2, [r7, #15]
 80054ea:	6879      	ldr	r1, [r7, #4]
 80054ec:	4613      	mov	r3, r2
 80054ee:	00db      	lsls	r3, r3, #3
 80054f0:	4413      	add	r3, r2
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	440b      	add	r3, r1
 80054f6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80054fa:	7bfa      	ldrb	r2, [r7, #15]
 80054fc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80054fe:	7bfa      	ldrb	r2, [r7, #15]
 8005500:	6879      	ldr	r1, [r7, #4]
 8005502:	4613      	mov	r3, r2
 8005504:	00db      	lsls	r3, r3, #3
 8005506:	4413      	add	r3, r2
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	440b      	add	r3, r1
 800550c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005510:	2200      	movs	r2, #0
 8005512:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005514:	7bfa      	ldrb	r2, [r7, #15]
 8005516:	6879      	ldr	r1, [r7, #4]
 8005518:	4613      	mov	r3, r2
 800551a:	00db      	lsls	r3, r3, #3
 800551c:	4413      	add	r3, r2
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	440b      	add	r3, r1
 8005522:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005526:	2200      	movs	r2, #0
 8005528:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800552a:	7bfa      	ldrb	r2, [r7, #15]
 800552c:	6879      	ldr	r1, [r7, #4]
 800552e:	4613      	mov	r3, r2
 8005530:	00db      	lsls	r3, r3, #3
 8005532:	4413      	add	r3, r2
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	440b      	add	r3, r1
 8005538:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800553c:	2200      	movs	r2, #0
 800553e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005540:	7bfa      	ldrb	r2, [r7, #15]
 8005542:	6879      	ldr	r1, [r7, #4]
 8005544:	4613      	mov	r3, r2
 8005546:	00db      	lsls	r3, r3, #3
 8005548:	4413      	add	r3, r2
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	440b      	add	r3, r1
 800554e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005552:	2200      	movs	r2, #0
 8005554:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005556:	7bfb      	ldrb	r3, [r7, #15]
 8005558:	3301      	adds	r3, #1
 800555a:	73fb      	strb	r3, [r7, #15]
 800555c:	7bfa      	ldrb	r2, [r7, #15]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	429a      	cmp	r2, r3
 8005564:	d3b5      	bcc.n	80054d2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	603b      	str	r3, [r7, #0]
 800556c:	687e      	ldr	r6, [r7, #4]
 800556e:	466d      	mov	r5, sp
 8005570:	f106 0410 	add.w	r4, r6, #16
 8005574:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005576:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005578:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800557a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800557c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005580:	e885 0003 	stmia.w	r5, {r0, r1}
 8005584:	1d33      	adds	r3, r6, #4
 8005586:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005588:	6838      	ldr	r0, [r7, #0]
 800558a:	f003 fba5 	bl	8008cd8 <USB_DevInit>
 800558e:	4603      	mov	r3, r0
 8005590:	2b00      	cmp	r3, #0
 8005592:	d005      	beq.n	80055a0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2202      	movs	r2, #2
 8005598:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e00d      	b.n	80055bc <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4618      	mov	r0, r3
 80055b6:	f004 fcf4 	bl	8009fa2 <USB_DevDisconnect>

  return HAL_OK;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3714      	adds	r7, #20
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080055c4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b084      	sub	sp, #16
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d101      	bne.n	80055e0 <HAL_PCD_Start+0x1c>
 80055dc:	2302      	movs	r3, #2
 80055de:	e020      	b.n	8005622 <HAL_PCD_Start+0x5e>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d109      	bne.n	8005604 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d005      	beq.n	8005604 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055fc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4618      	mov	r0, r3
 800560a:	f003 faf7 	bl	8008bfc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4618      	mov	r0, r3
 8005614:	f004 fca4 	bl	8009f60 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	3710      	adds	r7, #16
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}

0800562a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800562a:	b590      	push	{r4, r7, lr}
 800562c:	b08d      	sub	sp, #52	; 0x34
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005638:	6a3b      	ldr	r3, [r7, #32]
 800563a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4618      	mov	r0, r3
 8005642:	f004 fd62 	bl	800a10a <USB_GetMode>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	f040 848a 	bne.w	8005f62 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4618      	mov	r0, r3
 8005654:	f004 fcc6 	bl	8009fe4 <USB_ReadInterrupts>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	f000 8480 	beq.w	8005f60 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	0a1b      	lsrs	r3, r3, #8
 800566a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4618      	mov	r0, r3
 800567a:	f004 fcb3 	bl	8009fe4 <USB_ReadInterrupts>
 800567e:	4603      	mov	r3, r0
 8005680:	f003 0302 	and.w	r3, r3, #2
 8005684:	2b02      	cmp	r3, #2
 8005686:	d107      	bne.n	8005698 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	695a      	ldr	r2, [r3, #20]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f002 0202 	and.w	r2, r2, #2
 8005696:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4618      	mov	r0, r3
 800569e:	f004 fca1 	bl	8009fe4 <USB_ReadInterrupts>
 80056a2:	4603      	mov	r3, r0
 80056a4:	f003 0310 	and.w	r3, r3, #16
 80056a8:	2b10      	cmp	r3, #16
 80056aa:	d161      	bne.n	8005770 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	699a      	ldr	r2, [r3, #24]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f022 0210 	bic.w	r2, r2, #16
 80056ba:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80056bc:	6a3b      	ldr	r3, [r7, #32]
 80056be:	6a1b      	ldr	r3, [r3, #32]
 80056c0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	f003 020f 	and.w	r2, r3, #15
 80056c8:	4613      	mov	r3, r2
 80056ca:	00db      	lsls	r3, r3, #3
 80056cc:	4413      	add	r3, r2
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	4413      	add	r3, r2
 80056d8:	3304      	adds	r3, #4
 80056da:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	0c5b      	lsrs	r3, r3, #17
 80056e0:	f003 030f 	and.w	r3, r3, #15
 80056e4:	2b02      	cmp	r3, #2
 80056e6:	d124      	bne.n	8005732 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80056e8:	69ba      	ldr	r2, [r7, #24]
 80056ea:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80056ee:	4013      	ands	r3, r2
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d035      	beq.n	8005760 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	091b      	lsrs	r3, r3, #4
 80056fc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80056fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005702:	b29b      	uxth	r3, r3
 8005704:	461a      	mov	r2, r3
 8005706:	6a38      	ldr	r0, [r7, #32]
 8005708:	f004 fad8 	bl	8009cbc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	691a      	ldr	r2, [r3, #16]
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	091b      	lsrs	r3, r3, #4
 8005714:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005718:	441a      	add	r2, r3
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	6a1a      	ldr	r2, [r3, #32]
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	091b      	lsrs	r3, r3, #4
 8005726:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800572a:	441a      	add	r2, r3
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	621a      	str	r2, [r3, #32]
 8005730:	e016      	b.n	8005760 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	0c5b      	lsrs	r3, r3, #17
 8005736:	f003 030f 	and.w	r3, r3, #15
 800573a:	2b06      	cmp	r3, #6
 800573c:	d110      	bne.n	8005760 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005744:	2208      	movs	r2, #8
 8005746:	4619      	mov	r1, r3
 8005748:	6a38      	ldr	r0, [r7, #32]
 800574a:	f004 fab7 	bl	8009cbc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	6a1a      	ldr	r2, [r3, #32]
 8005752:	69bb      	ldr	r3, [r7, #24]
 8005754:	091b      	lsrs	r3, r3, #4
 8005756:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800575a:	441a      	add	r2, r3
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	699a      	ldr	r2, [r3, #24]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f042 0210 	orr.w	r2, r2, #16
 800576e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4618      	mov	r0, r3
 8005776:	f004 fc35 	bl	8009fe4 <USB_ReadInterrupts>
 800577a:	4603      	mov	r3, r0
 800577c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005780:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005784:	f040 80a7 	bne.w	80058d6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005788:	2300      	movs	r3, #0
 800578a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4618      	mov	r0, r3
 8005792:	f004 fc3a 	bl	800a00a <USB_ReadDevAllOutEpInterrupt>
 8005796:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005798:	e099      	b.n	80058ce <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800579a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579c:	f003 0301 	and.w	r3, r3, #1
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	f000 808e 	beq.w	80058c2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057ac:	b2d2      	uxtb	r2, r2
 80057ae:	4611      	mov	r1, r2
 80057b0:	4618      	mov	r0, r3
 80057b2:	f004 fc5e 	bl	800a072 <USB_ReadDevOutEPInterrupt>
 80057b6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	f003 0301 	and.w	r3, r3, #1
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00c      	beq.n	80057dc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80057c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c4:	015a      	lsls	r2, r3, #5
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	4413      	add	r3, r2
 80057ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ce:	461a      	mov	r2, r3
 80057d0:	2301      	movs	r3, #1
 80057d2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80057d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 fec2 	bl	8006560 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	f003 0308 	and.w	r3, r3, #8
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d00c      	beq.n	8005800 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80057e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e8:	015a      	lsls	r2, r3, #5
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	4413      	add	r3, r2
 80057ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057f2:	461a      	mov	r2, r3
 80057f4:	2308      	movs	r3, #8
 80057f6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80057f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 ff98 	bl	8006730 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	f003 0310 	and.w	r3, r3, #16
 8005806:	2b00      	cmp	r3, #0
 8005808:	d008      	beq.n	800581c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800580a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580c:	015a      	lsls	r2, r3, #5
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	4413      	add	r3, r2
 8005812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005816:	461a      	mov	r2, r3
 8005818:	2310      	movs	r3, #16
 800581a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	f003 0302 	and.w	r3, r3, #2
 8005822:	2b00      	cmp	r3, #0
 8005824:	d030      	beq.n	8005888 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005826:	6a3b      	ldr	r3, [r7, #32]
 8005828:	695b      	ldr	r3, [r3, #20]
 800582a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800582e:	2b80      	cmp	r3, #128	; 0x80
 8005830:	d109      	bne.n	8005846 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	69fa      	ldr	r2, [r7, #28]
 800583c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005840:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005844:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005848:	4613      	mov	r3, r2
 800584a:	00db      	lsls	r3, r3, #3
 800584c:	4413      	add	r3, r2
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	4413      	add	r3, r2
 8005858:	3304      	adds	r3, #4
 800585a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	78db      	ldrb	r3, [r3, #3]
 8005860:	2b01      	cmp	r3, #1
 8005862:	d108      	bne.n	8005876 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	2200      	movs	r2, #0
 8005868:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800586a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586c:	b2db      	uxtb	r3, r3
 800586e:	4619      	mov	r1, r3
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f009 fde9 	bl	800f448 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005878:	015a      	lsls	r2, r3, #5
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	4413      	add	r3, r2
 800587e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005882:	461a      	mov	r2, r3
 8005884:	2302      	movs	r3, #2
 8005886:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	f003 0320 	and.w	r3, r3, #32
 800588e:	2b00      	cmp	r3, #0
 8005890:	d008      	beq.n	80058a4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005894:	015a      	lsls	r2, r3, #5
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	4413      	add	r3, r2
 800589a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800589e:	461a      	mov	r2, r3
 80058a0:	2320      	movs	r3, #32
 80058a2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d009      	beq.n	80058c2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80058ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b0:	015a      	lsls	r2, r3, #5
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	4413      	add	r3, r2
 80058b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ba:	461a      	mov	r2, r3
 80058bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80058c0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80058c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c4:	3301      	adds	r3, #1
 80058c6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80058c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ca:	085b      	lsrs	r3, r3, #1
 80058cc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80058ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	f47f af62 	bne.w	800579a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4618      	mov	r0, r3
 80058dc:	f004 fb82 	bl	8009fe4 <USB_ReadInterrupts>
 80058e0:	4603      	mov	r3, r0
 80058e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80058ea:	f040 80db 	bne.w	8005aa4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4618      	mov	r0, r3
 80058f4:	f004 fba3 	bl	800a03e <USB_ReadDevAllInEpInterrupt>
 80058f8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80058fa:	2300      	movs	r3, #0
 80058fc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80058fe:	e0cd      	b.n	8005a9c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005902:	f003 0301 	and.w	r3, r3, #1
 8005906:	2b00      	cmp	r3, #0
 8005908:	f000 80c2 	beq.w	8005a90 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005912:	b2d2      	uxtb	r2, r2
 8005914:	4611      	mov	r1, r2
 8005916:	4618      	mov	r0, r3
 8005918:	f004 fbc9 	bl	800a0ae <USB_ReadDevInEPInterrupt>
 800591c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	f003 0301 	and.w	r3, r3, #1
 8005924:	2b00      	cmp	r3, #0
 8005926:	d057      	beq.n	80059d8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592a:	f003 030f 	and.w	r3, r3, #15
 800592e:	2201      	movs	r2, #1
 8005930:	fa02 f303 	lsl.w	r3, r2, r3
 8005934:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800593c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	43db      	mvns	r3, r3
 8005942:	69f9      	ldr	r1, [r7, #28]
 8005944:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005948:	4013      	ands	r3, r2
 800594a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800594c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594e:	015a      	lsls	r2, r3, #5
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	4413      	add	r3, r2
 8005954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005958:	461a      	mov	r2, r3
 800595a:	2301      	movs	r3, #1
 800595c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	2b01      	cmp	r3, #1
 8005964:	d132      	bne.n	80059cc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005966:	6879      	ldr	r1, [r7, #4]
 8005968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800596a:	4613      	mov	r3, r2
 800596c:	00db      	lsls	r3, r3, #3
 800596e:	4413      	add	r3, r2
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	440b      	add	r3, r1
 8005974:	334c      	adds	r3, #76	; 0x4c
 8005976:	6819      	ldr	r1, [r3, #0]
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800597c:	4613      	mov	r3, r2
 800597e:	00db      	lsls	r3, r3, #3
 8005980:	4413      	add	r3, r2
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	4403      	add	r3, r0
 8005986:	3348      	adds	r3, #72	; 0x48
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4419      	add	r1, r3
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005990:	4613      	mov	r3, r2
 8005992:	00db      	lsls	r3, r3, #3
 8005994:	4413      	add	r3, r2
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	4403      	add	r3, r0
 800599a:	334c      	adds	r3, #76	; 0x4c
 800599c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800599e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d113      	bne.n	80059cc <HAL_PCD_IRQHandler+0x3a2>
 80059a4:	6879      	ldr	r1, [r7, #4]
 80059a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059a8:	4613      	mov	r3, r2
 80059aa:	00db      	lsls	r3, r3, #3
 80059ac:	4413      	add	r3, r2
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	440b      	add	r3, r1
 80059b2:	3354      	adds	r3, #84	; 0x54
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d108      	bne.n	80059cc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6818      	ldr	r0, [r3, #0]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80059c4:	461a      	mov	r2, r3
 80059c6:	2101      	movs	r1, #1
 80059c8:	f004 fbd0 	bl	800a16c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80059cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	4619      	mov	r1, r3
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f009 fcb3 	bl	800f33e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	f003 0308 	and.w	r3, r3, #8
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d008      	beq.n	80059f4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80059e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e4:	015a      	lsls	r2, r3, #5
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	4413      	add	r3, r2
 80059ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ee:	461a      	mov	r2, r3
 80059f0:	2308      	movs	r3, #8
 80059f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	f003 0310 	and.w	r3, r3, #16
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d008      	beq.n	8005a10 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80059fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a00:	015a      	lsls	r2, r3, #5
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	4413      	add	r3, r2
 8005a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	2310      	movs	r3, #16
 8005a0e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d008      	beq.n	8005a2c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1c:	015a      	lsls	r2, r3, #5
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	4413      	add	r3, r2
 8005a22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a26:	461a      	mov	r2, r3
 8005a28:	2340      	movs	r3, #64	; 0x40
 8005a2a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	f003 0302 	and.w	r3, r3, #2
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d023      	beq.n	8005a7e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005a36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a38:	6a38      	ldr	r0, [r7, #32]
 8005a3a:	f003 fab1 	bl	8008fa0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a40:	4613      	mov	r3, r2
 8005a42:	00db      	lsls	r3, r3, #3
 8005a44:	4413      	add	r3, r2
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	3338      	adds	r3, #56	; 0x38
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	3304      	adds	r3, #4
 8005a50:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	78db      	ldrb	r3, [r3, #3]
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d108      	bne.n	8005a6c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	4619      	mov	r1, r3
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f009 fd00 	bl	800f46c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6e:	015a      	lsls	r2, r3, #5
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	4413      	add	r3, r2
 8005a74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a78:	461a      	mov	r2, r3
 8005a7a:	2302      	movs	r3, #2
 8005a7c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d003      	beq.n	8005a90 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005a88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 fcdb 	bl	8006446 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a92:	3301      	adds	r3, #1
 8005a94:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a98:	085b      	lsrs	r3, r3, #1
 8005a9a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	f47f af2e 	bne.w	8005900 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f004 fa9b 	bl	8009fe4 <USB_ReadInterrupts>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ab4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ab8:	d122      	bne.n	8005b00 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	69fa      	ldr	r2, [r7, #28]
 8005ac4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ac8:	f023 0301 	bic.w	r3, r3, #1
 8005acc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d108      	bne.n	8005aea <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005ae0:	2100      	movs	r1, #0
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 fec2 	bl	800686c <HAL_PCDEx_LPM_Callback>
 8005ae8:	e002      	b.n	8005af0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f009 fc9e 	bl	800f42c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	695a      	ldr	r2, [r3, #20]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005afe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4618      	mov	r0, r3
 8005b06:	f004 fa6d 	bl	8009fe4 <USB_ReadInterrupts>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b14:	d112      	bne.n	8005b3c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	f003 0301 	and.w	r3, r3, #1
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d102      	bne.n	8005b2c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f009 fc5a 	bl	800f3e0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	695a      	ldr	r2, [r3, #20]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005b3a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4618      	mov	r0, r3
 8005b42:	f004 fa4f 	bl	8009fe4 <USB_ReadInterrupts>
 8005b46:	4603      	mov	r3, r0
 8005b48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b50:	f040 80b7 	bne.w	8005cc2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	69fa      	ldr	r2, [r7, #28]
 8005b5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b62:	f023 0301 	bic.w	r3, r3, #1
 8005b66:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2110      	movs	r1, #16
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f003 fa16 	bl	8008fa0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b74:	2300      	movs	r3, #0
 8005b76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b78:	e046      	b.n	8005c08 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b7c:	015a      	lsls	r2, r3, #5
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	4413      	add	r3, r2
 8005b82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b86:	461a      	mov	r2, r3
 8005b88:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005b8c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b90:	015a      	lsls	r2, r3, #5
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	4413      	add	r3, r2
 8005b96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b9e:	0151      	lsls	r1, r2, #5
 8005ba0:	69fa      	ldr	r2, [r7, #28]
 8005ba2:	440a      	add	r2, r1
 8005ba4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ba8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005bac:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb0:	015a      	lsls	r2, r3, #5
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	4413      	add	r3, r2
 8005bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bba:	461a      	mov	r2, r3
 8005bbc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005bc0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc4:	015a      	lsls	r2, r3, #5
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	4413      	add	r3, r2
 8005bca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bd2:	0151      	lsls	r1, r2, #5
 8005bd4:	69fa      	ldr	r2, [r7, #28]
 8005bd6:	440a      	add	r2, r1
 8005bd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bdc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005be0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be4:	015a      	lsls	r2, r3, #5
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	4413      	add	r3, r2
 8005bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bf2:	0151      	lsls	r1, r2, #5
 8005bf4:	69fa      	ldr	r2, [r7, #28]
 8005bf6:	440a      	add	r2, r1
 8005bf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bfc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c00:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c04:	3301      	adds	r3, #1
 8005c06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d3b3      	bcc.n	8005b7a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005c12:	69fb      	ldr	r3, [r7, #28]
 8005c14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c18:	69db      	ldr	r3, [r3, #28]
 8005c1a:	69fa      	ldr	r2, [r7, #28]
 8005c1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c20:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005c24:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d016      	beq.n	8005c5c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c38:	69fa      	ldr	r2, [r7, #28]
 8005c3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c3e:	f043 030b 	orr.w	r3, r3, #11
 8005c42:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c4e:	69fa      	ldr	r2, [r7, #28]
 8005c50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c54:	f043 030b 	orr.w	r3, r3, #11
 8005c58:	6453      	str	r3, [r2, #68]	; 0x44
 8005c5a:	e015      	b.n	8005c88 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c62:	695b      	ldr	r3, [r3, #20]
 8005c64:	69fa      	ldr	r2, [r7, #28]
 8005c66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c6a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005c6e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005c72:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005c74:	69fb      	ldr	r3, [r7, #28]
 8005c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	69fa      	ldr	r2, [r7, #28]
 8005c7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c82:	f043 030b 	orr.w	r3, r3, #11
 8005c86:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	69fa      	ldr	r2, [r7, #28]
 8005c92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c96:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005c9a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6818      	ldr	r0, [r3, #0]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005cac:	461a      	mov	r2, r3
 8005cae:	f004 fa5d 	bl	800a16c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	695a      	ldr	r2, [r3, #20]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005cc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f004 f98c 	bl	8009fe4 <USB_ReadInterrupts>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005cd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cd6:	d124      	bne.n	8005d22 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f004 fa22 	bl	800a126 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f003 f9d7 	bl	800909a <USB_GetDevSpeed>
 8005cec:	4603      	mov	r3, r0
 8005cee:	461a      	mov	r2, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681c      	ldr	r4, [r3, #0]
 8005cf8:	f001 fa28 	bl	800714c <HAL_RCC_GetHCLKFreq>
 8005cfc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	461a      	mov	r2, r3
 8005d06:	4620      	mov	r0, r4
 8005d08:	f002 fed6 	bl	8008ab8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f009 fb3e 	bl	800f38e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	695a      	ldr	r2, [r3, #20]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005d20:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4618      	mov	r0, r3
 8005d28:	f004 f95c 	bl	8009fe4 <USB_ReadInterrupts>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	f003 0308 	and.w	r3, r3, #8
 8005d32:	2b08      	cmp	r3, #8
 8005d34:	d10a      	bne.n	8005d4c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f009 fb1b 	bl	800f372 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	695a      	ldr	r2, [r3, #20]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f002 0208 	and.w	r2, r2, #8
 8005d4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4618      	mov	r0, r3
 8005d52:	f004 f947 	bl	8009fe4 <USB_ReadInterrupts>
 8005d56:	4603      	mov	r3, r0
 8005d58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d5c:	2b80      	cmp	r3, #128	; 0x80
 8005d5e:	d122      	bne.n	8005da6 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005d60:	6a3b      	ldr	r3, [r7, #32]
 8005d62:	699b      	ldr	r3, [r3, #24]
 8005d64:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d68:	6a3b      	ldr	r3, [r7, #32]
 8005d6a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	627b      	str	r3, [r7, #36]	; 0x24
 8005d70:	e014      	b.n	8005d9c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005d72:	6879      	ldr	r1, [r7, #4]
 8005d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d76:	4613      	mov	r3, r2
 8005d78:	00db      	lsls	r3, r3, #3
 8005d7a:	4413      	add	r3, r2
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	440b      	add	r3, r1
 8005d80:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d105      	bne.n	8005d96 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	4619      	mov	r1, r3
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f000 fb27 	bl	80063e4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d98:	3301      	adds	r3, #1
 8005d9a:	627b      	str	r3, [r7, #36]	; 0x24
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d3e5      	bcc.n	8005d72 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4618      	mov	r0, r3
 8005dac:	f004 f91a 	bl	8009fe4 <USB_ReadInterrupts>
 8005db0:	4603      	mov	r3, r0
 8005db2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005db6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dba:	d13b      	bne.n	8005e34 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	627b      	str	r3, [r7, #36]	; 0x24
 8005dc0:	e02b      	b.n	8005e1a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc4:	015a      	lsls	r2, r3, #5
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	4413      	add	r3, r2
 8005dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005dd2:	6879      	ldr	r1, [r7, #4]
 8005dd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dd6:	4613      	mov	r3, r2
 8005dd8:	00db      	lsls	r3, r3, #3
 8005dda:	4413      	add	r3, r2
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	440b      	add	r3, r1
 8005de0:	3340      	adds	r3, #64	; 0x40
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d115      	bne.n	8005e14 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005de8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	da12      	bge.n	8005e14 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005dee:	6879      	ldr	r1, [r7, #4]
 8005df0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005df2:	4613      	mov	r3, r2
 8005df4:	00db      	lsls	r3, r3, #3
 8005df6:	4413      	add	r3, r2
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	440b      	add	r3, r1
 8005dfc:	333f      	adds	r3, #63	; 0x3f
 8005dfe:	2201      	movs	r2, #1
 8005e00:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	4619      	mov	r1, r3
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 fae8 	bl	80063e4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e16:	3301      	adds	r3, #1
 8005e18:	627b      	str	r3, [r7, #36]	; 0x24
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d3ce      	bcc.n	8005dc2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	695a      	ldr	r2, [r3, #20]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005e32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f004 f8d3 	bl	8009fe4 <USB_ReadInterrupts>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e48:	d155      	bne.n	8005ef6 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	627b      	str	r3, [r7, #36]	; 0x24
 8005e4e:	e045      	b.n	8005edc <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e52:	015a      	lsls	r2, r3, #5
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	4413      	add	r3, r2
 8005e58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005e60:	6879      	ldr	r1, [r7, #4]
 8005e62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e64:	4613      	mov	r3, r2
 8005e66:	00db      	lsls	r3, r3, #3
 8005e68:	4413      	add	r3, r2
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	440b      	add	r3, r1
 8005e6e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d12e      	bne.n	8005ed6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005e78:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	da2b      	bge.n	8005ed6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005e8a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d121      	bne.n	8005ed6 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005e92:	6879      	ldr	r1, [r7, #4]
 8005e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e96:	4613      	mov	r3, r2
 8005e98:	00db      	lsls	r3, r3, #3
 8005e9a:	4413      	add	r3, r2
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	440b      	add	r3, r1
 8005ea0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005ea8:	6a3b      	ldr	r3, [r7, #32]
 8005eaa:	699b      	ldr	r3, [r3, #24]
 8005eac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005eb0:	6a3b      	ldr	r3, [r7, #32]
 8005eb2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005eb4:	6a3b      	ldr	r3, [r7, #32]
 8005eb6:	695b      	ldr	r3, [r3, #20]
 8005eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d10a      	bne.n	8005ed6 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	69fa      	ldr	r2, [r7, #28]
 8005eca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ece:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005ed2:	6053      	str	r3, [r2, #4]
            break;
 8005ed4:	e007      	b.n	8005ee6 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed8:	3301      	adds	r3, #1
 8005eda:	627b      	str	r3, [r7, #36]	; 0x24
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d3b4      	bcc.n	8005e50 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	695a      	ldr	r2, [r3, #20]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005ef4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4618      	mov	r0, r3
 8005efc:	f004 f872 	bl	8009fe4 <USB_ReadInterrupts>
 8005f00:	4603      	mov	r3, r0
 8005f02:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005f06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f0a:	d10a      	bne.n	8005f22 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f009 fabf 	bl	800f490 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	695a      	ldr	r2, [r3, #20]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005f20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4618      	mov	r0, r3
 8005f28:	f004 f85c 	bl	8009fe4 <USB_ReadInterrupts>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	f003 0304 	and.w	r3, r3, #4
 8005f32:	2b04      	cmp	r3, #4
 8005f34:	d115      	bne.n	8005f62 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	f003 0304 	and.w	r3, r3, #4
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d002      	beq.n	8005f4e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f009 faaf 	bl	800f4ac <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	6859      	ldr	r1, [r3, #4]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	69ba      	ldr	r2, [r7, #24]
 8005f5a:	430a      	orrs	r2, r1
 8005f5c:	605a      	str	r2, [r3, #4]
 8005f5e:	e000      	b.n	8005f62 <HAL_PCD_IRQHandler+0x938>
      return;
 8005f60:	bf00      	nop
    }
  }
}
 8005f62:	3734      	adds	r7, #52	; 0x34
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd90      	pop	{r4, r7, pc}

08005f68 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	460b      	mov	r3, r1
 8005f72:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d101      	bne.n	8005f82 <HAL_PCD_SetAddress+0x1a>
 8005f7e:	2302      	movs	r3, #2
 8005f80:	e013      	b.n	8005faa <HAL_PCD_SetAddress+0x42>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2201      	movs	r2, #1
 8005f86:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	78fa      	ldrb	r2, [r7, #3]
 8005f8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	78fa      	ldrb	r2, [r7, #3]
 8005f98:	4611      	mov	r1, r2
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f003 ffba 	bl	8009f14 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005fa8:	2300      	movs	r3, #0
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3708      	adds	r7, #8
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}

08005fb2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005fb2:	b580      	push	{r7, lr}
 8005fb4:	b084      	sub	sp, #16
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
 8005fba:	4608      	mov	r0, r1
 8005fbc:	4611      	mov	r1, r2
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	70fb      	strb	r3, [r7, #3]
 8005fc4:	460b      	mov	r3, r1
 8005fc6:	803b      	strh	r3, [r7, #0]
 8005fc8:	4613      	mov	r3, r2
 8005fca:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005fd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	da0f      	bge.n	8005ff8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005fd8:	78fb      	ldrb	r3, [r7, #3]
 8005fda:	f003 020f 	and.w	r2, r3, #15
 8005fde:	4613      	mov	r3, r2
 8005fe0:	00db      	lsls	r3, r3, #3
 8005fe2:	4413      	add	r3, r2
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	3338      	adds	r3, #56	; 0x38
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	4413      	add	r3, r2
 8005fec:	3304      	adds	r3, #4
 8005fee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	705a      	strb	r2, [r3, #1]
 8005ff6:	e00f      	b.n	8006018 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ff8:	78fb      	ldrb	r3, [r7, #3]
 8005ffa:	f003 020f 	and.w	r2, r3, #15
 8005ffe:	4613      	mov	r3, r2
 8006000:	00db      	lsls	r3, r3, #3
 8006002:	4413      	add	r3, r2
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	4413      	add	r3, r2
 800600e:	3304      	adds	r3, #4
 8006010:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2200      	movs	r2, #0
 8006016:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006018:	78fb      	ldrb	r3, [r7, #3]
 800601a:	f003 030f 	and.w	r3, r3, #15
 800601e:	b2da      	uxtb	r2, r3
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006024:	883a      	ldrh	r2, [r7, #0]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	78ba      	ldrb	r2, [r7, #2]
 800602e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	785b      	ldrb	r3, [r3, #1]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d004      	beq.n	8006042 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	b29a      	uxth	r2, r3
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006042:	78bb      	ldrb	r3, [r7, #2]
 8006044:	2b02      	cmp	r3, #2
 8006046:	d102      	bne.n	800604e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2200      	movs	r2, #0
 800604c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006054:	2b01      	cmp	r3, #1
 8006056:	d101      	bne.n	800605c <HAL_PCD_EP_Open+0xaa>
 8006058:	2302      	movs	r3, #2
 800605a:	e00e      	b.n	800607a <HAL_PCD_EP_Open+0xc8>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68f9      	ldr	r1, [r7, #12]
 800606a:	4618      	mov	r0, r3
 800606c:	f003 f83a 	bl	80090e4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8006078:	7afb      	ldrb	r3, [r7, #11]
}
 800607a:	4618      	mov	r0, r3
 800607c:	3710      	adds	r7, #16
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}

08006082 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006082:	b580      	push	{r7, lr}
 8006084:	b084      	sub	sp, #16
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
 800608a:	460b      	mov	r3, r1
 800608c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800608e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006092:	2b00      	cmp	r3, #0
 8006094:	da0f      	bge.n	80060b6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006096:	78fb      	ldrb	r3, [r7, #3]
 8006098:	f003 020f 	and.w	r2, r3, #15
 800609c:	4613      	mov	r3, r2
 800609e:	00db      	lsls	r3, r3, #3
 80060a0:	4413      	add	r3, r2
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	3338      	adds	r3, #56	; 0x38
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	4413      	add	r3, r2
 80060aa:	3304      	adds	r3, #4
 80060ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2201      	movs	r2, #1
 80060b2:	705a      	strb	r2, [r3, #1]
 80060b4:	e00f      	b.n	80060d6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80060b6:	78fb      	ldrb	r3, [r7, #3]
 80060b8:	f003 020f 	and.w	r2, r3, #15
 80060bc:	4613      	mov	r3, r2
 80060be:	00db      	lsls	r3, r3, #3
 80060c0:	4413      	add	r3, r2
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	4413      	add	r3, r2
 80060cc:	3304      	adds	r3, #4
 80060ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2200      	movs	r2, #0
 80060d4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80060d6:	78fb      	ldrb	r3, [r7, #3]
 80060d8:	f003 030f 	and.w	r3, r3, #15
 80060dc:	b2da      	uxtb	r2, r3
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d101      	bne.n	80060f0 <HAL_PCD_EP_Close+0x6e>
 80060ec:	2302      	movs	r3, #2
 80060ee:	e00e      	b.n	800610e <HAL_PCD_EP_Close+0x8c>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68f9      	ldr	r1, [r7, #12]
 80060fe:	4618      	mov	r0, r3
 8006100:	f003 f878 	bl	80091f4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800610c:	2300      	movs	r3, #0
}
 800610e:	4618      	mov	r0, r3
 8006110:	3710      	adds	r7, #16
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}

08006116 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006116:	b580      	push	{r7, lr}
 8006118:	b086      	sub	sp, #24
 800611a:	af00      	add	r7, sp, #0
 800611c:	60f8      	str	r0, [r7, #12]
 800611e:	607a      	str	r2, [r7, #4]
 8006120:	603b      	str	r3, [r7, #0]
 8006122:	460b      	mov	r3, r1
 8006124:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006126:	7afb      	ldrb	r3, [r7, #11]
 8006128:	f003 020f 	and.w	r2, r3, #15
 800612c:	4613      	mov	r3, r2
 800612e:	00db      	lsls	r3, r3, #3
 8006130:	4413      	add	r3, r2
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006138:	68fa      	ldr	r2, [r7, #12]
 800613a:	4413      	add	r3, r2
 800613c:	3304      	adds	r3, #4
 800613e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	683a      	ldr	r2, [r7, #0]
 800614a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	2200      	movs	r2, #0
 8006150:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	2200      	movs	r2, #0
 8006156:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006158:	7afb      	ldrb	r3, [r7, #11]
 800615a:	f003 030f 	and.w	r3, r3, #15
 800615e:	b2da      	uxtb	r2, r3
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	2b01      	cmp	r3, #1
 800616a:	d102      	bne.n	8006172 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006172:	7afb      	ldrb	r3, [r7, #11]
 8006174:	f003 030f 	and.w	r3, r3, #15
 8006178:	2b00      	cmp	r3, #0
 800617a:	d109      	bne.n	8006190 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6818      	ldr	r0, [r3, #0]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	691b      	ldr	r3, [r3, #16]
 8006184:	b2db      	uxtb	r3, r3
 8006186:	461a      	mov	r2, r3
 8006188:	6979      	ldr	r1, [r7, #20]
 800618a:	f003 fb57 	bl	800983c <USB_EP0StartXfer>
 800618e:	e008      	b.n	80061a2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6818      	ldr	r0, [r3, #0]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	691b      	ldr	r3, [r3, #16]
 8006198:	b2db      	uxtb	r3, r3
 800619a:	461a      	mov	r2, r3
 800619c:	6979      	ldr	r1, [r7, #20]
 800619e:	f003 f905 	bl	80093ac <USB_EPStartXfer>
  }

  return HAL_OK;
 80061a2:	2300      	movs	r3, #0
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3718      	adds	r7, #24
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	460b      	mov	r3, r1
 80061b6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80061b8:	78fb      	ldrb	r3, [r7, #3]
 80061ba:	f003 020f 	and.w	r2, r3, #15
 80061be:	6879      	ldr	r1, [r7, #4]
 80061c0:	4613      	mov	r3, r2
 80061c2:	00db      	lsls	r3, r3, #3
 80061c4:	4413      	add	r3, r2
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	440b      	add	r3, r1
 80061ca:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80061ce:	681b      	ldr	r3, [r3, #0]
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	370c      	adds	r7, #12
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b086      	sub	sp, #24
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	607a      	str	r2, [r7, #4]
 80061e6:	603b      	str	r3, [r7, #0]
 80061e8:	460b      	mov	r3, r1
 80061ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80061ec:	7afb      	ldrb	r3, [r7, #11]
 80061ee:	f003 020f 	and.w	r2, r3, #15
 80061f2:	4613      	mov	r3, r2
 80061f4:	00db      	lsls	r3, r3, #3
 80061f6:	4413      	add	r3, r2
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	3338      	adds	r3, #56	; 0x38
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	4413      	add	r3, r2
 8006200:	3304      	adds	r3, #4
 8006202:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	683a      	ldr	r2, [r7, #0]
 800620e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	2200      	movs	r2, #0
 8006214:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	2201      	movs	r2, #1
 800621a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800621c:	7afb      	ldrb	r3, [r7, #11]
 800621e:	f003 030f 	and.w	r3, r3, #15
 8006222:	b2da      	uxtb	r2, r3
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	691b      	ldr	r3, [r3, #16]
 800622c:	2b01      	cmp	r3, #1
 800622e:	d102      	bne.n	8006236 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006236:	7afb      	ldrb	r3, [r7, #11]
 8006238:	f003 030f 	and.w	r3, r3, #15
 800623c:	2b00      	cmp	r3, #0
 800623e:	d109      	bne.n	8006254 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6818      	ldr	r0, [r3, #0]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	691b      	ldr	r3, [r3, #16]
 8006248:	b2db      	uxtb	r3, r3
 800624a:	461a      	mov	r2, r3
 800624c:	6979      	ldr	r1, [r7, #20]
 800624e:	f003 faf5 	bl	800983c <USB_EP0StartXfer>
 8006252:	e008      	b.n	8006266 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6818      	ldr	r0, [r3, #0]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	691b      	ldr	r3, [r3, #16]
 800625c:	b2db      	uxtb	r3, r3
 800625e:	461a      	mov	r2, r3
 8006260:	6979      	ldr	r1, [r7, #20]
 8006262:	f003 f8a3 	bl	80093ac <USB_EPStartXfer>
  }

  return HAL_OK;
 8006266:	2300      	movs	r3, #0
}
 8006268:	4618      	mov	r0, r3
 800626a:	3718      	adds	r7, #24
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b084      	sub	sp, #16
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	460b      	mov	r3, r1
 800627a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800627c:	78fb      	ldrb	r3, [r7, #3]
 800627e:	f003 020f 	and.w	r2, r3, #15
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	429a      	cmp	r2, r3
 8006288:	d901      	bls.n	800628e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	e050      	b.n	8006330 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800628e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006292:	2b00      	cmp	r3, #0
 8006294:	da0f      	bge.n	80062b6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006296:	78fb      	ldrb	r3, [r7, #3]
 8006298:	f003 020f 	and.w	r2, r3, #15
 800629c:	4613      	mov	r3, r2
 800629e:	00db      	lsls	r3, r3, #3
 80062a0:	4413      	add	r3, r2
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	3338      	adds	r3, #56	; 0x38
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	4413      	add	r3, r2
 80062aa:	3304      	adds	r3, #4
 80062ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2201      	movs	r2, #1
 80062b2:	705a      	strb	r2, [r3, #1]
 80062b4:	e00d      	b.n	80062d2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80062b6:	78fa      	ldrb	r2, [r7, #3]
 80062b8:	4613      	mov	r3, r2
 80062ba:	00db      	lsls	r3, r3, #3
 80062bc:	4413      	add	r3, r2
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	4413      	add	r3, r2
 80062c8:	3304      	adds	r3, #4
 80062ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2200      	movs	r2, #0
 80062d0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2201      	movs	r2, #1
 80062d6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80062d8:	78fb      	ldrb	r3, [r7, #3]
 80062da:	f003 030f 	and.w	r3, r3, #15
 80062de:	b2da      	uxtb	r2, r3
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d101      	bne.n	80062f2 <HAL_PCD_EP_SetStall+0x82>
 80062ee:	2302      	movs	r3, #2
 80062f0:	e01e      	b.n	8006330 <HAL_PCD_EP_SetStall+0xc0>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2201      	movs	r2, #1
 80062f6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	68f9      	ldr	r1, [r7, #12]
 8006300:	4618      	mov	r0, r3
 8006302:	f003 fd33 	bl	8009d6c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006306:	78fb      	ldrb	r3, [r7, #3]
 8006308:	f003 030f 	and.w	r3, r3, #15
 800630c:	2b00      	cmp	r3, #0
 800630e:	d10a      	bne.n	8006326 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6818      	ldr	r0, [r3, #0]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	b2d9      	uxtb	r1, r3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006320:	461a      	mov	r2, r3
 8006322:	f003 ff23 	bl	800a16c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800632e:	2300      	movs	r3, #0
}
 8006330:	4618      	mov	r0, r3
 8006332:	3710      	adds	r7, #16
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}

08006338 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b084      	sub	sp, #16
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	460b      	mov	r3, r1
 8006342:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006344:	78fb      	ldrb	r3, [r7, #3]
 8006346:	f003 020f 	and.w	r2, r3, #15
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	429a      	cmp	r2, r3
 8006350:	d901      	bls.n	8006356 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e042      	b.n	80063dc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006356:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800635a:	2b00      	cmp	r3, #0
 800635c:	da0f      	bge.n	800637e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800635e:	78fb      	ldrb	r3, [r7, #3]
 8006360:	f003 020f 	and.w	r2, r3, #15
 8006364:	4613      	mov	r3, r2
 8006366:	00db      	lsls	r3, r3, #3
 8006368:	4413      	add	r3, r2
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	3338      	adds	r3, #56	; 0x38
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	4413      	add	r3, r2
 8006372:	3304      	adds	r3, #4
 8006374:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2201      	movs	r2, #1
 800637a:	705a      	strb	r2, [r3, #1]
 800637c:	e00f      	b.n	800639e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800637e:	78fb      	ldrb	r3, [r7, #3]
 8006380:	f003 020f 	and.w	r2, r3, #15
 8006384:	4613      	mov	r3, r2
 8006386:	00db      	lsls	r3, r3, #3
 8006388:	4413      	add	r3, r2
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	4413      	add	r3, r2
 8006394:	3304      	adds	r3, #4
 8006396:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2200      	movs	r2, #0
 800639c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2200      	movs	r2, #0
 80063a2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80063a4:	78fb      	ldrb	r3, [r7, #3]
 80063a6:	f003 030f 	and.w	r3, r3, #15
 80063aa:	b2da      	uxtb	r2, r3
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d101      	bne.n	80063be <HAL_PCD_EP_ClrStall+0x86>
 80063ba:	2302      	movs	r3, #2
 80063bc:	e00e      	b.n	80063dc <HAL_PCD_EP_ClrStall+0xa4>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2201      	movs	r2, #1
 80063c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68f9      	ldr	r1, [r7, #12]
 80063cc:	4618      	mov	r0, r3
 80063ce:	f003 fd3b 	bl	8009e48 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80063da:	2300      	movs	r3, #0
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3710      	adds	r7, #16
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b084      	sub	sp, #16
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	460b      	mov	r3, r1
 80063ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80063f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	da0c      	bge.n	8006412 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80063f8:	78fb      	ldrb	r3, [r7, #3]
 80063fa:	f003 020f 	and.w	r2, r3, #15
 80063fe:	4613      	mov	r3, r2
 8006400:	00db      	lsls	r3, r3, #3
 8006402:	4413      	add	r3, r2
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	3338      	adds	r3, #56	; 0x38
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	4413      	add	r3, r2
 800640c:	3304      	adds	r3, #4
 800640e:	60fb      	str	r3, [r7, #12]
 8006410:	e00c      	b.n	800642c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006412:	78fb      	ldrb	r3, [r7, #3]
 8006414:	f003 020f 	and.w	r2, r3, #15
 8006418:	4613      	mov	r3, r2
 800641a:	00db      	lsls	r3, r3, #3
 800641c:	4413      	add	r3, r2
 800641e:	009b      	lsls	r3, r3, #2
 8006420:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	4413      	add	r3, r2
 8006428:	3304      	adds	r3, #4
 800642a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	68f9      	ldr	r1, [r7, #12]
 8006432:	4618      	mov	r0, r3
 8006434:	f003 fb5a 	bl	8009aec <USB_EPStopXfer>
 8006438:	4603      	mov	r3, r0
 800643a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800643c:	7afb      	ldrb	r3, [r7, #11]
}
 800643e:	4618      	mov	r0, r3
 8006440:	3710      	adds	r7, #16
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}

08006446 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006446:	b580      	push	{r7, lr}
 8006448:	b08a      	sub	sp, #40	; 0x28
 800644a:	af02      	add	r7, sp, #8
 800644c:	6078      	str	r0, [r7, #4]
 800644e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800645a:	683a      	ldr	r2, [r7, #0]
 800645c:	4613      	mov	r3, r2
 800645e:	00db      	lsls	r3, r3, #3
 8006460:	4413      	add	r3, r2
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	3338      	adds	r3, #56	; 0x38
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	4413      	add	r3, r2
 800646a:	3304      	adds	r3, #4
 800646c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6a1a      	ldr	r2, [r3, #32]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	699b      	ldr	r3, [r3, #24]
 8006476:	429a      	cmp	r2, r3
 8006478:	d901      	bls.n	800647e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	e06c      	b.n	8006558 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	699a      	ldr	r2, [r3, #24]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6a1b      	ldr	r3, [r3, #32]
 8006486:	1ad3      	subs	r3, r2, r3
 8006488:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	69fa      	ldr	r2, [r7, #28]
 8006490:	429a      	cmp	r2, r3
 8006492:	d902      	bls.n	800649a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800649a:	69fb      	ldr	r3, [r7, #28]
 800649c:	3303      	adds	r3, #3
 800649e:	089b      	lsrs	r3, r3, #2
 80064a0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80064a2:	e02b      	b.n	80064fc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	699a      	ldr	r2, [r3, #24]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6a1b      	ldr	r3, [r3, #32]
 80064ac:	1ad3      	subs	r3, r2, r3
 80064ae:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	69fa      	ldr	r2, [r7, #28]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d902      	bls.n	80064c0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	3303      	adds	r3, #3
 80064c4:	089b      	lsrs	r3, r3, #2
 80064c6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6919      	ldr	r1, [r3, #16]
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	b2da      	uxtb	r2, r3
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	9300      	str	r3, [sp, #0]
 80064dc:	4603      	mov	r3, r0
 80064de:	6978      	ldr	r0, [r7, #20]
 80064e0:	f003 fbae 	bl	8009c40 <USB_WritePacket>

    ep->xfer_buff  += len;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	691a      	ldr	r2, [r3, #16]
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	441a      	add	r2, r3
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6a1a      	ldr	r2, [r3, #32]
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	441a      	add	r2, r3
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	015a      	lsls	r2, r3, #5
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	4413      	add	r3, r2
 8006504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006508:	699b      	ldr	r3, [r3, #24]
 800650a:	b29b      	uxth	r3, r3
 800650c:	69ba      	ldr	r2, [r7, #24]
 800650e:	429a      	cmp	r2, r3
 8006510:	d809      	bhi.n	8006526 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	6a1a      	ldr	r2, [r3, #32]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800651a:	429a      	cmp	r2, r3
 800651c:	d203      	bcs.n	8006526 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	699b      	ldr	r3, [r3, #24]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d1be      	bne.n	80064a4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	699a      	ldr	r2, [r3, #24]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6a1b      	ldr	r3, [r3, #32]
 800652e:	429a      	cmp	r2, r3
 8006530:	d811      	bhi.n	8006556 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	f003 030f 	and.w	r3, r3, #15
 8006538:	2201      	movs	r2, #1
 800653a:	fa02 f303 	lsl.w	r3, r2, r3
 800653e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006546:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	43db      	mvns	r3, r3
 800654c:	6939      	ldr	r1, [r7, #16]
 800654e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006552:	4013      	ands	r3, r2
 8006554:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006556:	2300      	movs	r3, #0
}
 8006558:	4618      	mov	r0, r3
 800655a:	3720      	adds	r7, #32
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b088      	sub	sp, #32
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006574:	69fb      	ldr	r3, [r7, #28]
 8006576:	333c      	adds	r3, #60	; 0x3c
 8006578:	3304      	adds	r3, #4
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	015a      	lsls	r2, r3, #5
 8006582:	69bb      	ldr	r3, [r7, #24]
 8006584:	4413      	add	r3, r2
 8006586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	691b      	ldr	r3, [r3, #16]
 8006592:	2b01      	cmp	r3, #1
 8006594:	d17b      	bne.n	800668e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	f003 0308 	and.w	r3, r3, #8
 800659c:	2b00      	cmp	r3, #0
 800659e:	d015      	beq.n	80065cc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	4a61      	ldr	r2, [pc, #388]	; (8006728 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	f240 80b9 	bls.w	800671c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	f000 80b3 	beq.w	800671c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	015a      	lsls	r2, r3, #5
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	4413      	add	r3, r2
 80065be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065c2:	461a      	mov	r2, r3
 80065c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065c8:	6093      	str	r3, [r2, #8]
 80065ca:	e0a7      	b.n	800671c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	f003 0320 	and.w	r3, r3, #32
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d009      	beq.n	80065ea <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	015a      	lsls	r2, r3, #5
 80065da:	69bb      	ldr	r3, [r7, #24]
 80065dc:	4413      	add	r3, r2
 80065de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065e2:	461a      	mov	r2, r3
 80065e4:	2320      	movs	r3, #32
 80065e6:	6093      	str	r3, [r2, #8]
 80065e8:	e098      	b.n	800671c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	f040 8093 	bne.w	800671c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	4a4b      	ldr	r2, [pc, #300]	; (8006728 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d90f      	bls.n	800661e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006604:	2b00      	cmp	r3, #0
 8006606:	d00a      	beq.n	800661e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	015a      	lsls	r2, r3, #5
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	4413      	add	r3, r2
 8006610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006614:	461a      	mov	r2, r3
 8006616:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800661a:	6093      	str	r3, [r2, #8]
 800661c:	e07e      	b.n	800671c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800661e:	683a      	ldr	r2, [r7, #0]
 8006620:	4613      	mov	r3, r2
 8006622:	00db      	lsls	r3, r3, #3
 8006624:	4413      	add	r3, r2
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	4413      	add	r3, r2
 8006630:	3304      	adds	r3, #4
 8006632:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	69da      	ldr	r2, [r3, #28]
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	0159      	lsls	r1, r3, #5
 800663c:	69bb      	ldr	r3, [r7, #24]
 800663e:	440b      	add	r3, r1
 8006640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800664a:	1ad2      	subs	r2, r2, r3
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d114      	bne.n	8006680 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	699b      	ldr	r3, [r3, #24]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d109      	bne.n	8006672 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6818      	ldr	r0, [r3, #0]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006668:	461a      	mov	r2, r3
 800666a:	2101      	movs	r1, #1
 800666c:	f003 fd7e 	bl	800a16c <USB_EP0_OutStart>
 8006670:	e006      	b.n	8006680 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	691a      	ldr	r2, [r3, #16]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6a1b      	ldr	r3, [r3, #32]
 800667a:	441a      	add	r2, r3
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	b2db      	uxtb	r3, r3
 8006684:	4619      	mov	r1, r3
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f008 fe3e 	bl	800f308 <HAL_PCD_DataOutStageCallback>
 800668c:	e046      	b.n	800671c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	4a26      	ldr	r2, [pc, #152]	; (800672c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d124      	bne.n	80066e0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800669c:	2b00      	cmp	r3, #0
 800669e:	d00a      	beq.n	80066b6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	015a      	lsls	r2, r3, #5
 80066a4:	69bb      	ldr	r3, [r7, #24]
 80066a6:	4413      	add	r3, r2
 80066a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ac:	461a      	mov	r2, r3
 80066ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066b2:	6093      	str	r3, [r2, #8]
 80066b4:	e032      	b.n	800671c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	f003 0320 	and.w	r3, r3, #32
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d008      	beq.n	80066d2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	015a      	lsls	r2, r3, #5
 80066c4:	69bb      	ldr	r3, [r7, #24]
 80066c6:	4413      	add	r3, r2
 80066c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066cc:	461a      	mov	r2, r3
 80066ce:	2320      	movs	r3, #32
 80066d0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	4619      	mov	r1, r3
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f008 fe15 	bl	800f308 <HAL_PCD_DataOutStageCallback>
 80066de:	e01d      	b.n	800671c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d114      	bne.n	8006710 <PCD_EP_OutXfrComplete_int+0x1b0>
 80066e6:	6879      	ldr	r1, [r7, #4]
 80066e8:	683a      	ldr	r2, [r7, #0]
 80066ea:	4613      	mov	r3, r2
 80066ec:	00db      	lsls	r3, r3, #3
 80066ee:	4413      	add	r3, r2
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	440b      	add	r3, r1
 80066f4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d108      	bne.n	8006710 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6818      	ldr	r0, [r3, #0]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006708:	461a      	mov	r2, r3
 800670a:	2100      	movs	r1, #0
 800670c:	f003 fd2e 	bl	800a16c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	b2db      	uxtb	r3, r3
 8006714:	4619      	mov	r1, r3
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f008 fdf6 	bl	800f308 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800671c:	2300      	movs	r3, #0
}
 800671e:	4618      	mov	r0, r3
 8006720:	3720      	adds	r7, #32
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}
 8006726:	bf00      	nop
 8006728:	4f54300a 	.word	0x4f54300a
 800672c:	4f54310a 	.word	0x4f54310a

08006730 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b086      	sub	sp, #24
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	333c      	adds	r3, #60	; 0x3c
 8006748:	3304      	adds	r3, #4
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	015a      	lsls	r2, r3, #5
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	4413      	add	r3, r2
 8006756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	4a15      	ldr	r2, [pc, #84]	; (80067b8 <PCD_EP_OutSetupPacket_int+0x88>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d90e      	bls.n	8006784 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800676c:	2b00      	cmp	r3, #0
 800676e:	d009      	beq.n	8006784 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	015a      	lsls	r2, r3, #5
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	4413      	add	r3, r2
 8006778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800677c:	461a      	mov	r2, r3
 800677e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006782:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f008 fdad 	bl	800f2e4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	4a0a      	ldr	r2, [pc, #40]	; (80067b8 <PCD_EP_OutSetupPacket_int+0x88>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d90c      	bls.n	80067ac <PCD_EP_OutSetupPacket_int+0x7c>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	2b01      	cmp	r3, #1
 8006798:	d108      	bne.n	80067ac <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6818      	ldr	r0, [r3, #0]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80067a4:	461a      	mov	r2, r3
 80067a6:	2101      	movs	r1, #1
 80067a8:	f003 fce0 	bl	800a16c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80067ac:	2300      	movs	r3, #0
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3718      	adds	r7, #24
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	bf00      	nop
 80067b8:	4f54300a 	.word	0x4f54300a

080067bc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80067bc:	b480      	push	{r7}
 80067be:	b085      	sub	sp, #20
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	460b      	mov	r3, r1
 80067c6:	70fb      	strb	r3, [r7, #3]
 80067c8:	4613      	mov	r3, r2
 80067ca:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80067d4:	78fb      	ldrb	r3, [r7, #3]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d107      	bne.n	80067ea <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80067da:	883b      	ldrh	r3, [r7, #0]
 80067dc:	0419      	lsls	r1, r3, #16
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	68ba      	ldr	r2, [r7, #8]
 80067e4:	430a      	orrs	r2, r1
 80067e6:	629a      	str	r2, [r3, #40]	; 0x28
 80067e8:	e028      	b.n	800683c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067f0:	0c1b      	lsrs	r3, r3, #16
 80067f2:	68ba      	ldr	r2, [r7, #8]
 80067f4:	4413      	add	r3, r2
 80067f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80067f8:	2300      	movs	r3, #0
 80067fa:	73fb      	strb	r3, [r7, #15]
 80067fc:	e00d      	b.n	800681a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	7bfb      	ldrb	r3, [r7, #15]
 8006804:	3340      	adds	r3, #64	; 0x40
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	4413      	add	r3, r2
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	0c1b      	lsrs	r3, r3, #16
 800680e:	68ba      	ldr	r2, [r7, #8]
 8006810:	4413      	add	r3, r2
 8006812:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006814:	7bfb      	ldrb	r3, [r7, #15]
 8006816:	3301      	adds	r3, #1
 8006818:	73fb      	strb	r3, [r7, #15]
 800681a:	7bfa      	ldrb	r2, [r7, #15]
 800681c:	78fb      	ldrb	r3, [r7, #3]
 800681e:	3b01      	subs	r3, #1
 8006820:	429a      	cmp	r2, r3
 8006822:	d3ec      	bcc.n	80067fe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006824:	883b      	ldrh	r3, [r7, #0]
 8006826:	0418      	lsls	r0, r3, #16
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6819      	ldr	r1, [r3, #0]
 800682c:	78fb      	ldrb	r3, [r7, #3]
 800682e:	3b01      	subs	r3, #1
 8006830:	68ba      	ldr	r2, [r7, #8]
 8006832:	4302      	orrs	r2, r0
 8006834:	3340      	adds	r3, #64	; 0x40
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	440b      	add	r3, r1
 800683a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800683c:	2300      	movs	r3, #0
}
 800683e:	4618      	mov	r0, r3
 8006840:	3714      	adds	r7, #20
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr

0800684a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800684a:	b480      	push	{r7}
 800684c:	b083      	sub	sp, #12
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
 8006852:	460b      	mov	r3, r1
 8006854:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	887a      	ldrh	r2, [r7, #2]
 800685c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800685e:	2300      	movs	r3, #0
}
 8006860:	4618      	mov	r0, r3
 8006862:	370c      	adds	r7, #12
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	460b      	mov	r3, r1
 8006876:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006878:	bf00      	nop
 800687a:	370c      	adds	r7, #12
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b086      	sub	sp, #24
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d101      	bne.n	8006896 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	e267      	b.n	8006d66 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 0301 	and.w	r3, r3, #1
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d075      	beq.n	800698e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80068a2:	4b88      	ldr	r3, [pc, #544]	; (8006ac4 <HAL_RCC_OscConfig+0x240>)
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	f003 030c 	and.w	r3, r3, #12
 80068aa:	2b04      	cmp	r3, #4
 80068ac:	d00c      	beq.n	80068c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80068ae:	4b85      	ldr	r3, [pc, #532]	; (8006ac4 <HAL_RCC_OscConfig+0x240>)
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80068b6:	2b08      	cmp	r3, #8
 80068b8:	d112      	bne.n	80068e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80068ba:	4b82      	ldr	r3, [pc, #520]	; (8006ac4 <HAL_RCC_OscConfig+0x240>)
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068c6:	d10b      	bne.n	80068e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068c8:	4b7e      	ldr	r3, [pc, #504]	; (8006ac4 <HAL_RCC_OscConfig+0x240>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d05b      	beq.n	800698c <HAL_RCC_OscConfig+0x108>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d157      	bne.n	800698c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	e242      	b.n	8006d66 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068e8:	d106      	bne.n	80068f8 <HAL_RCC_OscConfig+0x74>
 80068ea:	4b76      	ldr	r3, [pc, #472]	; (8006ac4 <HAL_RCC_OscConfig+0x240>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a75      	ldr	r2, [pc, #468]	; (8006ac4 <HAL_RCC_OscConfig+0x240>)
 80068f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068f4:	6013      	str	r3, [r2, #0]
 80068f6:	e01d      	b.n	8006934 <HAL_RCC_OscConfig+0xb0>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006900:	d10c      	bne.n	800691c <HAL_RCC_OscConfig+0x98>
 8006902:	4b70      	ldr	r3, [pc, #448]	; (8006ac4 <HAL_RCC_OscConfig+0x240>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a6f      	ldr	r2, [pc, #444]	; (8006ac4 <HAL_RCC_OscConfig+0x240>)
 8006908:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800690c:	6013      	str	r3, [r2, #0]
 800690e:	4b6d      	ldr	r3, [pc, #436]	; (8006ac4 <HAL_RCC_OscConfig+0x240>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a6c      	ldr	r2, [pc, #432]	; (8006ac4 <HAL_RCC_OscConfig+0x240>)
 8006914:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006918:	6013      	str	r3, [r2, #0]
 800691a:	e00b      	b.n	8006934 <HAL_RCC_OscConfig+0xb0>
 800691c:	4b69      	ldr	r3, [pc, #420]	; (8006ac4 <HAL_RCC_OscConfig+0x240>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a68      	ldr	r2, [pc, #416]	; (8006ac4 <HAL_RCC_OscConfig+0x240>)
 8006922:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006926:	6013      	str	r3, [r2, #0]
 8006928:	4b66      	ldr	r3, [pc, #408]	; (8006ac4 <HAL_RCC_OscConfig+0x240>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a65      	ldr	r2, [pc, #404]	; (8006ac4 <HAL_RCC_OscConfig+0x240>)
 800692e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006932:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d013      	beq.n	8006964 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800693c:	f7fd fa14 	bl	8003d68 <HAL_GetTick>
 8006940:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006942:	e008      	b.n	8006956 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006944:	f7fd fa10 	bl	8003d68 <HAL_GetTick>
 8006948:	4602      	mov	r2, r0
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	1ad3      	subs	r3, r2, r3
 800694e:	2b64      	cmp	r3, #100	; 0x64
 8006950:	d901      	bls.n	8006956 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006952:	2303      	movs	r3, #3
 8006954:	e207      	b.n	8006d66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006956:	4b5b      	ldr	r3, [pc, #364]	; (8006ac4 <HAL_RCC_OscConfig+0x240>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800695e:	2b00      	cmp	r3, #0
 8006960:	d0f0      	beq.n	8006944 <HAL_RCC_OscConfig+0xc0>
 8006962:	e014      	b.n	800698e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006964:	f7fd fa00 	bl	8003d68 <HAL_GetTick>
 8006968:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800696a:	e008      	b.n	800697e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800696c:	f7fd f9fc 	bl	8003d68 <HAL_GetTick>
 8006970:	4602      	mov	r2, r0
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	1ad3      	subs	r3, r2, r3
 8006976:	2b64      	cmp	r3, #100	; 0x64
 8006978:	d901      	bls.n	800697e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800697a:	2303      	movs	r3, #3
 800697c:	e1f3      	b.n	8006d66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800697e:	4b51      	ldr	r3, [pc, #324]	; (8006ac4 <HAL_RCC_OscConfig+0x240>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006986:	2b00      	cmp	r3, #0
 8006988:	d1f0      	bne.n	800696c <HAL_RCC_OscConfig+0xe8>
 800698a:	e000      	b.n	800698e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800698c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f003 0302 	and.w	r3, r3, #2
 8006996:	2b00      	cmp	r3, #0
 8006998:	d063      	beq.n	8006a62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800699a:	4b4a      	ldr	r3, [pc, #296]	; (8006ac4 <HAL_RCC_OscConfig+0x240>)
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	f003 030c 	and.w	r3, r3, #12
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d00b      	beq.n	80069be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80069a6:	4b47      	ldr	r3, [pc, #284]	; (8006ac4 <HAL_RCC_OscConfig+0x240>)
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80069ae:	2b08      	cmp	r3, #8
 80069b0:	d11c      	bne.n	80069ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80069b2:	4b44      	ldr	r3, [pc, #272]	; (8006ac4 <HAL_RCC_OscConfig+0x240>)
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d116      	bne.n	80069ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069be:	4b41      	ldr	r3, [pc, #260]	; (8006ac4 <HAL_RCC_OscConfig+0x240>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f003 0302 	and.w	r3, r3, #2
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d005      	beq.n	80069d6 <HAL_RCC_OscConfig+0x152>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d001      	beq.n	80069d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e1c7      	b.n	8006d66 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069d6:	4b3b      	ldr	r3, [pc, #236]	; (8006ac4 <HAL_RCC_OscConfig+0x240>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	691b      	ldr	r3, [r3, #16]
 80069e2:	00db      	lsls	r3, r3, #3
 80069e4:	4937      	ldr	r1, [pc, #220]	; (8006ac4 <HAL_RCC_OscConfig+0x240>)
 80069e6:	4313      	orrs	r3, r2
 80069e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069ea:	e03a      	b.n	8006a62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d020      	beq.n	8006a36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80069f4:	4b34      	ldr	r3, [pc, #208]	; (8006ac8 <HAL_RCC_OscConfig+0x244>)
 80069f6:	2201      	movs	r2, #1
 80069f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069fa:	f7fd f9b5 	bl	8003d68 <HAL_GetTick>
 80069fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a00:	e008      	b.n	8006a14 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a02:	f7fd f9b1 	bl	8003d68 <HAL_GetTick>
 8006a06:	4602      	mov	r2, r0
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	1ad3      	subs	r3, r2, r3
 8006a0c:	2b02      	cmp	r3, #2
 8006a0e:	d901      	bls.n	8006a14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006a10:	2303      	movs	r3, #3
 8006a12:	e1a8      	b.n	8006d66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a14:	4b2b      	ldr	r3, [pc, #172]	; (8006ac4 <HAL_RCC_OscConfig+0x240>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f003 0302 	and.w	r3, r3, #2
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d0f0      	beq.n	8006a02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a20:	4b28      	ldr	r3, [pc, #160]	; (8006ac4 <HAL_RCC_OscConfig+0x240>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	691b      	ldr	r3, [r3, #16]
 8006a2c:	00db      	lsls	r3, r3, #3
 8006a2e:	4925      	ldr	r1, [pc, #148]	; (8006ac4 <HAL_RCC_OscConfig+0x240>)
 8006a30:	4313      	orrs	r3, r2
 8006a32:	600b      	str	r3, [r1, #0]
 8006a34:	e015      	b.n	8006a62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a36:	4b24      	ldr	r3, [pc, #144]	; (8006ac8 <HAL_RCC_OscConfig+0x244>)
 8006a38:	2200      	movs	r2, #0
 8006a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a3c:	f7fd f994 	bl	8003d68 <HAL_GetTick>
 8006a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a42:	e008      	b.n	8006a56 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a44:	f7fd f990 	bl	8003d68 <HAL_GetTick>
 8006a48:	4602      	mov	r2, r0
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	1ad3      	subs	r3, r2, r3
 8006a4e:	2b02      	cmp	r3, #2
 8006a50:	d901      	bls.n	8006a56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006a52:	2303      	movs	r3, #3
 8006a54:	e187      	b.n	8006d66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a56:	4b1b      	ldr	r3, [pc, #108]	; (8006ac4 <HAL_RCC_OscConfig+0x240>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f003 0302 	and.w	r3, r3, #2
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d1f0      	bne.n	8006a44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f003 0308 	and.w	r3, r3, #8
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d036      	beq.n	8006adc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	695b      	ldr	r3, [r3, #20]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d016      	beq.n	8006aa4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a76:	4b15      	ldr	r3, [pc, #84]	; (8006acc <HAL_RCC_OscConfig+0x248>)
 8006a78:	2201      	movs	r2, #1
 8006a7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a7c:	f7fd f974 	bl	8003d68 <HAL_GetTick>
 8006a80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a82:	e008      	b.n	8006a96 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a84:	f7fd f970 	bl	8003d68 <HAL_GetTick>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	1ad3      	subs	r3, r2, r3
 8006a8e:	2b02      	cmp	r3, #2
 8006a90:	d901      	bls.n	8006a96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006a92:	2303      	movs	r3, #3
 8006a94:	e167      	b.n	8006d66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a96:	4b0b      	ldr	r3, [pc, #44]	; (8006ac4 <HAL_RCC_OscConfig+0x240>)
 8006a98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a9a:	f003 0302 	and.w	r3, r3, #2
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d0f0      	beq.n	8006a84 <HAL_RCC_OscConfig+0x200>
 8006aa2:	e01b      	b.n	8006adc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006aa4:	4b09      	ldr	r3, [pc, #36]	; (8006acc <HAL_RCC_OscConfig+0x248>)
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006aaa:	f7fd f95d 	bl	8003d68 <HAL_GetTick>
 8006aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ab0:	e00e      	b.n	8006ad0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ab2:	f7fd f959 	bl	8003d68 <HAL_GetTick>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	1ad3      	subs	r3, r2, r3
 8006abc:	2b02      	cmp	r3, #2
 8006abe:	d907      	bls.n	8006ad0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006ac0:	2303      	movs	r3, #3
 8006ac2:	e150      	b.n	8006d66 <HAL_RCC_OscConfig+0x4e2>
 8006ac4:	40023800 	.word	0x40023800
 8006ac8:	42470000 	.word	0x42470000
 8006acc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ad0:	4b88      	ldr	r3, [pc, #544]	; (8006cf4 <HAL_RCC_OscConfig+0x470>)
 8006ad2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ad4:	f003 0302 	and.w	r3, r3, #2
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d1ea      	bne.n	8006ab2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 0304 	and.w	r3, r3, #4
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	f000 8097 	beq.w	8006c18 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006aea:	2300      	movs	r3, #0
 8006aec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006aee:	4b81      	ldr	r3, [pc, #516]	; (8006cf4 <HAL_RCC_OscConfig+0x470>)
 8006af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d10f      	bne.n	8006b1a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006afa:	2300      	movs	r3, #0
 8006afc:	60bb      	str	r3, [r7, #8]
 8006afe:	4b7d      	ldr	r3, [pc, #500]	; (8006cf4 <HAL_RCC_OscConfig+0x470>)
 8006b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b02:	4a7c      	ldr	r2, [pc, #496]	; (8006cf4 <HAL_RCC_OscConfig+0x470>)
 8006b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b08:	6413      	str	r3, [r2, #64]	; 0x40
 8006b0a:	4b7a      	ldr	r3, [pc, #488]	; (8006cf4 <HAL_RCC_OscConfig+0x470>)
 8006b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b12:	60bb      	str	r3, [r7, #8]
 8006b14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b16:	2301      	movs	r3, #1
 8006b18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b1a:	4b77      	ldr	r3, [pc, #476]	; (8006cf8 <HAL_RCC_OscConfig+0x474>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d118      	bne.n	8006b58 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b26:	4b74      	ldr	r3, [pc, #464]	; (8006cf8 <HAL_RCC_OscConfig+0x474>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a73      	ldr	r2, [pc, #460]	; (8006cf8 <HAL_RCC_OscConfig+0x474>)
 8006b2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b32:	f7fd f919 	bl	8003d68 <HAL_GetTick>
 8006b36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b38:	e008      	b.n	8006b4c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b3a:	f7fd f915 	bl	8003d68 <HAL_GetTick>
 8006b3e:	4602      	mov	r2, r0
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	1ad3      	subs	r3, r2, r3
 8006b44:	2b02      	cmp	r3, #2
 8006b46:	d901      	bls.n	8006b4c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006b48:	2303      	movs	r3, #3
 8006b4a:	e10c      	b.n	8006d66 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b4c:	4b6a      	ldr	r3, [pc, #424]	; (8006cf8 <HAL_RCC_OscConfig+0x474>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d0f0      	beq.n	8006b3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d106      	bne.n	8006b6e <HAL_RCC_OscConfig+0x2ea>
 8006b60:	4b64      	ldr	r3, [pc, #400]	; (8006cf4 <HAL_RCC_OscConfig+0x470>)
 8006b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b64:	4a63      	ldr	r2, [pc, #396]	; (8006cf4 <HAL_RCC_OscConfig+0x470>)
 8006b66:	f043 0301 	orr.w	r3, r3, #1
 8006b6a:	6713      	str	r3, [r2, #112]	; 0x70
 8006b6c:	e01c      	b.n	8006ba8 <HAL_RCC_OscConfig+0x324>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	2b05      	cmp	r3, #5
 8006b74:	d10c      	bne.n	8006b90 <HAL_RCC_OscConfig+0x30c>
 8006b76:	4b5f      	ldr	r3, [pc, #380]	; (8006cf4 <HAL_RCC_OscConfig+0x470>)
 8006b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b7a:	4a5e      	ldr	r2, [pc, #376]	; (8006cf4 <HAL_RCC_OscConfig+0x470>)
 8006b7c:	f043 0304 	orr.w	r3, r3, #4
 8006b80:	6713      	str	r3, [r2, #112]	; 0x70
 8006b82:	4b5c      	ldr	r3, [pc, #368]	; (8006cf4 <HAL_RCC_OscConfig+0x470>)
 8006b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b86:	4a5b      	ldr	r2, [pc, #364]	; (8006cf4 <HAL_RCC_OscConfig+0x470>)
 8006b88:	f043 0301 	orr.w	r3, r3, #1
 8006b8c:	6713      	str	r3, [r2, #112]	; 0x70
 8006b8e:	e00b      	b.n	8006ba8 <HAL_RCC_OscConfig+0x324>
 8006b90:	4b58      	ldr	r3, [pc, #352]	; (8006cf4 <HAL_RCC_OscConfig+0x470>)
 8006b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b94:	4a57      	ldr	r2, [pc, #348]	; (8006cf4 <HAL_RCC_OscConfig+0x470>)
 8006b96:	f023 0301 	bic.w	r3, r3, #1
 8006b9a:	6713      	str	r3, [r2, #112]	; 0x70
 8006b9c:	4b55      	ldr	r3, [pc, #340]	; (8006cf4 <HAL_RCC_OscConfig+0x470>)
 8006b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ba0:	4a54      	ldr	r2, [pc, #336]	; (8006cf4 <HAL_RCC_OscConfig+0x470>)
 8006ba2:	f023 0304 	bic.w	r3, r3, #4
 8006ba6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d015      	beq.n	8006bdc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bb0:	f7fd f8da 	bl	8003d68 <HAL_GetTick>
 8006bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bb6:	e00a      	b.n	8006bce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006bb8:	f7fd f8d6 	bl	8003d68 <HAL_GetTick>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d901      	bls.n	8006bce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006bca:	2303      	movs	r3, #3
 8006bcc:	e0cb      	b.n	8006d66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bce:	4b49      	ldr	r3, [pc, #292]	; (8006cf4 <HAL_RCC_OscConfig+0x470>)
 8006bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bd2:	f003 0302 	and.w	r3, r3, #2
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d0ee      	beq.n	8006bb8 <HAL_RCC_OscConfig+0x334>
 8006bda:	e014      	b.n	8006c06 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006bdc:	f7fd f8c4 	bl	8003d68 <HAL_GetTick>
 8006be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006be2:	e00a      	b.n	8006bfa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006be4:	f7fd f8c0 	bl	8003d68 <HAL_GetTick>
 8006be8:	4602      	mov	r2, r0
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	1ad3      	subs	r3, r2, r3
 8006bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d901      	bls.n	8006bfa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006bf6:	2303      	movs	r3, #3
 8006bf8:	e0b5      	b.n	8006d66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006bfa:	4b3e      	ldr	r3, [pc, #248]	; (8006cf4 <HAL_RCC_OscConfig+0x470>)
 8006bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bfe:	f003 0302 	and.w	r3, r3, #2
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d1ee      	bne.n	8006be4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006c06:	7dfb      	ldrb	r3, [r7, #23]
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d105      	bne.n	8006c18 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c0c:	4b39      	ldr	r3, [pc, #228]	; (8006cf4 <HAL_RCC_OscConfig+0x470>)
 8006c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c10:	4a38      	ldr	r2, [pc, #224]	; (8006cf4 <HAL_RCC_OscConfig+0x470>)
 8006c12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c16:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	699b      	ldr	r3, [r3, #24]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	f000 80a1 	beq.w	8006d64 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006c22:	4b34      	ldr	r3, [pc, #208]	; (8006cf4 <HAL_RCC_OscConfig+0x470>)
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	f003 030c 	and.w	r3, r3, #12
 8006c2a:	2b08      	cmp	r3, #8
 8006c2c:	d05c      	beq.n	8006ce8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	699b      	ldr	r3, [r3, #24]
 8006c32:	2b02      	cmp	r3, #2
 8006c34:	d141      	bne.n	8006cba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c36:	4b31      	ldr	r3, [pc, #196]	; (8006cfc <HAL_RCC_OscConfig+0x478>)
 8006c38:	2200      	movs	r2, #0
 8006c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c3c:	f7fd f894 	bl	8003d68 <HAL_GetTick>
 8006c40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c42:	e008      	b.n	8006c56 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c44:	f7fd f890 	bl	8003d68 <HAL_GetTick>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	1ad3      	subs	r3, r2, r3
 8006c4e:	2b02      	cmp	r3, #2
 8006c50:	d901      	bls.n	8006c56 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006c52:	2303      	movs	r3, #3
 8006c54:	e087      	b.n	8006d66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c56:	4b27      	ldr	r3, [pc, #156]	; (8006cf4 <HAL_RCC_OscConfig+0x470>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d1f0      	bne.n	8006c44 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	69da      	ldr	r2, [r3, #28]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6a1b      	ldr	r3, [r3, #32]
 8006c6a:	431a      	orrs	r2, r3
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c70:	019b      	lsls	r3, r3, #6
 8006c72:	431a      	orrs	r2, r3
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c78:	085b      	lsrs	r3, r3, #1
 8006c7a:	3b01      	subs	r3, #1
 8006c7c:	041b      	lsls	r3, r3, #16
 8006c7e:	431a      	orrs	r2, r3
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c84:	061b      	lsls	r3, r3, #24
 8006c86:	491b      	ldr	r1, [pc, #108]	; (8006cf4 <HAL_RCC_OscConfig+0x470>)
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c8c:	4b1b      	ldr	r3, [pc, #108]	; (8006cfc <HAL_RCC_OscConfig+0x478>)
 8006c8e:	2201      	movs	r2, #1
 8006c90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c92:	f7fd f869 	bl	8003d68 <HAL_GetTick>
 8006c96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c98:	e008      	b.n	8006cac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c9a:	f7fd f865 	bl	8003d68 <HAL_GetTick>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	1ad3      	subs	r3, r2, r3
 8006ca4:	2b02      	cmp	r3, #2
 8006ca6:	d901      	bls.n	8006cac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006ca8:	2303      	movs	r3, #3
 8006caa:	e05c      	b.n	8006d66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cac:	4b11      	ldr	r3, [pc, #68]	; (8006cf4 <HAL_RCC_OscConfig+0x470>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d0f0      	beq.n	8006c9a <HAL_RCC_OscConfig+0x416>
 8006cb8:	e054      	b.n	8006d64 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cba:	4b10      	ldr	r3, [pc, #64]	; (8006cfc <HAL_RCC_OscConfig+0x478>)
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cc0:	f7fd f852 	bl	8003d68 <HAL_GetTick>
 8006cc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cc6:	e008      	b.n	8006cda <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cc8:	f7fd f84e 	bl	8003d68 <HAL_GetTick>
 8006ccc:	4602      	mov	r2, r0
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	1ad3      	subs	r3, r2, r3
 8006cd2:	2b02      	cmp	r3, #2
 8006cd4:	d901      	bls.n	8006cda <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006cd6:	2303      	movs	r3, #3
 8006cd8:	e045      	b.n	8006d66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cda:	4b06      	ldr	r3, [pc, #24]	; (8006cf4 <HAL_RCC_OscConfig+0x470>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d1f0      	bne.n	8006cc8 <HAL_RCC_OscConfig+0x444>
 8006ce6:	e03d      	b.n	8006d64 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	699b      	ldr	r3, [r3, #24]
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d107      	bne.n	8006d00 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e038      	b.n	8006d66 <HAL_RCC_OscConfig+0x4e2>
 8006cf4:	40023800 	.word	0x40023800
 8006cf8:	40007000 	.word	0x40007000
 8006cfc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006d00:	4b1b      	ldr	r3, [pc, #108]	; (8006d70 <HAL_RCC_OscConfig+0x4ec>)
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	699b      	ldr	r3, [r3, #24]
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d028      	beq.n	8006d60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d121      	bne.n	8006d60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d11a      	bne.n	8006d60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006d2a:	68fa      	ldr	r2, [r7, #12]
 8006d2c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006d30:	4013      	ands	r3, r2
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006d36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d111      	bne.n	8006d60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d46:	085b      	lsrs	r3, r3, #1
 8006d48:	3b01      	subs	r3, #1
 8006d4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d107      	bne.n	8006d60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d001      	beq.n	8006d64 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006d60:	2301      	movs	r3, #1
 8006d62:	e000      	b.n	8006d66 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006d64:	2300      	movs	r3, #0
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3718      	adds	r7, #24
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}
 8006d6e:	bf00      	nop
 8006d70:	40023800 	.word	0x40023800

08006d74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d101      	bne.n	8006d88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	e0cc      	b.n	8006f22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006d88:	4b68      	ldr	r3, [pc, #416]	; (8006f2c <HAL_RCC_ClockConfig+0x1b8>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f003 030f 	and.w	r3, r3, #15
 8006d90:	683a      	ldr	r2, [r7, #0]
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d90c      	bls.n	8006db0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d96:	4b65      	ldr	r3, [pc, #404]	; (8006f2c <HAL_RCC_ClockConfig+0x1b8>)
 8006d98:	683a      	ldr	r2, [r7, #0]
 8006d9a:	b2d2      	uxtb	r2, r2
 8006d9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d9e:	4b63      	ldr	r3, [pc, #396]	; (8006f2c <HAL_RCC_ClockConfig+0x1b8>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f003 030f 	and.w	r3, r3, #15
 8006da6:	683a      	ldr	r2, [r7, #0]
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d001      	beq.n	8006db0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006dac:	2301      	movs	r3, #1
 8006dae:	e0b8      	b.n	8006f22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f003 0302 	and.w	r3, r3, #2
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d020      	beq.n	8006dfe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f003 0304 	and.w	r3, r3, #4
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d005      	beq.n	8006dd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006dc8:	4b59      	ldr	r3, [pc, #356]	; (8006f30 <HAL_RCC_ClockConfig+0x1bc>)
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	4a58      	ldr	r2, [pc, #352]	; (8006f30 <HAL_RCC_ClockConfig+0x1bc>)
 8006dce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006dd2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f003 0308 	and.w	r3, r3, #8
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d005      	beq.n	8006dec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006de0:	4b53      	ldr	r3, [pc, #332]	; (8006f30 <HAL_RCC_ClockConfig+0x1bc>)
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	4a52      	ldr	r2, [pc, #328]	; (8006f30 <HAL_RCC_ClockConfig+0x1bc>)
 8006de6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006dea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006dec:	4b50      	ldr	r3, [pc, #320]	; (8006f30 <HAL_RCC_ClockConfig+0x1bc>)
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	494d      	ldr	r1, [pc, #308]	; (8006f30 <HAL_RCC_ClockConfig+0x1bc>)
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f003 0301 	and.w	r3, r3, #1
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d044      	beq.n	8006e94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d107      	bne.n	8006e22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e12:	4b47      	ldr	r3, [pc, #284]	; (8006f30 <HAL_RCC_ClockConfig+0x1bc>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d119      	bne.n	8006e52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	e07f      	b.n	8006f22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	2b02      	cmp	r3, #2
 8006e28:	d003      	beq.n	8006e32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e2e:	2b03      	cmp	r3, #3
 8006e30:	d107      	bne.n	8006e42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e32:	4b3f      	ldr	r3, [pc, #252]	; (8006f30 <HAL_RCC_ClockConfig+0x1bc>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d109      	bne.n	8006e52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e06f      	b.n	8006f22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e42:	4b3b      	ldr	r3, [pc, #236]	; (8006f30 <HAL_RCC_ClockConfig+0x1bc>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f003 0302 	and.w	r3, r3, #2
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d101      	bne.n	8006e52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	e067      	b.n	8006f22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006e52:	4b37      	ldr	r3, [pc, #220]	; (8006f30 <HAL_RCC_ClockConfig+0x1bc>)
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	f023 0203 	bic.w	r2, r3, #3
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	4934      	ldr	r1, [pc, #208]	; (8006f30 <HAL_RCC_ClockConfig+0x1bc>)
 8006e60:	4313      	orrs	r3, r2
 8006e62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006e64:	f7fc ff80 	bl	8003d68 <HAL_GetTick>
 8006e68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e6a:	e00a      	b.n	8006e82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e6c:	f7fc ff7c 	bl	8003d68 <HAL_GetTick>
 8006e70:	4602      	mov	r2, r0
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	1ad3      	subs	r3, r2, r3
 8006e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d901      	bls.n	8006e82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006e7e:	2303      	movs	r3, #3
 8006e80:	e04f      	b.n	8006f22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e82:	4b2b      	ldr	r3, [pc, #172]	; (8006f30 <HAL_RCC_ClockConfig+0x1bc>)
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	f003 020c 	and.w	r2, r3, #12
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	009b      	lsls	r3, r3, #2
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d1eb      	bne.n	8006e6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006e94:	4b25      	ldr	r3, [pc, #148]	; (8006f2c <HAL_RCC_ClockConfig+0x1b8>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f003 030f 	and.w	r3, r3, #15
 8006e9c:	683a      	ldr	r2, [r7, #0]
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d20c      	bcs.n	8006ebc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ea2:	4b22      	ldr	r3, [pc, #136]	; (8006f2c <HAL_RCC_ClockConfig+0x1b8>)
 8006ea4:	683a      	ldr	r2, [r7, #0]
 8006ea6:	b2d2      	uxtb	r2, r2
 8006ea8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006eaa:	4b20      	ldr	r3, [pc, #128]	; (8006f2c <HAL_RCC_ClockConfig+0x1b8>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f003 030f 	and.w	r3, r3, #15
 8006eb2:	683a      	ldr	r2, [r7, #0]
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d001      	beq.n	8006ebc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	e032      	b.n	8006f22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f003 0304 	and.w	r3, r3, #4
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d008      	beq.n	8006eda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ec8:	4b19      	ldr	r3, [pc, #100]	; (8006f30 <HAL_RCC_ClockConfig+0x1bc>)
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	68db      	ldr	r3, [r3, #12]
 8006ed4:	4916      	ldr	r1, [pc, #88]	; (8006f30 <HAL_RCC_ClockConfig+0x1bc>)
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f003 0308 	and.w	r3, r3, #8
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d009      	beq.n	8006efa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006ee6:	4b12      	ldr	r3, [pc, #72]	; (8006f30 <HAL_RCC_ClockConfig+0x1bc>)
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	691b      	ldr	r3, [r3, #16]
 8006ef2:	00db      	lsls	r3, r3, #3
 8006ef4:	490e      	ldr	r1, [pc, #56]	; (8006f30 <HAL_RCC_ClockConfig+0x1bc>)
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006efa:	f000 f821 	bl	8006f40 <HAL_RCC_GetSysClockFreq>
 8006efe:	4602      	mov	r2, r0
 8006f00:	4b0b      	ldr	r3, [pc, #44]	; (8006f30 <HAL_RCC_ClockConfig+0x1bc>)
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	091b      	lsrs	r3, r3, #4
 8006f06:	f003 030f 	and.w	r3, r3, #15
 8006f0a:	490a      	ldr	r1, [pc, #40]	; (8006f34 <HAL_RCC_ClockConfig+0x1c0>)
 8006f0c:	5ccb      	ldrb	r3, [r1, r3]
 8006f0e:	fa22 f303 	lsr.w	r3, r2, r3
 8006f12:	4a09      	ldr	r2, [pc, #36]	; (8006f38 <HAL_RCC_ClockConfig+0x1c4>)
 8006f14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006f16:	4b09      	ldr	r3, [pc, #36]	; (8006f3c <HAL_RCC_ClockConfig+0x1c8>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f7fa fea8 	bl	8001c70 <HAL_InitTick>

  return HAL_OK;
 8006f20:	2300      	movs	r3, #0
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3710      	adds	r7, #16
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}
 8006f2a:	bf00      	nop
 8006f2c:	40023c00 	.word	0x40023c00
 8006f30:	40023800 	.word	0x40023800
 8006f34:	0801285c 	.word	0x0801285c
 8006f38:	20000000 	.word	0x20000000
 8006f3c:	20000080 	.word	0x20000080

08006f40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f44:	b094      	sub	sp, #80	; 0x50
 8006f46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	647b      	str	r3, [r7, #68]	; 0x44
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f50:	2300      	movs	r3, #0
 8006f52:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006f54:	2300      	movs	r3, #0
 8006f56:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f58:	4b79      	ldr	r3, [pc, #484]	; (8007140 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	f003 030c 	and.w	r3, r3, #12
 8006f60:	2b08      	cmp	r3, #8
 8006f62:	d00d      	beq.n	8006f80 <HAL_RCC_GetSysClockFreq+0x40>
 8006f64:	2b08      	cmp	r3, #8
 8006f66:	f200 80e1 	bhi.w	800712c <HAL_RCC_GetSysClockFreq+0x1ec>
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d002      	beq.n	8006f74 <HAL_RCC_GetSysClockFreq+0x34>
 8006f6e:	2b04      	cmp	r3, #4
 8006f70:	d003      	beq.n	8006f7a <HAL_RCC_GetSysClockFreq+0x3a>
 8006f72:	e0db      	b.n	800712c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006f74:	4b73      	ldr	r3, [pc, #460]	; (8007144 <HAL_RCC_GetSysClockFreq+0x204>)
 8006f76:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006f78:	e0db      	b.n	8007132 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006f7a:	4b73      	ldr	r3, [pc, #460]	; (8007148 <HAL_RCC_GetSysClockFreq+0x208>)
 8006f7c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006f7e:	e0d8      	b.n	8007132 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006f80:	4b6f      	ldr	r3, [pc, #444]	; (8007140 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f88:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006f8a:	4b6d      	ldr	r3, [pc, #436]	; (8007140 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d063      	beq.n	800705e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f96:	4b6a      	ldr	r3, [pc, #424]	; (8007140 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	099b      	lsrs	r3, r3, #6
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006fa0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fa8:	633b      	str	r3, [r7, #48]	; 0x30
 8006faa:	2300      	movs	r3, #0
 8006fac:	637b      	str	r3, [r7, #52]	; 0x34
 8006fae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006fb2:	4622      	mov	r2, r4
 8006fb4:	462b      	mov	r3, r5
 8006fb6:	f04f 0000 	mov.w	r0, #0
 8006fba:	f04f 0100 	mov.w	r1, #0
 8006fbe:	0159      	lsls	r1, r3, #5
 8006fc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006fc4:	0150      	lsls	r0, r2, #5
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	460b      	mov	r3, r1
 8006fca:	4621      	mov	r1, r4
 8006fcc:	1a51      	subs	r1, r2, r1
 8006fce:	6139      	str	r1, [r7, #16]
 8006fd0:	4629      	mov	r1, r5
 8006fd2:	eb63 0301 	sbc.w	r3, r3, r1
 8006fd6:	617b      	str	r3, [r7, #20]
 8006fd8:	f04f 0200 	mov.w	r2, #0
 8006fdc:	f04f 0300 	mov.w	r3, #0
 8006fe0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006fe4:	4659      	mov	r1, fp
 8006fe6:	018b      	lsls	r3, r1, #6
 8006fe8:	4651      	mov	r1, sl
 8006fea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006fee:	4651      	mov	r1, sl
 8006ff0:	018a      	lsls	r2, r1, #6
 8006ff2:	4651      	mov	r1, sl
 8006ff4:	ebb2 0801 	subs.w	r8, r2, r1
 8006ff8:	4659      	mov	r1, fp
 8006ffa:	eb63 0901 	sbc.w	r9, r3, r1
 8006ffe:	f04f 0200 	mov.w	r2, #0
 8007002:	f04f 0300 	mov.w	r3, #0
 8007006:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800700a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800700e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007012:	4690      	mov	r8, r2
 8007014:	4699      	mov	r9, r3
 8007016:	4623      	mov	r3, r4
 8007018:	eb18 0303 	adds.w	r3, r8, r3
 800701c:	60bb      	str	r3, [r7, #8]
 800701e:	462b      	mov	r3, r5
 8007020:	eb49 0303 	adc.w	r3, r9, r3
 8007024:	60fb      	str	r3, [r7, #12]
 8007026:	f04f 0200 	mov.w	r2, #0
 800702a:	f04f 0300 	mov.w	r3, #0
 800702e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007032:	4629      	mov	r1, r5
 8007034:	024b      	lsls	r3, r1, #9
 8007036:	4621      	mov	r1, r4
 8007038:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800703c:	4621      	mov	r1, r4
 800703e:	024a      	lsls	r2, r1, #9
 8007040:	4610      	mov	r0, r2
 8007042:	4619      	mov	r1, r3
 8007044:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007046:	2200      	movs	r2, #0
 8007048:	62bb      	str	r3, [r7, #40]	; 0x28
 800704a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800704c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007050:	f7f9 fe0a 	bl	8000c68 <__aeabi_uldivmod>
 8007054:	4602      	mov	r2, r0
 8007056:	460b      	mov	r3, r1
 8007058:	4613      	mov	r3, r2
 800705a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800705c:	e058      	b.n	8007110 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800705e:	4b38      	ldr	r3, [pc, #224]	; (8007140 <HAL_RCC_GetSysClockFreq+0x200>)
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	099b      	lsrs	r3, r3, #6
 8007064:	2200      	movs	r2, #0
 8007066:	4618      	mov	r0, r3
 8007068:	4611      	mov	r1, r2
 800706a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800706e:	623b      	str	r3, [r7, #32]
 8007070:	2300      	movs	r3, #0
 8007072:	627b      	str	r3, [r7, #36]	; 0x24
 8007074:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007078:	4642      	mov	r2, r8
 800707a:	464b      	mov	r3, r9
 800707c:	f04f 0000 	mov.w	r0, #0
 8007080:	f04f 0100 	mov.w	r1, #0
 8007084:	0159      	lsls	r1, r3, #5
 8007086:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800708a:	0150      	lsls	r0, r2, #5
 800708c:	4602      	mov	r2, r0
 800708e:	460b      	mov	r3, r1
 8007090:	4641      	mov	r1, r8
 8007092:	ebb2 0a01 	subs.w	sl, r2, r1
 8007096:	4649      	mov	r1, r9
 8007098:	eb63 0b01 	sbc.w	fp, r3, r1
 800709c:	f04f 0200 	mov.w	r2, #0
 80070a0:	f04f 0300 	mov.w	r3, #0
 80070a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80070a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80070ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80070b0:	ebb2 040a 	subs.w	r4, r2, sl
 80070b4:	eb63 050b 	sbc.w	r5, r3, fp
 80070b8:	f04f 0200 	mov.w	r2, #0
 80070bc:	f04f 0300 	mov.w	r3, #0
 80070c0:	00eb      	lsls	r3, r5, #3
 80070c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80070c6:	00e2      	lsls	r2, r4, #3
 80070c8:	4614      	mov	r4, r2
 80070ca:	461d      	mov	r5, r3
 80070cc:	4643      	mov	r3, r8
 80070ce:	18e3      	adds	r3, r4, r3
 80070d0:	603b      	str	r3, [r7, #0]
 80070d2:	464b      	mov	r3, r9
 80070d4:	eb45 0303 	adc.w	r3, r5, r3
 80070d8:	607b      	str	r3, [r7, #4]
 80070da:	f04f 0200 	mov.w	r2, #0
 80070de:	f04f 0300 	mov.w	r3, #0
 80070e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80070e6:	4629      	mov	r1, r5
 80070e8:	028b      	lsls	r3, r1, #10
 80070ea:	4621      	mov	r1, r4
 80070ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80070f0:	4621      	mov	r1, r4
 80070f2:	028a      	lsls	r2, r1, #10
 80070f4:	4610      	mov	r0, r2
 80070f6:	4619      	mov	r1, r3
 80070f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070fa:	2200      	movs	r2, #0
 80070fc:	61bb      	str	r3, [r7, #24]
 80070fe:	61fa      	str	r2, [r7, #28]
 8007100:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007104:	f7f9 fdb0 	bl	8000c68 <__aeabi_uldivmod>
 8007108:	4602      	mov	r2, r0
 800710a:	460b      	mov	r3, r1
 800710c:	4613      	mov	r3, r2
 800710e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007110:	4b0b      	ldr	r3, [pc, #44]	; (8007140 <HAL_RCC_GetSysClockFreq+0x200>)
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	0c1b      	lsrs	r3, r3, #16
 8007116:	f003 0303 	and.w	r3, r3, #3
 800711a:	3301      	adds	r3, #1
 800711c:	005b      	lsls	r3, r3, #1
 800711e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007120:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007122:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007124:	fbb2 f3f3 	udiv	r3, r2, r3
 8007128:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800712a:	e002      	b.n	8007132 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800712c:	4b05      	ldr	r3, [pc, #20]	; (8007144 <HAL_RCC_GetSysClockFreq+0x204>)
 800712e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007130:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007132:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007134:	4618      	mov	r0, r3
 8007136:	3750      	adds	r7, #80	; 0x50
 8007138:	46bd      	mov	sp, r7
 800713a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800713e:	bf00      	nop
 8007140:	40023800 	.word	0x40023800
 8007144:	00f42400 	.word	0x00f42400
 8007148:	007a1200 	.word	0x007a1200

0800714c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800714c:	b480      	push	{r7}
 800714e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007150:	4b03      	ldr	r3, [pc, #12]	; (8007160 <HAL_RCC_GetHCLKFreq+0x14>)
 8007152:	681b      	ldr	r3, [r3, #0]
}
 8007154:	4618      	mov	r0, r3
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr
 800715e:	bf00      	nop
 8007160:	20000000 	.word	0x20000000

08007164 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007168:	f7ff fff0 	bl	800714c <HAL_RCC_GetHCLKFreq>
 800716c:	4602      	mov	r2, r0
 800716e:	4b05      	ldr	r3, [pc, #20]	; (8007184 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	0a9b      	lsrs	r3, r3, #10
 8007174:	f003 0307 	and.w	r3, r3, #7
 8007178:	4903      	ldr	r1, [pc, #12]	; (8007188 <HAL_RCC_GetPCLK1Freq+0x24>)
 800717a:	5ccb      	ldrb	r3, [r1, r3]
 800717c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007180:	4618      	mov	r0, r3
 8007182:	bd80      	pop	{r7, pc}
 8007184:	40023800 	.word	0x40023800
 8007188:	0801286c 	.word	0x0801286c

0800718c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800718c:	b480      	push	{r7}
 800718e:	b083      	sub	sp, #12
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	220f      	movs	r2, #15
 800719a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800719c:	4b12      	ldr	r3, [pc, #72]	; (80071e8 <HAL_RCC_GetClockConfig+0x5c>)
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	f003 0203 	and.w	r2, r3, #3
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80071a8:	4b0f      	ldr	r3, [pc, #60]	; (80071e8 <HAL_RCC_GetClockConfig+0x5c>)
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80071b4:	4b0c      	ldr	r3, [pc, #48]	; (80071e8 <HAL_RCC_GetClockConfig+0x5c>)
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80071c0:	4b09      	ldr	r3, [pc, #36]	; (80071e8 <HAL_RCC_GetClockConfig+0x5c>)
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	08db      	lsrs	r3, r3, #3
 80071c6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80071ce:	4b07      	ldr	r3, [pc, #28]	; (80071ec <HAL_RCC_GetClockConfig+0x60>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f003 020f 	and.w	r2, r3, #15
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	601a      	str	r2, [r3, #0]
}
 80071da:	bf00      	nop
 80071dc:	370c      	adds	r7, #12
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr
 80071e6:	bf00      	nop
 80071e8:	40023800 	.word	0x40023800
 80071ec:	40023c00 	.word	0x40023c00

080071f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b086      	sub	sp, #24
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80071f8:	2300      	movs	r3, #0
 80071fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80071fc:	2300      	movs	r3, #0
 80071fe:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f003 0301 	and.w	r3, r3, #1
 8007208:	2b00      	cmp	r3, #0
 800720a:	d10b      	bne.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007214:	2b00      	cmp	r3, #0
 8007216:	d105      	bne.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007220:	2b00      	cmp	r3, #0
 8007222:	d075      	beq.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007224:	4b91      	ldr	r3, [pc, #580]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8007226:	2200      	movs	r2, #0
 8007228:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800722a:	f7fc fd9d 	bl	8003d68 <HAL_GetTick>
 800722e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007230:	e008      	b.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007232:	f7fc fd99 	bl	8003d68 <HAL_GetTick>
 8007236:	4602      	mov	r2, r0
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	1ad3      	subs	r3, r2, r3
 800723c:	2b02      	cmp	r3, #2
 800723e:	d901      	bls.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007240:	2303      	movs	r3, #3
 8007242:	e189      	b.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007244:	4b8a      	ldr	r3, [pc, #552]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800724c:	2b00      	cmp	r3, #0
 800724e:	d1f0      	bne.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f003 0301 	and.w	r3, r3, #1
 8007258:	2b00      	cmp	r3, #0
 800725a:	d009      	beq.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	019a      	lsls	r2, r3, #6
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	071b      	lsls	r3, r3, #28
 8007268:	4981      	ldr	r1, [pc, #516]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800726a:	4313      	orrs	r3, r2
 800726c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f003 0302 	and.w	r3, r3, #2
 8007278:	2b00      	cmp	r3, #0
 800727a:	d01f      	beq.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800727c:	4b7c      	ldr	r3, [pc, #496]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800727e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007282:	0f1b      	lsrs	r3, r3, #28
 8007284:	f003 0307 	and.w	r3, r3, #7
 8007288:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	019a      	lsls	r2, r3, #6
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	68db      	ldr	r3, [r3, #12]
 8007294:	061b      	lsls	r3, r3, #24
 8007296:	431a      	orrs	r2, r3
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	071b      	lsls	r3, r3, #28
 800729c:	4974      	ldr	r1, [pc, #464]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800729e:	4313      	orrs	r3, r2
 80072a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80072a4:	4b72      	ldr	r3, [pc, #456]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80072a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072aa:	f023 021f 	bic.w	r2, r3, #31
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	69db      	ldr	r3, [r3, #28]
 80072b2:	3b01      	subs	r3, #1
 80072b4:	496e      	ldr	r1, [pc, #440]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80072b6:	4313      	orrs	r3, r2
 80072b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d00d      	beq.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	019a      	lsls	r2, r3, #6
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	68db      	ldr	r3, [r3, #12]
 80072d2:	061b      	lsls	r3, r3, #24
 80072d4:	431a      	orrs	r2, r3
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	071b      	lsls	r3, r3, #28
 80072dc:	4964      	ldr	r1, [pc, #400]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80072de:	4313      	orrs	r3, r2
 80072e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80072e4:	4b61      	ldr	r3, [pc, #388]	; (800746c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80072e6:	2201      	movs	r2, #1
 80072e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80072ea:	f7fc fd3d 	bl	8003d68 <HAL_GetTick>
 80072ee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80072f0:	e008      	b.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80072f2:	f7fc fd39 	bl	8003d68 <HAL_GetTick>
 80072f6:	4602      	mov	r2, r0
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	1ad3      	subs	r3, r2, r3
 80072fc:	2b02      	cmp	r3, #2
 80072fe:	d901      	bls.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007300:	2303      	movs	r3, #3
 8007302:	e129      	b.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007304:	4b5a      	ldr	r3, [pc, #360]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800730c:	2b00      	cmp	r3, #0
 800730e:	d0f0      	beq.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f003 0304 	and.w	r3, r3, #4
 8007318:	2b00      	cmp	r3, #0
 800731a:	d105      	bne.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007324:	2b00      	cmp	r3, #0
 8007326:	d079      	beq.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007328:	4b52      	ldr	r3, [pc, #328]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800732a:	2200      	movs	r2, #0
 800732c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800732e:	f7fc fd1b 	bl	8003d68 <HAL_GetTick>
 8007332:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007334:	e008      	b.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007336:	f7fc fd17 	bl	8003d68 <HAL_GetTick>
 800733a:	4602      	mov	r2, r0
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	1ad3      	subs	r3, r2, r3
 8007340:	2b02      	cmp	r3, #2
 8007342:	d901      	bls.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007344:	2303      	movs	r3, #3
 8007346:	e107      	b.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007348:	4b49      	ldr	r3, [pc, #292]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007350:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007354:	d0ef      	beq.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f003 0304 	and.w	r3, r3, #4
 800735e:	2b00      	cmp	r3, #0
 8007360:	d020      	beq.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007362:	4b43      	ldr	r3, [pc, #268]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007368:	0f1b      	lsrs	r3, r3, #28
 800736a:	f003 0307 	and.w	r3, r3, #7
 800736e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	691b      	ldr	r3, [r3, #16]
 8007374:	019a      	lsls	r2, r3, #6
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	695b      	ldr	r3, [r3, #20]
 800737a:	061b      	lsls	r3, r3, #24
 800737c:	431a      	orrs	r2, r3
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	071b      	lsls	r3, r3, #28
 8007382:	493b      	ldr	r1, [pc, #236]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007384:	4313      	orrs	r3, r2
 8007386:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800738a:	4b39      	ldr	r3, [pc, #228]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800738c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007390:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6a1b      	ldr	r3, [r3, #32]
 8007398:	3b01      	subs	r3, #1
 800739a:	021b      	lsls	r3, r3, #8
 800739c:	4934      	ldr	r1, [pc, #208]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800739e:	4313      	orrs	r3, r2
 80073a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f003 0308 	and.w	r3, r3, #8
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d01e      	beq.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80073b0:	4b2f      	ldr	r3, [pc, #188]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80073b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073b6:	0e1b      	lsrs	r3, r3, #24
 80073b8:	f003 030f 	and.w	r3, r3, #15
 80073bc:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	691b      	ldr	r3, [r3, #16]
 80073c2:	019a      	lsls	r2, r3, #6
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	061b      	lsls	r3, r3, #24
 80073c8:	431a      	orrs	r2, r3
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	699b      	ldr	r3, [r3, #24]
 80073ce:	071b      	lsls	r3, r3, #28
 80073d0:	4927      	ldr	r1, [pc, #156]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80073d2:	4313      	orrs	r3, r2
 80073d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80073d8:	4b25      	ldr	r3, [pc, #148]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80073da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073de:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e6:	4922      	ldr	r1, [pc, #136]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80073e8:	4313      	orrs	r3, r2
 80073ea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80073ee:	4b21      	ldr	r3, [pc, #132]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80073f0:	2201      	movs	r2, #1
 80073f2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80073f4:	f7fc fcb8 	bl	8003d68 <HAL_GetTick>
 80073f8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80073fa:	e008      	b.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80073fc:	f7fc fcb4 	bl	8003d68 <HAL_GetTick>
 8007400:	4602      	mov	r2, r0
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	1ad3      	subs	r3, r2, r3
 8007406:	2b02      	cmp	r3, #2
 8007408:	d901      	bls.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800740a:	2303      	movs	r3, #3
 800740c:	e0a4      	b.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800740e:	4b18      	ldr	r3, [pc, #96]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007416:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800741a:	d1ef      	bne.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f003 0320 	and.w	r3, r3, #32
 8007424:	2b00      	cmp	r3, #0
 8007426:	f000 808b 	beq.w	8007540 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800742a:	2300      	movs	r3, #0
 800742c:	60fb      	str	r3, [r7, #12]
 800742e:	4b10      	ldr	r3, [pc, #64]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007432:	4a0f      	ldr	r2, [pc, #60]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007438:	6413      	str	r3, [r2, #64]	; 0x40
 800743a:	4b0d      	ldr	r3, [pc, #52]	; (8007470 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800743c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800743e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007442:	60fb      	str	r3, [r7, #12]
 8007444:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007446:	4b0c      	ldr	r3, [pc, #48]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a0b      	ldr	r2, [pc, #44]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800744c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007450:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007452:	f7fc fc89 	bl	8003d68 <HAL_GetTick>
 8007456:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007458:	e010      	b.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800745a:	f7fc fc85 	bl	8003d68 <HAL_GetTick>
 800745e:	4602      	mov	r2, r0
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	1ad3      	subs	r3, r2, r3
 8007464:	2b02      	cmp	r3, #2
 8007466:	d909      	bls.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8007468:	2303      	movs	r3, #3
 800746a:	e075      	b.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800746c:	42470068 	.word	0x42470068
 8007470:	40023800 	.word	0x40023800
 8007474:	42470070 	.word	0x42470070
 8007478:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800747c:	4b38      	ldr	r3, [pc, #224]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007484:	2b00      	cmp	r3, #0
 8007486:	d0e8      	beq.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007488:	4b36      	ldr	r3, [pc, #216]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800748a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800748c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007490:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d02f      	beq.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800749c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074a0:	693a      	ldr	r2, [r7, #16]
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d028      	beq.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80074a6:	4b2f      	ldr	r3, [pc, #188]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80074a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074ae:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80074b0:	4b2d      	ldr	r3, [pc, #180]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80074b2:	2201      	movs	r2, #1
 80074b4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80074b6:	4b2c      	ldr	r3, [pc, #176]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80074b8:	2200      	movs	r2, #0
 80074ba:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80074bc:	4a29      	ldr	r2, [pc, #164]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80074c2:	4b28      	ldr	r3, [pc, #160]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80074c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074c6:	f003 0301 	and.w	r3, r3, #1
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d114      	bne.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80074ce:	f7fc fc4b 	bl	8003d68 <HAL_GetTick>
 80074d2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074d4:	e00a      	b.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80074d6:	f7fc fc47 	bl	8003d68 <HAL_GetTick>
 80074da:	4602      	mov	r2, r0
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	1ad3      	subs	r3, r2, r3
 80074e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d901      	bls.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80074e8:	2303      	movs	r3, #3
 80074ea:	e035      	b.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074ec:	4b1d      	ldr	r3, [pc, #116]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80074ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074f0:	f003 0302 	and.w	r3, r3, #2
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d0ee      	beq.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007500:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007504:	d10d      	bne.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007506:	4b17      	ldr	r3, [pc, #92]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007508:	689b      	ldr	r3, [r3, #8]
 800750a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007512:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007516:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800751a:	4912      	ldr	r1, [pc, #72]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800751c:	4313      	orrs	r3, r2
 800751e:	608b      	str	r3, [r1, #8]
 8007520:	e005      	b.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8007522:	4b10      	ldr	r3, [pc, #64]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	4a0f      	ldr	r2, [pc, #60]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007528:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800752c:	6093      	str	r3, [r2, #8]
 800752e:	4b0d      	ldr	r3, [pc, #52]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007530:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007536:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800753a:	490a      	ldr	r1, [pc, #40]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800753c:	4313      	orrs	r3, r2
 800753e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f003 0310 	and.w	r3, r3, #16
 8007548:	2b00      	cmp	r3, #0
 800754a:	d004      	beq.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8007552:	4b06      	ldr	r3, [pc, #24]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8007554:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8007556:	2300      	movs	r3, #0
}
 8007558:	4618      	mov	r0, r3
 800755a:	3718      	adds	r7, #24
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}
 8007560:	40007000 	.word	0x40007000
 8007564:	40023800 	.word	0x40023800
 8007568:	42470e40 	.word	0x42470e40
 800756c:	424711e0 	.word	0x424711e0

08007570 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b082      	sub	sp, #8
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d101      	bne.n	8007584 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007580:	2301      	movs	r3, #1
 8007582:	e025      	b.n	80075d0 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800758a:	b2db      	uxtb	r3, r3
 800758c:	2b00      	cmp	r3, #0
 800758e:	d106      	bne.n	800759e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2200      	movs	r2, #0
 8007594:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f000 f81d 	bl	80075d8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2202      	movs	r2, #2
 80075a2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	3304      	adds	r3, #4
 80075ae:	4619      	mov	r1, r3
 80075b0:	4610      	mov	r0, r2
 80075b2:	f001 f905 	bl	80087c0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6818      	ldr	r0, [r3, #0]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	461a      	mov	r2, r3
 80075c0:	6839      	ldr	r1, [r7, #0]
 80075c2:	f001 f95a 	bl	800887a <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2201      	movs	r2, #1
 80075ca:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80075ce:	2300      	movs	r3, #0
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3708      	adds	r7, #8
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 80075e0:	bf00      	nop
 80075e2:	370c      	adds	r7, #12
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr

080075ec <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b086      	sub	sp, #24
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	60f8      	str	r0, [r7, #12]
 80075f4:	60b9      	str	r1, [r7, #8]
 80075f6:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80075fe:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8007600:	7dfb      	ldrb	r3, [r7, #23]
 8007602:	2b02      	cmp	r3, #2
 8007604:	d101      	bne.n	800760a <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8007606:	2302      	movs	r3, #2
 8007608:	e021      	b.n	800764e <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800760a:	7dfb      	ldrb	r3, [r7, #23]
 800760c:	2b01      	cmp	r3, #1
 800760e:	d002      	beq.n	8007616 <HAL_SDRAM_SendCommand+0x2a>
 8007610:	7dfb      	ldrb	r3, [r7, #23]
 8007612:	2b05      	cmp	r3, #5
 8007614:	d118      	bne.n	8007648 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2202      	movs	r2, #2
 800761a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	68b9      	ldr	r1, [r7, #8]
 8007626:	4618      	mov	r0, r3
 8007628:	f001 f990 	bl	800894c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	2b02      	cmp	r3, #2
 8007632:	d104      	bne.n	800763e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2205      	movs	r2, #5
 8007638:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800763c:	e006      	b.n	800764c <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2201      	movs	r2, #1
 8007642:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007646:	e001      	b.n	800764c <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8007648:	2301      	movs	r3, #1
 800764a:	e000      	b.n	800764e <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800764c:	2300      	movs	r3, #0
}
 800764e:	4618      	mov	r0, r3
 8007650:	3718      	adds	r7, #24
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}

08007656 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8007656:	b580      	push	{r7, lr}
 8007658:	b082      	sub	sp, #8
 800765a:	af00      	add	r7, sp, #0
 800765c:	6078      	str	r0, [r7, #4]
 800765e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007666:	b2db      	uxtb	r3, r3
 8007668:	2b02      	cmp	r3, #2
 800766a:	d101      	bne.n	8007670 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800766c:	2302      	movs	r3, #2
 800766e:	e016      	b.n	800769e <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007676:	b2db      	uxtb	r3, r3
 8007678:	2b01      	cmp	r3, #1
 800767a:	d10f      	bne.n	800769c <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2202      	movs	r2, #2
 8007680:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	6839      	ldr	r1, [r7, #0]
 800768a:	4618      	mov	r0, r3
 800768c:	f001 f99b 	bl	80089c6 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2201      	movs	r2, #1
 8007694:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8007698:	2300      	movs	r3, #0
 800769a:	e000      	b.n	800769e <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800769c:	2301      	movs	r3, #1
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3708      	adds	r7, #8
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}

080076a6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80076a6:	b580      	push	{r7, lr}
 80076a8:	b082      	sub	sp, #8
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d101      	bne.n	80076b8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80076b4:	2301      	movs	r3, #1
 80076b6:	e07b      	b.n	80077b0 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d108      	bne.n	80076d2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076c8:	d009      	beq.n	80076de <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	61da      	str	r2, [r3, #28]
 80076d0:	e005      	b.n	80076de <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2200      	movs	r2, #0
 80076d6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2200      	movs	r2, #0
 80076dc:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2200      	movs	r2, #0
 80076e2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076ea:	b2db      	uxtb	r3, r3
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d106      	bne.n	80076fe <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2200      	movs	r2, #0
 80076f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f7fa fa53 	bl	8001ba4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2202      	movs	r2, #2
 8007702:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007714:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007726:	431a      	orrs	r2, r3
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007730:	431a      	orrs	r2, r3
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	691b      	ldr	r3, [r3, #16]
 8007736:	f003 0302 	and.w	r3, r3, #2
 800773a:	431a      	orrs	r2, r3
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	695b      	ldr	r3, [r3, #20]
 8007740:	f003 0301 	and.w	r3, r3, #1
 8007744:	431a      	orrs	r2, r3
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	699b      	ldr	r3, [r3, #24]
 800774a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800774e:	431a      	orrs	r2, r3
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	69db      	ldr	r3, [r3, #28]
 8007754:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007758:	431a      	orrs	r2, r3
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6a1b      	ldr	r3, [r3, #32]
 800775e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007762:	ea42 0103 	orr.w	r1, r2, r3
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800776a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	430a      	orrs	r2, r1
 8007774:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	699b      	ldr	r3, [r3, #24]
 800777a:	0c1b      	lsrs	r3, r3, #16
 800777c:	f003 0104 	and.w	r1, r3, #4
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007784:	f003 0210 	and.w	r2, r3, #16
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	430a      	orrs	r2, r1
 800778e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	69da      	ldr	r2, [r3, #28]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800779e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2200      	movs	r2, #0
 80077a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2201      	movs	r2, #1
 80077aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80077ae:	2300      	movs	r3, #0
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3708      	adds	r7, #8
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b082      	sub	sp, #8
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d101      	bne.n	80077ca <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	e01a      	b.n	8007800 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2202      	movs	r2, #2
 80077ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077e0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f7fa fa26 	bl	8001c34 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2200      	movs	r2, #0
 80077f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80077fe:	2300      	movs	r3, #0
}
 8007800:	4618      	mov	r0, r3
 8007802:	3708      	adds	r7, #8
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b088      	sub	sp, #32
 800780c:	af00      	add	r7, sp, #0
 800780e:	60f8      	str	r0, [r7, #12]
 8007810:	60b9      	str	r1, [r7, #8]
 8007812:	603b      	str	r3, [r7, #0]
 8007814:	4613      	mov	r3, r2
 8007816:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007818:	2300      	movs	r3, #0
 800781a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007822:	2b01      	cmp	r3, #1
 8007824:	d101      	bne.n	800782a <HAL_SPI_Transmit+0x22>
 8007826:	2302      	movs	r3, #2
 8007828:	e126      	b.n	8007a78 <HAL_SPI_Transmit+0x270>
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2201      	movs	r2, #1
 800782e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007832:	f7fc fa99 	bl	8003d68 <HAL_GetTick>
 8007836:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007838:	88fb      	ldrh	r3, [r7, #6]
 800783a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007842:	b2db      	uxtb	r3, r3
 8007844:	2b01      	cmp	r3, #1
 8007846:	d002      	beq.n	800784e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007848:	2302      	movs	r3, #2
 800784a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800784c:	e10b      	b.n	8007a66 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d002      	beq.n	800785a <HAL_SPI_Transmit+0x52>
 8007854:	88fb      	ldrh	r3, [r7, #6]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d102      	bne.n	8007860 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800785a:	2301      	movs	r3, #1
 800785c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800785e:	e102      	b.n	8007a66 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2203      	movs	r2, #3
 8007864:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2200      	movs	r2, #0
 800786c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	68ba      	ldr	r2, [r7, #8]
 8007872:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	88fa      	ldrh	r2, [r7, #6]
 8007878:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	88fa      	ldrh	r2, [r7, #6]
 800787e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2200      	movs	r2, #0
 8007884:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2200      	movs	r2, #0
 800788a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2200      	movs	r2, #0
 8007890:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2200      	movs	r2, #0
 8007896:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2200      	movs	r2, #0
 800789c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078a6:	d10f      	bne.n	80078c8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078b6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80078c6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078d2:	2b40      	cmp	r3, #64	; 0x40
 80078d4:	d007      	beq.n	80078e6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	68db      	ldr	r3, [r3, #12]
 80078ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078ee:	d14b      	bne.n	8007988 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d002      	beq.n	80078fe <HAL_SPI_Transmit+0xf6>
 80078f8:	8afb      	ldrh	r3, [r7, #22]
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	d13e      	bne.n	800797c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007902:	881a      	ldrh	r2, [r3, #0]
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800790e:	1c9a      	adds	r2, r3, #2
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007918:	b29b      	uxth	r3, r3
 800791a:	3b01      	subs	r3, #1
 800791c:	b29a      	uxth	r2, r3
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007922:	e02b      	b.n	800797c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	f003 0302 	and.w	r3, r3, #2
 800792e:	2b02      	cmp	r3, #2
 8007930:	d112      	bne.n	8007958 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007936:	881a      	ldrh	r2, [r3, #0]
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007942:	1c9a      	adds	r2, r3, #2
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800794c:	b29b      	uxth	r3, r3
 800794e:	3b01      	subs	r3, #1
 8007950:	b29a      	uxth	r2, r3
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	86da      	strh	r2, [r3, #54]	; 0x36
 8007956:	e011      	b.n	800797c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007958:	f7fc fa06 	bl	8003d68 <HAL_GetTick>
 800795c:	4602      	mov	r2, r0
 800795e:	69bb      	ldr	r3, [r7, #24]
 8007960:	1ad3      	subs	r3, r2, r3
 8007962:	683a      	ldr	r2, [r7, #0]
 8007964:	429a      	cmp	r2, r3
 8007966:	d803      	bhi.n	8007970 <HAL_SPI_Transmit+0x168>
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800796e:	d102      	bne.n	8007976 <HAL_SPI_Transmit+0x16e>
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d102      	bne.n	800797c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007976:	2303      	movs	r3, #3
 8007978:	77fb      	strb	r3, [r7, #31]
          goto error;
 800797a:	e074      	b.n	8007a66 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007980:	b29b      	uxth	r3, r3
 8007982:	2b00      	cmp	r3, #0
 8007984:	d1ce      	bne.n	8007924 <HAL_SPI_Transmit+0x11c>
 8007986:	e04c      	b.n	8007a22 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d002      	beq.n	8007996 <HAL_SPI_Transmit+0x18e>
 8007990:	8afb      	ldrh	r3, [r7, #22]
 8007992:	2b01      	cmp	r3, #1
 8007994:	d140      	bne.n	8007a18 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	330c      	adds	r3, #12
 80079a0:	7812      	ldrb	r2, [r2, #0]
 80079a2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079a8:	1c5a      	adds	r2, r3, #1
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	3b01      	subs	r3, #1
 80079b6:	b29a      	uxth	r2, r3
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80079bc:	e02c      	b.n	8007a18 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	f003 0302 	and.w	r3, r3, #2
 80079c8:	2b02      	cmp	r3, #2
 80079ca:	d113      	bne.n	80079f4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	330c      	adds	r3, #12
 80079d6:	7812      	ldrb	r2, [r2, #0]
 80079d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079de:	1c5a      	adds	r2, r3, #1
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079e8:	b29b      	uxth	r3, r3
 80079ea:	3b01      	subs	r3, #1
 80079ec:	b29a      	uxth	r2, r3
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	86da      	strh	r2, [r3, #54]	; 0x36
 80079f2:	e011      	b.n	8007a18 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80079f4:	f7fc f9b8 	bl	8003d68 <HAL_GetTick>
 80079f8:	4602      	mov	r2, r0
 80079fa:	69bb      	ldr	r3, [r7, #24]
 80079fc:	1ad3      	subs	r3, r2, r3
 80079fe:	683a      	ldr	r2, [r7, #0]
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d803      	bhi.n	8007a0c <HAL_SPI_Transmit+0x204>
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a0a:	d102      	bne.n	8007a12 <HAL_SPI_Transmit+0x20a>
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d102      	bne.n	8007a18 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007a12:	2303      	movs	r3, #3
 8007a14:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007a16:	e026      	b.n	8007a66 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d1cd      	bne.n	80079be <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007a22:	69ba      	ldr	r2, [r7, #24]
 8007a24:	6839      	ldr	r1, [r7, #0]
 8007a26:	68f8      	ldr	r0, [r7, #12]
 8007a28:	f000 fbda 	bl	80081e0 <SPI_EndRxTxTransaction>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d002      	beq.n	8007a38 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2220      	movs	r2, #32
 8007a36:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d10a      	bne.n	8007a56 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007a40:	2300      	movs	r3, #0
 8007a42:	613b      	str	r3, [r7, #16]
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	68db      	ldr	r3, [r3, #12]
 8007a4a:	613b      	str	r3, [r7, #16]
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	613b      	str	r3, [r7, #16]
 8007a54:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d002      	beq.n	8007a64 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	77fb      	strb	r3, [r7, #31]
 8007a62:	e000      	b.n	8007a66 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007a64:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2201      	movs	r2, #1
 8007a6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2200      	movs	r2, #0
 8007a72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007a76:	7ffb      	ldrb	r3, [r7, #31]
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3720      	adds	r7, #32
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b088      	sub	sp, #32
 8007a84:	af02      	add	r7, sp, #8
 8007a86:	60f8      	str	r0, [r7, #12]
 8007a88:	60b9      	str	r1, [r7, #8]
 8007a8a:	603b      	str	r3, [r7, #0]
 8007a8c:	4613      	mov	r3, r2
 8007a8e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007a90:	2300      	movs	r3, #0
 8007a92:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a9c:	d112      	bne.n	8007ac4 <HAL_SPI_Receive+0x44>
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d10e      	bne.n	8007ac4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2204      	movs	r2, #4
 8007aaa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007aae:	88fa      	ldrh	r2, [r7, #6]
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	9300      	str	r3, [sp, #0]
 8007ab4:	4613      	mov	r3, r2
 8007ab6:	68ba      	ldr	r2, [r7, #8]
 8007ab8:	68b9      	ldr	r1, [r7, #8]
 8007aba:	68f8      	ldr	r0, [r7, #12]
 8007abc:	f000 f8f1 	bl	8007ca2 <HAL_SPI_TransmitReceive>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	e0ea      	b.n	8007c9a <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d101      	bne.n	8007ad2 <HAL_SPI_Receive+0x52>
 8007ace:	2302      	movs	r3, #2
 8007ad0:	e0e3      	b.n	8007c9a <HAL_SPI_Receive+0x21a>
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007ada:	f7fc f945 	bl	8003d68 <HAL_GetTick>
 8007ade:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007ae6:	b2db      	uxtb	r3, r3
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d002      	beq.n	8007af2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007aec:	2302      	movs	r3, #2
 8007aee:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007af0:	e0ca      	b.n	8007c88 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d002      	beq.n	8007afe <HAL_SPI_Receive+0x7e>
 8007af8:	88fb      	ldrh	r3, [r7, #6]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d102      	bne.n	8007b04 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007afe:	2301      	movs	r3, #1
 8007b00:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007b02:	e0c1      	b.n	8007c88 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2204      	movs	r2, #4
 8007b08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	68ba      	ldr	r2, [r7, #8]
 8007b16:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	88fa      	ldrh	r2, [r7, #6]
 8007b1c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	88fa      	ldrh	r2, [r7, #6]
 8007b22:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2200      	movs	r2, #0
 8007b28:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2200      	movs	r2, #0
 8007b34:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	689b      	ldr	r3, [r3, #8]
 8007b46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b4a:	d10f      	bne.n	8007b6c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	681a      	ldr	r2, [r3, #0]
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b5a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	681a      	ldr	r2, [r3, #0]
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007b6a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b76:	2b40      	cmp	r3, #64	; 0x40
 8007b78:	d007      	beq.n	8007b8a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	681a      	ldr	r2, [r3, #0]
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b88:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	68db      	ldr	r3, [r3, #12]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d162      	bne.n	8007c58 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007b92:	e02e      	b.n	8007bf2 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	f003 0301 	and.w	r3, r3, #1
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d115      	bne.n	8007bce <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f103 020c 	add.w	r2, r3, #12
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bae:	7812      	ldrb	r2, [r2, #0]
 8007bb0:	b2d2      	uxtb	r2, r2
 8007bb2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bb8:	1c5a      	adds	r2, r3, #1
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	3b01      	subs	r3, #1
 8007bc6:	b29a      	uxth	r2, r3
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007bcc:	e011      	b.n	8007bf2 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007bce:	f7fc f8cb 	bl	8003d68 <HAL_GetTick>
 8007bd2:	4602      	mov	r2, r0
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	1ad3      	subs	r3, r2, r3
 8007bd8:	683a      	ldr	r2, [r7, #0]
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d803      	bhi.n	8007be6 <HAL_SPI_Receive+0x166>
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007be4:	d102      	bne.n	8007bec <HAL_SPI_Receive+0x16c>
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d102      	bne.n	8007bf2 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007bec:	2303      	movs	r3, #3
 8007bee:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007bf0:	e04a      	b.n	8007c88 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d1cb      	bne.n	8007b94 <HAL_SPI_Receive+0x114>
 8007bfc:	e031      	b.n	8007c62 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	f003 0301 	and.w	r3, r3, #1
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d113      	bne.n	8007c34 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	68da      	ldr	r2, [r3, #12]
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c16:	b292      	uxth	r2, r2
 8007c18:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c1e:	1c9a      	adds	r2, r3, #2
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	3b01      	subs	r3, #1
 8007c2c:	b29a      	uxth	r2, r3
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007c32:	e011      	b.n	8007c58 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c34:	f7fc f898 	bl	8003d68 <HAL_GetTick>
 8007c38:	4602      	mov	r2, r0
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	1ad3      	subs	r3, r2, r3
 8007c3e:	683a      	ldr	r2, [r7, #0]
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d803      	bhi.n	8007c4c <HAL_SPI_Receive+0x1cc>
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c4a:	d102      	bne.n	8007c52 <HAL_SPI_Receive+0x1d2>
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d102      	bne.n	8007c58 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007c52:	2303      	movs	r3, #3
 8007c54:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007c56:	e017      	b.n	8007c88 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d1cd      	bne.n	8007bfe <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007c62:	693a      	ldr	r2, [r7, #16]
 8007c64:	6839      	ldr	r1, [r7, #0]
 8007c66:	68f8      	ldr	r0, [r7, #12]
 8007c68:	f000 fa54 	bl	8008114 <SPI_EndRxTransaction>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d002      	beq.n	8007c78 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2220      	movs	r2, #32
 8007c76:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d002      	beq.n	8007c86 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007c80:	2301      	movs	r3, #1
 8007c82:	75fb      	strb	r3, [r7, #23]
 8007c84:	e000      	b.n	8007c88 <HAL_SPI_Receive+0x208>
  }

error :
 8007c86:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2200      	movs	r2, #0
 8007c94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007c98:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3718      	adds	r7, #24
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}

08007ca2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007ca2:	b580      	push	{r7, lr}
 8007ca4:	b08c      	sub	sp, #48	; 0x30
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	60f8      	str	r0, [r7, #12]
 8007caa:	60b9      	str	r1, [r7, #8]
 8007cac:	607a      	str	r2, [r7, #4]
 8007cae:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d101      	bne.n	8007cc8 <HAL_SPI_TransmitReceive+0x26>
 8007cc4:	2302      	movs	r3, #2
 8007cc6:	e18a      	b.n	8007fde <HAL_SPI_TransmitReceive+0x33c>
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007cd0:	f7fc f84a 	bl	8003d68 <HAL_GetTick>
 8007cd4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007cdc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007ce6:	887b      	ldrh	r3, [r7, #2]
 8007ce8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007cea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d00f      	beq.n	8007d12 <HAL_SPI_TransmitReceive+0x70>
 8007cf2:	69fb      	ldr	r3, [r7, #28]
 8007cf4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007cf8:	d107      	bne.n	8007d0a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	689b      	ldr	r3, [r3, #8]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d103      	bne.n	8007d0a <HAL_SPI_TransmitReceive+0x68>
 8007d02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007d06:	2b04      	cmp	r3, #4
 8007d08:	d003      	beq.n	8007d12 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007d0a:	2302      	movs	r3, #2
 8007d0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007d10:	e15b      	b.n	8007fca <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d005      	beq.n	8007d24 <HAL_SPI_TransmitReceive+0x82>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d002      	beq.n	8007d24 <HAL_SPI_TransmitReceive+0x82>
 8007d1e:	887b      	ldrh	r3, [r7, #2]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d103      	bne.n	8007d2c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007d24:	2301      	movs	r3, #1
 8007d26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007d2a:	e14e      	b.n	8007fca <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007d32:	b2db      	uxtb	r3, r3
 8007d34:	2b04      	cmp	r3, #4
 8007d36:	d003      	beq.n	8007d40 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2205      	movs	r2, #5
 8007d3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2200      	movs	r2, #0
 8007d44:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	887a      	ldrh	r2, [r7, #2]
 8007d50:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	887a      	ldrh	r2, [r7, #2]
 8007d56:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	68ba      	ldr	r2, [r7, #8]
 8007d5c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	887a      	ldrh	r2, [r7, #2]
 8007d62:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	887a      	ldrh	r2, [r7, #2]
 8007d68:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	2200      	movs	r2, #0
 8007d74:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d80:	2b40      	cmp	r3, #64	; 0x40
 8007d82:	d007      	beq.n	8007d94 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	681a      	ldr	r2, [r3, #0]
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d92:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	68db      	ldr	r3, [r3, #12]
 8007d98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d9c:	d178      	bne.n	8007e90 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d002      	beq.n	8007dac <HAL_SPI_TransmitReceive+0x10a>
 8007da6:	8b7b      	ldrh	r3, [r7, #26]
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	d166      	bne.n	8007e7a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007db0:	881a      	ldrh	r2, [r3, #0]
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dbc:	1c9a      	adds	r2, r3, #2
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	3b01      	subs	r3, #1
 8007dca:	b29a      	uxth	r2, r3
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007dd0:	e053      	b.n	8007e7a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	f003 0302 	and.w	r3, r3, #2
 8007ddc:	2b02      	cmp	r3, #2
 8007dde:	d11b      	bne.n	8007e18 <HAL_SPI_TransmitReceive+0x176>
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d016      	beq.n	8007e18 <HAL_SPI_TransmitReceive+0x176>
 8007dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d113      	bne.n	8007e18 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007df4:	881a      	ldrh	r2, [r3, #0]
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e00:	1c9a      	adds	r2, r3, #2
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	3b01      	subs	r3, #1
 8007e0e:	b29a      	uxth	r2, r3
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007e14:	2300      	movs	r3, #0
 8007e16:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	f003 0301 	and.w	r3, r3, #1
 8007e22:	2b01      	cmp	r3, #1
 8007e24:	d119      	bne.n	8007e5a <HAL_SPI_TransmitReceive+0x1b8>
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d014      	beq.n	8007e5a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	68da      	ldr	r2, [r3, #12]
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e3a:	b292      	uxth	r2, r2
 8007e3c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e42:	1c9a      	adds	r2, r3, #2
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	3b01      	subs	r3, #1
 8007e50:	b29a      	uxth	r2, r3
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007e56:	2301      	movs	r3, #1
 8007e58:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007e5a:	f7fb ff85 	bl	8003d68 <HAL_GetTick>
 8007e5e:	4602      	mov	r2, r0
 8007e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e62:	1ad3      	subs	r3, r2, r3
 8007e64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d807      	bhi.n	8007e7a <HAL_SPI_TransmitReceive+0x1d8>
 8007e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e70:	d003      	beq.n	8007e7a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007e72:	2303      	movs	r3, #3
 8007e74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007e78:	e0a7      	b.n	8007fca <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d1a6      	bne.n	8007dd2 <HAL_SPI_TransmitReceive+0x130>
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d1a1      	bne.n	8007dd2 <HAL_SPI_TransmitReceive+0x130>
 8007e8e:	e07c      	b.n	8007f8a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d002      	beq.n	8007e9e <HAL_SPI_TransmitReceive+0x1fc>
 8007e98:	8b7b      	ldrh	r3, [r7, #26]
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d16b      	bne.n	8007f76 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	330c      	adds	r3, #12
 8007ea8:	7812      	ldrb	r2, [r2, #0]
 8007eaa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eb0:	1c5a      	adds	r2, r3, #1
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	3b01      	subs	r3, #1
 8007ebe:	b29a      	uxth	r2, r3
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ec4:	e057      	b.n	8007f76 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	689b      	ldr	r3, [r3, #8]
 8007ecc:	f003 0302 	and.w	r3, r3, #2
 8007ed0:	2b02      	cmp	r3, #2
 8007ed2:	d11c      	bne.n	8007f0e <HAL_SPI_TransmitReceive+0x26c>
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d017      	beq.n	8007f0e <HAL_SPI_TransmitReceive+0x26c>
 8007ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d114      	bne.n	8007f0e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	330c      	adds	r3, #12
 8007eee:	7812      	ldrb	r2, [r2, #0]
 8007ef0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ef6:	1c5a      	adds	r2, r3, #1
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	3b01      	subs	r3, #1
 8007f04:	b29a      	uxth	r2, r3
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	689b      	ldr	r3, [r3, #8]
 8007f14:	f003 0301 	and.w	r3, r3, #1
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d119      	bne.n	8007f50 <HAL_SPI_TransmitReceive+0x2ae>
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f20:	b29b      	uxth	r3, r3
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d014      	beq.n	8007f50 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	68da      	ldr	r2, [r3, #12]
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f30:	b2d2      	uxtb	r2, r2
 8007f32:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f38:	1c5a      	adds	r2, r3, #1
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	3b01      	subs	r3, #1
 8007f46:	b29a      	uxth	r2, r3
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007f50:	f7fb ff0a 	bl	8003d68 <HAL_GetTick>
 8007f54:	4602      	mov	r2, r0
 8007f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f58:	1ad3      	subs	r3, r2, r3
 8007f5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d803      	bhi.n	8007f68 <HAL_SPI_TransmitReceive+0x2c6>
 8007f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f66:	d102      	bne.n	8007f6e <HAL_SPI_TransmitReceive+0x2cc>
 8007f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d103      	bne.n	8007f76 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007f6e:	2303      	movs	r3, #3
 8007f70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007f74:	e029      	b.n	8007fca <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d1a2      	bne.n	8007ec6 <HAL_SPI_TransmitReceive+0x224>
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f84:	b29b      	uxth	r3, r3
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d19d      	bne.n	8007ec6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f8c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007f8e:	68f8      	ldr	r0, [r7, #12]
 8007f90:	f000 f926 	bl	80081e0 <SPI_EndRxTxTransaction>
 8007f94:	4603      	mov	r3, r0
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d006      	beq.n	8007fa8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2220      	movs	r2, #32
 8007fa4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007fa6:	e010      	b.n	8007fca <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	689b      	ldr	r3, [r3, #8]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d10b      	bne.n	8007fc8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	617b      	str	r3, [r7, #20]
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	68db      	ldr	r3, [r3, #12]
 8007fba:	617b      	str	r3, [r7, #20]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	689b      	ldr	r3, [r3, #8]
 8007fc2:	617b      	str	r3, [r7, #20]
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	e000      	b.n	8007fca <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007fc8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2201      	movs	r2, #1
 8007fce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007fda:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3730      	adds	r7, #48	; 0x30
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}

08007fe6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007fe6:	b480      	push	{r7}
 8007fe8:	b083      	sub	sp, #12
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007ff4:	b2db      	uxtb	r3, r3
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	370c      	adds	r7, #12
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr
	...

08008004 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b088      	sub	sp, #32
 8008008:	af00      	add	r7, sp, #0
 800800a:	60f8      	str	r0, [r7, #12]
 800800c:	60b9      	str	r1, [r7, #8]
 800800e:	603b      	str	r3, [r7, #0]
 8008010:	4613      	mov	r3, r2
 8008012:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008014:	f7fb fea8 	bl	8003d68 <HAL_GetTick>
 8008018:	4602      	mov	r2, r0
 800801a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800801c:	1a9b      	subs	r3, r3, r2
 800801e:	683a      	ldr	r2, [r7, #0]
 8008020:	4413      	add	r3, r2
 8008022:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008024:	f7fb fea0 	bl	8003d68 <HAL_GetTick>
 8008028:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800802a:	4b39      	ldr	r3, [pc, #228]	; (8008110 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	015b      	lsls	r3, r3, #5
 8008030:	0d1b      	lsrs	r3, r3, #20
 8008032:	69fa      	ldr	r2, [r7, #28]
 8008034:	fb02 f303 	mul.w	r3, r2, r3
 8008038:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800803a:	e054      	b.n	80080e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008042:	d050      	beq.n	80080e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008044:	f7fb fe90 	bl	8003d68 <HAL_GetTick>
 8008048:	4602      	mov	r2, r0
 800804a:	69bb      	ldr	r3, [r7, #24]
 800804c:	1ad3      	subs	r3, r2, r3
 800804e:	69fa      	ldr	r2, [r7, #28]
 8008050:	429a      	cmp	r2, r3
 8008052:	d902      	bls.n	800805a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008054:	69fb      	ldr	r3, [r7, #28]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d13d      	bne.n	80080d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	685a      	ldr	r2, [r3, #4]
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008068:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008072:	d111      	bne.n	8008098 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	689b      	ldr	r3, [r3, #8]
 8008078:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800807c:	d004      	beq.n	8008088 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	689b      	ldr	r3, [r3, #8]
 8008082:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008086:	d107      	bne.n	8008098 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	681a      	ldr	r2, [r3, #0]
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008096:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800809c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080a0:	d10f      	bne.n	80080c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	681a      	ldr	r2, [r3, #0]
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80080b0:	601a      	str	r2, [r3, #0]
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	681a      	ldr	r2, [r3, #0]
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80080c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	2201      	movs	r2, #1
 80080c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2200      	movs	r2, #0
 80080ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80080d2:	2303      	movs	r3, #3
 80080d4:	e017      	b.n	8008106 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d101      	bne.n	80080e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80080dc:	2300      	movs	r3, #0
 80080de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	3b01      	subs	r3, #1
 80080e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	689a      	ldr	r2, [r3, #8]
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	4013      	ands	r3, r2
 80080f0:	68ba      	ldr	r2, [r7, #8]
 80080f2:	429a      	cmp	r2, r3
 80080f4:	bf0c      	ite	eq
 80080f6:	2301      	moveq	r3, #1
 80080f8:	2300      	movne	r3, #0
 80080fa:	b2db      	uxtb	r3, r3
 80080fc:	461a      	mov	r2, r3
 80080fe:	79fb      	ldrb	r3, [r7, #7]
 8008100:	429a      	cmp	r2, r3
 8008102:	d19b      	bne.n	800803c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008104:	2300      	movs	r3, #0
}
 8008106:	4618      	mov	r0, r3
 8008108:	3720      	adds	r7, #32
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
 800810e:	bf00      	nop
 8008110:	20000000 	.word	0x20000000

08008114 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b086      	sub	sp, #24
 8008118:	af02      	add	r7, sp, #8
 800811a:	60f8      	str	r0, [r7, #12]
 800811c:	60b9      	str	r1, [r7, #8]
 800811e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008128:	d111      	bne.n	800814e <SPI_EndRxTransaction+0x3a>
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008132:	d004      	beq.n	800813e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	689b      	ldr	r3, [r3, #8]
 8008138:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800813c:	d107      	bne.n	800814e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	681a      	ldr	r2, [r3, #0]
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800814c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008156:	d12a      	bne.n	80081ae <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	689b      	ldr	r3, [r3, #8]
 800815c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008160:	d012      	beq.n	8008188 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	9300      	str	r3, [sp, #0]
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	2200      	movs	r2, #0
 800816a:	2180      	movs	r1, #128	; 0x80
 800816c:	68f8      	ldr	r0, [r7, #12]
 800816e:	f7ff ff49 	bl	8008004 <SPI_WaitFlagStateUntilTimeout>
 8008172:	4603      	mov	r3, r0
 8008174:	2b00      	cmp	r3, #0
 8008176:	d02d      	beq.n	80081d4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800817c:	f043 0220 	orr.w	r2, r3, #32
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008184:	2303      	movs	r3, #3
 8008186:	e026      	b.n	80081d6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	9300      	str	r3, [sp, #0]
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	2200      	movs	r2, #0
 8008190:	2101      	movs	r1, #1
 8008192:	68f8      	ldr	r0, [r7, #12]
 8008194:	f7ff ff36 	bl	8008004 <SPI_WaitFlagStateUntilTimeout>
 8008198:	4603      	mov	r3, r0
 800819a:	2b00      	cmp	r3, #0
 800819c:	d01a      	beq.n	80081d4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081a2:	f043 0220 	orr.w	r2, r3, #32
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80081aa:	2303      	movs	r3, #3
 80081ac:	e013      	b.n	80081d6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	9300      	str	r3, [sp, #0]
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	2200      	movs	r2, #0
 80081b6:	2101      	movs	r1, #1
 80081b8:	68f8      	ldr	r0, [r7, #12]
 80081ba:	f7ff ff23 	bl	8008004 <SPI_WaitFlagStateUntilTimeout>
 80081be:	4603      	mov	r3, r0
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d007      	beq.n	80081d4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081c8:	f043 0220 	orr.w	r2, r3, #32
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80081d0:	2303      	movs	r3, #3
 80081d2:	e000      	b.n	80081d6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80081d4:	2300      	movs	r3, #0
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3710      	adds	r7, #16
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}
	...

080081e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b088      	sub	sp, #32
 80081e4:	af02      	add	r7, sp, #8
 80081e6:	60f8      	str	r0, [r7, #12]
 80081e8:	60b9      	str	r1, [r7, #8]
 80081ea:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80081ec:	4b1b      	ldr	r3, [pc, #108]	; (800825c <SPI_EndRxTxTransaction+0x7c>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a1b      	ldr	r2, [pc, #108]	; (8008260 <SPI_EndRxTxTransaction+0x80>)
 80081f2:	fba2 2303 	umull	r2, r3, r2, r3
 80081f6:	0d5b      	lsrs	r3, r3, #21
 80081f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80081fc:	fb02 f303 	mul.w	r3, r2, r3
 8008200:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	685b      	ldr	r3, [r3, #4]
 8008206:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800820a:	d112      	bne.n	8008232 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	9300      	str	r3, [sp, #0]
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	2200      	movs	r2, #0
 8008214:	2180      	movs	r1, #128	; 0x80
 8008216:	68f8      	ldr	r0, [r7, #12]
 8008218:	f7ff fef4 	bl	8008004 <SPI_WaitFlagStateUntilTimeout>
 800821c:	4603      	mov	r3, r0
 800821e:	2b00      	cmp	r3, #0
 8008220:	d016      	beq.n	8008250 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008226:	f043 0220 	orr.w	r2, r3, #32
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800822e:	2303      	movs	r3, #3
 8008230:	e00f      	b.n	8008252 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d00a      	beq.n	800824e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	3b01      	subs	r3, #1
 800823c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008248:	2b80      	cmp	r3, #128	; 0x80
 800824a:	d0f2      	beq.n	8008232 <SPI_EndRxTxTransaction+0x52>
 800824c:	e000      	b.n	8008250 <SPI_EndRxTxTransaction+0x70>
        break;
 800824e:	bf00      	nop
  }

  return HAL_OK;
 8008250:	2300      	movs	r3, #0
}
 8008252:	4618      	mov	r0, r3
 8008254:	3718      	adds	r7, #24
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
 800825a:	bf00      	nop
 800825c:	20000000 	.word	0x20000000
 8008260:	165e9f81 	.word	0x165e9f81

08008264 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b082      	sub	sp, #8
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d101      	bne.n	8008276 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008272:	2301      	movs	r3, #1
 8008274:	e041      	b.n	80082fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800827c:	b2db      	uxtb	r3, r3
 800827e:	2b00      	cmp	r3, #0
 8008280:	d106      	bne.n	8008290 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2200      	movs	r2, #0
 8008286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 f839 	bl	8008302 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2202      	movs	r2, #2
 8008294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681a      	ldr	r2, [r3, #0]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	3304      	adds	r3, #4
 80082a0:	4619      	mov	r1, r3
 80082a2:	4610      	mov	r0, r2
 80082a4:	f000 f9d8 	bl	8008658 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2201      	movs	r2, #1
 80082ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2201      	movs	r2, #1
 80082b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2201      	movs	r2, #1
 80082bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2201      	movs	r2, #1
 80082c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2201      	movs	r2, #1
 80082cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2201      	movs	r2, #1
 80082d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2201      	movs	r2, #1
 80082dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2201      	movs	r2, #1
 80082e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2201      	movs	r2, #1
 80082ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2201      	movs	r2, #1
 80082f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80082f8:	2300      	movs	r3, #0
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3708      	adds	r7, #8
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}

08008302 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008302:	b480      	push	{r7}
 8008304:	b083      	sub	sp, #12
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800830a:	bf00      	nop
 800830c:	370c      	adds	r7, #12
 800830e:	46bd      	mov	sp, r7
 8008310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008314:	4770      	bx	lr
	...

08008318 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008318:	b480      	push	{r7}
 800831a:	b085      	sub	sp, #20
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008326:	b2db      	uxtb	r3, r3
 8008328:	2b01      	cmp	r3, #1
 800832a:	d001      	beq.n	8008330 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800832c:	2301      	movs	r3, #1
 800832e:	e04e      	b.n	80083ce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2202      	movs	r2, #2
 8008334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	68da      	ldr	r2, [r3, #12]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f042 0201 	orr.w	r2, r2, #1
 8008346:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a23      	ldr	r2, [pc, #140]	; (80083dc <HAL_TIM_Base_Start_IT+0xc4>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d022      	beq.n	8008398 <HAL_TIM_Base_Start_IT+0x80>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800835a:	d01d      	beq.n	8008398 <HAL_TIM_Base_Start_IT+0x80>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a1f      	ldr	r2, [pc, #124]	; (80083e0 <HAL_TIM_Base_Start_IT+0xc8>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d018      	beq.n	8008398 <HAL_TIM_Base_Start_IT+0x80>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a1e      	ldr	r2, [pc, #120]	; (80083e4 <HAL_TIM_Base_Start_IT+0xcc>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d013      	beq.n	8008398 <HAL_TIM_Base_Start_IT+0x80>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a1c      	ldr	r2, [pc, #112]	; (80083e8 <HAL_TIM_Base_Start_IT+0xd0>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d00e      	beq.n	8008398 <HAL_TIM_Base_Start_IT+0x80>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a1b      	ldr	r2, [pc, #108]	; (80083ec <HAL_TIM_Base_Start_IT+0xd4>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d009      	beq.n	8008398 <HAL_TIM_Base_Start_IT+0x80>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a19      	ldr	r2, [pc, #100]	; (80083f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d004      	beq.n	8008398 <HAL_TIM_Base_Start_IT+0x80>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a18      	ldr	r2, [pc, #96]	; (80083f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d111      	bne.n	80083bc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	f003 0307 	and.w	r3, r3, #7
 80083a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2b06      	cmp	r3, #6
 80083a8:	d010      	beq.n	80083cc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	681a      	ldr	r2, [r3, #0]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f042 0201 	orr.w	r2, r2, #1
 80083b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80083ba:	e007      	b.n	80083cc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	681a      	ldr	r2, [r3, #0]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f042 0201 	orr.w	r2, r2, #1
 80083ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80083cc:	2300      	movs	r3, #0
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3714      	adds	r7, #20
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr
 80083da:	bf00      	nop
 80083dc:	40010000 	.word	0x40010000
 80083e0:	40000400 	.word	0x40000400
 80083e4:	40000800 	.word	0x40000800
 80083e8:	40000c00 	.word	0x40000c00
 80083ec:	40010400 	.word	0x40010400
 80083f0:	40014000 	.word	0x40014000
 80083f4:	40001800 	.word	0x40001800

080083f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b082      	sub	sp, #8
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	691b      	ldr	r3, [r3, #16]
 8008406:	f003 0302 	and.w	r3, r3, #2
 800840a:	2b02      	cmp	r3, #2
 800840c:	d122      	bne.n	8008454 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	68db      	ldr	r3, [r3, #12]
 8008414:	f003 0302 	and.w	r3, r3, #2
 8008418:	2b02      	cmp	r3, #2
 800841a:	d11b      	bne.n	8008454 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f06f 0202 	mvn.w	r2, #2
 8008424:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2201      	movs	r2, #1
 800842a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	699b      	ldr	r3, [r3, #24]
 8008432:	f003 0303 	and.w	r3, r3, #3
 8008436:	2b00      	cmp	r3, #0
 8008438:	d003      	beq.n	8008442 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f000 f8ee 	bl	800861c <HAL_TIM_IC_CaptureCallback>
 8008440:	e005      	b.n	800844e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f000 f8e0 	bl	8008608 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 f8f1 	bl	8008630 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2200      	movs	r2, #0
 8008452:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	691b      	ldr	r3, [r3, #16]
 800845a:	f003 0304 	and.w	r3, r3, #4
 800845e:	2b04      	cmp	r3, #4
 8008460:	d122      	bne.n	80084a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	68db      	ldr	r3, [r3, #12]
 8008468:	f003 0304 	and.w	r3, r3, #4
 800846c:	2b04      	cmp	r3, #4
 800846e:	d11b      	bne.n	80084a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f06f 0204 	mvn.w	r2, #4
 8008478:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2202      	movs	r2, #2
 800847e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	699b      	ldr	r3, [r3, #24]
 8008486:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800848a:	2b00      	cmp	r3, #0
 800848c:	d003      	beq.n	8008496 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 f8c4 	bl	800861c <HAL_TIM_IC_CaptureCallback>
 8008494:	e005      	b.n	80084a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 f8b6 	bl	8008608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f000 f8c7 	bl	8008630 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2200      	movs	r2, #0
 80084a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	691b      	ldr	r3, [r3, #16]
 80084ae:	f003 0308 	and.w	r3, r3, #8
 80084b2:	2b08      	cmp	r3, #8
 80084b4:	d122      	bne.n	80084fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	68db      	ldr	r3, [r3, #12]
 80084bc:	f003 0308 	and.w	r3, r3, #8
 80084c0:	2b08      	cmp	r3, #8
 80084c2:	d11b      	bne.n	80084fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f06f 0208 	mvn.w	r2, #8
 80084cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2204      	movs	r2, #4
 80084d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	69db      	ldr	r3, [r3, #28]
 80084da:	f003 0303 	and.w	r3, r3, #3
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d003      	beq.n	80084ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 f89a 	bl	800861c <HAL_TIM_IC_CaptureCallback>
 80084e8:	e005      	b.n	80084f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 f88c 	bl	8008608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 f89d 	bl	8008630 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2200      	movs	r2, #0
 80084fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	691b      	ldr	r3, [r3, #16]
 8008502:	f003 0310 	and.w	r3, r3, #16
 8008506:	2b10      	cmp	r3, #16
 8008508:	d122      	bne.n	8008550 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	68db      	ldr	r3, [r3, #12]
 8008510:	f003 0310 	and.w	r3, r3, #16
 8008514:	2b10      	cmp	r3, #16
 8008516:	d11b      	bne.n	8008550 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f06f 0210 	mvn.w	r2, #16
 8008520:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2208      	movs	r2, #8
 8008526:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	69db      	ldr	r3, [r3, #28]
 800852e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008532:	2b00      	cmp	r3, #0
 8008534:	d003      	beq.n	800853e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 f870 	bl	800861c <HAL_TIM_IC_CaptureCallback>
 800853c:	e005      	b.n	800854a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 f862 	bl	8008608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f000 f873 	bl	8008630 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2200      	movs	r2, #0
 800854e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	691b      	ldr	r3, [r3, #16]
 8008556:	f003 0301 	and.w	r3, r3, #1
 800855a:	2b01      	cmp	r3, #1
 800855c:	d10e      	bne.n	800857c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	68db      	ldr	r3, [r3, #12]
 8008564:	f003 0301 	and.w	r3, r3, #1
 8008568:	2b01      	cmp	r3, #1
 800856a:	d107      	bne.n	800857c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f06f 0201 	mvn.w	r2, #1
 8008574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f7f9 fad0 	bl	8001b1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	691b      	ldr	r3, [r3, #16]
 8008582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008586:	2b80      	cmp	r3, #128	; 0x80
 8008588:	d10e      	bne.n	80085a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	68db      	ldr	r3, [r3, #12]
 8008590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008594:	2b80      	cmp	r3, #128	; 0x80
 8008596:	d107      	bne.n	80085a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80085a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 f902 	bl	80087ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	691b      	ldr	r3, [r3, #16]
 80085ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085b2:	2b40      	cmp	r3, #64	; 0x40
 80085b4:	d10e      	bne.n	80085d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	68db      	ldr	r3, [r3, #12]
 80085bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085c0:	2b40      	cmp	r3, #64	; 0x40
 80085c2:	d107      	bne.n	80085d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80085cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f000 f838 	bl	8008644 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	691b      	ldr	r3, [r3, #16]
 80085da:	f003 0320 	and.w	r3, r3, #32
 80085de:	2b20      	cmp	r3, #32
 80085e0:	d10e      	bne.n	8008600 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	68db      	ldr	r3, [r3, #12]
 80085e8:	f003 0320 	and.w	r3, r3, #32
 80085ec:	2b20      	cmp	r3, #32
 80085ee:	d107      	bne.n	8008600 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f06f 0220 	mvn.w	r2, #32
 80085f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f000 f8cc 	bl	8008798 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008600:	bf00      	nop
 8008602:	3708      	adds	r7, #8
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}

08008608 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008608:	b480      	push	{r7}
 800860a:	b083      	sub	sp, #12
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008610:	bf00      	nop
 8008612:	370c      	adds	r7, #12
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr

0800861c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800861c:	b480      	push	{r7}
 800861e:	b083      	sub	sp, #12
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008624:	bf00      	nop
 8008626:	370c      	adds	r7, #12
 8008628:	46bd      	mov	sp, r7
 800862a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862e:	4770      	bx	lr

08008630 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008630:	b480      	push	{r7}
 8008632:	b083      	sub	sp, #12
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008638:	bf00      	nop
 800863a:	370c      	adds	r7, #12
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr

08008644 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008644:	b480      	push	{r7}
 8008646:	b083      	sub	sp, #12
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800864c:	bf00      	nop
 800864e:	370c      	adds	r7, #12
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr

08008658 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008658:	b480      	push	{r7}
 800865a:	b085      	sub	sp, #20
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	4a40      	ldr	r2, [pc, #256]	; (800876c <TIM_Base_SetConfig+0x114>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d013      	beq.n	8008698 <TIM_Base_SetConfig+0x40>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008676:	d00f      	beq.n	8008698 <TIM_Base_SetConfig+0x40>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	4a3d      	ldr	r2, [pc, #244]	; (8008770 <TIM_Base_SetConfig+0x118>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d00b      	beq.n	8008698 <TIM_Base_SetConfig+0x40>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	4a3c      	ldr	r2, [pc, #240]	; (8008774 <TIM_Base_SetConfig+0x11c>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d007      	beq.n	8008698 <TIM_Base_SetConfig+0x40>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	4a3b      	ldr	r2, [pc, #236]	; (8008778 <TIM_Base_SetConfig+0x120>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d003      	beq.n	8008698 <TIM_Base_SetConfig+0x40>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	4a3a      	ldr	r2, [pc, #232]	; (800877c <TIM_Base_SetConfig+0x124>)
 8008694:	4293      	cmp	r3, r2
 8008696:	d108      	bne.n	80086aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800869e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	68fa      	ldr	r2, [r7, #12]
 80086a6:	4313      	orrs	r3, r2
 80086a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	4a2f      	ldr	r2, [pc, #188]	; (800876c <TIM_Base_SetConfig+0x114>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d02b      	beq.n	800870a <TIM_Base_SetConfig+0xb2>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086b8:	d027      	beq.n	800870a <TIM_Base_SetConfig+0xb2>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	4a2c      	ldr	r2, [pc, #176]	; (8008770 <TIM_Base_SetConfig+0x118>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d023      	beq.n	800870a <TIM_Base_SetConfig+0xb2>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	4a2b      	ldr	r2, [pc, #172]	; (8008774 <TIM_Base_SetConfig+0x11c>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d01f      	beq.n	800870a <TIM_Base_SetConfig+0xb2>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	4a2a      	ldr	r2, [pc, #168]	; (8008778 <TIM_Base_SetConfig+0x120>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d01b      	beq.n	800870a <TIM_Base_SetConfig+0xb2>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	4a29      	ldr	r2, [pc, #164]	; (800877c <TIM_Base_SetConfig+0x124>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d017      	beq.n	800870a <TIM_Base_SetConfig+0xb2>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	4a28      	ldr	r2, [pc, #160]	; (8008780 <TIM_Base_SetConfig+0x128>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d013      	beq.n	800870a <TIM_Base_SetConfig+0xb2>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	4a27      	ldr	r2, [pc, #156]	; (8008784 <TIM_Base_SetConfig+0x12c>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d00f      	beq.n	800870a <TIM_Base_SetConfig+0xb2>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	4a26      	ldr	r2, [pc, #152]	; (8008788 <TIM_Base_SetConfig+0x130>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d00b      	beq.n	800870a <TIM_Base_SetConfig+0xb2>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	4a25      	ldr	r2, [pc, #148]	; (800878c <TIM_Base_SetConfig+0x134>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d007      	beq.n	800870a <TIM_Base_SetConfig+0xb2>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	4a24      	ldr	r2, [pc, #144]	; (8008790 <TIM_Base_SetConfig+0x138>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d003      	beq.n	800870a <TIM_Base_SetConfig+0xb2>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	4a23      	ldr	r2, [pc, #140]	; (8008794 <TIM_Base_SetConfig+0x13c>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d108      	bne.n	800871c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008710:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	68db      	ldr	r3, [r3, #12]
 8008716:	68fa      	ldr	r2, [r7, #12]
 8008718:	4313      	orrs	r3, r2
 800871a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	695b      	ldr	r3, [r3, #20]
 8008726:	4313      	orrs	r3, r2
 8008728:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	68fa      	ldr	r2, [r7, #12]
 800872e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	689a      	ldr	r2, [r3, #8]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	681a      	ldr	r2, [r3, #0]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	4a0a      	ldr	r2, [pc, #40]	; (800876c <TIM_Base_SetConfig+0x114>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d003      	beq.n	8008750 <TIM_Base_SetConfig+0xf8>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	4a0c      	ldr	r2, [pc, #48]	; (800877c <TIM_Base_SetConfig+0x124>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d103      	bne.n	8008758 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	691a      	ldr	r2, [r3, #16]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2201      	movs	r2, #1
 800875c:	615a      	str	r2, [r3, #20]
}
 800875e:	bf00      	nop
 8008760:	3714      	adds	r7, #20
 8008762:	46bd      	mov	sp, r7
 8008764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008768:	4770      	bx	lr
 800876a:	bf00      	nop
 800876c:	40010000 	.word	0x40010000
 8008770:	40000400 	.word	0x40000400
 8008774:	40000800 	.word	0x40000800
 8008778:	40000c00 	.word	0x40000c00
 800877c:	40010400 	.word	0x40010400
 8008780:	40014000 	.word	0x40014000
 8008784:	40014400 	.word	0x40014400
 8008788:	40014800 	.word	0x40014800
 800878c:	40001800 	.word	0x40001800
 8008790:	40001c00 	.word	0x40001c00
 8008794:	40002000 	.word	0x40002000

08008798 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008798:	b480      	push	{r7}
 800879a:	b083      	sub	sp, #12
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80087a0:	bf00      	nop
 80087a2:	370c      	adds	r7, #12
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr

080087ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b083      	sub	sp, #12
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80087b4:	bf00      	nop
 80087b6:	370c      	adds	r7, #12
 80087b8:	46bd      	mov	sp, r7
 80087ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087be:	4770      	bx	lr

080087c0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b083      	sub	sp, #12
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d123      	bne.n	800881a <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80087da:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80087de:	683a      	ldr	r2, [r7, #0]
 80087e0:	6851      	ldr	r1, [r2, #4]
 80087e2:	683a      	ldr	r2, [r7, #0]
 80087e4:	6892      	ldr	r2, [r2, #8]
 80087e6:	4311      	orrs	r1, r2
 80087e8:	683a      	ldr	r2, [r7, #0]
 80087ea:	68d2      	ldr	r2, [r2, #12]
 80087ec:	4311      	orrs	r1, r2
 80087ee:	683a      	ldr	r2, [r7, #0]
 80087f0:	6912      	ldr	r2, [r2, #16]
 80087f2:	4311      	orrs	r1, r2
 80087f4:	683a      	ldr	r2, [r7, #0]
 80087f6:	6952      	ldr	r2, [r2, #20]
 80087f8:	4311      	orrs	r1, r2
 80087fa:	683a      	ldr	r2, [r7, #0]
 80087fc:	6992      	ldr	r2, [r2, #24]
 80087fe:	4311      	orrs	r1, r2
 8008800:	683a      	ldr	r2, [r7, #0]
 8008802:	69d2      	ldr	r2, [r2, #28]
 8008804:	4311      	orrs	r1, r2
 8008806:	683a      	ldr	r2, [r7, #0]
 8008808:	6a12      	ldr	r2, [r2, #32]
 800880a:	4311      	orrs	r1, r2
 800880c:	683a      	ldr	r2, [r7, #0]
 800880e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008810:	430a      	orrs	r2, r1
 8008812:	431a      	orrs	r2, r3
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	601a      	str	r2, [r3, #0]
 8008818:	e028      	b.n	800886c <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	69d9      	ldr	r1, [r3, #28]
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	6a1b      	ldr	r3, [r3, #32]
 800882a:	4319      	orrs	r1, r3
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008830:	430b      	orrs	r3, r1
 8008832:	431a      	orrs	r2, r3
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	685b      	ldr	r3, [r3, #4]
 800883c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008840:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008844:	683a      	ldr	r2, [r7, #0]
 8008846:	6851      	ldr	r1, [r2, #4]
 8008848:	683a      	ldr	r2, [r7, #0]
 800884a:	6892      	ldr	r2, [r2, #8]
 800884c:	4311      	orrs	r1, r2
 800884e:	683a      	ldr	r2, [r7, #0]
 8008850:	68d2      	ldr	r2, [r2, #12]
 8008852:	4311      	orrs	r1, r2
 8008854:	683a      	ldr	r2, [r7, #0]
 8008856:	6912      	ldr	r2, [r2, #16]
 8008858:	4311      	orrs	r1, r2
 800885a:	683a      	ldr	r2, [r7, #0]
 800885c:	6952      	ldr	r2, [r2, #20]
 800885e:	4311      	orrs	r1, r2
 8008860:	683a      	ldr	r2, [r7, #0]
 8008862:	6992      	ldr	r2, [r2, #24]
 8008864:	430a      	orrs	r2, r1
 8008866:	431a      	orrs	r2, r3
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800886c:	2300      	movs	r3, #0
}
 800886e:	4618      	mov	r0, r3
 8008870:	370c      	adds	r7, #12
 8008872:	46bd      	mov	sp, r7
 8008874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008878:	4770      	bx	lr

0800887a <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800887a:	b480      	push	{r7}
 800887c:	b085      	sub	sp, #20
 800887e:	af00      	add	r7, sp, #0
 8008880:	60f8      	str	r0, [r7, #12]
 8008882:	60b9      	str	r1, [r7, #8]
 8008884:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d128      	bne.n	80088de <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	689b      	ldr	r3, [r3, #8]
 8008890:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	1e59      	subs	r1, r3, #1
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	685b      	ldr	r3, [r3, #4]
 800889e:	3b01      	subs	r3, #1
 80088a0:	011b      	lsls	r3, r3, #4
 80088a2:	4319      	orrs	r1, r3
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	689b      	ldr	r3, [r3, #8]
 80088a8:	3b01      	subs	r3, #1
 80088aa:	021b      	lsls	r3, r3, #8
 80088ac:	4319      	orrs	r1, r3
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	68db      	ldr	r3, [r3, #12]
 80088b2:	3b01      	subs	r3, #1
 80088b4:	031b      	lsls	r3, r3, #12
 80088b6:	4319      	orrs	r1, r3
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	691b      	ldr	r3, [r3, #16]
 80088bc:	3b01      	subs	r3, #1
 80088be:	041b      	lsls	r3, r3, #16
 80088c0:	4319      	orrs	r1, r3
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	695b      	ldr	r3, [r3, #20]
 80088c6:	3b01      	subs	r3, #1
 80088c8:	051b      	lsls	r3, r3, #20
 80088ca:	4319      	orrs	r1, r3
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	699b      	ldr	r3, [r3, #24]
 80088d0:	3b01      	subs	r3, #1
 80088d2:	061b      	lsls	r3, r3, #24
 80088d4:	430b      	orrs	r3, r1
 80088d6:	431a      	orrs	r2, r3
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	609a      	str	r2, [r3, #8]
 80088dc:	e02f      	b.n	800893e <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	689b      	ldr	r3, [r3, #8]
 80088e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80088e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80088ea:	68ba      	ldr	r2, [r7, #8]
 80088ec:	68d2      	ldr	r2, [r2, #12]
 80088ee:	3a01      	subs	r2, #1
 80088f0:	0311      	lsls	r1, r2, #12
 80088f2:	68ba      	ldr	r2, [r7, #8]
 80088f4:	6952      	ldr	r2, [r2, #20]
 80088f6:	3a01      	subs	r2, #1
 80088f8:	0512      	lsls	r2, r2, #20
 80088fa:	430a      	orrs	r2, r1
 80088fc:	431a      	orrs	r2, r3
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	68db      	ldr	r3, [r3, #12]
 8008906:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	1e59      	subs	r1, r3, #1
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	3b01      	subs	r3, #1
 8008916:	011b      	lsls	r3, r3, #4
 8008918:	4319      	orrs	r1, r3
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	689b      	ldr	r3, [r3, #8]
 800891e:	3b01      	subs	r3, #1
 8008920:	021b      	lsls	r3, r3, #8
 8008922:	4319      	orrs	r1, r3
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	691b      	ldr	r3, [r3, #16]
 8008928:	3b01      	subs	r3, #1
 800892a:	041b      	lsls	r3, r3, #16
 800892c:	4319      	orrs	r1, r3
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	699b      	ldr	r3, [r3, #24]
 8008932:	3b01      	subs	r3, #1
 8008934:	061b      	lsls	r3, r3, #24
 8008936:	430b      	orrs	r3, r1
 8008938:	431a      	orrs	r2, r3
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800893e:	2300      	movs	r3, #0
}
 8008940:	4618      	mov	r0, r3
 8008942:	3714      	adds	r7, #20
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr

0800894c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b086      	sub	sp, #24
 8008950:	af00      	add	r7, sp, #0
 8008952:	60f8      	str	r0, [r7, #12]
 8008954:	60b9      	str	r1, [r7, #8]
 8008956:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8008958:	2300      	movs	r3, #0
 800895a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	691b      	ldr	r3, [r3, #16]
 8008960:	0d9b      	lsrs	r3, r3, #22
 8008962:	059b      	lsls	r3, r3, #22
 8008964:	68ba      	ldr	r2, [r7, #8]
 8008966:	6811      	ldr	r1, [r2, #0]
 8008968:	68ba      	ldr	r2, [r7, #8]
 800896a:	6852      	ldr	r2, [r2, #4]
 800896c:	4311      	orrs	r1, r2
 800896e:	68ba      	ldr	r2, [r7, #8]
 8008970:	6892      	ldr	r2, [r2, #8]
 8008972:	3a01      	subs	r2, #1
 8008974:	0152      	lsls	r2, r2, #5
 8008976:	4311      	orrs	r1, r2
 8008978:	68ba      	ldr	r2, [r7, #8]
 800897a:	68d2      	ldr	r2, [r2, #12]
 800897c:	0252      	lsls	r2, r2, #9
 800897e:	430a      	orrs	r2, r1
 8008980:	431a      	orrs	r2, r3
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8008986:	f7fb f9ef 	bl	8003d68 <HAL_GetTick>
 800898a:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800898c:	e010      	b.n	80089b0 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008994:	d00c      	beq.n	80089b0 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d007      	beq.n	80089ac <FMC_SDRAM_SendCommand+0x60>
 800899c:	f7fb f9e4 	bl	8003d68 <HAL_GetTick>
 80089a0:	4602      	mov	r2, r0
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	1ad3      	subs	r3, r2, r3
 80089a6:	687a      	ldr	r2, [r7, #4]
 80089a8:	429a      	cmp	r2, r3
 80089aa:	d201      	bcs.n	80089b0 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 80089ac:	2303      	movs	r3, #3
 80089ae:	e006      	b.n	80089be <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	699b      	ldr	r3, [r3, #24]
 80089b4:	f003 0320 	and.w	r3, r3, #32
 80089b8:	2b20      	cmp	r3, #32
 80089ba:	d0e8      	beq.n	800898e <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 80089bc:	2300      	movs	r3, #0
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3718      	adds	r7, #24
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}

080089c6 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80089c6:	b480      	push	{r7}
 80089c8:	b083      	sub	sp, #12
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	6078      	str	r0, [r7, #4]
 80089ce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	695b      	ldr	r3, [r3, #20]
 80089d4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80089d8:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 80089dc:	683a      	ldr	r2, [r7, #0]
 80089de:	0052      	lsls	r2, r2, #1
 80089e0:	431a      	orrs	r2, r3
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80089e6:	2300      	movs	r3, #0
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	370c      	adds	r7, #12
 80089ec:	46bd      	mov	sp, r7
 80089ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f2:	4770      	bx	lr

080089f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80089f4:	b084      	sub	sp, #16
 80089f6:	b580      	push	{r7, lr}
 80089f8:	b084      	sub	sp, #16
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	6078      	str	r0, [r7, #4]
 80089fe:	f107 001c 	add.w	r0, r7, #28
 8008a02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	d122      	bne.n	8008a52 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a10:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	68db      	ldr	r3, [r3, #12]
 8008a1c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008a20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a24:	687a      	ldr	r2, [r7, #4]
 8008a26:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	68db      	ldr	r3, [r3, #12]
 8008a2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008a34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	d105      	bne.n	8008a46 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	68db      	ldr	r3, [r3, #12]
 8008a3e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f001 fbee 	bl	800a228 <USB_CoreReset>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	73fb      	strb	r3, [r7, #15]
 8008a50:	e01a      	b.n	8008a88 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	68db      	ldr	r3, [r3, #12]
 8008a56:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f001 fbe2 	bl	800a228 <USB_CoreReset>
 8008a64:	4603      	mov	r3, r0
 8008a66:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008a68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d106      	bne.n	8008a7c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a72:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	639a      	str	r2, [r3, #56]	; 0x38
 8008a7a:	e005      	b.n	8008a88 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a80:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a8a:	2b01      	cmp	r3, #1
 8008a8c:	d10b      	bne.n	8008aa6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	689b      	ldr	r3, [r3, #8]
 8008a92:	f043 0206 	orr.w	r2, r3, #6
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	689b      	ldr	r3, [r3, #8]
 8008a9e:	f043 0220 	orr.w	r2, r3, #32
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3710      	adds	r7, #16
 8008aac:	46bd      	mov	sp, r7
 8008aae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008ab2:	b004      	add	sp, #16
 8008ab4:	4770      	bx	lr
	...

08008ab8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b087      	sub	sp, #28
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	60f8      	str	r0, [r7, #12]
 8008ac0:	60b9      	str	r1, [r7, #8]
 8008ac2:	4613      	mov	r3, r2
 8008ac4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008ac6:	79fb      	ldrb	r3, [r7, #7]
 8008ac8:	2b02      	cmp	r3, #2
 8008aca:	d165      	bne.n	8008b98 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	4a41      	ldr	r2, [pc, #260]	; (8008bd4 <USB_SetTurnaroundTime+0x11c>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d906      	bls.n	8008ae2 <USB_SetTurnaroundTime+0x2a>
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	4a40      	ldr	r2, [pc, #256]	; (8008bd8 <USB_SetTurnaroundTime+0x120>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d202      	bcs.n	8008ae2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008adc:	230f      	movs	r3, #15
 8008ade:	617b      	str	r3, [r7, #20]
 8008ae0:	e062      	b.n	8008ba8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	4a3c      	ldr	r2, [pc, #240]	; (8008bd8 <USB_SetTurnaroundTime+0x120>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d306      	bcc.n	8008af8 <USB_SetTurnaroundTime+0x40>
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	4a3b      	ldr	r2, [pc, #236]	; (8008bdc <USB_SetTurnaroundTime+0x124>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d202      	bcs.n	8008af8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008af2:	230e      	movs	r3, #14
 8008af4:	617b      	str	r3, [r7, #20]
 8008af6:	e057      	b.n	8008ba8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	4a38      	ldr	r2, [pc, #224]	; (8008bdc <USB_SetTurnaroundTime+0x124>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d306      	bcc.n	8008b0e <USB_SetTurnaroundTime+0x56>
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	4a37      	ldr	r2, [pc, #220]	; (8008be0 <USB_SetTurnaroundTime+0x128>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d202      	bcs.n	8008b0e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008b08:	230d      	movs	r3, #13
 8008b0a:	617b      	str	r3, [r7, #20]
 8008b0c:	e04c      	b.n	8008ba8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	4a33      	ldr	r2, [pc, #204]	; (8008be0 <USB_SetTurnaroundTime+0x128>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d306      	bcc.n	8008b24 <USB_SetTurnaroundTime+0x6c>
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	4a32      	ldr	r2, [pc, #200]	; (8008be4 <USB_SetTurnaroundTime+0x12c>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d802      	bhi.n	8008b24 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008b1e:	230c      	movs	r3, #12
 8008b20:	617b      	str	r3, [r7, #20]
 8008b22:	e041      	b.n	8008ba8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	4a2f      	ldr	r2, [pc, #188]	; (8008be4 <USB_SetTurnaroundTime+0x12c>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d906      	bls.n	8008b3a <USB_SetTurnaroundTime+0x82>
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	4a2e      	ldr	r2, [pc, #184]	; (8008be8 <USB_SetTurnaroundTime+0x130>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d802      	bhi.n	8008b3a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008b34:	230b      	movs	r3, #11
 8008b36:	617b      	str	r3, [r7, #20]
 8008b38:	e036      	b.n	8008ba8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	4a2a      	ldr	r2, [pc, #168]	; (8008be8 <USB_SetTurnaroundTime+0x130>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d906      	bls.n	8008b50 <USB_SetTurnaroundTime+0x98>
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	4a29      	ldr	r2, [pc, #164]	; (8008bec <USB_SetTurnaroundTime+0x134>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d802      	bhi.n	8008b50 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008b4a:	230a      	movs	r3, #10
 8008b4c:	617b      	str	r3, [r7, #20]
 8008b4e:	e02b      	b.n	8008ba8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	4a26      	ldr	r2, [pc, #152]	; (8008bec <USB_SetTurnaroundTime+0x134>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d906      	bls.n	8008b66 <USB_SetTurnaroundTime+0xae>
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	4a25      	ldr	r2, [pc, #148]	; (8008bf0 <USB_SetTurnaroundTime+0x138>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d202      	bcs.n	8008b66 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008b60:	2309      	movs	r3, #9
 8008b62:	617b      	str	r3, [r7, #20]
 8008b64:	e020      	b.n	8008ba8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	4a21      	ldr	r2, [pc, #132]	; (8008bf0 <USB_SetTurnaroundTime+0x138>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d306      	bcc.n	8008b7c <USB_SetTurnaroundTime+0xc4>
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	4a20      	ldr	r2, [pc, #128]	; (8008bf4 <USB_SetTurnaroundTime+0x13c>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d802      	bhi.n	8008b7c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008b76:	2308      	movs	r3, #8
 8008b78:	617b      	str	r3, [r7, #20]
 8008b7a:	e015      	b.n	8008ba8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	4a1d      	ldr	r2, [pc, #116]	; (8008bf4 <USB_SetTurnaroundTime+0x13c>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d906      	bls.n	8008b92 <USB_SetTurnaroundTime+0xda>
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	4a1c      	ldr	r2, [pc, #112]	; (8008bf8 <USB_SetTurnaroundTime+0x140>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d202      	bcs.n	8008b92 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008b8c:	2307      	movs	r3, #7
 8008b8e:	617b      	str	r3, [r7, #20]
 8008b90:	e00a      	b.n	8008ba8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008b92:	2306      	movs	r3, #6
 8008b94:	617b      	str	r3, [r7, #20]
 8008b96:	e007      	b.n	8008ba8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008b98:	79fb      	ldrb	r3, [r7, #7]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d102      	bne.n	8008ba4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008b9e:	2309      	movs	r3, #9
 8008ba0:	617b      	str	r3, [r7, #20]
 8008ba2:	e001      	b.n	8008ba8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008ba4:	2309      	movs	r3, #9
 8008ba6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	68db      	ldr	r3, [r3, #12]
 8008bac:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	68da      	ldr	r2, [r3, #12]
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	029b      	lsls	r3, r3, #10
 8008bbc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008bc0:	431a      	orrs	r2, r3
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008bc6:	2300      	movs	r3, #0
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	371c      	adds	r7, #28
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd2:	4770      	bx	lr
 8008bd4:	00d8acbf 	.word	0x00d8acbf
 8008bd8:	00e4e1c0 	.word	0x00e4e1c0
 8008bdc:	00f42400 	.word	0x00f42400
 8008be0:	01067380 	.word	0x01067380
 8008be4:	011a499f 	.word	0x011a499f
 8008be8:	01312cff 	.word	0x01312cff
 8008bec:	014ca43f 	.word	0x014ca43f
 8008bf0:	016e3600 	.word	0x016e3600
 8008bf4:	01a6ab1f 	.word	0x01a6ab1f
 8008bf8:	01e84800 	.word	0x01e84800

08008bfc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b083      	sub	sp, #12
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	689b      	ldr	r3, [r3, #8]
 8008c08:	f043 0201 	orr.w	r2, r3, #1
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008c10:	2300      	movs	r3, #0
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	370c      	adds	r7, #12
 8008c16:	46bd      	mov	sp, r7
 8008c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1c:	4770      	bx	lr

08008c1e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c1e:	b480      	push	{r7}
 8008c20:	b083      	sub	sp, #12
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	689b      	ldr	r3, [r3, #8]
 8008c2a:	f023 0201 	bic.w	r2, r3, #1
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008c32:	2300      	movs	r3, #0
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	370c      	adds	r7, #12
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr

08008c40 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b084      	sub	sp, #16
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	460b      	mov	r3, r1
 8008c4a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	68db      	ldr	r3, [r3, #12]
 8008c54:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008c5c:	78fb      	ldrb	r3, [r7, #3]
 8008c5e:	2b01      	cmp	r3, #1
 8008c60:	d115      	bne.n	8008c8e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	68db      	ldr	r3, [r3, #12]
 8008c66:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008c6e:	2001      	movs	r0, #1
 8008c70:	f7fb f886 	bl	8003d80 <HAL_Delay>
      ms++;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	3301      	adds	r3, #1
 8008c78:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f001 fa45 	bl	800a10a <USB_GetMode>
 8008c80:	4603      	mov	r3, r0
 8008c82:	2b01      	cmp	r3, #1
 8008c84:	d01e      	beq.n	8008cc4 <USB_SetCurrentMode+0x84>
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	2b31      	cmp	r3, #49	; 0x31
 8008c8a:	d9f0      	bls.n	8008c6e <USB_SetCurrentMode+0x2e>
 8008c8c:	e01a      	b.n	8008cc4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008c8e:	78fb      	ldrb	r3, [r7, #3]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d115      	bne.n	8008cc0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	68db      	ldr	r3, [r3, #12]
 8008c98:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008ca0:	2001      	movs	r0, #1
 8008ca2:	f7fb f86d 	bl	8003d80 <HAL_Delay>
      ms++;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	3301      	adds	r3, #1
 8008caa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f001 fa2c 	bl	800a10a <USB_GetMode>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d005      	beq.n	8008cc4 <USB_SetCurrentMode+0x84>
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2b31      	cmp	r3, #49	; 0x31
 8008cbc:	d9f0      	bls.n	8008ca0 <USB_SetCurrentMode+0x60>
 8008cbe:	e001      	b.n	8008cc4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	e005      	b.n	8008cd0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	2b32      	cmp	r3, #50	; 0x32
 8008cc8:	d101      	bne.n	8008cce <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008cca:	2301      	movs	r3, #1
 8008ccc:	e000      	b.n	8008cd0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008cce:	2300      	movs	r3, #0
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3710      	adds	r7, #16
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008cd8:	b084      	sub	sp, #16
 8008cda:	b580      	push	{r7, lr}
 8008cdc:	b086      	sub	sp, #24
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	6078      	str	r0, [r7, #4]
 8008ce2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008ce6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008cea:	2300      	movs	r3, #0
 8008cec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	613b      	str	r3, [r7, #16]
 8008cf6:	e009      	b.n	8008d0c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008cf8:	687a      	ldr	r2, [r7, #4]
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	3340      	adds	r3, #64	; 0x40
 8008cfe:	009b      	lsls	r3, r3, #2
 8008d00:	4413      	add	r3, r2
 8008d02:	2200      	movs	r2, #0
 8008d04:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	3301      	adds	r3, #1
 8008d0a:	613b      	str	r3, [r7, #16]
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	2b0e      	cmp	r3, #14
 8008d10:	d9f2      	bls.n	8008cf8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008d12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d11c      	bne.n	8008d52 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d1e:	685b      	ldr	r3, [r3, #4]
 8008d20:	68fa      	ldr	r2, [r7, #12]
 8008d22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d26:	f043 0302 	orr.w	r3, r3, #2
 8008d2a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d30:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d3c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d48:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	639a      	str	r2, [r3, #56]	; 0x38
 8008d50:	e00b      	b.n	8008d6a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d56:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d62:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008d70:	461a      	mov	r2, r3
 8008d72:	2300      	movs	r3, #0
 8008d74:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d7c:	4619      	mov	r1, r3
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d84:	461a      	mov	r2, r3
 8008d86:	680b      	ldr	r3, [r1, #0]
 8008d88:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d10c      	bne.n	8008daa <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d104      	bne.n	8008da0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008d96:	2100      	movs	r1, #0
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f000 f965 	bl	8009068 <USB_SetDevSpeed>
 8008d9e:	e008      	b.n	8008db2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008da0:	2101      	movs	r1, #1
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f000 f960 	bl	8009068 <USB_SetDevSpeed>
 8008da8:	e003      	b.n	8008db2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008daa:	2103      	movs	r1, #3
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f000 f95b 	bl	8009068 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008db2:	2110      	movs	r1, #16
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f000 f8f3 	bl	8008fa0 <USB_FlushTxFifo>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d001      	beq.n	8008dc4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f000 f91f 	bl	8009008 <USB_FlushRxFifo>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d001      	beq.n	8008dd4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dda:	461a      	mov	r2, r3
 8008ddc:	2300      	movs	r3, #0
 8008dde:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008de6:	461a      	mov	r2, r3
 8008de8:	2300      	movs	r3, #0
 8008dea:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008df2:	461a      	mov	r2, r3
 8008df4:	2300      	movs	r3, #0
 8008df6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008df8:	2300      	movs	r3, #0
 8008dfa:	613b      	str	r3, [r7, #16]
 8008dfc:	e043      	b.n	8008e86 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	015a      	lsls	r2, r3, #5
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	4413      	add	r3, r2
 8008e06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e14:	d118      	bne.n	8008e48 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d10a      	bne.n	8008e32 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	015a      	lsls	r2, r3, #5
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	4413      	add	r3, r2
 8008e24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e28:	461a      	mov	r2, r3
 8008e2a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008e2e:	6013      	str	r3, [r2, #0]
 8008e30:	e013      	b.n	8008e5a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008e32:	693b      	ldr	r3, [r7, #16]
 8008e34:	015a      	lsls	r2, r3, #5
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	4413      	add	r3, r2
 8008e3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e3e:	461a      	mov	r2, r3
 8008e40:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008e44:	6013      	str	r3, [r2, #0]
 8008e46:	e008      	b.n	8008e5a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	015a      	lsls	r2, r3, #5
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	4413      	add	r3, r2
 8008e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e54:	461a      	mov	r2, r3
 8008e56:	2300      	movs	r3, #0
 8008e58:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	015a      	lsls	r2, r3, #5
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	4413      	add	r3, r2
 8008e62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e66:	461a      	mov	r2, r3
 8008e68:	2300      	movs	r3, #0
 8008e6a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	015a      	lsls	r2, r3, #5
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	4413      	add	r3, r2
 8008e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e78:	461a      	mov	r2, r3
 8008e7a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008e7e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	3301      	adds	r3, #1
 8008e84:	613b      	str	r3, [r7, #16]
 8008e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e88:	693a      	ldr	r2, [r7, #16]
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	d3b7      	bcc.n	8008dfe <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e8e:	2300      	movs	r3, #0
 8008e90:	613b      	str	r3, [r7, #16]
 8008e92:	e043      	b.n	8008f1c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	015a      	lsls	r2, r3, #5
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	4413      	add	r3, r2
 8008e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ea6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008eaa:	d118      	bne.n	8008ede <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d10a      	bne.n	8008ec8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	015a      	lsls	r2, r3, #5
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	4413      	add	r3, r2
 8008eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008ec4:	6013      	str	r3, [r2, #0]
 8008ec6:	e013      	b.n	8008ef0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	015a      	lsls	r2, r3, #5
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	4413      	add	r3, r2
 8008ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ed4:	461a      	mov	r2, r3
 8008ed6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008eda:	6013      	str	r3, [r2, #0]
 8008edc:	e008      	b.n	8008ef0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	015a      	lsls	r2, r3, #5
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	4413      	add	r3, r2
 8008ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008eea:	461a      	mov	r2, r3
 8008eec:	2300      	movs	r3, #0
 8008eee:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008ef0:	693b      	ldr	r3, [r7, #16]
 8008ef2:	015a      	lsls	r2, r3, #5
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	4413      	add	r3, r2
 8008ef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008efc:	461a      	mov	r2, r3
 8008efe:	2300      	movs	r3, #0
 8008f00:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	015a      	lsls	r2, r3, #5
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	4413      	add	r3, r2
 8008f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f0e:	461a      	mov	r2, r3
 8008f10:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008f14:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	3301      	adds	r3, #1
 8008f1a:	613b      	str	r3, [r7, #16]
 8008f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f1e:	693a      	ldr	r2, [r7, #16]
 8008f20:	429a      	cmp	r2, r3
 8008f22:	d3b7      	bcc.n	8008e94 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f2a:	691b      	ldr	r3, [r3, #16]
 8008f2c:	68fa      	ldr	r2, [r7, #12]
 8008f2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f36:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008f44:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d105      	bne.n	8008f58 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	699b      	ldr	r3, [r3, #24]
 8008f50:	f043 0210 	orr.w	r2, r3, #16
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	699a      	ldr	r2, [r3, #24]
 8008f5c:	4b0f      	ldr	r3, [pc, #60]	; (8008f9c <USB_DevInit+0x2c4>)
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	687a      	ldr	r2, [r7, #4]
 8008f62:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008f64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d005      	beq.n	8008f76 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	699b      	ldr	r3, [r3, #24]
 8008f6e:	f043 0208 	orr.w	r2, r3, #8
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008f76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f78:	2b01      	cmp	r3, #1
 8008f7a:	d107      	bne.n	8008f8c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	699b      	ldr	r3, [r3, #24]
 8008f80:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f84:	f043 0304 	orr.w	r3, r3, #4
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008f8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3718      	adds	r7, #24
 8008f92:	46bd      	mov	sp, r7
 8008f94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008f98:	b004      	add	sp, #16
 8008f9a:	4770      	bx	lr
 8008f9c:	803c3800 	.word	0x803c3800

08008fa0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b085      	sub	sp, #20
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008faa:	2300      	movs	r3, #0
 8008fac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	3301      	adds	r3, #1
 8008fb2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	4a13      	ldr	r2, [pc, #76]	; (8009004 <USB_FlushTxFifo+0x64>)
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d901      	bls.n	8008fc0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008fbc:	2303      	movs	r3, #3
 8008fbe:	e01b      	b.n	8008ff8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	691b      	ldr	r3, [r3, #16]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	daf2      	bge.n	8008fae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	019b      	lsls	r3, r3, #6
 8008fd0:	f043 0220 	orr.w	r2, r3, #32
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	3301      	adds	r3, #1
 8008fdc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	4a08      	ldr	r2, [pc, #32]	; (8009004 <USB_FlushTxFifo+0x64>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d901      	bls.n	8008fea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008fe6:	2303      	movs	r3, #3
 8008fe8:	e006      	b.n	8008ff8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	691b      	ldr	r3, [r3, #16]
 8008fee:	f003 0320 	and.w	r3, r3, #32
 8008ff2:	2b20      	cmp	r3, #32
 8008ff4:	d0f0      	beq.n	8008fd8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008ff6:	2300      	movs	r3, #0
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3714      	adds	r7, #20
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr
 8009004:	00030d40 	.word	0x00030d40

08009008 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009008:	b480      	push	{r7}
 800900a:	b085      	sub	sp, #20
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009010:	2300      	movs	r3, #0
 8009012:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	3301      	adds	r3, #1
 8009018:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	4a11      	ldr	r2, [pc, #68]	; (8009064 <USB_FlushRxFifo+0x5c>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d901      	bls.n	8009026 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009022:	2303      	movs	r3, #3
 8009024:	e018      	b.n	8009058 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	691b      	ldr	r3, [r3, #16]
 800902a:	2b00      	cmp	r3, #0
 800902c:	daf2      	bge.n	8009014 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800902e:	2300      	movs	r3, #0
 8009030:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2210      	movs	r2, #16
 8009036:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	3301      	adds	r3, #1
 800903c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	4a08      	ldr	r2, [pc, #32]	; (8009064 <USB_FlushRxFifo+0x5c>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d901      	bls.n	800904a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009046:	2303      	movs	r3, #3
 8009048:	e006      	b.n	8009058 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	691b      	ldr	r3, [r3, #16]
 800904e:	f003 0310 	and.w	r3, r3, #16
 8009052:	2b10      	cmp	r3, #16
 8009054:	d0f0      	beq.n	8009038 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009056:	2300      	movs	r3, #0
}
 8009058:	4618      	mov	r0, r3
 800905a:	3714      	adds	r7, #20
 800905c:	46bd      	mov	sp, r7
 800905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009062:	4770      	bx	lr
 8009064:	00030d40 	.word	0x00030d40

08009068 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009068:	b480      	push	{r7}
 800906a:	b085      	sub	sp, #20
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	460b      	mov	r3, r1
 8009072:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800907e:	681a      	ldr	r2, [r3, #0]
 8009080:	78fb      	ldrb	r3, [r7, #3]
 8009082:	68f9      	ldr	r1, [r7, #12]
 8009084:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009088:	4313      	orrs	r3, r2
 800908a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800908c:	2300      	movs	r3, #0
}
 800908e:	4618      	mov	r0, r3
 8009090:	3714      	adds	r7, #20
 8009092:	46bd      	mov	sp, r7
 8009094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009098:	4770      	bx	lr

0800909a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800909a:	b480      	push	{r7}
 800909c:	b087      	sub	sp, #28
 800909e:	af00      	add	r7, sp, #0
 80090a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090ac:	689b      	ldr	r3, [r3, #8]
 80090ae:	f003 0306 	and.w	r3, r3, #6
 80090b2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d102      	bne.n	80090c0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80090ba:	2300      	movs	r3, #0
 80090bc:	75fb      	strb	r3, [r7, #23]
 80090be:	e00a      	b.n	80090d6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2b02      	cmp	r3, #2
 80090c4:	d002      	beq.n	80090cc <USB_GetDevSpeed+0x32>
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	2b06      	cmp	r3, #6
 80090ca:	d102      	bne.n	80090d2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80090cc:	2302      	movs	r3, #2
 80090ce:	75fb      	strb	r3, [r7, #23]
 80090d0:	e001      	b.n	80090d6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80090d2:	230f      	movs	r3, #15
 80090d4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80090d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80090d8:	4618      	mov	r0, r3
 80090da:	371c      	adds	r7, #28
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr

080090e4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b085      	sub	sp, #20
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	781b      	ldrb	r3, [r3, #0]
 80090f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	785b      	ldrb	r3, [r3, #1]
 80090fc:	2b01      	cmp	r3, #1
 80090fe:	d13a      	bne.n	8009176 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009106:	69da      	ldr	r2, [r3, #28]
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	781b      	ldrb	r3, [r3, #0]
 800910c:	f003 030f 	and.w	r3, r3, #15
 8009110:	2101      	movs	r1, #1
 8009112:	fa01 f303 	lsl.w	r3, r1, r3
 8009116:	b29b      	uxth	r3, r3
 8009118:	68f9      	ldr	r1, [r7, #12]
 800911a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800911e:	4313      	orrs	r3, r2
 8009120:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	015a      	lsls	r2, r3, #5
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	4413      	add	r3, r2
 800912a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009134:	2b00      	cmp	r3, #0
 8009136:	d155      	bne.n	80091e4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	015a      	lsls	r2, r3, #5
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	4413      	add	r3, r2
 8009140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009144:	681a      	ldr	r2, [r3, #0]
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	68db      	ldr	r3, [r3, #12]
 800914a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	791b      	ldrb	r3, [r3, #4]
 8009152:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009154:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	059b      	lsls	r3, r3, #22
 800915a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800915c:	4313      	orrs	r3, r2
 800915e:	68ba      	ldr	r2, [r7, #8]
 8009160:	0151      	lsls	r1, r2, #5
 8009162:	68fa      	ldr	r2, [r7, #12]
 8009164:	440a      	add	r2, r1
 8009166:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800916a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800916e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009172:	6013      	str	r3, [r2, #0]
 8009174:	e036      	b.n	80091e4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800917c:	69da      	ldr	r2, [r3, #28]
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	781b      	ldrb	r3, [r3, #0]
 8009182:	f003 030f 	and.w	r3, r3, #15
 8009186:	2101      	movs	r1, #1
 8009188:	fa01 f303 	lsl.w	r3, r1, r3
 800918c:	041b      	lsls	r3, r3, #16
 800918e:	68f9      	ldr	r1, [r7, #12]
 8009190:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009194:	4313      	orrs	r3, r2
 8009196:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	015a      	lsls	r2, r3, #5
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	4413      	add	r3, r2
 80091a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d11a      	bne.n	80091e4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	015a      	lsls	r2, r3, #5
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	4413      	add	r3, r2
 80091b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091ba:	681a      	ldr	r2, [r3, #0]
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	68db      	ldr	r3, [r3, #12]
 80091c0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	791b      	ldrb	r3, [r3, #4]
 80091c8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80091ca:	430b      	orrs	r3, r1
 80091cc:	4313      	orrs	r3, r2
 80091ce:	68ba      	ldr	r2, [r7, #8]
 80091d0:	0151      	lsls	r1, r2, #5
 80091d2:	68fa      	ldr	r2, [r7, #12]
 80091d4:	440a      	add	r2, r1
 80091d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091e2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80091e4:	2300      	movs	r3, #0
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3714      	adds	r7, #20
 80091ea:	46bd      	mov	sp, r7
 80091ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f0:	4770      	bx	lr
	...

080091f4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b085      	sub	sp, #20
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
 80091fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	781b      	ldrb	r3, [r3, #0]
 8009206:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	785b      	ldrb	r3, [r3, #1]
 800920c:	2b01      	cmp	r3, #1
 800920e:	d161      	bne.n	80092d4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	015a      	lsls	r2, r3, #5
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	4413      	add	r3, r2
 8009218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009222:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009226:	d11f      	bne.n	8009268 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	015a      	lsls	r2, r3, #5
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	4413      	add	r3, r2
 8009230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	68ba      	ldr	r2, [r7, #8]
 8009238:	0151      	lsls	r1, r2, #5
 800923a:	68fa      	ldr	r2, [r7, #12]
 800923c:	440a      	add	r2, r1
 800923e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009242:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009246:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	015a      	lsls	r2, r3, #5
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	4413      	add	r3, r2
 8009250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	68ba      	ldr	r2, [r7, #8]
 8009258:	0151      	lsls	r1, r2, #5
 800925a:	68fa      	ldr	r2, [r7, #12]
 800925c:	440a      	add	r2, r1
 800925e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009262:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009266:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800926e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	781b      	ldrb	r3, [r3, #0]
 8009274:	f003 030f 	and.w	r3, r3, #15
 8009278:	2101      	movs	r1, #1
 800927a:	fa01 f303 	lsl.w	r3, r1, r3
 800927e:	b29b      	uxth	r3, r3
 8009280:	43db      	mvns	r3, r3
 8009282:	68f9      	ldr	r1, [r7, #12]
 8009284:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009288:	4013      	ands	r3, r2
 800928a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009292:	69da      	ldr	r2, [r3, #28]
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	781b      	ldrb	r3, [r3, #0]
 8009298:	f003 030f 	and.w	r3, r3, #15
 800929c:	2101      	movs	r1, #1
 800929e:	fa01 f303 	lsl.w	r3, r1, r3
 80092a2:	b29b      	uxth	r3, r3
 80092a4:	43db      	mvns	r3, r3
 80092a6:	68f9      	ldr	r1, [r7, #12]
 80092a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80092ac:	4013      	ands	r3, r2
 80092ae:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	015a      	lsls	r2, r3, #5
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	4413      	add	r3, r2
 80092b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092bc:	681a      	ldr	r2, [r3, #0]
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	0159      	lsls	r1, r3, #5
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	440b      	add	r3, r1
 80092c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092ca:	4619      	mov	r1, r3
 80092cc:	4b35      	ldr	r3, [pc, #212]	; (80093a4 <USB_DeactivateEndpoint+0x1b0>)
 80092ce:	4013      	ands	r3, r2
 80092d0:	600b      	str	r3, [r1, #0]
 80092d2:	e060      	b.n	8009396 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	015a      	lsls	r2, r3, #5
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	4413      	add	r3, r2
 80092dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80092e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80092ea:	d11f      	bne.n	800932c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	015a      	lsls	r2, r3, #5
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	4413      	add	r3, r2
 80092f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	68ba      	ldr	r2, [r7, #8]
 80092fc:	0151      	lsls	r1, r2, #5
 80092fe:	68fa      	ldr	r2, [r7, #12]
 8009300:	440a      	add	r2, r1
 8009302:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009306:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800930a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	015a      	lsls	r2, r3, #5
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	4413      	add	r3, r2
 8009314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	68ba      	ldr	r2, [r7, #8]
 800931c:	0151      	lsls	r1, r2, #5
 800931e:	68fa      	ldr	r2, [r7, #12]
 8009320:	440a      	add	r2, r1
 8009322:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009326:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800932a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009332:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	781b      	ldrb	r3, [r3, #0]
 8009338:	f003 030f 	and.w	r3, r3, #15
 800933c:	2101      	movs	r1, #1
 800933e:	fa01 f303 	lsl.w	r3, r1, r3
 8009342:	041b      	lsls	r3, r3, #16
 8009344:	43db      	mvns	r3, r3
 8009346:	68f9      	ldr	r1, [r7, #12]
 8009348:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800934c:	4013      	ands	r3, r2
 800934e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009356:	69da      	ldr	r2, [r3, #28]
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	781b      	ldrb	r3, [r3, #0]
 800935c:	f003 030f 	and.w	r3, r3, #15
 8009360:	2101      	movs	r1, #1
 8009362:	fa01 f303 	lsl.w	r3, r1, r3
 8009366:	041b      	lsls	r3, r3, #16
 8009368:	43db      	mvns	r3, r3
 800936a:	68f9      	ldr	r1, [r7, #12]
 800936c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009370:	4013      	ands	r3, r2
 8009372:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	015a      	lsls	r2, r3, #5
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	4413      	add	r3, r2
 800937c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009380:	681a      	ldr	r2, [r3, #0]
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	0159      	lsls	r1, r3, #5
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	440b      	add	r3, r1
 800938a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800938e:	4619      	mov	r1, r3
 8009390:	4b05      	ldr	r3, [pc, #20]	; (80093a8 <USB_DeactivateEndpoint+0x1b4>)
 8009392:	4013      	ands	r3, r2
 8009394:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009396:	2300      	movs	r3, #0
}
 8009398:	4618      	mov	r0, r3
 800939a:	3714      	adds	r7, #20
 800939c:	46bd      	mov	sp, r7
 800939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a2:	4770      	bx	lr
 80093a4:	ec337800 	.word	0xec337800
 80093a8:	eff37800 	.word	0xeff37800

080093ac <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b08a      	sub	sp, #40	; 0x28
 80093b0:	af02      	add	r7, sp, #8
 80093b2:	60f8      	str	r0, [r7, #12]
 80093b4:	60b9      	str	r1, [r7, #8]
 80093b6:	4613      	mov	r3, r2
 80093b8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	781b      	ldrb	r3, [r3, #0]
 80093c2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	785b      	ldrb	r3, [r3, #1]
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	f040 815c 	bne.w	8009686 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	699b      	ldr	r3, [r3, #24]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d132      	bne.n	800943c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80093d6:	69bb      	ldr	r3, [r7, #24]
 80093d8:	015a      	lsls	r2, r3, #5
 80093da:	69fb      	ldr	r3, [r7, #28]
 80093dc:	4413      	add	r3, r2
 80093de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093e2:	691b      	ldr	r3, [r3, #16]
 80093e4:	69ba      	ldr	r2, [r7, #24]
 80093e6:	0151      	lsls	r1, r2, #5
 80093e8:	69fa      	ldr	r2, [r7, #28]
 80093ea:	440a      	add	r2, r1
 80093ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80093f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80093f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80093fa:	69bb      	ldr	r3, [r7, #24]
 80093fc:	015a      	lsls	r2, r3, #5
 80093fe:	69fb      	ldr	r3, [r7, #28]
 8009400:	4413      	add	r3, r2
 8009402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009406:	691b      	ldr	r3, [r3, #16]
 8009408:	69ba      	ldr	r2, [r7, #24]
 800940a:	0151      	lsls	r1, r2, #5
 800940c:	69fa      	ldr	r2, [r7, #28]
 800940e:	440a      	add	r2, r1
 8009410:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009414:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009418:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800941a:	69bb      	ldr	r3, [r7, #24]
 800941c:	015a      	lsls	r2, r3, #5
 800941e:	69fb      	ldr	r3, [r7, #28]
 8009420:	4413      	add	r3, r2
 8009422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009426:	691b      	ldr	r3, [r3, #16]
 8009428:	69ba      	ldr	r2, [r7, #24]
 800942a:	0151      	lsls	r1, r2, #5
 800942c:	69fa      	ldr	r2, [r7, #28]
 800942e:	440a      	add	r2, r1
 8009430:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009434:	0cdb      	lsrs	r3, r3, #19
 8009436:	04db      	lsls	r3, r3, #19
 8009438:	6113      	str	r3, [r2, #16]
 800943a:	e074      	b.n	8009526 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800943c:	69bb      	ldr	r3, [r7, #24]
 800943e:	015a      	lsls	r2, r3, #5
 8009440:	69fb      	ldr	r3, [r7, #28]
 8009442:	4413      	add	r3, r2
 8009444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009448:	691b      	ldr	r3, [r3, #16]
 800944a:	69ba      	ldr	r2, [r7, #24]
 800944c:	0151      	lsls	r1, r2, #5
 800944e:	69fa      	ldr	r2, [r7, #28]
 8009450:	440a      	add	r2, r1
 8009452:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009456:	0cdb      	lsrs	r3, r3, #19
 8009458:	04db      	lsls	r3, r3, #19
 800945a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800945c:	69bb      	ldr	r3, [r7, #24]
 800945e:	015a      	lsls	r2, r3, #5
 8009460:	69fb      	ldr	r3, [r7, #28]
 8009462:	4413      	add	r3, r2
 8009464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009468:	691b      	ldr	r3, [r3, #16]
 800946a:	69ba      	ldr	r2, [r7, #24]
 800946c:	0151      	lsls	r1, r2, #5
 800946e:	69fa      	ldr	r2, [r7, #28]
 8009470:	440a      	add	r2, r1
 8009472:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009476:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800947a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800947e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009480:	69bb      	ldr	r3, [r7, #24]
 8009482:	015a      	lsls	r2, r3, #5
 8009484:	69fb      	ldr	r3, [r7, #28]
 8009486:	4413      	add	r3, r2
 8009488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800948c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	6999      	ldr	r1, [r3, #24]
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	68db      	ldr	r3, [r3, #12]
 8009496:	440b      	add	r3, r1
 8009498:	1e59      	subs	r1, r3, #1
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	68db      	ldr	r3, [r3, #12]
 800949e:	fbb1 f3f3 	udiv	r3, r1, r3
 80094a2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80094a4:	4b9d      	ldr	r3, [pc, #628]	; (800971c <USB_EPStartXfer+0x370>)
 80094a6:	400b      	ands	r3, r1
 80094a8:	69b9      	ldr	r1, [r7, #24]
 80094aa:	0148      	lsls	r0, r1, #5
 80094ac:	69f9      	ldr	r1, [r7, #28]
 80094ae:	4401      	add	r1, r0
 80094b0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80094b4:	4313      	orrs	r3, r2
 80094b6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80094b8:	69bb      	ldr	r3, [r7, #24]
 80094ba:	015a      	lsls	r2, r3, #5
 80094bc:	69fb      	ldr	r3, [r7, #28]
 80094be:	4413      	add	r3, r2
 80094c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094c4:	691a      	ldr	r2, [r3, #16]
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	699b      	ldr	r3, [r3, #24]
 80094ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80094ce:	69b9      	ldr	r1, [r7, #24]
 80094d0:	0148      	lsls	r0, r1, #5
 80094d2:	69f9      	ldr	r1, [r7, #28]
 80094d4:	4401      	add	r1, r0
 80094d6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80094da:	4313      	orrs	r3, r2
 80094dc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	791b      	ldrb	r3, [r3, #4]
 80094e2:	2b01      	cmp	r3, #1
 80094e4:	d11f      	bne.n	8009526 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80094e6:	69bb      	ldr	r3, [r7, #24]
 80094e8:	015a      	lsls	r2, r3, #5
 80094ea:	69fb      	ldr	r3, [r7, #28]
 80094ec:	4413      	add	r3, r2
 80094ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094f2:	691b      	ldr	r3, [r3, #16]
 80094f4:	69ba      	ldr	r2, [r7, #24]
 80094f6:	0151      	lsls	r1, r2, #5
 80094f8:	69fa      	ldr	r2, [r7, #28]
 80094fa:	440a      	add	r2, r1
 80094fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009500:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009504:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009506:	69bb      	ldr	r3, [r7, #24]
 8009508:	015a      	lsls	r2, r3, #5
 800950a:	69fb      	ldr	r3, [r7, #28]
 800950c:	4413      	add	r3, r2
 800950e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009512:	691b      	ldr	r3, [r3, #16]
 8009514:	69ba      	ldr	r2, [r7, #24]
 8009516:	0151      	lsls	r1, r2, #5
 8009518:	69fa      	ldr	r2, [r7, #28]
 800951a:	440a      	add	r2, r1
 800951c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009520:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009524:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009526:	79fb      	ldrb	r3, [r7, #7]
 8009528:	2b01      	cmp	r3, #1
 800952a:	d14b      	bne.n	80095c4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	695b      	ldr	r3, [r3, #20]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d009      	beq.n	8009548 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009534:	69bb      	ldr	r3, [r7, #24]
 8009536:	015a      	lsls	r2, r3, #5
 8009538:	69fb      	ldr	r3, [r7, #28]
 800953a:	4413      	add	r3, r2
 800953c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009540:	461a      	mov	r2, r3
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	695b      	ldr	r3, [r3, #20]
 8009546:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	791b      	ldrb	r3, [r3, #4]
 800954c:	2b01      	cmp	r3, #1
 800954e:	d128      	bne.n	80095a2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009550:	69fb      	ldr	r3, [r7, #28]
 8009552:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009556:	689b      	ldr	r3, [r3, #8]
 8009558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800955c:	2b00      	cmp	r3, #0
 800955e:	d110      	bne.n	8009582 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009560:	69bb      	ldr	r3, [r7, #24]
 8009562:	015a      	lsls	r2, r3, #5
 8009564:	69fb      	ldr	r3, [r7, #28]
 8009566:	4413      	add	r3, r2
 8009568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	69ba      	ldr	r2, [r7, #24]
 8009570:	0151      	lsls	r1, r2, #5
 8009572:	69fa      	ldr	r2, [r7, #28]
 8009574:	440a      	add	r2, r1
 8009576:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800957a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800957e:	6013      	str	r3, [r2, #0]
 8009580:	e00f      	b.n	80095a2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009582:	69bb      	ldr	r3, [r7, #24]
 8009584:	015a      	lsls	r2, r3, #5
 8009586:	69fb      	ldr	r3, [r7, #28]
 8009588:	4413      	add	r3, r2
 800958a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	69ba      	ldr	r2, [r7, #24]
 8009592:	0151      	lsls	r1, r2, #5
 8009594:	69fa      	ldr	r2, [r7, #28]
 8009596:	440a      	add	r2, r1
 8009598:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800959c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095a0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80095a2:	69bb      	ldr	r3, [r7, #24]
 80095a4:	015a      	lsls	r2, r3, #5
 80095a6:	69fb      	ldr	r3, [r7, #28]
 80095a8:	4413      	add	r3, r2
 80095aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	69ba      	ldr	r2, [r7, #24]
 80095b2:	0151      	lsls	r1, r2, #5
 80095b4:	69fa      	ldr	r2, [r7, #28]
 80095b6:	440a      	add	r2, r1
 80095b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80095c0:	6013      	str	r3, [r2, #0]
 80095c2:	e133      	b.n	800982c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80095c4:	69bb      	ldr	r3, [r7, #24]
 80095c6:	015a      	lsls	r2, r3, #5
 80095c8:	69fb      	ldr	r3, [r7, #28]
 80095ca:	4413      	add	r3, r2
 80095cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	69ba      	ldr	r2, [r7, #24]
 80095d4:	0151      	lsls	r1, r2, #5
 80095d6:	69fa      	ldr	r2, [r7, #28]
 80095d8:	440a      	add	r2, r1
 80095da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80095e2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	791b      	ldrb	r3, [r3, #4]
 80095e8:	2b01      	cmp	r3, #1
 80095ea:	d015      	beq.n	8009618 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	699b      	ldr	r3, [r3, #24]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	f000 811b 	beq.w	800982c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80095f6:	69fb      	ldr	r3, [r7, #28]
 80095f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	781b      	ldrb	r3, [r3, #0]
 8009602:	f003 030f 	and.w	r3, r3, #15
 8009606:	2101      	movs	r1, #1
 8009608:	fa01 f303 	lsl.w	r3, r1, r3
 800960c:	69f9      	ldr	r1, [r7, #28]
 800960e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009612:	4313      	orrs	r3, r2
 8009614:	634b      	str	r3, [r1, #52]	; 0x34
 8009616:	e109      	b.n	800982c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009618:	69fb      	ldr	r3, [r7, #28]
 800961a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800961e:	689b      	ldr	r3, [r3, #8]
 8009620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009624:	2b00      	cmp	r3, #0
 8009626:	d110      	bne.n	800964a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009628:	69bb      	ldr	r3, [r7, #24]
 800962a:	015a      	lsls	r2, r3, #5
 800962c:	69fb      	ldr	r3, [r7, #28]
 800962e:	4413      	add	r3, r2
 8009630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	69ba      	ldr	r2, [r7, #24]
 8009638:	0151      	lsls	r1, r2, #5
 800963a:	69fa      	ldr	r2, [r7, #28]
 800963c:	440a      	add	r2, r1
 800963e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009642:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009646:	6013      	str	r3, [r2, #0]
 8009648:	e00f      	b.n	800966a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800964a:	69bb      	ldr	r3, [r7, #24]
 800964c:	015a      	lsls	r2, r3, #5
 800964e:	69fb      	ldr	r3, [r7, #28]
 8009650:	4413      	add	r3, r2
 8009652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	69ba      	ldr	r2, [r7, #24]
 800965a:	0151      	lsls	r1, r2, #5
 800965c:	69fa      	ldr	r2, [r7, #28]
 800965e:	440a      	add	r2, r1
 8009660:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009668:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	6919      	ldr	r1, [r3, #16]
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	781a      	ldrb	r2, [r3, #0]
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	699b      	ldr	r3, [r3, #24]
 8009676:	b298      	uxth	r0, r3
 8009678:	79fb      	ldrb	r3, [r7, #7]
 800967a:	9300      	str	r3, [sp, #0]
 800967c:	4603      	mov	r3, r0
 800967e:	68f8      	ldr	r0, [r7, #12]
 8009680:	f000 fade 	bl	8009c40 <USB_WritePacket>
 8009684:	e0d2      	b.n	800982c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009686:	69bb      	ldr	r3, [r7, #24]
 8009688:	015a      	lsls	r2, r3, #5
 800968a:	69fb      	ldr	r3, [r7, #28]
 800968c:	4413      	add	r3, r2
 800968e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009692:	691b      	ldr	r3, [r3, #16]
 8009694:	69ba      	ldr	r2, [r7, #24]
 8009696:	0151      	lsls	r1, r2, #5
 8009698:	69fa      	ldr	r2, [r7, #28]
 800969a:	440a      	add	r2, r1
 800969c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096a0:	0cdb      	lsrs	r3, r3, #19
 80096a2:	04db      	lsls	r3, r3, #19
 80096a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80096a6:	69bb      	ldr	r3, [r7, #24]
 80096a8:	015a      	lsls	r2, r3, #5
 80096aa:	69fb      	ldr	r3, [r7, #28]
 80096ac:	4413      	add	r3, r2
 80096ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096b2:	691b      	ldr	r3, [r3, #16]
 80096b4:	69ba      	ldr	r2, [r7, #24]
 80096b6:	0151      	lsls	r1, r2, #5
 80096b8:	69fa      	ldr	r2, [r7, #28]
 80096ba:	440a      	add	r2, r1
 80096bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80096c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80096c8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	699b      	ldr	r3, [r3, #24]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d126      	bne.n	8009720 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80096d2:	69bb      	ldr	r3, [r7, #24]
 80096d4:	015a      	lsls	r2, r3, #5
 80096d6:	69fb      	ldr	r3, [r7, #28]
 80096d8:	4413      	add	r3, r2
 80096da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096de:	691a      	ldr	r2, [r3, #16]
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	68db      	ldr	r3, [r3, #12]
 80096e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80096e8:	69b9      	ldr	r1, [r7, #24]
 80096ea:	0148      	lsls	r0, r1, #5
 80096ec:	69f9      	ldr	r1, [r7, #28]
 80096ee:	4401      	add	r1, r0
 80096f0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80096f4:	4313      	orrs	r3, r2
 80096f6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80096f8:	69bb      	ldr	r3, [r7, #24]
 80096fa:	015a      	lsls	r2, r3, #5
 80096fc:	69fb      	ldr	r3, [r7, #28]
 80096fe:	4413      	add	r3, r2
 8009700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009704:	691b      	ldr	r3, [r3, #16]
 8009706:	69ba      	ldr	r2, [r7, #24]
 8009708:	0151      	lsls	r1, r2, #5
 800970a:	69fa      	ldr	r2, [r7, #28]
 800970c:	440a      	add	r2, r1
 800970e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009712:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009716:	6113      	str	r3, [r2, #16]
 8009718:	e03a      	b.n	8009790 <USB_EPStartXfer+0x3e4>
 800971a:	bf00      	nop
 800971c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	699a      	ldr	r2, [r3, #24]
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	68db      	ldr	r3, [r3, #12]
 8009728:	4413      	add	r3, r2
 800972a:	1e5a      	subs	r2, r3, #1
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	68db      	ldr	r3, [r3, #12]
 8009730:	fbb2 f3f3 	udiv	r3, r2, r3
 8009734:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	68db      	ldr	r3, [r3, #12]
 800973a:	8afa      	ldrh	r2, [r7, #22]
 800973c:	fb03 f202 	mul.w	r2, r3, r2
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009744:	69bb      	ldr	r3, [r7, #24]
 8009746:	015a      	lsls	r2, r3, #5
 8009748:	69fb      	ldr	r3, [r7, #28]
 800974a:	4413      	add	r3, r2
 800974c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009750:	691a      	ldr	r2, [r3, #16]
 8009752:	8afb      	ldrh	r3, [r7, #22]
 8009754:	04d9      	lsls	r1, r3, #19
 8009756:	4b38      	ldr	r3, [pc, #224]	; (8009838 <USB_EPStartXfer+0x48c>)
 8009758:	400b      	ands	r3, r1
 800975a:	69b9      	ldr	r1, [r7, #24]
 800975c:	0148      	lsls	r0, r1, #5
 800975e:	69f9      	ldr	r1, [r7, #28]
 8009760:	4401      	add	r1, r0
 8009762:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009766:	4313      	orrs	r3, r2
 8009768:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800976a:	69bb      	ldr	r3, [r7, #24]
 800976c:	015a      	lsls	r2, r3, #5
 800976e:	69fb      	ldr	r3, [r7, #28]
 8009770:	4413      	add	r3, r2
 8009772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009776:	691a      	ldr	r2, [r3, #16]
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	69db      	ldr	r3, [r3, #28]
 800977c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009780:	69b9      	ldr	r1, [r7, #24]
 8009782:	0148      	lsls	r0, r1, #5
 8009784:	69f9      	ldr	r1, [r7, #28]
 8009786:	4401      	add	r1, r0
 8009788:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800978c:	4313      	orrs	r3, r2
 800978e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009790:	79fb      	ldrb	r3, [r7, #7]
 8009792:	2b01      	cmp	r3, #1
 8009794:	d10d      	bne.n	80097b2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	691b      	ldr	r3, [r3, #16]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d009      	beq.n	80097b2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	6919      	ldr	r1, [r3, #16]
 80097a2:	69bb      	ldr	r3, [r7, #24]
 80097a4:	015a      	lsls	r2, r3, #5
 80097a6:	69fb      	ldr	r3, [r7, #28]
 80097a8:	4413      	add	r3, r2
 80097aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097ae:	460a      	mov	r2, r1
 80097b0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	791b      	ldrb	r3, [r3, #4]
 80097b6:	2b01      	cmp	r3, #1
 80097b8:	d128      	bne.n	800980c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80097ba:	69fb      	ldr	r3, [r7, #28]
 80097bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097c0:	689b      	ldr	r3, [r3, #8]
 80097c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d110      	bne.n	80097ec <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80097ca:	69bb      	ldr	r3, [r7, #24]
 80097cc:	015a      	lsls	r2, r3, #5
 80097ce:	69fb      	ldr	r3, [r7, #28]
 80097d0:	4413      	add	r3, r2
 80097d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	69ba      	ldr	r2, [r7, #24]
 80097da:	0151      	lsls	r1, r2, #5
 80097dc:	69fa      	ldr	r2, [r7, #28]
 80097de:	440a      	add	r2, r1
 80097e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80097e8:	6013      	str	r3, [r2, #0]
 80097ea:	e00f      	b.n	800980c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80097ec:	69bb      	ldr	r3, [r7, #24]
 80097ee:	015a      	lsls	r2, r3, #5
 80097f0:	69fb      	ldr	r3, [r7, #28]
 80097f2:	4413      	add	r3, r2
 80097f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	69ba      	ldr	r2, [r7, #24]
 80097fc:	0151      	lsls	r1, r2, #5
 80097fe:	69fa      	ldr	r2, [r7, #28]
 8009800:	440a      	add	r2, r1
 8009802:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009806:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800980a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800980c:	69bb      	ldr	r3, [r7, #24]
 800980e:	015a      	lsls	r2, r3, #5
 8009810:	69fb      	ldr	r3, [r7, #28]
 8009812:	4413      	add	r3, r2
 8009814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	69ba      	ldr	r2, [r7, #24]
 800981c:	0151      	lsls	r1, r2, #5
 800981e:	69fa      	ldr	r2, [r7, #28]
 8009820:	440a      	add	r2, r1
 8009822:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009826:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800982a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800982c:	2300      	movs	r3, #0
}
 800982e:	4618      	mov	r0, r3
 8009830:	3720      	adds	r7, #32
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}
 8009836:	bf00      	nop
 8009838:	1ff80000 	.word	0x1ff80000

0800983c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800983c:	b480      	push	{r7}
 800983e:	b087      	sub	sp, #28
 8009840:	af00      	add	r7, sp, #0
 8009842:	60f8      	str	r0, [r7, #12]
 8009844:	60b9      	str	r1, [r7, #8]
 8009846:	4613      	mov	r3, r2
 8009848:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	781b      	ldrb	r3, [r3, #0]
 8009852:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	785b      	ldrb	r3, [r3, #1]
 8009858:	2b01      	cmp	r3, #1
 800985a:	f040 80ce 	bne.w	80099fa <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	699b      	ldr	r3, [r3, #24]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d132      	bne.n	80098cc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	015a      	lsls	r2, r3, #5
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	4413      	add	r3, r2
 800986e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009872:	691b      	ldr	r3, [r3, #16]
 8009874:	693a      	ldr	r2, [r7, #16]
 8009876:	0151      	lsls	r1, r2, #5
 8009878:	697a      	ldr	r2, [r7, #20]
 800987a:	440a      	add	r2, r1
 800987c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009880:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009884:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009888:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800988a:	693b      	ldr	r3, [r7, #16]
 800988c:	015a      	lsls	r2, r3, #5
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	4413      	add	r3, r2
 8009892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009896:	691b      	ldr	r3, [r3, #16]
 8009898:	693a      	ldr	r2, [r7, #16]
 800989a:	0151      	lsls	r1, r2, #5
 800989c:	697a      	ldr	r2, [r7, #20]
 800989e:	440a      	add	r2, r1
 80098a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80098a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	015a      	lsls	r2, r3, #5
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	4413      	add	r3, r2
 80098b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098b6:	691b      	ldr	r3, [r3, #16]
 80098b8:	693a      	ldr	r2, [r7, #16]
 80098ba:	0151      	lsls	r1, r2, #5
 80098bc:	697a      	ldr	r2, [r7, #20]
 80098be:	440a      	add	r2, r1
 80098c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098c4:	0cdb      	lsrs	r3, r3, #19
 80098c6:	04db      	lsls	r3, r3, #19
 80098c8:	6113      	str	r3, [r2, #16]
 80098ca:	e04e      	b.n	800996a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	015a      	lsls	r2, r3, #5
 80098d0:	697b      	ldr	r3, [r7, #20]
 80098d2:	4413      	add	r3, r2
 80098d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098d8:	691b      	ldr	r3, [r3, #16]
 80098da:	693a      	ldr	r2, [r7, #16]
 80098dc:	0151      	lsls	r1, r2, #5
 80098de:	697a      	ldr	r2, [r7, #20]
 80098e0:	440a      	add	r2, r1
 80098e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098e6:	0cdb      	lsrs	r3, r3, #19
 80098e8:	04db      	lsls	r3, r3, #19
 80098ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80098ec:	693b      	ldr	r3, [r7, #16]
 80098ee:	015a      	lsls	r2, r3, #5
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	4413      	add	r3, r2
 80098f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098f8:	691b      	ldr	r3, [r3, #16]
 80098fa:	693a      	ldr	r2, [r7, #16]
 80098fc:	0151      	lsls	r1, r2, #5
 80098fe:	697a      	ldr	r2, [r7, #20]
 8009900:	440a      	add	r2, r1
 8009902:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009906:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800990a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800990e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	699a      	ldr	r2, [r3, #24]
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	68db      	ldr	r3, [r3, #12]
 8009918:	429a      	cmp	r2, r3
 800991a:	d903      	bls.n	8009924 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	68da      	ldr	r2, [r3, #12]
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009924:	693b      	ldr	r3, [r7, #16]
 8009926:	015a      	lsls	r2, r3, #5
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	4413      	add	r3, r2
 800992c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009930:	691b      	ldr	r3, [r3, #16]
 8009932:	693a      	ldr	r2, [r7, #16]
 8009934:	0151      	lsls	r1, r2, #5
 8009936:	697a      	ldr	r2, [r7, #20]
 8009938:	440a      	add	r2, r1
 800993a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800993e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009942:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	015a      	lsls	r2, r3, #5
 8009948:	697b      	ldr	r3, [r7, #20]
 800994a:	4413      	add	r3, r2
 800994c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009950:	691a      	ldr	r2, [r3, #16]
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	699b      	ldr	r3, [r3, #24]
 8009956:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800995a:	6939      	ldr	r1, [r7, #16]
 800995c:	0148      	lsls	r0, r1, #5
 800995e:	6979      	ldr	r1, [r7, #20]
 8009960:	4401      	add	r1, r0
 8009962:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009966:	4313      	orrs	r3, r2
 8009968:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800996a:	79fb      	ldrb	r3, [r7, #7]
 800996c:	2b01      	cmp	r3, #1
 800996e:	d11e      	bne.n	80099ae <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	695b      	ldr	r3, [r3, #20]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d009      	beq.n	800998c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009978:	693b      	ldr	r3, [r7, #16]
 800997a:	015a      	lsls	r2, r3, #5
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	4413      	add	r3, r2
 8009980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009984:	461a      	mov	r2, r3
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	695b      	ldr	r3, [r3, #20]
 800998a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	015a      	lsls	r2, r3, #5
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	4413      	add	r3, r2
 8009994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	693a      	ldr	r2, [r7, #16]
 800999c:	0151      	lsls	r1, r2, #5
 800999e:	697a      	ldr	r2, [r7, #20]
 80099a0:	440a      	add	r2, r1
 80099a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099a6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80099aa:	6013      	str	r3, [r2, #0]
 80099ac:	e097      	b.n	8009ade <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80099ae:	693b      	ldr	r3, [r7, #16]
 80099b0:	015a      	lsls	r2, r3, #5
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	4413      	add	r3, r2
 80099b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	693a      	ldr	r2, [r7, #16]
 80099be:	0151      	lsls	r1, r2, #5
 80099c0:	697a      	ldr	r2, [r7, #20]
 80099c2:	440a      	add	r2, r1
 80099c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099c8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80099cc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	699b      	ldr	r3, [r3, #24]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	f000 8083 	beq.w	8009ade <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	781b      	ldrb	r3, [r3, #0]
 80099e4:	f003 030f 	and.w	r3, r3, #15
 80099e8:	2101      	movs	r1, #1
 80099ea:	fa01 f303 	lsl.w	r3, r1, r3
 80099ee:	6979      	ldr	r1, [r7, #20]
 80099f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80099f4:	4313      	orrs	r3, r2
 80099f6:	634b      	str	r3, [r1, #52]	; 0x34
 80099f8:	e071      	b.n	8009ade <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	015a      	lsls	r2, r3, #5
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	4413      	add	r3, r2
 8009a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a06:	691b      	ldr	r3, [r3, #16]
 8009a08:	693a      	ldr	r2, [r7, #16]
 8009a0a:	0151      	lsls	r1, r2, #5
 8009a0c:	697a      	ldr	r2, [r7, #20]
 8009a0e:	440a      	add	r2, r1
 8009a10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a14:	0cdb      	lsrs	r3, r3, #19
 8009a16:	04db      	lsls	r3, r3, #19
 8009a18:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	015a      	lsls	r2, r3, #5
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	4413      	add	r3, r2
 8009a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a26:	691b      	ldr	r3, [r3, #16]
 8009a28:	693a      	ldr	r2, [r7, #16]
 8009a2a:	0151      	lsls	r1, r2, #5
 8009a2c:	697a      	ldr	r2, [r7, #20]
 8009a2e:	440a      	add	r2, r1
 8009a30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a34:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009a38:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009a3c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	699b      	ldr	r3, [r3, #24]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d003      	beq.n	8009a4e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	68da      	ldr	r2, [r3, #12]
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	68da      	ldr	r2, [r3, #12]
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009a56:	693b      	ldr	r3, [r7, #16]
 8009a58:	015a      	lsls	r2, r3, #5
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	4413      	add	r3, r2
 8009a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a62:	691b      	ldr	r3, [r3, #16]
 8009a64:	693a      	ldr	r2, [r7, #16]
 8009a66:	0151      	lsls	r1, r2, #5
 8009a68:	697a      	ldr	r2, [r7, #20]
 8009a6a:	440a      	add	r2, r1
 8009a6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009a74:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009a76:	693b      	ldr	r3, [r7, #16]
 8009a78:	015a      	lsls	r2, r3, #5
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	4413      	add	r3, r2
 8009a7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a82:	691a      	ldr	r2, [r3, #16]
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	69db      	ldr	r3, [r3, #28]
 8009a88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a8c:	6939      	ldr	r1, [r7, #16]
 8009a8e:	0148      	lsls	r0, r1, #5
 8009a90:	6979      	ldr	r1, [r7, #20]
 8009a92:	4401      	add	r1, r0
 8009a94:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009a98:	4313      	orrs	r3, r2
 8009a9a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009a9c:	79fb      	ldrb	r3, [r7, #7]
 8009a9e:	2b01      	cmp	r3, #1
 8009aa0:	d10d      	bne.n	8009abe <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	691b      	ldr	r3, [r3, #16]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d009      	beq.n	8009abe <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	6919      	ldr	r1, [r3, #16]
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	015a      	lsls	r2, r3, #5
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	4413      	add	r3, r2
 8009ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009aba:	460a      	mov	r2, r1
 8009abc:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	015a      	lsls	r2, r3, #5
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	4413      	add	r3, r2
 8009ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	693a      	ldr	r2, [r7, #16]
 8009ace:	0151      	lsls	r1, r2, #5
 8009ad0:	697a      	ldr	r2, [r7, #20]
 8009ad2:	440a      	add	r2, r1
 8009ad4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ad8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009adc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009ade:	2300      	movs	r3, #0
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	371c      	adds	r7, #28
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aea:	4770      	bx	lr

08009aec <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b087      	sub	sp, #28
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
 8009af4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009af6:	2300      	movs	r3, #0
 8009af8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009afa:	2300      	movs	r3, #0
 8009afc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	785b      	ldrb	r3, [r3, #1]
 8009b06:	2b01      	cmp	r3, #1
 8009b08:	d14a      	bne.n	8009ba0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	781b      	ldrb	r3, [r3, #0]
 8009b0e:	015a      	lsls	r2, r3, #5
 8009b10:	693b      	ldr	r3, [r7, #16]
 8009b12:	4413      	add	r3, r2
 8009b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b22:	f040 8086 	bne.w	8009c32 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	781b      	ldrb	r3, [r3, #0]
 8009b2a:	015a      	lsls	r2, r3, #5
 8009b2c:	693b      	ldr	r3, [r7, #16]
 8009b2e:	4413      	add	r3, r2
 8009b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	683a      	ldr	r2, [r7, #0]
 8009b38:	7812      	ldrb	r2, [r2, #0]
 8009b3a:	0151      	lsls	r1, r2, #5
 8009b3c:	693a      	ldr	r2, [r7, #16]
 8009b3e:	440a      	add	r2, r1
 8009b40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b44:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009b48:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	781b      	ldrb	r3, [r3, #0]
 8009b4e:	015a      	lsls	r2, r3, #5
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	4413      	add	r3, r2
 8009b54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	683a      	ldr	r2, [r7, #0]
 8009b5c:	7812      	ldrb	r2, [r2, #0]
 8009b5e:	0151      	lsls	r1, r2, #5
 8009b60:	693a      	ldr	r2, [r7, #16]
 8009b62:	440a      	add	r2, r1
 8009b64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009b6c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	3301      	adds	r3, #1
 8009b72:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	f242 7210 	movw	r2, #10000	; 0x2710
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	d902      	bls.n	8009b84 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009b7e:	2301      	movs	r3, #1
 8009b80:	75fb      	strb	r3, [r7, #23]
          break;
 8009b82:	e056      	b.n	8009c32 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	781b      	ldrb	r3, [r3, #0]
 8009b88:	015a      	lsls	r2, r3, #5
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	4413      	add	r3, r2
 8009b8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b9c:	d0e7      	beq.n	8009b6e <USB_EPStopXfer+0x82>
 8009b9e:	e048      	b.n	8009c32 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	781b      	ldrb	r3, [r3, #0]
 8009ba4:	015a      	lsls	r2, r3, #5
 8009ba6:	693b      	ldr	r3, [r7, #16]
 8009ba8:	4413      	add	r3, r2
 8009baa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009bb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009bb8:	d13b      	bne.n	8009c32 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	781b      	ldrb	r3, [r3, #0]
 8009bbe:	015a      	lsls	r2, r3, #5
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	4413      	add	r3, r2
 8009bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	683a      	ldr	r2, [r7, #0]
 8009bcc:	7812      	ldrb	r2, [r2, #0]
 8009bce:	0151      	lsls	r1, r2, #5
 8009bd0:	693a      	ldr	r2, [r7, #16]
 8009bd2:	440a      	add	r2, r1
 8009bd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009bd8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009bdc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	781b      	ldrb	r3, [r3, #0]
 8009be2:	015a      	lsls	r2, r3, #5
 8009be4:	693b      	ldr	r3, [r7, #16]
 8009be6:	4413      	add	r3, r2
 8009be8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	683a      	ldr	r2, [r7, #0]
 8009bf0:	7812      	ldrb	r2, [r2, #0]
 8009bf2:	0151      	lsls	r1, r2, #5
 8009bf4:	693a      	ldr	r2, [r7, #16]
 8009bf6:	440a      	add	r2, r1
 8009bf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009bfc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009c00:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	3301      	adds	r3, #1
 8009c06:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	f242 7210 	movw	r2, #10000	; 0x2710
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d902      	bls.n	8009c18 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009c12:	2301      	movs	r3, #1
 8009c14:	75fb      	strb	r3, [r7, #23]
          break;
 8009c16:	e00c      	b.n	8009c32 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	781b      	ldrb	r3, [r3, #0]
 8009c1c:	015a      	lsls	r2, r3, #5
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	4413      	add	r3, r2
 8009c22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009c2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009c30:	d0e7      	beq.n	8009c02 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009c32:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	371c      	adds	r7, #28
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3e:	4770      	bx	lr

08009c40 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009c40:	b480      	push	{r7}
 8009c42:	b089      	sub	sp, #36	; 0x24
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	60f8      	str	r0, [r7, #12]
 8009c48:	60b9      	str	r1, [r7, #8]
 8009c4a:	4611      	mov	r1, r2
 8009c4c:	461a      	mov	r2, r3
 8009c4e:	460b      	mov	r3, r1
 8009c50:	71fb      	strb	r3, [r7, #7]
 8009c52:	4613      	mov	r3, r2
 8009c54:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009c5e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d123      	bne.n	8009cae <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009c66:	88bb      	ldrh	r3, [r7, #4]
 8009c68:	3303      	adds	r3, #3
 8009c6a:	089b      	lsrs	r3, r3, #2
 8009c6c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009c6e:	2300      	movs	r3, #0
 8009c70:	61bb      	str	r3, [r7, #24]
 8009c72:	e018      	b.n	8009ca6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009c74:	79fb      	ldrb	r3, [r7, #7]
 8009c76:	031a      	lsls	r2, r3, #12
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	4413      	add	r3, r2
 8009c7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c80:	461a      	mov	r2, r3
 8009c82:	69fb      	ldr	r3, [r7, #28]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009c88:	69fb      	ldr	r3, [r7, #28]
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009c8e:	69fb      	ldr	r3, [r7, #28]
 8009c90:	3301      	adds	r3, #1
 8009c92:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009c94:	69fb      	ldr	r3, [r7, #28]
 8009c96:	3301      	adds	r3, #1
 8009c98:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009c9a:	69fb      	ldr	r3, [r7, #28]
 8009c9c:	3301      	adds	r3, #1
 8009c9e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009ca0:	69bb      	ldr	r3, [r7, #24]
 8009ca2:	3301      	adds	r3, #1
 8009ca4:	61bb      	str	r3, [r7, #24]
 8009ca6:	69ba      	ldr	r2, [r7, #24]
 8009ca8:	693b      	ldr	r3, [r7, #16]
 8009caa:	429a      	cmp	r2, r3
 8009cac:	d3e2      	bcc.n	8009c74 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009cae:	2300      	movs	r3, #0
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3724      	adds	r7, #36	; 0x24
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cba:	4770      	bx	lr

08009cbc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	b08b      	sub	sp, #44	; 0x2c
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	60f8      	str	r0, [r7, #12]
 8009cc4:	60b9      	str	r1, [r7, #8]
 8009cc6:	4613      	mov	r3, r2
 8009cc8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009cd2:	88fb      	ldrh	r3, [r7, #6]
 8009cd4:	089b      	lsrs	r3, r3, #2
 8009cd6:	b29b      	uxth	r3, r3
 8009cd8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009cda:	88fb      	ldrh	r3, [r7, #6]
 8009cdc:	f003 0303 	and.w	r3, r3, #3
 8009ce0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	623b      	str	r3, [r7, #32]
 8009ce6:	e014      	b.n	8009d12 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009ce8:	69bb      	ldr	r3, [r7, #24]
 8009cea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009cee:	681a      	ldr	r2, [r3, #0]
 8009cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf2:	601a      	str	r2, [r3, #0]
    pDest++;
 8009cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf6:	3301      	adds	r3, #1
 8009cf8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cfc:	3301      	adds	r3, #1
 8009cfe:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d02:	3301      	adds	r3, #1
 8009d04:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d08:	3301      	adds	r3, #1
 8009d0a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009d0c:	6a3b      	ldr	r3, [r7, #32]
 8009d0e:	3301      	adds	r3, #1
 8009d10:	623b      	str	r3, [r7, #32]
 8009d12:	6a3a      	ldr	r2, [r7, #32]
 8009d14:	697b      	ldr	r3, [r7, #20]
 8009d16:	429a      	cmp	r2, r3
 8009d18:	d3e6      	bcc.n	8009ce8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009d1a:	8bfb      	ldrh	r3, [r7, #30]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d01e      	beq.n	8009d5e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009d20:	2300      	movs	r3, #0
 8009d22:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009d24:	69bb      	ldr	r3, [r7, #24]
 8009d26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d2a:	461a      	mov	r2, r3
 8009d2c:	f107 0310 	add.w	r3, r7, #16
 8009d30:	6812      	ldr	r2, [r2, #0]
 8009d32:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009d34:	693a      	ldr	r2, [r7, #16]
 8009d36:	6a3b      	ldr	r3, [r7, #32]
 8009d38:	b2db      	uxtb	r3, r3
 8009d3a:	00db      	lsls	r3, r3, #3
 8009d3c:	fa22 f303 	lsr.w	r3, r2, r3
 8009d40:	b2da      	uxtb	r2, r3
 8009d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d44:	701a      	strb	r2, [r3, #0]
      i++;
 8009d46:	6a3b      	ldr	r3, [r7, #32]
 8009d48:	3301      	adds	r3, #1
 8009d4a:	623b      	str	r3, [r7, #32]
      pDest++;
 8009d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d4e:	3301      	adds	r3, #1
 8009d50:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009d52:	8bfb      	ldrh	r3, [r7, #30]
 8009d54:	3b01      	subs	r3, #1
 8009d56:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009d58:	8bfb      	ldrh	r3, [r7, #30]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d1ea      	bne.n	8009d34 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	372c      	adds	r7, #44	; 0x2c
 8009d64:	46bd      	mov	sp, r7
 8009d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6a:	4770      	bx	lr

08009d6c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b085      	sub	sp, #20
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
 8009d74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	781b      	ldrb	r3, [r3, #0]
 8009d7e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	785b      	ldrb	r3, [r3, #1]
 8009d84:	2b01      	cmp	r3, #1
 8009d86:	d12c      	bne.n	8009de2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	015a      	lsls	r2, r3, #5
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	4413      	add	r3, r2
 8009d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	db12      	blt.n	8009dc0 <USB_EPSetStall+0x54>
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d00f      	beq.n	8009dc0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	015a      	lsls	r2, r3, #5
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	4413      	add	r3, r2
 8009da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	68ba      	ldr	r2, [r7, #8]
 8009db0:	0151      	lsls	r1, r2, #5
 8009db2:	68fa      	ldr	r2, [r7, #12]
 8009db4:	440a      	add	r2, r1
 8009db6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009dba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009dbe:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	015a      	lsls	r2, r3, #5
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	4413      	add	r3, r2
 8009dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	68ba      	ldr	r2, [r7, #8]
 8009dd0:	0151      	lsls	r1, r2, #5
 8009dd2:	68fa      	ldr	r2, [r7, #12]
 8009dd4:	440a      	add	r2, r1
 8009dd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009dda:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009dde:	6013      	str	r3, [r2, #0]
 8009de0:	e02b      	b.n	8009e3a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	015a      	lsls	r2, r3, #5
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	4413      	add	r3, r2
 8009dea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	db12      	blt.n	8009e1a <USB_EPSetStall+0xae>
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d00f      	beq.n	8009e1a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	015a      	lsls	r2, r3, #5
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	4413      	add	r3, r2
 8009e02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	68ba      	ldr	r2, [r7, #8]
 8009e0a:	0151      	lsls	r1, r2, #5
 8009e0c:	68fa      	ldr	r2, [r7, #12]
 8009e0e:	440a      	add	r2, r1
 8009e10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e14:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009e18:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009e1a:	68bb      	ldr	r3, [r7, #8]
 8009e1c:	015a      	lsls	r2, r3, #5
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	4413      	add	r3, r2
 8009e22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	68ba      	ldr	r2, [r7, #8]
 8009e2a:	0151      	lsls	r1, r2, #5
 8009e2c:	68fa      	ldr	r2, [r7, #12]
 8009e2e:	440a      	add	r2, r1
 8009e30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009e38:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009e3a:	2300      	movs	r3, #0
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	3714      	adds	r7, #20
 8009e40:	46bd      	mov	sp, r7
 8009e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e46:	4770      	bx	lr

08009e48 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009e48:	b480      	push	{r7}
 8009e4a:	b085      	sub	sp, #20
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
 8009e50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	781b      	ldrb	r3, [r3, #0]
 8009e5a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	785b      	ldrb	r3, [r3, #1]
 8009e60:	2b01      	cmp	r3, #1
 8009e62:	d128      	bne.n	8009eb6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	015a      	lsls	r2, r3, #5
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	4413      	add	r3, r2
 8009e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	68ba      	ldr	r2, [r7, #8]
 8009e74:	0151      	lsls	r1, r2, #5
 8009e76:	68fa      	ldr	r2, [r7, #12]
 8009e78:	440a      	add	r2, r1
 8009e7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009e82:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	791b      	ldrb	r3, [r3, #4]
 8009e88:	2b03      	cmp	r3, #3
 8009e8a:	d003      	beq.n	8009e94 <USB_EPClearStall+0x4c>
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	791b      	ldrb	r3, [r3, #4]
 8009e90:	2b02      	cmp	r3, #2
 8009e92:	d138      	bne.n	8009f06 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	015a      	lsls	r2, r3, #5
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	4413      	add	r3, r2
 8009e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	68ba      	ldr	r2, [r7, #8]
 8009ea4:	0151      	lsls	r1, r2, #5
 8009ea6:	68fa      	ldr	r2, [r7, #12]
 8009ea8:	440a      	add	r2, r1
 8009eaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009eae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009eb2:	6013      	str	r3, [r2, #0]
 8009eb4:	e027      	b.n	8009f06 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	015a      	lsls	r2, r3, #5
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	4413      	add	r3, r2
 8009ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	68ba      	ldr	r2, [r7, #8]
 8009ec6:	0151      	lsls	r1, r2, #5
 8009ec8:	68fa      	ldr	r2, [r7, #12]
 8009eca:	440a      	add	r2, r1
 8009ecc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ed0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009ed4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	791b      	ldrb	r3, [r3, #4]
 8009eda:	2b03      	cmp	r3, #3
 8009edc:	d003      	beq.n	8009ee6 <USB_EPClearStall+0x9e>
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	791b      	ldrb	r3, [r3, #4]
 8009ee2:	2b02      	cmp	r3, #2
 8009ee4:	d10f      	bne.n	8009f06 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	015a      	lsls	r2, r3, #5
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	4413      	add	r3, r2
 8009eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	68ba      	ldr	r2, [r7, #8]
 8009ef6:	0151      	lsls	r1, r2, #5
 8009ef8:	68fa      	ldr	r2, [r7, #12]
 8009efa:	440a      	add	r2, r1
 8009efc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f04:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009f06:	2300      	movs	r3, #0
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	3714      	adds	r7, #20
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f12:	4770      	bx	lr

08009f14 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009f14:	b480      	push	{r7}
 8009f16:	b085      	sub	sp, #20
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	460b      	mov	r3, r1
 8009f1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	68fa      	ldr	r2, [r7, #12]
 8009f2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f32:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009f36:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f3e:	681a      	ldr	r2, [r3, #0]
 8009f40:	78fb      	ldrb	r3, [r7, #3]
 8009f42:	011b      	lsls	r3, r3, #4
 8009f44:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009f48:	68f9      	ldr	r1, [r7, #12]
 8009f4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f4e:	4313      	orrs	r3, r2
 8009f50:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009f52:	2300      	movs	r3, #0
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	3714      	adds	r7, #20
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5e:	4770      	bx	lr

08009f60 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009f60:	b480      	push	{r7}
 8009f62:	b085      	sub	sp, #20
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	68fa      	ldr	r2, [r7, #12]
 8009f76:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009f7a:	f023 0303 	bic.w	r3, r3, #3
 8009f7e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f86:	685b      	ldr	r3, [r3, #4]
 8009f88:	68fa      	ldr	r2, [r7, #12]
 8009f8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f8e:	f023 0302 	bic.w	r3, r3, #2
 8009f92:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009f94:	2300      	movs	r3, #0
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	3714      	adds	r7, #20
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa0:	4770      	bx	lr

08009fa2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009fa2:	b480      	push	{r7}
 8009fa4:	b085      	sub	sp, #20
 8009fa6:	af00      	add	r7, sp, #0
 8009fa8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	68fa      	ldr	r2, [r7, #12]
 8009fb8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009fbc:	f023 0303 	bic.w	r3, r3, #3
 8009fc0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fc8:	685b      	ldr	r3, [r3, #4]
 8009fca:	68fa      	ldr	r2, [r7, #12]
 8009fcc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009fd0:	f043 0302 	orr.w	r3, r3, #2
 8009fd4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009fd6:	2300      	movs	r3, #0
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	3714      	adds	r7, #20
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe2:	4770      	bx	lr

08009fe4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	b085      	sub	sp, #20
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	695b      	ldr	r3, [r3, #20]
 8009ff0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	699b      	ldr	r3, [r3, #24]
 8009ff6:	68fa      	ldr	r2, [r7, #12]
 8009ff8:	4013      	ands	r3, r2
 8009ffa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	3714      	adds	r7, #20
 800a002:	46bd      	mov	sp, r7
 800a004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a008:	4770      	bx	lr

0800a00a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a00a:	b480      	push	{r7}
 800a00c:	b085      	sub	sp, #20
 800a00e:	af00      	add	r7, sp, #0
 800a010:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a01c:	699b      	ldr	r3, [r3, #24]
 800a01e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a026:	69db      	ldr	r3, [r3, #28]
 800a028:	68ba      	ldr	r2, [r7, #8]
 800a02a:	4013      	ands	r3, r2
 800a02c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	0c1b      	lsrs	r3, r3, #16
}
 800a032:	4618      	mov	r0, r3
 800a034:	3714      	adds	r7, #20
 800a036:	46bd      	mov	sp, r7
 800a038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03c:	4770      	bx	lr

0800a03e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a03e:	b480      	push	{r7}
 800a040:	b085      	sub	sp, #20
 800a042:	af00      	add	r7, sp, #0
 800a044:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a050:	699b      	ldr	r3, [r3, #24]
 800a052:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a05a:	69db      	ldr	r3, [r3, #28]
 800a05c:	68ba      	ldr	r2, [r7, #8]
 800a05e:	4013      	ands	r3, r2
 800a060:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	b29b      	uxth	r3, r3
}
 800a066:	4618      	mov	r0, r3
 800a068:	3714      	adds	r7, #20
 800a06a:	46bd      	mov	sp, r7
 800a06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a070:	4770      	bx	lr

0800a072 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a072:	b480      	push	{r7}
 800a074:	b085      	sub	sp, #20
 800a076:	af00      	add	r7, sp, #0
 800a078:	6078      	str	r0, [r7, #4]
 800a07a:	460b      	mov	r3, r1
 800a07c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a082:	78fb      	ldrb	r3, [r7, #3]
 800a084:	015a      	lsls	r2, r3, #5
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	4413      	add	r3, r2
 800a08a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a08e:	689b      	ldr	r3, [r3, #8]
 800a090:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a098:	695b      	ldr	r3, [r3, #20]
 800a09a:	68ba      	ldr	r2, [r7, #8]
 800a09c:	4013      	ands	r3, r2
 800a09e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a0a0:	68bb      	ldr	r3, [r7, #8]
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3714      	adds	r7, #20
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ac:	4770      	bx	lr

0800a0ae <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a0ae:	b480      	push	{r7}
 800a0b0:	b087      	sub	sp, #28
 800a0b2:	af00      	add	r7, sp, #0
 800a0b4:	6078      	str	r0, [r7, #4]
 800a0b6:	460b      	mov	r3, r1
 800a0b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a0be:	697b      	ldr	r3, [r7, #20]
 800a0c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0c4:	691b      	ldr	r3, [r3, #16]
 800a0c6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a0c8:	697b      	ldr	r3, [r7, #20]
 800a0ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0d0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a0d2:	78fb      	ldrb	r3, [r7, #3]
 800a0d4:	f003 030f 	and.w	r3, r3, #15
 800a0d8:	68fa      	ldr	r2, [r7, #12]
 800a0da:	fa22 f303 	lsr.w	r3, r2, r3
 800a0de:	01db      	lsls	r3, r3, #7
 800a0e0:	b2db      	uxtb	r3, r3
 800a0e2:	693a      	ldr	r2, [r7, #16]
 800a0e4:	4313      	orrs	r3, r2
 800a0e6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a0e8:	78fb      	ldrb	r3, [r7, #3]
 800a0ea:	015a      	lsls	r2, r3, #5
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	4413      	add	r3, r2
 800a0f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0f4:	689b      	ldr	r3, [r3, #8]
 800a0f6:	693a      	ldr	r2, [r7, #16]
 800a0f8:	4013      	ands	r3, r2
 800a0fa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a0fc:	68bb      	ldr	r3, [r7, #8]
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	371c      	adds	r7, #28
 800a102:	46bd      	mov	sp, r7
 800a104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a108:	4770      	bx	lr

0800a10a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a10a:	b480      	push	{r7}
 800a10c:	b083      	sub	sp, #12
 800a10e:	af00      	add	r7, sp, #0
 800a110:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	695b      	ldr	r3, [r3, #20]
 800a116:	f003 0301 	and.w	r3, r3, #1
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	370c      	adds	r7, #12
 800a11e:	46bd      	mov	sp, r7
 800a120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a124:	4770      	bx	lr

0800a126 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a126:	b480      	push	{r7}
 800a128:	b085      	sub	sp, #20
 800a12a:	af00      	add	r7, sp, #0
 800a12c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	68fa      	ldr	r2, [r7, #12]
 800a13c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a140:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a144:	f023 0307 	bic.w	r3, r3, #7
 800a148:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a150:	685b      	ldr	r3, [r3, #4]
 800a152:	68fa      	ldr	r2, [r7, #12]
 800a154:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a158:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a15c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a15e:	2300      	movs	r3, #0
}
 800a160:	4618      	mov	r0, r3
 800a162:	3714      	adds	r7, #20
 800a164:	46bd      	mov	sp, r7
 800a166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16a:	4770      	bx	lr

0800a16c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a16c:	b480      	push	{r7}
 800a16e:	b087      	sub	sp, #28
 800a170:	af00      	add	r7, sp, #0
 800a172:	60f8      	str	r0, [r7, #12]
 800a174:	460b      	mov	r3, r1
 800a176:	607a      	str	r2, [r7, #4]
 800a178:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	333c      	adds	r3, #60	; 0x3c
 800a182:	3304      	adds	r3, #4
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a188:	693b      	ldr	r3, [r7, #16]
 800a18a:	4a26      	ldr	r2, [pc, #152]	; (800a224 <USB_EP0_OutStart+0xb8>)
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d90a      	bls.n	800a1a6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a190:	697b      	ldr	r3, [r7, #20]
 800a192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a19c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a1a0:	d101      	bne.n	800a1a6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	e037      	b.n	800a216 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1ac:	461a      	mov	r2, r3
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1b8:	691b      	ldr	r3, [r3, #16]
 800a1ba:	697a      	ldr	r2, [r7, #20]
 800a1bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a1c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a1c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a1c6:	697b      	ldr	r3, [r7, #20]
 800a1c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1cc:	691b      	ldr	r3, [r3, #16]
 800a1ce:	697a      	ldr	r2, [r7, #20]
 800a1d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a1d4:	f043 0318 	orr.w	r3, r3, #24
 800a1d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a1da:	697b      	ldr	r3, [r7, #20]
 800a1dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1e0:	691b      	ldr	r3, [r3, #16]
 800a1e2:	697a      	ldr	r2, [r7, #20]
 800a1e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a1e8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a1ec:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a1ee:	7afb      	ldrb	r3, [r7, #11]
 800a1f0:	2b01      	cmp	r3, #1
 800a1f2:	d10f      	bne.n	800a214 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1fa:	461a      	mov	r2, r3
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a200:	697b      	ldr	r3, [r7, #20]
 800a202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	697a      	ldr	r2, [r7, #20]
 800a20a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a20e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a212:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a214:	2300      	movs	r3, #0
}
 800a216:	4618      	mov	r0, r3
 800a218:	371c      	adds	r7, #28
 800a21a:	46bd      	mov	sp, r7
 800a21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a220:	4770      	bx	lr
 800a222:	bf00      	nop
 800a224:	4f54300a 	.word	0x4f54300a

0800a228 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a228:	b480      	push	{r7}
 800a22a:	b085      	sub	sp, #20
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a230:	2300      	movs	r3, #0
 800a232:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	3301      	adds	r3, #1
 800a238:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	4a13      	ldr	r2, [pc, #76]	; (800a28c <USB_CoreReset+0x64>)
 800a23e:	4293      	cmp	r3, r2
 800a240:	d901      	bls.n	800a246 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a242:	2303      	movs	r3, #3
 800a244:	e01b      	b.n	800a27e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	691b      	ldr	r3, [r3, #16]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	daf2      	bge.n	800a234 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a24e:	2300      	movs	r3, #0
 800a250:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	691b      	ldr	r3, [r3, #16]
 800a256:	f043 0201 	orr.w	r2, r3, #1
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	3301      	adds	r3, #1
 800a262:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	4a09      	ldr	r2, [pc, #36]	; (800a28c <USB_CoreReset+0x64>)
 800a268:	4293      	cmp	r3, r2
 800a26a:	d901      	bls.n	800a270 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a26c:	2303      	movs	r3, #3
 800a26e:	e006      	b.n	800a27e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	691b      	ldr	r3, [r3, #16]
 800a274:	f003 0301 	and.w	r3, r3, #1
 800a278:	2b01      	cmp	r3, #1
 800a27a:	d0f0      	beq.n	800a25e <USB_CoreReset+0x36>

  return HAL_OK;
 800a27c:	2300      	movs	r3, #0
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3714      	adds	r7, #20
 800a282:	46bd      	mov	sp, r7
 800a284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a288:	4770      	bx	lr
 800a28a:	bf00      	nop
 800a28c:	00030d40 	.word	0x00030d40

0800a290 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a290:	b480      	push	{r7}
 800a292:	b085      	sub	sp, #20
 800a294:	af00      	add	r7, sp, #0
 800a296:	4603      	mov	r3, r0
 800a298:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a29a:	2300      	movs	r3, #0
 800a29c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a29e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a2a2:	2b84      	cmp	r3, #132	; 0x84
 800a2a4:	d005      	beq.n	800a2b2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a2a6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	4413      	add	r3, r2
 800a2ae:	3303      	adds	r3, #3
 800a2b0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3714      	adds	r7, #20
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2be:	4770      	bx	lr

0800a2c0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b083      	sub	sp, #12
 800a2c4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a2c6:	f3ef 8305 	mrs	r3, IPSR
 800a2ca:	607b      	str	r3, [r7, #4]
  return(result);
 800a2cc:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	bf14      	ite	ne
 800a2d2:	2301      	movne	r3, #1
 800a2d4:	2300      	moveq	r3, #0
 800a2d6:	b2db      	uxtb	r3, r3
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	370c      	adds	r7, #12
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e2:	4770      	bx	lr

0800a2e4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a2e8:	f001 fec0 	bl	800c06c <vTaskStartScheduler>
  
  return osOK;
 800a2ec:	2300      	movs	r3, #0
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	bd80      	pop	{r7, pc}

0800a2f2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a2f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2f4:	b089      	sub	sp, #36	; 0x24
 800a2f6:	af04      	add	r7, sp, #16
 800a2f8:	6078      	str	r0, [r7, #4]
 800a2fa:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	695b      	ldr	r3, [r3, #20]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d020      	beq.n	800a346 <osThreadCreate+0x54>
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	699b      	ldr	r3, [r3, #24]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d01c      	beq.n	800a346 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	685c      	ldr	r4, [r3, #4]
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681d      	ldr	r5, [r3, #0]
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	691e      	ldr	r6, [r3, #16]
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a31e:	4618      	mov	r0, r3
 800a320:	f7ff ffb6 	bl	800a290 <makeFreeRtosPriority>
 800a324:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	695b      	ldr	r3, [r3, #20]
 800a32a:	687a      	ldr	r2, [r7, #4]
 800a32c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a32e:	9202      	str	r2, [sp, #8]
 800a330:	9301      	str	r3, [sp, #4]
 800a332:	9100      	str	r1, [sp, #0]
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	4632      	mov	r2, r6
 800a338:	4629      	mov	r1, r5
 800a33a:	4620      	mov	r0, r4
 800a33c:	f001 fcb8 	bl	800bcb0 <xTaskCreateStatic>
 800a340:	4603      	mov	r3, r0
 800a342:	60fb      	str	r3, [r7, #12]
 800a344:	e01c      	b.n	800a380 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	685c      	ldr	r4, [r3, #4]
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a352:	b29e      	uxth	r6, r3
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a35a:	4618      	mov	r0, r3
 800a35c:	f7ff ff98 	bl	800a290 <makeFreeRtosPriority>
 800a360:	4602      	mov	r2, r0
 800a362:	f107 030c 	add.w	r3, r7, #12
 800a366:	9301      	str	r3, [sp, #4]
 800a368:	9200      	str	r2, [sp, #0]
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	4632      	mov	r2, r6
 800a36e:	4629      	mov	r1, r5
 800a370:	4620      	mov	r0, r4
 800a372:	f001 fcfa 	bl	800bd6a <xTaskCreate>
 800a376:	4603      	mov	r3, r0
 800a378:	2b01      	cmp	r3, #1
 800a37a:	d001      	beq.n	800a380 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a37c:	2300      	movs	r3, #0
 800a37e:	e000      	b.n	800a382 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a380:	68fb      	ldr	r3, [r7, #12]
}
 800a382:	4618      	mov	r0, r3
 800a384:	3714      	adds	r7, #20
 800a386:	46bd      	mov	sp, r7
 800a388:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a38a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a38a:	b580      	push	{r7, lr}
 800a38c:	b084      	sub	sp, #16
 800a38e:	af00      	add	r7, sp, #0
 800a390:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d001      	beq.n	800a3a0 <osDelay+0x16>
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	e000      	b.n	800a3a2 <osDelay+0x18>
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f001 fe2e 	bl	800c004 <vTaskDelay>
  
  return osOK;
 800a3a8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	3710      	adds	r7, #16
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}
	...

0800a3b4 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b086      	sub	sp, #24
 800a3b8:	af02      	add	r7, sp, #8
 800a3ba:	6078      	str	r0, [r7, #4]
 800a3bc:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 800a3c6:	f7ff ff7b 	bl	800a2c0 <inHandlerMode>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d01c      	beq.n	800a40a <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 800a3d0:	6839      	ldr	r1, [r7, #0]
 800a3d2:	f107 0208 	add.w	r2, r7, #8
 800a3d6:	f107 030c 	add.w	r3, r7, #12
 800a3da:	9300      	str	r3, [sp, #0]
 800a3dc:	4613      	mov	r3, r2
 800a3de:	2201      	movs	r2, #1
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f002 fc17 	bl	800cc14 <xTaskGenericNotifyFromISR>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	2b01      	cmp	r3, #1
 800a3ea:	d002      	beq.n	800a3f2 <osSignalSet+0x3e>
      return 0x80000000;
 800a3ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a3f0:	e019      	b.n	800a426 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d015      	beq.n	800a424 <osSignalSet+0x70>
 800a3f8:	4b0d      	ldr	r3, [pc, #52]	; (800a430 <osSignalSet+0x7c>)
 800a3fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3fe:	601a      	str	r2, [r3, #0]
 800a400:	f3bf 8f4f 	dsb	sy
 800a404:	f3bf 8f6f 	isb	sy
 800a408:	e00c      	b.n	800a424 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 800a40a:	6839      	ldr	r1, [r7, #0]
 800a40c:	f107 0308 	add.w	r3, r7, #8
 800a410:	2201      	movs	r2, #1
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f002 fb40 	bl	800ca98 <xTaskGenericNotify>
 800a418:	4603      	mov	r3, r0
 800a41a:	2b01      	cmp	r3, #1
 800a41c:	d002      	beq.n	800a424 <osSignalSet+0x70>
    return 0x80000000;
 800a41e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a422:	e000      	b.n	800a426 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 800a424:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 800a426:	4618      	mov	r0, r3
 800a428:	3710      	adds	r7, #16
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}
 800a42e:	bf00      	nop
 800a430:	e000ed04 	.word	0xe000ed04

0800a434 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 800a434:	b590      	push	{r4, r7, lr}
 800a436:	b089      	sub	sp, #36	; 0x24
 800a438:	af00      	add	r7, sp, #0
 800a43a:	60f8      	str	r0, [r7, #12]
 800a43c:	60b9      	str	r1, [r7, #8]
 800a43e:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 800a440:	2300      	movs	r3, #0
 800a442:	617b      	str	r3, [r7, #20]
  ticks = 0;
 800a444:	2300      	movs	r3, #0
 800a446:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a44e:	d103      	bne.n	800a458 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 800a450:	f04f 33ff 	mov.w	r3, #4294967295
 800a454:	61fb      	str	r3, [r7, #28]
 800a456:	e009      	b.n	800a46c <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d006      	beq.n	800a46c <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 800a462:	69fb      	ldr	r3, [r7, #28]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d101      	bne.n	800a46c <osSignalWait+0x38>
      ticks = 1;
 800a468:	2301      	movs	r3, #1
 800a46a:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 800a46c:	f7ff ff28 	bl	800a2c0 <inHandlerMode>
 800a470:	4603      	mov	r3, r0
 800a472:	2b00      	cmp	r3, #0
 800a474:	d002      	beq.n	800a47c <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 800a476:	2382      	movs	r3, #130	; 0x82
 800a478:	613b      	str	r3, [r7, #16]
 800a47a:	e01b      	b.n	800a4b4 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 800a47c:	68b9      	ldr	r1, [r7, #8]
 800a47e:	f107 0310 	add.w	r3, r7, #16
 800a482:	1d1a      	adds	r2, r3, #4
 800a484:	69fb      	ldr	r3, [r7, #28]
 800a486:	2000      	movs	r0, #0
 800a488:	f002 faa6 	bl	800c9d8 <xTaskNotifyWait>
 800a48c:	4603      	mov	r3, r0
 800a48e:	2b01      	cmp	r3, #1
 800a490:	d008      	beq.n	800a4a4 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 800a492:	69fb      	ldr	r3, [r7, #28]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d102      	bne.n	800a49e <osSignalWait+0x6a>
 800a498:	2300      	movs	r3, #0
 800a49a:	613b      	str	r3, [r7, #16]
 800a49c:	e00a      	b.n	800a4b4 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 800a49e:	2340      	movs	r3, #64	; 0x40
 800a4a0:	613b      	str	r3, [r7, #16]
 800a4a2:	e007      	b.n	800a4b4 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 800a4a4:	697b      	ldr	r3, [r7, #20]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	da02      	bge.n	800a4b0 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 800a4aa:	2386      	movs	r3, #134	; 0x86
 800a4ac:	613b      	str	r3, [r7, #16]
 800a4ae:	e001      	b.n	800a4b4 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 800a4b0:	2308      	movs	r3, #8
 800a4b2:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	461c      	mov	r4, r3
 800a4b8:	f107 0310 	add.w	r3, r7, #16
 800a4bc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a4c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800a4c4:	68f8      	ldr	r0, [r7, #12]
 800a4c6:	3724      	adds	r7, #36	; 0x24
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd90      	pop	{r4, r7, pc}

0800a4cc <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b086      	sub	sp, #24
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	685b      	ldr	r3, [r3, #4]
 800a4d8:	3303      	adds	r3, #3
 800a4da:	f023 0303 	bic.w	r3, r3, #3
 800a4de:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 800a4e0:	2014      	movs	r0, #20
 800a4e2:	f000 fa29 	bl	800a938 <pvPortMalloc>
 800a4e6:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 800a4e8:	697b      	ldr	r3, [r7, #20]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d046      	beq.n	800a57c <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681a      	ldr	r2, [r3, #0]
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 800a4f6:	68fa      	ldr	r2, [r7, #12]
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 800a4fc:	697b      	ldr	r3, [r7, #20]
 800a4fe:	2200      	movs	r2, #0
 800a500:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	4618      	mov	r0, r3
 800a508:	f000 fa16 	bl	800a938 <pvPortMalloc>
 800a50c:	4602      	mov	r2, r0
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 800a512:	697b      	ldr	r3, [r7, #20]
 800a514:	685b      	ldr	r3, [r3, #4]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d02b      	beq.n	800a572 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	68fa      	ldr	r2, [r7, #12]
 800a520:	fb02 f303 	mul.w	r3, r2, r3
 800a524:	4618      	mov	r0, r3
 800a526:	f000 fa07 	bl	800a938 <pvPortMalloc>
 800a52a:	4602      	mov	r2, r0
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 800a530:	697b      	ldr	r3, [r7, #20]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d011      	beq.n	800a55c <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 800a538:	2300      	movs	r3, #0
 800a53a:	613b      	str	r3, [r7, #16]
 800a53c:	e008      	b.n	800a550 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	685a      	ldr	r2, [r3, #4]
 800a542:	693b      	ldr	r3, [r7, #16]
 800a544:	4413      	add	r3, r2
 800a546:	2200      	movs	r2, #0
 800a548:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 800a54a:	693b      	ldr	r3, [r7, #16]
 800a54c:	3301      	adds	r3, #1
 800a54e:	613b      	str	r3, [r7, #16]
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	693a      	ldr	r2, [r7, #16]
 800a556:	429a      	cmp	r2, r3
 800a558:	d3f1      	bcc.n	800a53e <osPoolCreate+0x72>
 800a55a:	e00f      	b.n	800a57c <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 800a55c:	697b      	ldr	r3, [r7, #20]
 800a55e:	685b      	ldr	r3, [r3, #4]
 800a560:	4618      	mov	r0, r3
 800a562:	f000 fab5 	bl	800aad0 <vPortFree>
        vPortFree(thePool);
 800a566:	6978      	ldr	r0, [r7, #20]
 800a568:	f000 fab2 	bl	800aad0 <vPortFree>
        thePool = NULL;
 800a56c:	2300      	movs	r3, #0
 800a56e:	617b      	str	r3, [r7, #20]
 800a570:	e004      	b.n	800a57c <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 800a572:	6978      	ldr	r0, [r7, #20]
 800a574:	f000 faac 	bl	800aad0 <vPortFree>
      thePool = NULL;
 800a578:	2300      	movs	r3, #0
 800a57a:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 800a57c:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 800a57e:	4618      	mov	r0, r3
 800a580:	3718      	adds	r7, #24
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}

0800a586 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 800a586:	b580      	push	{r7, lr}
 800a588:	b08a      	sub	sp, #40	; 0x28
 800a58a:	af00      	add	r7, sp, #0
 800a58c:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 800a58e:	2300      	movs	r3, #0
 800a590:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 800a592:	2300      	movs	r3, #0
 800a594:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 800a596:	f7ff fe93 	bl	800a2c0 <inHandlerMode>
 800a59a:	4603      	mov	r3, r0
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d00e      	beq.n	800a5be <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a5a0:	f3ef 8211 	mrs	r2, BASEPRI
 800a5a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5a8:	f383 8811 	msr	BASEPRI, r3
 800a5ac:	f3bf 8f6f 	isb	sy
 800a5b0:	f3bf 8f4f 	dsb	sy
 800a5b4:	617a      	str	r2, [r7, #20]
 800a5b6:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a5b8:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 800a5ba:	627b      	str	r3, [r7, #36]	; 0x24
 800a5bc:	e001      	b.n	800a5c2 <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 800a5be:	f000 fd89 	bl	800b0d4 <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	61fb      	str	r3, [r7, #28]
 800a5c6:	e029      	b.n	800a61c <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	691a      	ldr	r2, [r3, #16]
 800a5cc:	69fb      	ldr	r3, [r7, #28]
 800a5ce:	4413      	add	r3, r2
 800a5d0:	687a      	ldr	r2, [r7, #4]
 800a5d2:	6892      	ldr	r2, [r2, #8]
 800a5d4:	fbb3 f1f2 	udiv	r1, r3, r2
 800a5d8:	fb01 f202 	mul.w	r2, r1, r2
 800a5dc:	1a9b      	subs	r3, r3, r2
 800a5de:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	685a      	ldr	r2, [r3, #4]
 800a5e4:	69bb      	ldr	r3, [r7, #24]
 800a5e6:	4413      	add	r3, r2
 800a5e8:	781b      	ldrb	r3, [r3, #0]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d113      	bne.n	800a616 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	685a      	ldr	r2, [r3, #4]
 800a5f2:	69bb      	ldr	r3, [r7, #24]
 800a5f4:	4413      	add	r3, r2
 800a5f6:	2201      	movs	r2, #1
 800a5f8:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	4619      	mov	r1, r3
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	68db      	ldr	r3, [r3, #12]
 800a604:	69ba      	ldr	r2, [r7, #24]
 800a606:	fb02 f303 	mul.w	r3, r2, r3
 800a60a:	440b      	add	r3, r1
 800a60c:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	69ba      	ldr	r2, [r7, #24]
 800a612:	611a      	str	r2, [r3, #16]
      break;
 800a614:	e007      	b.n	800a626 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 800a616:	69fb      	ldr	r3, [r7, #28]
 800a618:	3301      	adds	r3, #1
 800a61a:	61fb      	str	r3, [r7, #28]
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	689b      	ldr	r3, [r3, #8]
 800a620:	69fa      	ldr	r2, [r7, #28]
 800a622:	429a      	cmp	r2, r3
 800a624:	d3d0      	bcc.n	800a5c8 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 800a626:	f7ff fe4b 	bl	800a2c0 <inHandlerMode>
 800a62a:	4603      	mov	r3, r0
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d005      	beq.n	800a63c <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 800a630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a632:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a63a:	e001      	b.n	800a640 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 800a63c:	f000 fd7a 	bl	800b134 <vPortExitCritical>
  }
  
  return p;
 800a640:	6a3b      	ldr	r3, [r7, #32]
}
 800a642:	4618      	mov	r0, r3
 800a644:	3728      	adds	r7, #40	; 0x28
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}

0800a64a <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 800a64a:	b480      	push	{r7}
 800a64c:	b085      	sub	sp, #20
 800a64e:	af00      	add	r7, sp, #0
 800a650:	6078      	str	r0, [r7, #4]
 800a652:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d101      	bne.n	800a65e <osPoolFree+0x14>
    return osErrorParameter;
 800a65a:	2380      	movs	r3, #128	; 0x80
 800a65c:	e030      	b.n	800a6c0 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d101      	bne.n	800a668 <osPoolFree+0x1e>
    return osErrorParameter;
 800a664:	2380      	movs	r3, #128	; 0x80
 800a666:	e02b      	b.n	800a6c0 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	683a      	ldr	r2, [r7, #0]
 800a66e:	429a      	cmp	r2, r3
 800a670:	d201      	bcs.n	800a676 <osPoolFree+0x2c>
    return osErrorParameter;
 800a672:	2380      	movs	r3, #128	; 0x80
 800a674:	e024      	b.n	800a6c0 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	687a      	ldr	r2, [r7, #4]
 800a67a:	6812      	ldr	r2, [r2, #0]
 800a67c:	1a9b      	subs	r3, r3, r2
 800a67e:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	68da      	ldr	r2, [r3, #12]
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	fbb3 f1f2 	udiv	r1, r3, r2
 800a68a:	fb01 f202 	mul.w	r2, r1, r2
 800a68e:	1a9b      	subs	r3, r3, r2
 800a690:	2b00      	cmp	r3, #0
 800a692:	d001      	beq.n	800a698 <osPoolFree+0x4e>
    return osErrorParameter;
 800a694:	2380      	movs	r3, #128	; 0x80
 800a696:	e013      	b.n	800a6c0 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	68db      	ldr	r3, [r3, #12]
 800a69c:	68fa      	ldr	r2, [r7, #12]
 800a69e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6a2:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	689b      	ldr	r3, [r3, #8]
 800a6a8:	68fa      	ldr	r2, [r7, #12]
 800a6aa:	429a      	cmp	r2, r3
 800a6ac:	d301      	bcc.n	800a6b2 <osPoolFree+0x68>
    return osErrorParameter;
 800a6ae:	2380      	movs	r3, #128	; 0x80
 800a6b0:	e006      	b.n	800a6c0 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	685a      	ldr	r2, [r3, #4]
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	4413      	add	r3, r2
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 800a6be:	2300      	movs	r3, #0
}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	3714      	adds	r7, #20
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ca:	4770      	bx	lr

0800a6cc <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 800a6cc:	b590      	push	{r4, r7, lr}
 800a6ce:	b087      	sub	sp, #28
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
 800a6d4:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	60fb      	str	r3, [r7, #12]
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	685b      	ldr	r3, [r3, #4]
 800a6e0:	613b      	str	r3, [r7, #16]
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	689c      	ldr	r4, [r3, #8]
 800a6ea:	200c      	movs	r0, #12
 800a6ec:	f000 f924 	bl	800a938 <pvPortMalloc>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	689b      	ldr	r3, [r3, #8]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d101      	bne.n	800a702 <osMailCreate+0x36>
    return NULL;
 800a6fe:	2300      	movs	r3, #0
 800a700:	e038      	b.n	800a774 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	689b      	ldr	r3, [r3, #8]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	687a      	ldr	r2, [r7, #4]
 800a70a:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6818      	ldr	r0, [r3, #0]
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	689b      	ldr	r3, [r3, #8]
 800a714:	681c      	ldr	r4, [r3, #0]
 800a716:	2200      	movs	r2, #0
 800a718:	2104      	movs	r1, #4
 800a71a:	f000 fe65 	bl	800b3e8 <xQueueGenericCreate>
 800a71e:	4603      	mov	r3, r0
 800a720:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	689b      	ldr	r3, [r3, #8]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	685b      	ldr	r3, [r3, #4]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d107      	bne.n	800a73e <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	689b      	ldr	r3, [r3, #8]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	4618      	mov	r0, r3
 800a736:	f000 f9cb 	bl	800aad0 <vPortFree>
    return NULL;
 800a73a:	2300      	movs	r3, #0
 800a73c:	e01a      	b.n	800a774 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	689b      	ldr	r3, [r3, #8]
 800a742:	681c      	ldr	r4, [r3, #0]
 800a744:	f107 030c 	add.w	r3, r7, #12
 800a748:	4618      	mov	r0, r3
 800a74a:	f7ff febf 	bl	800a4cc <osPoolCreate>
 800a74e:	4603      	mov	r3, r0
 800a750:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	689b      	ldr	r3, [r3, #8]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	689b      	ldr	r3, [r3, #8]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d107      	bne.n	800a76e <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	689b      	ldr	r3, [r3, #8]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	4618      	mov	r0, r3
 800a766:	f000 f9b3 	bl	800aad0 <vPortFree>
    return NULL;
 800a76a:	2300      	movs	r3, #0
 800a76c:	e002      	b.n	800a774 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	689b      	ldr	r3, [r3, #8]
 800a772:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 800a774:	4618      	mov	r0, r3
 800a776:	371c      	adds	r7, #28
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd90      	pop	{r4, r7, pc}

0800a77c <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b084      	sub	sp, #16
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
 800a784:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d101      	bne.n	800a790 <osMailAlloc+0x14>
    return NULL;
 800a78c:	2300      	movs	r3, #0
 800a78e:	e006      	b.n	800a79e <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	689b      	ldr	r3, [r3, #8]
 800a794:	4618      	mov	r0, r3
 800a796:	f7ff fef6 	bl	800a586 <osPoolAlloc>
 800a79a:	60f8      	str	r0, [r7, #12]
  
  return p;
 800a79c:	68fb      	ldr	r3, [r7, #12]
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3710      	adds	r7, #16
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}
	...

0800a7a8 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b084      	sub	sp, #16
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
 800a7b0:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d101      	bne.n	800a7bc <osMailPut+0x14>
    return osErrorParameter;
 800a7b8:	2380      	movs	r3, #128	; 0x80
 800a7ba:	e02c      	b.n	800a816 <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 800a7c0:	f7ff fd7e 	bl	800a2c0 <inHandlerMode>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d018      	beq.n	800a7fc <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6858      	ldr	r0, [r3, #4]
 800a7ce:	f107 020c 	add.w	r2, r7, #12
 800a7d2:	4639      	mov	r1, r7
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	f000 ff5f 	bl	800b698 <xQueueGenericSendFromISR>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	2b01      	cmp	r3, #1
 800a7de:	d001      	beq.n	800a7e4 <osMailPut+0x3c>
      return osErrorOS;
 800a7e0:	23ff      	movs	r3, #255	; 0xff
 800a7e2:	e018      	b.n	800a816 <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d014      	beq.n	800a814 <osMailPut+0x6c>
 800a7ea:	4b0d      	ldr	r3, [pc, #52]	; (800a820 <osMailPut+0x78>)
 800a7ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7f0:	601a      	str	r2, [r3, #0]
 800a7f2:	f3bf 8f4f 	dsb	sy
 800a7f6:	f3bf 8f6f 	isb	sy
 800a7fa:	e00b      	b.n	800a814 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6858      	ldr	r0, [r3, #4]
 800a800:	4639      	mov	r1, r7
 800a802:	2300      	movs	r3, #0
 800a804:	2200      	movs	r2, #0
 800a806:	f000 fe49 	bl	800b49c <xQueueGenericSend>
 800a80a:	4603      	mov	r3, r0
 800a80c:	2b01      	cmp	r3, #1
 800a80e:	d001      	beq.n	800a814 <osMailPut+0x6c>
      return osErrorOS;
 800a810:	23ff      	movs	r3, #255	; 0xff
 800a812:	e000      	b.n	800a816 <osMailPut+0x6e>
    }
  }
  
  return osOK;
 800a814:	2300      	movs	r3, #0
}
 800a816:	4618      	mov	r0, r3
 800a818:	3710      	adds	r7, #16
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}
 800a81e:	bf00      	nop
 800a820:	e000ed04 	.word	0xe000ed04

0800a824 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 800a824:	b590      	push	{r4, r7, lr}
 800a826:	b08b      	sub	sp, #44	; 0x2c
 800a828:	af00      	add	r7, sp, #0
 800a82a:	60f8      	str	r0, [r7, #12]
 800a82c:	60b9      	str	r1, [r7, #8]
 800a82e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 800a834:	68bb      	ldr	r3, [r7, #8]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d10a      	bne.n	800a850 <osMailGet+0x2c>
    event.status = osErrorParameter;
 800a83a:	2380      	movs	r3, #128	; 0x80
 800a83c:	617b      	str	r3, [r7, #20]
    return event;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	461c      	mov	r4, r3
 800a842:	f107 0314 	add.w	r3, r7, #20
 800a846:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a84a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a84e:	e056      	b.n	800a8fe <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800a850:	2300      	movs	r3, #0
 800a852:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800a854:	2300      	movs	r3, #0
 800a856:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a85e:	d103      	bne.n	800a868 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 800a860:	f04f 33ff 	mov.w	r3, #4294967295
 800a864:	627b      	str	r3, [r7, #36]	; 0x24
 800a866:	e009      	b.n	800a87c <osMailGet+0x58>
  }
  else if (millisec != 0) {
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d006      	beq.n	800a87c <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800a872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a874:	2b00      	cmp	r3, #0
 800a876:	d101      	bne.n	800a87c <osMailGet+0x58>
      ticks = 1;
 800a878:	2301      	movs	r3, #1
 800a87a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800a87c:	f7ff fd20 	bl	800a2c0 <inHandlerMode>
 800a880:	4603      	mov	r3, r0
 800a882:	2b00      	cmp	r3, #0
 800a884:	d01d      	beq.n	800a8c2 <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	6858      	ldr	r0, [r3, #4]
 800a88a:	f107 0220 	add.w	r2, r7, #32
 800a88e:	f107 0314 	add.w	r3, r7, #20
 800a892:	3304      	adds	r3, #4
 800a894:	4619      	mov	r1, r3
 800a896:	f001 f87b 	bl	800b990 <xQueueReceiveFromISR>
 800a89a:	4603      	mov	r3, r0
 800a89c:	2b01      	cmp	r3, #1
 800a89e:	d102      	bne.n	800a8a6 <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 800a8a0:	2320      	movs	r3, #32
 800a8a2:	617b      	str	r3, [r7, #20]
 800a8a4:	e001      	b.n	800a8aa <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a8aa:	6a3b      	ldr	r3, [r7, #32]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d01e      	beq.n	800a8ee <osMailGet+0xca>
 800a8b0:	4b15      	ldr	r3, [pc, #84]	; (800a908 <osMailGet+0xe4>)
 800a8b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8b6:	601a      	str	r2, [r3, #0]
 800a8b8:	f3bf 8f4f 	dsb	sy
 800a8bc:	f3bf 8f6f 	isb	sy
 800a8c0:	e015      	b.n	800a8ee <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	6858      	ldr	r0, [r3, #4]
 800a8c6:	f107 0314 	add.w	r3, r7, #20
 800a8ca:	3304      	adds	r3, #4
 800a8cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8ce:	4619      	mov	r1, r3
 800a8d0:	f000 ff7e 	bl	800b7d0 <xQueueReceive>
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	2b01      	cmp	r3, #1
 800a8d8:	d102      	bne.n	800a8e0 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 800a8da:	2320      	movs	r3, #32
 800a8dc:	617b      	str	r3, [r7, #20]
 800a8de:	e006      	b.n	800a8ee <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800a8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d101      	bne.n	800a8ea <osMailGet+0xc6>
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	e000      	b.n	800a8ec <osMailGet+0xc8>
 800a8ea:	2340      	movs	r3, #64	; 0x40
 800a8ec:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	461c      	mov	r4, r3
 800a8f2:	f107 0314 	add.w	r3, r7, #20
 800a8f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a8fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800a8fe:	68f8      	ldr	r0, [r7, #12]
 800a900:	372c      	adds	r7, #44	; 0x2c
 800a902:	46bd      	mov	sp, r7
 800a904:	bd90      	pop	{r4, r7, pc}
 800a906:	bf00      	nop
 800a908:	e000ed04 	.word	0xe000ed04

0800a90c <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b082      	sub	sp, #8
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
 800a914:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d101      	bne.n	800a920 <osMailFree+0x14>
    return osErrorParameter;
 800a91c:	2380      	movs	r3, #128	; 0x80
 800a91e:	e006      	b.n	800a92e <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	689b      	ldr	r3, [r3, #8]
 800a924:	6839      	ldr	r1, [r7, #0]
 800a926:	4618      	mov	r0, r3
 800a928:	f7ff fe8f 	bl	800a64a <osPoolFree>
 800a92c:	4603      	mov	r3, r0
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3708      	adds	r7, #8
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}
	...

0800a938 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b08a      	sub	sp, #40	; 0x28
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a940:	2300      	movs	r3, #0
 800a942:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a944:	f001 fbfc 	bl	800c140 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a948:	4b5b      	ldr	r3, [pc, #364]	; (800aab8 <pvPortMalloc+0x180>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d101      	bne.n	800a954 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a950:	f000 f920 	bl	800ab94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a954:	4b59      	ldr	r3, [pc, #356]	; (800aabc <pvPortMalloc+0x184>)
 800a956:	681a      	ldr	r2, [r3, #0]
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	4013      	ands	r3, r2
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	f040 8093 	bne.w	800aa88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d01d      	beq.n	800a9a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a968:	2208      	movs	r2, #8
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	4413      	add	r3, r2
 800a96e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	f003 0307 	and.w	r3, r3, #7
 800a976:	2b00      	cmp	r3, #0
 800a978:	d014      	beq.n	800a9a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	f023 0307 	bic.w	r3, r3, #7
 800a980:	3308      	adds	r3, #8
 800a982:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f003 0307 	and.w	r3, r3, #7
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d00a      	beq.n	800a9a4 <pvPortMalloc+0x6c>
	__asm volatile
 800a98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a992:	f383 8811 	msr	BASEPRI, r3
 800a996:	f3bf 8f6f 	isb	sy
 800a99a:	f3bf 8f4f 	dsb	sy
 800a99e:	617b      	str	r3, [r7, #20]
}
 800a9a0:	bf00      	nop
 800a9a2:	e7fe      	b.n	800a9a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d06e      	beq.n	800aa88 <pvPortMalloc+0x150>
 800a9aa:	4b45      	ldr	r3, [pc, #276]	; (800aac0 <pvPortMalloc+0x188>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	687a      	ldr	r2, [r7, #4]
 800a9b0:	429a      	cmp	r2, r3
 800a9b2:	d869      	bhi.n	800aa88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a9b4:	4b43      	ldr	r3, [pc, #268]	; (800aac4 <pvPortMalloc+0x18c>)
 800a9b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a9b8:	4b42      	ldr	r3, [pc, #264]	; (800aac4 <pvPortMalloc+0x18c>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a9be:	e004      	b.n	800a9ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9cc:	685b      	ldr	r3, [r3, #4]
 800a9ce:	687a      	ldr	r2, [r7, #4]
 800a9d0:	429a      	cmp	r2, r3
 800a9d2:	d903      	bls.n	800a9dc <pvPortMalloc+0xa4>
 800a9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d1f1      	bne.n	800a9c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a9dc:	4b36      	ldr	r3, [pc, #216]	; (800aab8 <pvPortMalloc+0x180>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9e2:	429a      	cmp	r2, r3
 800a9e4:	d050      	beq.n	800aa88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a9e6:	6a3b      	ldr	r3, [r7, #32]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	2208      	movs	r2, #8
 800a9ec:	4413      	add	r3, r2
 800a9ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a9f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9f2:	681a      	ldr	r2, [r3, #0]
 800a9f4:	6a3b      	ldr	r3, [r7, #32]
 800a9f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a9f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9fa:	685a      	ldr	r2, [r3, #4]
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	1ad2      	subs	r2, r2, r3
 800aa00:	2308      	movs	r3, #8
 800aa02:	005b      	lsls	r3, r3, #1
 800aa04:	429a      	cmp	r2, r3
 800aa06:	d91f      	bls.n	800aa48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800aa08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	4413      	add	r3, r2
 800aa0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa10:	69bb      	ldr	r3, [r7, #24]
 800aa12:	f003 0307 	and.w	r3, r3, #7
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d00a      	beq.n	800aa30 <pvPortMalloc+0xf8>
	__asm volatile
 800aa1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa1e:	f383 8811 	msr	BASEPRI, r3
 800aa22:	f3bf 8f6f 	isb	sy
 800aa26:	f3bf 8f4f 	dsb	sy
 800aa2a:	613b      	str	r3, [r7, #16]
}
 800aa2c:	bf00      	nop
 800aa2e:	e7fe      	b.n	800aa2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800aa30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa32:	685a      	ldr	r2, [r3, #4]
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	1ad2      	subs	r2, r2, r3
 800aa38:	69bb      	ldr	r3, [r7, #24]
 800aa3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800aa3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa3e:	687a      	ldr	r2, [r7, #4]
 800aa40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800aa42:	69b8      	ldr	r0, [r7, #24]
 800aa44:	f000 f908 	bl	800ac58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aa48:	4b1d      	ldr	r3, [pc, #116]	; (800aac0 <pvPortMalloc+0x188>)
 800aa4a:	681a      	ldr	r2, [r3, #0]
 800aa4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa4e:	685b      	ldr	r3, [r3, #4]
 800aa50:	1ad3      	subs	r3, r2, r3
 800aa52:	4a1b      	ldr	r2, [pc, #108]	; (800aac0 <pvPortMalloc+0x188>)
 800aa54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800aa56:	4b1a      	ldr	r3, [pc, #104]	; (800aac0 <pvPortMalloc+0x188>)
 800aa58:	681a      	ldr	r2, [r3, #0]
 800aa5a:	4b1b      	ldr	r3, [pc, #108]	; (800aac8 <pvPortMalloc+0x190>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	429a      	cmp	r2, r3
 800aa60:	d203      	bcs.n	800aa6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800aa62:	4b17      	ldr	r3, [pc, #92]	; (800aac0 <pvPortMalloc+0x188>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	4a18      	ldr	r2, [pc, #96]	; (800aac8 <pvPortMalloc+0x190>)
 800aa68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800aa6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa6c:	685a      	ldr	r2, [r3, #4]
 800aa6e:	4b13      	ldr	r3, [pc, #76]	; (800aabc <pvPortMalloc+0x184>)
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	431a      	orrs	r2, r3
 800aa74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800aa78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800aa7e:	4b13      	ldr	r3, [pc, #76]	; (800aacc <pvPortMalloc+0x194>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	3301      	adds	r3, #1
 800aa84:	4a11      	ldr	r2, [pc, #68]	; (800aacc <pvPortMalloc+0x194>)
 800aa86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800aa88:	f001 fb68 	bl	800c15c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa8c:	69fb      	ldr	r3, [r7, #28]
 800aa8e:	f003 0307 	and.w	r3, r3, #7
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d00a      	beq.n	800aaac <pvPortMalloc+0x174>
	__asm volatile
 800aa96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa9a:	f383 8811 	msr	BASEPRI, r3
 800aa9e:	f3bf 8f6f 	isb	sy
 800aaa2:	f3bf 8f4f 	dsb	sy
 800aaa6:	60fb      	str	r3, [r7, #12]
}
 800aaa8:	bf00      	nop
 800aaaa:	e7fe      	b.n	800aaaa <pvPortMalloc+0x172>
	return pvReturn;
 800aaac:	69fb      	ldr	r3, [r7, #28]
}
 800aaae:	4618      	mov	r0, r3
 800aab0:	3728      	adds	r7, #40	; 0x28
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}
 800aab6:	bf00      	nop
 800aab8:	20004530 	.word	0x20004530
 800aabc:	20004544 	.word	0x20004544
 800aac0:	20004534 	.word	0x20004534
 800aac4:	20004528 	.word	0x20004528
 800aac8:	20004538 	.word	0x20004538
 800aacc:	2000453c 	.word	0x2000453c

0800aad0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b086      	sub	sp, #24
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d04d      	beq.n	800ab7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800aae2:	2308      	movs	r3, #8
 800aae4:	425b      	negs	r3, r3
 800aae6:	697a      	ldr	r2, [r7, #20]
 800aae8:	4413      	add	r3, r2
 800aaea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800aaec:	697b      	ldr	r3, [r7, #20]
 800aaee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800aaf0:	693b      	ldr	r3, [r7, #16]
 800aaf2:	685a      	ldr	r2, [r3, #4]
 800aaf4:	4b24      	ldr	r3, [pc, #144]	; (800ab88 <vPortFree+0xb8>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	4013      	ands	r3, r2
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d10a      	bne.n	800ab14 <vPortFree+0x44>
	__asm volatile
 800aafe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab02:	f383 8811 	msr	BASEPRI, r3
 800ab06:	f3bf 8f6f 	isb	sy
 800ab0a:	f3bf 8f4f 	dsb	sy
 800ab0e:	60fb      	str	r3, [r7, #12]
}
 800ab10:	bf00      	nop
 800ab12:	e7fe      	b.n	800ab12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ab14:	693b      	ldr	r3, [r7, #16]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d00a      	beq.n	800ab32 <vPortFree+0x62>
	__asm volatile
 800ab1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab20:	f383 8811 	msr	BASEPRI, r3
 800ab24:	f3bf 8f6f 	isb	sy
 800ab28:	f3bf 8f4f 	dsb	sy
 800ab2c:	60bb      	str	r3, [r7, #8]
}
 800ab2e:	bf00      	nop
 800ab30:	e7fe      	b.n	800ab30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ab32:	693b      	ldr	r3, [r7, #16]
 800ab34:	685a      	ldr	r2, [r3, #4]
 800ab36:	4b14      	ldr	r3, [pc, #80]	; (800ab88 <vPortFree+0xb8>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	4013      	ands	r3, r2
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d01e      	beq.n	800ab7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ab40:	693b      	ldr	r3, [r7, #16]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d11a      	bne.n	800ab7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ab48:	693b      	ldr	r3, [r7, #16]
 800ab4a:	685a      	ldr	r2, [r3, #4]
 800ab4c:	4b0e      	ldr	r3, [pc, #56]	; (800ab88 <vPortFree+0xb8>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	43db      	mvns	r3, r3
 800ab52:	401a      	ands	r2, r3
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ab58:	f001 faf2 	bl	800c140 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ab5c:	693b      	ldr	r3, [r7, #16]
 800ab5e:	685a      	ldr	r2, [r3, #4]
 800ab60:	4b0a      	ldr	r3, [pc, #40]	; (800ab8c <vPortFree+0xbc>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	4413      	add	r3, r2
 800ab66:	4a09      	ldr	r2, [pc, #36]	; (800ab8c <vPortFree+0xbc>)
 800ab68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ab6a:	6938      	ldr	r0, [r7, #16]
 800ab6c:	f000 f874 	bl	800ac58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ab70:	4b07      	ldr	r3, [pc, #28]	; (800ab90 <vPortFree+0xc0>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	3301      	adds	r3, #1
 800ab76:	4a06      	ldr	r2, [pc, #24]	; (800ab90 <vPortFree+0xc0>)
 800ab78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ab7a:	f001 faef 	bl	800c15c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ab7e:	bf00      	nop
 800ab80:	3718      	adds	r7, #24
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}
 800ab86:	bf00      	nop
 800ab88:	20004544 	.word	0x20004544
 800ab8c:	20004534 	.word	0x20004534
 800ab90:	20004540 	.word	0x20004540

0800ab94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ab94:	b480      	push	{r7}
 800ab96:	b085      	sub	sp, #20
 800ab98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ab9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ab9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800aba0:	4b27      	ldr	r3, [pc, #156]	; (800ac40 <prvHeapInit+0xac>)
 800aba2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	f003 0307 	and.w	r3, r3, #7
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d00c      	beq.n	800abc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	3307      	adds	r3, #7
 800abb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	f023 0307 	bic.w	r3, r3, #7
 800abba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800abbc:	68ba      	ldr	r2, [r7, #8]
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	1ad3      	subs	r3, r2, r3
 800abc2:	4a1f      	ldr	r2, [pc, #124]	; (800ac40 <prvHeapInit+0xac>)
 800abc4:	4413      	add	r3, r2
 800abc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800abcc:	4a1d      	ldr	r2, [pc, #116]	; (800ac44 <prvHeapInit+0xb0>)
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800abd2:	4b1c      	ldr	r3, [pc, #112]	; (800ac44 <prvHeapInit+0xb0>)
 800abd4:	2200      	movs	r2, #0
 800abd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	68ba      	ldr	r2, [r7, #8]
 800abdc:	4413      	add	r3, r2
 800abde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800abe0:	2208      	movs	r2, #8
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	1a9b      	subs	r3, r3, r2
 800abe6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	f023 0307 	bic.w	r3, r3, #7
 800abee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	4a15      	ldr	r2, [pc, #84]	; (800ac48 <prvHeapInit+0xb4>)
 800abf4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800abf6:	4b14      	ldr	r3, [pc, #80]	; (800ac48 <prvHeapInit+0xb4>)
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	2200      	movs	r2, #0
 800abfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800abfe:	4b12      	ldr	r3, [pc, #72]	; (800ac48 <prvHeapInit+0xb4>)
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	2200      	movs	r2, #0
 800ac04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	68fa      	ldr	r2, [r7, #12]
 800ac0e:	1ad2      	subs	r2, r2, r3
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ac14:	4b0c      	ldr	r3, [pc, #48]	; (800ac48 <prvHeapInit+0xb4>)
 800ac16:	681a      	ldr	r2, [r3, #0]
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	685b      	ldr	r3, [r3, #4]
 800ac20:	4a0a      	ldr	r2, [pc, #40]	; (800ac4c <prvHeapInit+0xb8>)
 800ac22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	685b      	ldr	r3, [r3, #4]
 800ac28:	4a09      	ldr	r2, [pc, #36]	; (800ac50 <prvHeapInit+0xbc>)
 800ac2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ac2c:	4b09      	ldr	r3, [pc, #36]	; (800ac54 <prvHeapInit+0xc0>)
 800ac2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ac32:	601a      	str	r2, [r3, #0]
}
 800ac34:	bf00      	nop
 800ac36:	3714      	adds	r7, #20
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3e:	4770      	bx	lr
 800ac40:	20000928 	.word	0x20000928
 800ac44:	20004528 	.word	0x20004528
 800ac48:	20004530 	.word	0x20004530
 800ac4c:	20004538 	.word	0x20004538
 800ac50:	20004534 	.word	0x20004534
 800ac54:	20004544 	.word	0x20004544

0800ac58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ac58:	b480      	push	{r7}
 800ac5a:	b085      	sub	sp, #20
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ac60:	4b28      	ldr	r3, [pc, #160]	; (800ad04 <prvInsertBlockIntoFreeList+0xac>)
 800ac62:	60fb      	str	r3, [r7, #12]
 800ac64:	e002      	b.n	800ac6c <prvInsertBlockIntoFreeList+0x14>
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	60fb      	str	r3, [r7, #12]
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	687a      	ldr	r2, [r7, #4]
 800ac72:	429a      	cmp	r2, r3
 800ac74:	d8f7      	bhi.n	800ac66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	685b      	ldr	r3, [r3, #4]
 800ac7e:	68ba      	ldr	r2, [r7, #8]
 800ac80:	4413      	add	r3, r2
 800ac82:	687a      	ldr	r2, [r7, #4]
 800ac84:	429a      	cmp	r2, r3
 800ac86:	d108      	bne.n	800ac9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	685a      	ldr	r2, [r3, #4]
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	685b      	ldr	r3, [r3, #4]
 800ac90:	441a      	add	r2, r3
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	685b      	ldr	r3, [r3, #4]
 800aca2:	68ba      	ldr	r2, [r7, #8]
 800aca4:	441a      	add	r2, r3
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	429a      	cmp	r2, r3
 800acac:	d118      	bne.n	800ace0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	681a      	ldr	r2, [r3, #0]
 800acb2:	4b15      	ldr	r3, [pc, #84]	; (800ad08 <prvInsertBlockIntoFreeList+0xb0>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	429a      	cmp	r2, r3
 800acb8:	d00d      	beq.n	800acd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	685a      	ldr	r2, [r3, #4]
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	685b      	ldr	r3, [r3, #4]
 800acc4:	441a      	add	r2, r3
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	681a      	ldr	r2, [r3, #0]
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	601a      	str	r2, [r3, #0]
 800acd4:	e008      	b.n	800ace8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800acd6:	4b0c      	ldr	r3, [pc, #48]	; (800ad08 <prvInsertBlockIntoFreeList+0xb0>)
 800acd8:	681a      	ldr	r2, [r3, #0]
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	601a      	str	r2, [r3, #0]
 800acde:	e003      	b.n	800ace8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	681a      	ldr	r2, [r3, #0]
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ace8:	68fa      	ldr	r2, [r7, #12]
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	429a      	cmp	r2, r3
 800acee:	d002      	beq.n	800acf6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	687a      	ldr	r2, [r7, #4]
 800acf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800acf6:	bf00      	nop
 800acf8:	3714      	adds	r7, #20
 800acfa:	46bd      	mov	sp, r7
 800acfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad00:	4770      	bx	lr
 800ad02:	bf00      	nop
 800ad04:	20004528 	.word	0x20004528
 800ad08:	20004530 	.word	0x20004530

0800ad0c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ad0c:	b480      	push	{r7}
 800ad0e:	b083      	sub	sp, #12
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	f103 0208 	add.w	r2, r3, #8
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	f04f 32ff 	mov.w	r2, #4294967295
 800ad24:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	f103 0208 	add.w	r2, r3, #8
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f103 0208 	add.w	r2, r3, #8
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ad40:	bf00      	nop
 800ad42:	370c      	adds	r7, #12
 800ad44:	46bd      	mov	sp, r7
 800ad46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4a:	4770      	bx	lr

0800ad4c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	b083      	sub	sp, #12
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2200      	movs	r2, #0
 800ad58:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ad5a:	bf00      	nop
 800ad5c:	370c      	adds	r7, #12
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad64:	4770      	bx	lr

0800ad66 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ad66:	b480      	push	{r7}
 800ad68:	b085      	sub	sp, #20
 800ad6a:	af00      	add	r7, sp, #0
 800ad6c:	6078      	str	r0, [r7, #4]
 800ad6e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	685b      	ldr	r3, [r3, #4]
 800ad74:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	68fa      	ldr	r2, [r7, #12]
 800ad7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	689a      	ldr	r2, [r3, #8]
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	689b      	ldr	r3, [r3, #8]
 800ad88:	683a      	ldr	r2, [r7, #0]
 800ad8a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	683a      	ldr	r2, [r7, #0]
 800ad90:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	687a      	ldr	r2, [r7, #4]
 800ad96:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	1c5a      	adds	r2, r3, #1
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	601a      	str	r2, [r3, #0]
}
 800ada2:	bf00      	nop
 800ada4:	3714      	adds	r7, #20
 800ada6:	46bd      	mov	sp, r7
 800ada8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adac:	4770      	bx	lr

0800adae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800adae:	b480      	push	{r7}
 800adb0:	b085      	sub	sp, #20
 800adb2:	af00      	add	r7, sp, #0
 800adb4:	6078      	str	r0, [r7, #4]
 800adb6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800adbe:	68bb      	ldr	r3, [r7, #8]
 800adc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adc4:	d103      	bne.n	800adce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	691b      	ldr	r3, [r3, #16]
 800adca:	60fb      	str	r3, [r7, #12]
 800adcc:	e00c      	b.n	800ade8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	3308      	adds	r3, #8
 800add2:	60fb      	str	r3, [r7, #12]
 800add4:	e002      	b.n	800addc <vListInsert+0x2e>
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	685b      	ldr	r3, [r3, #4]
 800adda:	60fb      	str	r3, [r7, #12]
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	685b      	ldr	r3, [r3, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	68ba      	ldr	r2, [r7, #8]
 800ade4:	429a      	cmp	r2, r3
 800ade6:	d2f6      	bcs.n	800add6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	685a      	ldr	r2, [r3, #4]
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	685b      	ldr	r3, [r3, #4]
 800adf4:	683a      	ldr	r2, [r7, #0]
 800adf6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	68fa      	ldr	r2, [r7, #12]
 800adfc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	683a      	ldr	r2, [r7, #0]
 800ae02:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	687a      	ldr	r2, [r7, #4]
 800ae08:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	1c5a      	adds	r2, r3, #1
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	601a      	str	r2, [r3, #0]
}
 800ae14:	bf00      	nop
 800ae16:	3714      	adds	r7, #20
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1e:	4770      	bx	lr

0800ae20 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ae20:	b480      	push	{r7}
 800ae22:	b085      	sub	sp, #20
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	691b      	ldr	r3, [r3, #16]
 800ae2c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	685b      	ldr	r3, [r3, #4]
 800ae32:	687a      	ldr	r2, [r7, #4]
 800ae34:	6892      	ldr	r2, [r2, #8]
 800ae36:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	689b      	ldr	r3, [r3, #8]
 800ae3c:	687a      	ldr	r2, [r7, #4]
 800ae3e:	6852      	ldr	r2, [r2, #4]
 800ae40:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	685b      	ldr	r3, [r3, #4]
 800ae46:	687a      	ldr	r2, [r7, #4]
 800ae48:	429a      	cmp	r2, r3
 800ae4a:	d103      	bne.n	800ae54 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	689a      	ldr	r2, [r3, #8]
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2200      	movs	r2, #0
 800ae58:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	1e5a      	subs	r2, r3, #1
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	681b      	ldr	r3, [r3, #0]
}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	3714      	adds	r7, #20
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae72:	4770      	bx	lr

0800ae74 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ae74:	b480      	push	{r7}
 800ae76:	b085      	sub	sp, #20
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	60f8      	str	r0, [r7, #12]
 800ae7c:	60b9      	str	r1, [r7, #8]
 800ae7e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	3b04      	subs	r3, #4
 800ae84:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ae8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	3b04      	subs	r3, #4
 800ae92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	f023 0201 	bic.w	r2, r3, #1
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	3b04      	subs	r3, #4
 800aea2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800aea4:	4a0c      	ldr	r2, [pc, #48]	; (800aed8 <pxPortInitialiseStack+0x64>)
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	3b14      	subs	r3, #20
 800aeae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800aeb0:	687a      	ldr	r2, [r7, #4]
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	3b04      	subs	r3, #4
 800aeba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	f06f 0202 	mvn.w	r2, #2
 800aec2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	3b20      	subs	r3, #32
 800aec8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800aeca:	68fb      	ldr	r3, [r7, #12]
}
 800aecc:	4618      	mov	r0, r3
 800aece:	3714      	adds	r7, #20
 800aed0:	46bd      	mov	sp, r7
 800aed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed6:	4770      	bx	lr
 800aed8:	0800aedd 	.word	0x0800aedd

0800aedc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800aedc:	b480      	push	{r7}
 800aede:	b085      	sub	sp, #20
 800aee0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800aee2:	2300      	movs	r3, #0
 800aee4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800aee6:	4b12      	ldr	r3, [pc, #72]	; (800af30 <prvTaskExitError+0x54>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeee:	d00a      	beq.n	800af06 <prvTaskExitError+0x2a>
	__asm volatile
 800aef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aef4:	f383 8811 	msr	BASEPRI, r3
 800aef8:	f3bf 8f6f 	isb	sy
 800aefc:	f3bf 8f4f 	dsb	sy
 800af00:	60fb      	str	r3, [r7, #12]
}
 800af02:	bf00      	nop
 800af04:	e7fe      	b.n	800af04 <prvTaskExitError+0x28>
	__asm volatile
 800af06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af0a:	f383 8811 	msr	BASEPRI, r3
 800af0e:	f3bf 8f6f 	isb	sy
 800af12:	f3bf 8f4f 	dsb	sy
 800af16:	60bb      	str	r3, [r7, #8]
}
 800af18:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800af1a:	bf00      	nop
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d0fc      	beq.n	800af1c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800af22:	bf00      	nop
 800af24:	bf00      	nop
 800af26:	3714      	adds	r7, #20
 800af28:	46bd      	mov	sp, r7
 800af2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2e:	4770      	bx	lr
 800af30:	20000088 	.word	0x20000088
	...

0800af40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800af40:	4b07      	ldr	r3, [pc, #28]	; (800af60 <pxCurrentTCBConst2>)
 800af42:	6819      	ldr	r1, [r3, #0]
 800af44:	6808      	ldr	r0, [r1, #0]
 800af46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af4a:	f380 8809 	msr	PSP, r0
 800af4e:	f3bf 8f6f 	isb	sy
 800af52:	f04f 0000 	mov.w	r0, #0
 800af56:	f380 8811 	msr	BASEPRI, r0
 800af5a:	4770      	bx	lr
 800af5c:	f3af 8000 	nop.w

0800af60 <pxCurrentTCBConst2>:
 800af60:	20004550 	.word	0x20004550
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800af64:	bf00      	nop
 800af66:	bf00      	nop

0800af68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800af68:	4808      	ldr	r0, [pc, #32]	; (800af8c <prvPortStartFirstTask+0x24>)
 800af6a:	6800      	ldr	r0, [r0, #0]
 800af6c:	6800      	ldr	r0, [r0, #0]
 800af6e:	f380 8808 	msr	MSP, r0
 800af72:	f04f 0000 	mov.w	r0, #0
 800af76:	f380 8814 	msr	CONTROL, r0
 800af7a:	b662      	cpsie	i
 800af7c:	b661      	cpsie	f
 800af7e:	f3bf 8f4f 	dsb	sy
 800af82:	f3bf 8f6f 	isb	sy
 800af86:	df00      	svc	0
 800af88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800af8a:	bf00      	nop
 800af8c:	e000ed08 	.word	0xe000ed08

0800af90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b086      	sub	sp, #24
 800af94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800af96:	4b46      	ldr	r3, [pc, #280]	; (800b0b0 <xPortStartScheduler+0x120>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	4a46      	ldr	r2, [pc, #280]	; (800b0b4 <xPortStartScheduler+0x124>)
 800af9c:	4293      	cmp	r3, r2
 800af9e:	d10a      	bne.n	800afb6 <xPortStartScheduler+0x26>
	__asm volatile
 800afa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afa4:	f383 8811 	msr	BASEPRI, r3
 800afa8:	f3bf 8f6f 	isb	sy
 800afac:	f3bf 8f4f 	dsb	sy
 800afb0:	613b      	str	r3, [r7, #16]
}
 800afb2:	bf00      	nop
 800afb4:	e7fe      	b.n	800afb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800afb6:	4b3e      	ldr	r3, [pc, #248]	; (800b0b0 <xPortStartScheduler+0x120>)
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	4a3f      	ldr	r2, [pc, #252]	; (800b0b8 <xPortStartScheduler+0x128>)
 800afbc:	4293      	cmp	r3, r2
 800afbe:	d10a      	bne.n	800afd6 <xPortStartScheduler+0x46>
	__asm volatile
 800afc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afc4:	f383 8811 	msr	BASEPRI, r3
 800afc8:	f3bf 8f6f 	isb	sy
 800afcc:	f3bf 8f4f 	dsb	sy
 800afd0:	60fb      	str	r3, [r7, #12]
}
 800afd2:	bf00      	nop
 800afd4:	e7fe      	b.n	800afd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800afd6:	4b39      	ldr	r3, [pc, #228]	; (800b0bc <xPortStartScheduler+0x12c>)
 800afd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800afda:	697b      	ldr	r3, [r7, #20]
 800afdc:	781b      	ldrb	r3, [r3, #0]
 800afde:	b2db      	uxtb	r3, r3
 800afe0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800afe2:	697b      	ldr	r3, [r7, #20]
 800afe4:	22ff      	movs	r2, #255	; 0xff
 800afe6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800afe8:	697b      	ldr	r3, [r7, #20]
 800afea:	781b      	ldrb	r3, [r3, #0]
 800afec:	b2db      	uxtb	r3, r3
 800afee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800aff0:	78fb      	ldrb	r3, [r7, #3]
 800aff2:	b2db      	uxtb	r3, r3
 800aff4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800aff8:	b2da      	uxtb	r2, r3
 800affa:	4b31      	ldr	r3, [pc, #196]	; (800b0c0 <xPortStartScheduler+0x130>)
 800affc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800affe:	4b31      	ldr	r3, [pc, #196]	; (800b0c4 <xPortStartScheduler+0x134>)
 800b000:	2207      	movs	r2, #7
 800b002:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b004:	e009      	b.n	800b01a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b006:	4b2f      	ldr	r3, [pc, #188]	; (800b0c4 <xPortStartScheduler+0x134>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	3b01      	subs	r3, #1
 800b00c:	4a2d      	ldr	r2, [pc, #180]	; (800b0c4 <xPortStartScheduler+0x134>)
 800b00e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b010:	78fb      	ldrb	r3, [r7, #3]
 800b012:	b2db      	uxtb	r3, r3
 800b014:	005b      	lsls	r3, r3, #1
 800b016:	b2db      	uxtb	r3, r3
 800b018:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b01a:	78fb      	ldrb	r3, [r7, #3]
 800b01c:	b2db      	uxtb	r3, r3
 800b01e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b022:	2b80      	cmp	r3, #128	; 0x80
 800b024:	d0ef      	beq.n	800b006 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b026:	4b27      	ldr	r3, [pc, #156]	; (800b0c4 <xPortStartScheduler+0x134>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	f1c3 0307 	rsb	r3, r3, #7
 800b02e:	2b04      	cmp	r3, #4
 800b030:	d00a      	beq.n	800b048 <xPortStartScheduler+0xb8>
	__asm volatile
 800b032:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b036:	f383 8811 	msr	BASEPRI, r3
 800b03a:	f3bf 8f6f 	isb	sy
 800b03e:	f3bf 8f4f 	dsb	sy
 800b042:	60bb      	str	r3, [r7, #8]
}
 800b044:	bf00      	nop
 800b046:	e7fe      	b.n	800b046 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b048:	4b1e      	ldr	r3, [pc, #120]	; (800b0c4 <xPortStartScheduler+0x134>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	021b      	lsls	r3, r3, #8
 800b04e:	4a1d      	ldr	r2, [pc, #116]	; (800b0c4 <xPortStartScheduler+0x134>)
 800b050:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b052:	4b1c      	ldr	r3, [pc, #112]	; (800b0c4 <xPortStartScheduler+0x134>)
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b05a:	4a1a      	ldr	r2, [pc, #104]	; (800b0c4 <xPortStartScheduler+0x134>)
 800b05c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	b2da      	uxtb	r2, r3
 800b062:	697b      	ldr	r3, [r7, #20]
 800b064:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b066:	4b18      	ldr	r3, [pc, #96]	; (800b0c8 <xPortStartScheduler+0x138>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	4a17      	ldr	r2, [pc, #92]	; (800b0c8 <xPortStartScheduler+0x138>)
 800b06c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b070:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b072:	4b15      	ldr	r3, [pc, #84]	; (800b0c8 <xPortStartScheduler+0x138>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	4a14      	ldr	r2, [pc, #80]	; (800b0c8 <xPortStartScheduler+0x138>)
 800b078:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b07c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b07e:	f000 f8dd 	bl	800b23c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b082:	4b12      	ldr	r3, [pc, #72]	; (800b0cc <xPortStartScheduler+0x13c>)
 800b084:	2200      	movs	r2, #0
 800b086:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b088:	f000 f8fc 	bl	800b284 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b08c:	4b10      	ldr	r3, [pc, #64]	; (800b0d0 <xPortStartScheduler+0x140>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	4a0f      	ldr	r2, [pc, #60]	; (800b0d0 <xPortStartScheduler+0x140>)
 800b092:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b096:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b098:	f7ff ff66 	bl	800af68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b09c:	f001 f9b2 	bl	800c404 <vTaskSwitchContext>
	prvTaskExitError();
 800b0a0:	f7ff ff1c 	bl	800aedc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b0a4:	2300      	movs	r3, #0
}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	3718      	adds	r7, #24
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}
 800b0ae:	bf00      	nop
 800b0b0:	e000ed00 	.word	0xe000ed00
 800b0b4:	410fc271 	.word	0x410fc271
 800b0b8:	410fc270 	.word	0x410fc270
 800b0bc:	e000e400 	.word	0xe000e400
 800b0c0:	20004548 	.word	0x20004548
 800b0c4:	2000454c 	.word	0x2000454c
 800b0c8:	e000ed20 	.word	0xe000ed20
 800b0cc:	20000088 	.word	0x20000088
 800b0d0:	e000ef34 	.word	0xe000ef34

0800b0d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b083      	sub	sp, #12
 800b0d8:	af00      	add	r7, sp, #0
	__asm volatile
 800b0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0de:	f383 8811 	msr	BASEPRI, r3
 800b0e2:	f3bf 8f6f 	isb	sy
 800b0e6:	f3bf 8f4f 	dsb	sy
 800b0ea:	607b      	str	r3, [r7, #4]
}
 800b0ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b0ee:	4b0f      	ldr	r3, [pc, #60]	; (800b12c <vPortEnterCritical+0x58>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	3301      	adds	r3, #1
 800b0f4:	4a0d      	ldr	r2, [pc, #52]	; (800b12c <vPortEnterCritical+0x58>)
 800b0f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b0f8:	4b0c      	ldr	r3, [pc, #48]	; (800b12c <vPortEnterCritical+0x58>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	2b01      	cmp	r3, #1
 800b0fe:	d10f      	bne.n	800b120 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b100:	4b0b      	ldr	r3, [pc, #44]	; (800b130 <vPortEnterCritical+0x5c>)
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	b2db      	uxtb	r3, r3
 800b106:	2b00      	cmp	r3, #0
 800b108:	d00a      	beq.n	800b120 <vPortEnterCritical+0x4c>
	__asm volatile
 800b10a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b10e:	f383 8811 	msr	BASEPRI, r3
 800b112:	f3bf 8f6f 	isb	sy
 800b116:	f3bf 8f4f 	dsb	sy
 800b11a:	603b      	str	r3, [r7, #0]
}
 800b11c:	bf00      	nop
 800b11e:	e7fe      	b.n	800b11e <vPortEnterCritical+0x4a>
	}
}
 800b120:	bf00      	nop
 800b122:	370c      	adds	r7, #12
 800b124:	46bd      	mov	sp, r7
 800b126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12a:	4770      	bx	lr
 800b12c:	20000088 	.word	0x20000088
 800b130:	e000ed04 	.word	0xe000ed04

0800b134 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b134:	b480      	push	{r7}
 800b136:	b083      	sub	sp, #12
 800b138:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b13a:	4b12      	ldr	r3, [pc, #72]	; (800b184 <vPortExitCritical+0x50>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d10a      	bne.n	800b158 <vPortExitCritical+0x24>
	__asm volatile
 800b142:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b146:	f383 8811 	msr	BASEPRI, r3
 800b14a:	f3bf 8f6f 	isb	sy
 800b14e:	f3bf 8f4f 	dsb	sy
 800b152:	607b      	str	r3, [r7, #4]
}
 800b154:	bf00      	nop
 800b156:	e7fe      	b.n	800b156 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b158:	4b0a      	ldr	r3, [pc, #40]	; (800b184 <vPortExitCritical+0x50>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	3b01      	subs	r3, #1
 800b15e:	4a09      	ldr	r2, [pc, #36]	; (800b184 <vPortExitCritical+0x50>)
 800b160:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b162:	4b08      	ldr	r3, [pc, #32]	; (800b184 <vPortExitCritical+0x50>)
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d105      	bne.n	800b176 <vPortExitCritical+0x42>
 800b16a:	2300      	movs	r3, #0
 800b16c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	f383 8811 	msr	BASEPRI, r3
}
 800b174:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b176:	bf00      	nop
 800b178:	370c      	adds	r7, #12
 800b17a:	46bd      	mov	sp, r7
 800b17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b180:	4770      	bx	lr
 800b182:	bf00      	nop
 800b184:	20000088 	.word	0x20000088
	...

0800b190 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b190:	f3ef 8009 	mrs	r0, PSP
 800b194:	f3bf 8f6f 	isb	sy
 800b198:	4b15      	ldr	r3, [pc, #84]	; (800b1f0 <pxCurrentTCBConst>)
 800b19a:	681a      	ldr	r2, [r3, #0]
 800b19c:	f01e 0f10 	tst.w	lr, #16
 800b1a0:	bf08      	it	eq
 800b1a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b1a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1aa:	6010      	str	r0, [r2, #0]
 800b1ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b1b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b1b4:	f380 8811 	msr	BASEPRI, r0
 800b1b8:	f3bf 8f4f 	dsb	sy
 800b1bc:	f3bf 8f6f 	isb	sy
 800b1c0:	f001 f920 	bl	800c404 <vTaskSwitchContext>
 800b1c4:	f04f 0000 	mov.w	r0, #0
 800b1c8:	f380 8811 	msr	BASEPRI, r0
 800b1cc:	bc09      	pop	{r0, r3}
 800b1ce:	6819      	ldr	r1, [r3, #0]
 800b1d0:	6808      	ldr	r0, [r1, #0]
 800b1d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1d6:	f01e 0f10 	tst.w	lr, #16
 800b1da:	bf08      	it	eq
 800b1dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b1e0:	f380 8809 	msr	PSP, r0
 800b1e4:	f3bf 8f6f 	isb	sy
 800b1e8:	4770      	bx	lr
 800b1ea:	bf00      	nop
 800b1ec:	f3af 8000 	nop.w

0800b1f0 <pxCurrentTCBConst>:
 800b1f0:	20004550 	.word	0x20004550
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b1f4:	bf00      	nop
 800b1f6:	bf00      	nop

0800b1f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b082      	sub	sp, #8
 800b1fc:	af00      	add	r7, sp, #0
	__asm volatile
 800b1fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b202:	f383 8811 	msr	BASEPRI, r3
 800b206:	f3bf 8f6f 	isb	sy
 800b20a:	f3bf 8f4f 	dsb	sy
 800b20e:	607b      	str	r3, [r7, #4]
}
 800b210:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b212:	f001 f83f 	bl	800c294 <xTaskIncrementTick>
 800b216:	4603      	mov	r3, r0
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d003      	beq.n	800b224 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b21c:	4b06      	ldr	r3, [pc, #24]	; (800b238 <SysTick_Handler+0x40>)
 800b21e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b222:	601a      	str	r2, [r3, #0]
 800b224:	2300      	movs	r3, #0
 800b226:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	f383 8811 	msr	BASEPRI, r3
}
 800b22e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b230:	bf00      	nop
 800b232:	3708      	adds	r7, #8
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}
 800b238:	e000ed04 	.word	0xe000ed04

0800b23c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b23c:	b480      	push	{r7}
 800b23e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b240:	4b0b      	ldr	r3, [pc, #44]	; (800b270 <vPortSetupTimerInterrupt+0x34>)
 800b242:	2200      	movs	r2, #0
 800b244:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b246:	4b0b      	ldr	r3, [pc, #44]	; (800b274 <vPortSetupTimerInterrupt+0x38>)
 800b248:	2200      	movs	r2, #0
 800b24a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b24c:	4b0a      	ldr	r3, [pc, #40]	; (800b278 <vPortSetupTimerInterrupt+0x3c>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	4a0a      	ldr	r2, [pc, #40]	; (800b27c <vPortSetupTimerInterrupt+0x40>)
 800b252:	fba2 2303 	umull	r2, r3, r2, r3
 800b256:	099b      	lsrs	r3, r3, #6
 800b258:	4a09      	ldr	r2, [pc, #36]	; (800b280 <vPortSetupTimerInterrupt+0x44>)
 800b25a:	3b01      	subs	r3, #1
 800b25c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b25e:	4b04      	ldr	r3, [pc, #16]	; (800b270 <vPortSetupTimerInterrupt+0x34>)
 800b260:	2207      	movs	r2, #7
 800b262:	601a      	str	r2, [r3, #0]
}
 800b264:	bf00      	nop
 800b266:	46bd      	mov	sp, r7
 800b268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26c:	4770      	bx	lr
 800b26e:	bf00      	nop
 800b270:	e000e010 	.word	0xe000e010
 800b274:	e000e018 	.word	0xe000e018
 800b278:	20000000 	.word	0x20000000
 800b27c:	10624dd3 	.word	0x10624dd3
 800b280:	e000e014 	.word	0xe000e014

0800b284 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b284:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b294 <vPortEnableVFP+0x10>
 800b288:	6801      	ldr	r1, [r0, #0]
 800b28a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b28e:	6001      	str	r1, [r0, #0]
 800b290:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b292:	bf00      	nop
 800b294:	e000ed88 	.word	0xe000ed88

0800b298 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b298:	b480      	push	{r7}
 800b29a:	b085      	sub	sp, #20
 800b29c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b29e:	f3ef 8305 	mrs	r3, IPSR
 800b2a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	2b0f      	cmp	r3, #15
 800b2a8:	d914      	bls.n	800b2d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b2aa:	4a17      	ldr	r2, [pc, #92]	; (800b308 <vPortValidateInterruptPriority+0x70>)
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	4413      	add	r3, r2
 800b2b0:	781b      	ldrb	r3, [r3, #0]
 800b2b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b2b4:	4b15      	ldr	r3, [pc, #84]	; (800b30c <vPortValidateInterruptPriority+0x74>)
 800b2b6:	781b      	ldrb	r3, [r3, #0]
 800b2b8:	7afa      	ldrb	r2, [r7, #11]
 800b2ba:	429a      	cmp	r2, r3
 800b2bc:	d20a      	bcs.n	800b2d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b2be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2c2:	f383 8811 	msr	BASEPRI, r3
 800b2c6:	f3bf 8f6f 	isb	sy
 800b2ca:	f3bf 8f4f 	dsb	sy
 800b2ce:	607b      	str	r3, [r7, #4]
}
 800b2d0:	bf00      	nop
 800b2d2:	e7fe      	b.n	800b2d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b2d4:	4b0e      	ldr	r3, [pc, #56]	; (800b310 <vPortValidateInterruptPriority+0x78>)
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b2dc:	4b0d      	ldr	r3, [pc, #52]	; (800b314 <vPortValidateInterruptPriority+0x7c>)
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	429a      	cmp	r2, r3
 800b2e2:	d90a      	bls.n	800b2fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b2e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2e8:	f383 8811 	msr	BASEPRI, r3
 800b2ec:	f3bf 8f6f 	isb	sy
 800b2f0:	f3bf 8f4f 	dsb	sy
 800b2f4:	603b      	str	r3, [r7, #0]
}
 800b2f6:	bf00      	nop
 800b2f8:	e7fe      	b.n	800b2f8 <vPortValidateInterruptPriority+0x60>
	}
 800b2fa:	bf00      	nop
 800b2fc:	3714      	adds	r7, #20
 800b2fe:	46bd      	mov	sp, r7
 800b300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b304:	4770      	bx	lr
 800b306:	bf00      	nop
 800b308:	e000e3f0 	.word	0xe000e3f0
 800b30c:	20004548 	.word	0x20004548
 800b310:	e000ed0c 	.word	0xe000ed0c
 800b314:	2000454c 	.word	0x2000454c

0800b318 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b084      	sub	sp, #16
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
 800b320:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d10a      	bne.n	800b342 <xQueueGenericReset+0x2a>
	__asm volatile
 800b32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b330:	f383 8811 	msr	BASEPRI, r3
 800b334:	f3bf 8f6f 	isb	sy
 800b338:	f3bf 8f4f 	dsb	sy
 800b33c:	60bb      	str	r3, [r7, #8]
}
 800b33e:	bf00      	nop
 800b340:	e7fe      	b.n	800b340 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b342:	f7ff fec7 	bl	800b0d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	681a      	ldr	r2, [r3, #0]
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b34e:	68f9      	ldr	r1, [r7, #12]
 800b350:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b352:	fb01 f303 	mul.w	r3, r1, r3
 800b356:	441a      	add	r2, r3
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	2200      	movs	r2, #0
 800b360:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	681a      	ldr	r2, [r3, #0]
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	681a      	ldr	r2, [r3, #0]
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b372:	3b01      	subs	r3, #1
 800b374:	68f9      	ldr	r1, [r7, #12]
 800b376:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b378:	fb01 f303 	mul.w	r3, r1, r3
 800b37c:	441a      	add	r2, r3
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	22ff      	movs	r2, #255	; 0xff
 800b386:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	22ff      	movs	r2, #255	; 0xff
 800b38e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d114      	bne.n	800b3c2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	691b      	ldr	r3, [r3, #16]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d01a      	beq.n	800b3d6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	3310      	adds	r3, #16
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	f001 f8b3 	bl	800c510 <xTaskRemoveFromEventList>
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d012      	beq.n	800b3d6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b3b0:	4b0c      	ldr	r3, [pc, #48]	; (800b3e4 <xQueueGenericReset+0xcc>)
 800b3b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3b6:	601a      	str	r2, [r3, #0]
 800b3b8:	f3bf 8f4f 	dsb	sy
 800b3bc:	f3bf 8f6f 	isb	sy
 800b3c0:	e009      	b.n	800b3d6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	3310      	adds	r3, #16
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	f7ff fca0 	bl	800ad0c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	3324      	adds	r3, #36	; 0x24
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	f7ff fc9b 	bl	800ad0c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b3d6:	f7ff fead 	bl	800b134 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b3da:	2301      	movs	r3, #1
}
 800b3dc:	4618      	mov	r0, r3
 800b3de:	3710      	adds	r7, #16
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	bd80      	pop	{r7, pc}
 800b3e4:	e000ed04 	.word	0xe000ed04

0800b3e8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b08a      	sub	sp, #40	; 0x28
 800b3ec:	af02      	add	r7, sp, #8
 800b3ee:	60f8      	str	r0, [r7, #12]
 800b3f0:	60b9      	str	r1, [r7, #8]
 800b3f2:	4613      	mov	r3, r2
 800b3f4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d10a      	bne.n	800b412 <xQueueGenericCreate+0x2a>
	__asm volatile
 800b3fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b400:	f383 8811 	msr	BASEPRI, r3
 800b404:	f3bf 8f6f 	isb	sy
 800b408:	f3bf 8f4f 	dsb	sy
 800b40c:	613b      	str	r3, [r7, #16]
}
 800b40e:	bf00      	nop
 800b410:	e7fe      	b.n	800b410 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	68ba      	ldr	r2, [r7, #8]
 800b416:	fb02 f303 	mul.w	r3, r2, r3
 800b41a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b41c:	69fb      	ldr	r3, [r7, #28]
 800b41e:	3348      	adds	r3, #72	; 0x48
 800b420:	4618      	mov	r0, r3
 800b422:	f7ff fa89 	bl	800a938 <pvPortMalloc>
 800b426:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b428:	69bb      	ldr	r3, [r7, #24]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d011      	beq.n	800b452 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b42e:	69bb      	ldr	r3, [r7, #24]
 800b430:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b432:	697b      	ldr	r3, [r7, #20]
 800b434:	3348      	adds	r3, #72	; 0x48
 800b436:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b438:	69bb      	ldr	r3, [r7, #24]
 800b43a:	2200      	movs	r2, #0
 800b43c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b440:	79fa      	ldrb	r2, [r7, #7]
 800b442:	69bb      	ldr	r3, [r7, #24]
 800b444:	9300      	str	r3, [sp, #0]
 800b446:	4613      	mov	r3, r2
 800b448:	697a      	ldr	r2, [r7, #20]
 800b44a:	68b9      	ldr	r1, [r7, #8]
 800b44c:	68f8      	ldr	r0, [r7, #12]
 800b44e:	f000 f805 	bl	800b45c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b452:	69bb      	ldr	r3, [r7, #24]
	}
 800b454:	4618      	mov	r0, r3
 800b456:	3720      	adds	r7, #32
 800b458:	46bd      	mov	sp, r7
 800b45a:	bd80      	pop	{r7, pc}

0800b45c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b084      	sub	sp, #16
 800b460:	af00      	add	r7, sp, #0
 800b462:	60f8      	str	r0, [r7, #12]
 800b464:	60b9      	str	r1, [r7, #8]
 800b466:	607a      	str	r2, [r7, #4]
 800b468:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b46a:	68bb      	ldr	r3, [r7, #8]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d103      	bne.n	800b478 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b470:	69bb      	ldr	r3, [r7, #24]
 800b472:	69ba      	ldr	r2, [r7, #24]
 800b474:	601a      	str	r2, [r3, #0]
 800b476:	e002      	b.n	800b47e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b478:	69bb      	ldr	r3, [r7, #24]
 800b47a:	687a      	ldr	r2, [r7, #4]
 800b47c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b47e:	69bb      	ldr	r3, [r7, #24]
 800b480:	68fa      	ldr	r2, [r7, #12]
 800b482:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b484:	69bb      	ldr	r3, [r7, #24]
 800b486:	68ba      	ldr	r2, [r7, #8]
 800b488:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b48a:	2101      	movs	r1, #1
 800b48c:	69b8      	ldr	r0, [r7, #24]
 800b48e:	f7ff ff43 	bl	800b318 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b492:	bf00      	nop
 800b494:	3710      	adds	r7, #16
 800b496:	46bd      	mov	sp, r7
 800b498:	bd80      	pop	{r7, pc}
	...

0800b49c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b08e      	sub	sp, #56	; 0x38
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	60f8      	str	r0, [r7, #12]
 800b4a4:	60b9      	str	r1, [r7, #8]
 800b4a6:	607a      	str	r2, [r7, #4]
 800b4a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b4b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d10a      	bne.n	800b4ce <xQueueGenericSend+0x32>
	__asm volatile
 800b4b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4bc:	f383 8811 	msr	BASEPRI, r3
 800b4c0:	f3bf 8f6f 	isb	sy
 800b4c4:	f3bf 8f4f 	dsb	sy
 800b4c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b4ca:	bf00      	nop
 800b4cc:	e7fe      	b.n	800b4cc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b4ce:	68bb      	ldr	r3, [r7, #8]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d103      	bne.n	800b4dc <xQueueGenericSend+0x40>
 800b4d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d101      	bne.n	800b4e0 <xQueueGenericSend+0x44>
 800b4dc:	2301      	movs	r3, #1
 800b4de:	e000      	b.n	800b4e2 <xQueueGenericSend+0x46>
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d10a      	bne.n	800b4fc <xQueueGenericSend+0x60>
	__asm volatile
 800b4e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ea:	f383 8811 	msr	BASEPRI, r3
 800b4ee:	f3bf 8f6f 	isb	sy
 800b4f2:	f3bf 8f4f 	dsb	sy
 800b4f6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b4f8:	bf00      	nop
 800b4fa:	e7fe      	b.n	800b4fa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	2b02      	cmp	r3, #2
 800b500:	d103      	bne.n	800b50a <xQueueGenericSend+0x6e>
 800b502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b506:	2b01      	cmp	r3, #1
 800b508:	d101      	bne.n	800b50e <xQueueGenericSend+0x72>
 800b50a:	2301      	movs	r3, #1
 800b50c:	e000      	b.n	800b510 <xQueueGenericSend+0x74>
 800b50e:	2300      	movs	r3, #0
 800b510:	2b00      	cmp	r3, #0
 800b512:	d10a      	bne.n	800b52a <xQueueGenericSend+0x8e>
	__asm volatile
 800b514:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b518:	f383 8811 	msr	BASEPRI, r3
 800b51c:	f3bf 8f6f 	isb	sy
 800b520:	f3bf 8f4f 	dsb	sy
 800b524:	623b      	str	r3, [r7, #32]
}
 800b526:	bf00      	nop
 800b528:	e7fe      	b.n	800b528 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b52a:	f001 f9b1 	bl	800c890 <xTaskGetSchedulerState>
 800b52e:	4603      	mov	r3, r0
 800b530:	2b00      	cmp	r3, #0
 800b532:	d102      	bne.n	800b53a <xQueueGenericSend+0x9e>
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d101      	bne.n	800b53e <xQueueGenericSend+0xa2>
 800b53a:	2301      	movs	r3, #1
 800b53c:	e000      	b.n	800b540 <xQueueGenericSend+0xa4>
 800b53e:	2300      	movs	r3, #0
 800b540:	2b00      	cmp	r3, #0
 800b542:	d10a      	bne.n	800b55a <xQueueGenericSend+0xbe>
	__asm volatile
 800b544:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b548:	f383 8811 	msr	BASEPRI, r3
 800b54c:	f3bf 8f6f 	isb	sy
 800b550:	f3bf 8f4f 	dsb	sy
 800b554:	61fb      	str	r3, [r7, #28]
}
 800b556:	bf00      	nop
 800b558:	e7fe      	b.n	800b558 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b55a:	f7ff fdbb 	bl	800b0d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b560:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b566:	429a      	cmp	r2, r3
 800b568:	d302      	bcc.n	800b570 <xQueueGenericSend+0xd4>
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	2b02      	cmp	r3, #2
 800b56e:	d129      	bne.n	800b5c4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b570:	683a      	ldr	r2, [r7, #0]
 800b572:	68b9      	ldr	r1, [r7, #8]
 800b574:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b576:	f000 fa8b 	bl	800ba90 <prvCopyDataToQueue>
 800b57a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b57c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b57e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b580:	2b00      	cmp	r3, #0
 800b582:	d010      	beq.n	800b5a6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b586:	3324      	adds	r3, #36	; 0x24
 800b588:	4618      	mov	r0, r3
 800b58a:	f000 ffc1 	bl	800c510 <xTaskRemoveFromEventList>
 800b58e:	4603      	mov	r3, r0
 800b590:	2b00      	cmp	r3, #0
 800b592:	d013      	beq.n	800b5bc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b594:	4b3f      	ldr	r3, [pc, #252]	; (800b694 <xQueueGenericSend+0x1f8>)
 800b596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b59a:	601a      	str	r2, [r3, #0]
 800b59c:	f3bf 8f4f 	dsb	sy
 800b5a0:	f3bf 8f6f 	isb	sy
 800b5a4:	e00a      	b.n	800b5bc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b5a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d007      	beq.n	800b5bc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b5ac:	4b39      	ldr	r3, [pc, #228]	; (800b694 <xQueueGenericSend+0x1f8>)
 800b5ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5b2:	601a      	str	r2, [r3, #0]
 800b5b4:	f3bf 8f4f 	dsb	sy
 800b5b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b5bc:	f7ff fdba 	bl	800b134 <vPortExitCritical>
				return pdPASS;
 800b5c0:	2301      	movs	r3, #1
 800b5c2:	e063      	b.n	800b68c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d103      	bne.n	800b5d2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b5ca:	f7ff fdb3 	bl	800b134 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	e05c      	b.n	800b68c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b5d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d106      	bne.n	800b5e6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b5d8:	f107 0314 	add.w	r3, r7, #20
 800b5dc:	4618      	mov	r0, r3
 800b5de:	f000 fff9 	bl	800c5d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b5e6:	f7ff fda5 	bl	800b134 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b5ea:	f000 fda9 	bl	800c140 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b5ee:	f7ff fd71 	bl	800b0d4 <vPortEnterCritical>
 800b5f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b5f8:	b25b      	sxtb	r3, r3
 800b5fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5fe:	d103      	bne.n	800b608 <xQueueGenericSend+0x16c>
 800b600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b602:	2200      	movs	r2, #0
 800b604:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b60a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b60e:	b25b      	sxtb	r3, r3
 800b610:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b614:	d103      	bne.n	800b61e <xQueueGenericSend+0x182>
 800b616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b618:	2200      	movs	r2, #0
 800b61a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b61e:	f7ff fd89 	bl	800b134 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b622:	1d3a      	adds	r2, r7, #4
 800b624:	f107 0314 	add.w	r3, r7, #20
 800b628:	4611      	mov	r1, r2
 800b62a:	4618      	mov	r0, r3
 800b62c:	f000 ffe8 	bl	800c600 <xTaskCheckForTimeOut>
 800b630:	4603      	mov	r3, r0
 800b632:	2b00      	cmp	r3, #0
 800b634:	d124      	bne.n	800b680 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b636:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b638:	f000 fb22 	bl	800bc80 <prvIsQueueFull>
 800b63c:	4603      	mov	r3, r0
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d018      	beq.n	800b674 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b644:	3310      	adds	r3, #16
 800b646:	687a      	ldr	r2, [r7, #4]
 800b648:	4611      	mov	r1, r2
 800b64a:	4618      	mov	r0, r3
 800b64c:	f000 ff3c 	bl	800c4c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b650:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b652:	f000 faad 	bl	800bbb0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b656:	f000 fd81 	bl	800c15c <xTaskResumeAll>
 800b65a:	4603      	mov	r3, r0
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	f47f af7c 	bne.w	800b55a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b662:	4b0c      	ldr	r3, [pc, #48]	; (800b694 <xQueueGenericSend+0x1f8>)
 800b664:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b668:	601a      	str	r2, [r3, #0]
 800b66a:	f3bf 8f4f 	dsb	sy
 800b66e:	f3bf 8f6f 	isb	sy
 800b672:	e772      	b.n	800b55a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b674:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b676:	f000 fa9b 	bl	800bbb0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b67a:	f000 fd6f 	bl	800c15c <xTaskResumeAll>
 800b67e:	e76c      	b.n	800b55a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b680:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b682:	f000 fa95 	bl	800bbb0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b686:	f000 fd69 	bl	800c15c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b68a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b68c:	4618      	mov	r0, r3
 800b68e:	3738      	adds	r7, #56	; 0x38
 800b690:	46bd      	mov	sp, r7
 800b692:	bd80      	pop	{r7, pc}
 800b694:	e000ed04 	.word	0xe000ed04

0800b698 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b090      	sub	sp, #64	; 0x40
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	60f8      	str	r0, [r7, #12]
 800b6a0:	60b9      	str	r1, [r7, #8]
 800b6a2:	607a      	str	r2, [r7, #4]
 800b6a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b6aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d10a      	bne.n	800b6c6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b6b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6b4:	f383 8811 	msr	BASEPRI, r3
 800b6b8:	f3bf 8f6f 	isb	sy
 800b6bc:	f3bf 8f4f 	dsb	sy
 800b6c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b6c2:	bf00      	nop
 800b6c4:	e7fe      	b.n	800b6c4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b6c6:	68bb      	ldr	r3, [r7, #8]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d103      	bne.n	800b6d4 <xQueueGenericSendFromISR+0x3c>
 800b6cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d101      	bne.n	800b6d8 <xQueueGenericSendFromISR+0x40>
 800b6d4:	2301      	movs	r3, #1
 800b6d6:	e000      	b.n	800b6da <xQueueGenericSendFromISR+0x42>
 800b6d8:	2300      	movs	r3, #0
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d10a      	bne.n	800b6f4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b6de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6e2:	f383 8811 	msr	BASEPRI, r3
 800b6e6:	f3bf 8f6f 	isb	sy
 800b6ea:	f3bf 8f4f 	dsb	sy
 800b6ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b6f0:	bf00      	nop
 800b6f2:	e7fe      	b.n	800b6f2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	2b02      	cmp	r3, #2
 800b6f8:	d103      	bne.n	800b702 <xQueueGenericSendFromISR+0x6a>
 800b6fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6fe:	2b01      	cmp	r3, #1
 800b700:	d101      	bne.n	800b706 <xQueueGenericSendFromISR+0x6e>
 800b702:	2301      	movs	r3, #1
 800b704:	e000      	b.n	800b708 <xQueueGenericSendFromISR+0x70>
 800b706:	2300      	movs	r3, #0
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d10a      	bne.n	800b722 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b70c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b710:	f383 8811 	msr	BASEPRI, r3
 800b714:	f3bf 8f6f 	isb	sy
 800b718:	f3bf 8f4f 	dsb	sy
 800b71c:	623b      	str	r3, [r7, #32]
}
 800b71e:	bf00      	nop
 800b720:	e7fe      	b.n	800b720 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b722:	f7ff fdb9 	bl	800b298 <vPortValidateInterruptPriority>
	__asm volatile
 800b726:	f3ef 8211 	mrs	r2, BASEPRI
 800b72a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b72e:	f383 8811 	msr	BASEPRI, r3
 800b732:	f3bf 8f6f 	isb	sy
 800b736:	f3bf 8f4f 	dsb	sy
 800b73a:	61fa      	str	r2, [r7, #28]
 800b73c:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800b73e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b740:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b744:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b74a:	429a      	cmp	r2, r3
 800b74c:	d302      	bcc.n	800b754 <xQueueGenericSendFromISR+0xbc>
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	2b02      	cmp	r3, #2
 800b752:	d12f      	bne.n	800b7b4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b756:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b75a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b75e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b762:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b764:	683a      	ldr	r2, [r7, #0]
 800b766:	68b9      	ldr	r1, [r7, #8]
 800b768:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b76a:	f000 f991 	bl	800ba90 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b76e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b772:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b776:	d112      	bne.n	800b79e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b77a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d016      	beq.n	800b7ae <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b782:	3324      	adds	r3, #36	; 0x24
 800b784:	4618      	mov	r0, r3
 800b786:	f000 fec3 	bl	800c510 <xTaskRemoveFromEventList>
 800b78a:	4603      	mov	r3, r0
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d00e      	beq.n	800b7ae <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d00b      	beq.n	800b7ae <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	2201      	movs	r2, #1
 800b79a:	601a      	str	r2, [r3, #0]
 800b79c:	e007      	b.n	800b7ae <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b79e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b7a2:	3301      	adds	r3, #1
 800b7a4:	b2db      	uxtb	r3, r3
 800b7a6:	b25a      	sxtb	r2, r3
 800b7a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b7ae:	2301      	movs	r3, #1
 800b7b0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b7b2:	e001      	b.n	800b7b8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b7b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7ba:	617b      	str	r3, [r7, #20]
	__asm volatile
 800b7bc:	697b      	ldr	r3, [r7, #20]
 800b7be:	f383 8811 	msr	BASEPRI, r3
}
 800b7c2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b7c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	3740      	adds	r7, #64	; 0x40
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	bd80      	pop	{r7, pc}
	...

0800b7d0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b08c      	sub	sp, #48	; 0x30
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	60f8      	str	r0, [r7, #12]
 800b7d8:	60b9      	str	r1, [r7, #8]
 800b7da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b7dc:	2300      	movs	r3, #0
 800b7de:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b7e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d10a      	bne.n	800b800 <xQueueReceive+0x30>
	__asm volatile
 800b7ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ee:	f383 8811 	msr	BASEPRI, r3
 800b7f2:	f3bf 8f6f 	isb	sy
 800b7f6:	f3bf 8f4f 	dsb	sy
 800b7fa:	623b      	str	r3, [r7, #32]
}
 800b7fc:	bf00      	nop
 800b7fe:	e7fe      	b.n	800b7fe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d103      	bne.n	800b80e <xQueueReceive+0x3e>
 800b806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d101      	bne.n	800b812 <xQueueReceive+0x42>
 800b80e:	2301      	movs	r3, #1
 800b810:	e000      	b.n	800b814 <xQueueReceive+0x44>
 800b812:	2300      	movs	r3, #0
 800b814:	2b00      	cmp	r3, #0
 800b816:	d10a      	bne.n	800b82e <xQueueReceive+0x5e>
	__asm volatile
 800b818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b81c:	f383 8811 	msr	BASEPRI, r3
 800b820:	f3bf 8f6f 	isb	sy
 800b824:	f3bf 8f4f 	dsb	sy
 800b828:	61fb      	str	r3, [r7, #28]
}
 800b82a:	bf00      	nop
 800b82c:	e7fe      	b.n	800b82c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b82e:	f001 f82f 	bl	800c890 <xTaskGetSchedulerState>
 800b832:	4603      	mov	r3, r0
 800b834:	2b00      	cmp	r3, #0
 800b836:	d102      	bne.n	800b83e <xQueueReceive+0x6e>
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d101      	bne.n	800b842 <xQueueReceive+0x72>
 800b83e:	2301      	movs	r3, #1
 800b840:	e000      	b.n	800b844 <xQueueReceive+0x74>
 800b842:	2300      	movs	r3, #0
 800b844:	2b00      	cmp	r3, #0
 800b846:	d10a      	bne.n	800b85e <xQueueReceive+0x8e>
	__asm volatile
 800b848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b84c:	f383 8811 	msr	BASEPRI, r3
 800b850:	f3bf 8f6f 	isb	sy
 800b854:	f3bf 8f4f 	dsb	sy
 800b858:	61bb      	str	r3, [r7, #24]
}
 800b85a:	bf00      	nop
 800b85c:	e7fe      	b.n	800b85c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b85e:	f7ff fc39 	bl	800b0d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b866:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d01f      	beq.n	800b8ae <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b86e:	68b9      	ldr	r1, [r7, #8]
 800b870:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b872:	f000 f977 	bl	800bb64 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b878:	1e5a      	subs	r2, r3, #1
 800b87a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b87c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b87e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b880:	691b      	ldr	r3, [r3, #16]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d00f      	beq.n	800b8a6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b888:	3310      	adds	r3, #16
 800b88a:	4618      	mov	r0, r3
 800b88c:	f000 fe40 	bl	800c510 <xTaskRemoveFromEventList>
 800b890:	4603      	mov	r3, r0
 800b892:	2b00      	cmp	r3, #0
 800b894:	d007      	beq.n	800b8a6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b896:	4b3d      	ldr	r3, [pc, #244]	; (800b98c <xQueueReceive+0x1bc>)
 800b898:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b89c:	601a      	str	r2, [r3, #0]
 800b89e:	f3bf 8f4f 	dsb	sy
 800b8a2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b8a6:	f7ff fc45 	bl	800b134 <vPortExitCritical>
				return pdPASS;
 800b8aa:	2301      	movs	r3, #1
 800b8ac:	e069      	b.n	800b982 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d103      	bne.n	800b8bc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b8b4:	f7ff fc3e 	bl	800b134 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	e062      	b.n	800b982 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b8bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d106      	bne.n	800b8d0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b8c2:	f107 0310 	add.w	r3, r7, #16
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	f000 fe84 	bl	800c5d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b8cc:	2301      	movs	r3, #1
 800b8ce:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b8d0:	f7ff fc30 	bl	800b134 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b8d4:	f000 fc34 	bl	800c140 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b8d8:	f7ff fbfc 	bl	800b0d4 <vPortEnterCritical>
 800b8dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b8e2:	b25b      	sxtb	r3, r3
 800b8e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8e8:	d103      	bne.n	800b8f2 <xQueueReceive+0x122>
 800b8ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b8f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b8f8:	b25b      	sxtb	r3, r3
 800b8fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8fe:	d103      	bne.n	800b908 <xQueueReceive+0x138>
 800b900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b902:	2200      	movs	r2, #0
 800b904:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b908:	f7ff fc14 	bl	800b134 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b90c:	1d3a      	adds	r2, r7, #4
 800b90e:	f107 0310 	add.w	r3, r7, #16
 800b912:	4611      	mov	r1, r2
 800b914:	4618      	mov	r0, r3
 800b916:	f000 fe73 	bl	800c600 <xTaskCheckForTimeOut>
 800b91a:	4603      	mov	r3, r0
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d123      	bne.n	800b968 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b920:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b922:	f000 f997 	bl	800bc54 <prvIsQueueEmpty>
 800b926:	4603      	mov	r3, r0
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d017      	beq.n	800b95c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b92c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b92e:	3324      	adds	r3, #36	; 0x24
 800b930:	687a      	ldr	r2, [r7, #4]
 800b932:	4611      	mov	r1, r2
 800b934:	4618      	mov	r0, r3
 800b936:	f000 fdc7 	bl	800c4c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b93a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b93c:	f000 f938 	bl	800bbb0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b940:	f000 fc0c 	bl	800c15c <xTaskResumeAll>
 800b944:	4603      	mov	r3, r0
 800b946:	2b00      	cmp	r3, #0
 800b948:	d189      	bne.n	800b85e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b94a:	4b10      	ldr	r3, [pc, #64]	; (800b98c <xQueueReceive+0x1bc>)
 800b94c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b950:	601a      	str	r2, [r3, #0]
 800b952:	f3bf 8f4f 	dsb	sy
 800b956:	f3bf 8f6f 	isb	sy
 800b95a:	e780      	b.n	800b85e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b95c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b95e:	f000 f927 	bl	800bbb0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b962:	f000 fbfb 	bl	800c15c <xTaskResumeAll>
 800b966:	e77a      	b.n	800b85e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b968:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b96a:	f000 f921 	bl	800bbb0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b96e:	f000 fbf5 	bl	800c15c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b972:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b974:	f000 f96e 	bl	800bc54 <prvIsQueueEmpty>
 800b978:	4603      	mov	r3, r0
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	f43f af6f 	beq.w	800b85e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b980:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b982:	4618      	mov	r0, r3
 800b984:	3730      	adds	r7, #48	; 0x30
 800b986:	46bd      	mov	sp, r7
 800b988:	bd80      	pop	{r7, pc}
 800b98a:	bf00      	nop
 800b98c:	e000ed04 	.word	0xe000ed04

0800b990 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b08e      	sub	sp, #56	; 0x38
 800b994:	af00      	add	r7, sp, #0
 800b996:	60f8      	str	r0, [r7, #12]
 800b998:	60b9      	str	r1, [r7, #8]
 800b99a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d10a      	bne.n	800b9bc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800b9a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9aa:	f383 8811 	msr	BASEPRI, r3
 800b9ae:	f3bf 8f6f 	isb	sy
 800b9b2:	f3bf 8f4f 	dsb	sy
 800b9b6:	623b      	str	r3, [r7, #32]
}
 800b9b8:	bf00      	nop
 800b9ba:	e7fe      	b.n	800b9ba <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d103      	bne.n	800b9ca <xQueueReceiveFromISR+0x3a>
 800b9c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d101      	bne.n	800b9ce <xQueueReceiveFromISR+0x3e>
 800b9ca:	2301      	movs	r3, #1
 800b9cc:	e000      	b.n	800b9d0 <xQueueReceiveFromISR+0x40>
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d10a      	bne.n	800b9ea <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800b9d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9d8:	f383 8811 	msr	BASEPRI, r3
 800b9dc:	f3bf 8f6f 	isb	sy
 800b9e0:	f3bf 8f4f 	dsb	sy
 800b9e4:	61fb      	str	r3, [r7, #28]
}
 800b9e6:	bf00      	nop
 800b9e8:	e7fe      	b.n	800b9e8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b9ea:	f7ff fc55 	bl	800b298 <vPortValidateInterruptPriority>
	__asm volatile
 800b9ee:	f3ef 8211 	mrs	r2, BASEPRI
 800b9f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9f6:	f383 8811 	msr	BASEPRI, r3
 800b9fa:	f3bf 8f6f 	isb	sy
 800b9fe:	f3bf 8f4f 	dsb	sy
 800ba02:	61ba      	str	r2, [r7, #24]
 800ba04:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ba06:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ba08:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ba0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba0e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ba10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d02f      	beq.n	800ba76 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ba16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ba1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ba20:	68b9      	ldr	r1, [r7, #8]
 800ba22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba24:	f000 f89e 	bl	800bb64 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ba28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba2a:	1e5a      	subs	r2, r3, #1
 800ba2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba2e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ba30:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ba34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba38:	d112      	bne.n	800ba60 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ba3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba3c:	691b      	ldr	r3, [r3, #16]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d016      	beq.n	800ba70 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ba42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba44:	3310      	adds	r3, #16
 800ba46:	4618      	mov	r0, r3
 800ba48:	f000 fd62 	bl	800c510 <xTaskRemoveFromEventList>
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d00e      	beq.n	800ba70 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d00b      	beq.n	800ba70 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2201      	movs	r2, #1
 800ba5c:	601a      	str	r2, [r3, #0]
 800ba5e:	e007      	b.n	800ba70 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ba60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba64:	3301      	adds	r3, #1
 800ba66:	b2db      	uxtb	r3, r3
 800ba68:	b25a      	sxtb	r2, r3
 800ba6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ba70:	2301      	movs	r3, #1
 800ba72:	637b      	str	r3, [r7, #52]	; 0x34
 800ba74:	e001      	b.n	800ba7a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800ba76:	2300      	movs	r3, #0
 800ba78:	637b      	str	r3, [r7, #52]	; 0x34
 800ba7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba7c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ba7e:	693b      	ldr	r3, [r7, #16]
 800ba80:	f383 8811 	msr	BASEPRI, r3
}
 800ba84:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ba86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	3738      	adds	r7, #56	; 0x38
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}

0800ba90 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b086      	sub	sp, #24
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	60f8      	str	r0, [r7, #12]
 800ba98:	60b9      	str	r1, [r7, #8]
 800ba9a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baa4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d10d      	bne.n	800baca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d14d      	bne.n	800bb52 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	689b      	ldr	r3, [r3, #8]
 800baba:	4618      	mov	r0, r3
 800babc:	f000 ff06 	bl	800c8cc <xTaskPriorityDisinherit>
 800bac0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	2200      	movs	r2, #0
 800bac6:	609a      	str	r2, [r3, #8]
 800bac8:	e043      	b.n	800bb52 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d119      	bne.n	800bb04 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	6858      	ldr	r0, [r3, #4]
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bad8:	461a      	mov	r2, r3
 800bada:	68b9      	ldr	r1, [r7, #8]
 800badc:	f003 ffeb 	bl	800fab6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	685a      	ldr	r2, [r3, #4]
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bae8:	441a      	add	r2, r3
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	685a      	ldr	r2, [r3, #4]
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	689b      	ldr	r3, [r3, #8]
 800baf6:	429a      	cmp	r2, r3
 800baf8:	d32b      	bcc.n	800bb52 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	681a      	ldr	r2, [r3, #0]
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	605a      	str	r2, [r3, #4]
 800bb02:	e026      	b.n	800bb52 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	68d8      	ldr	r0, [r3, #12]
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb0c:	461a      	mov	r2, r3
 800bb0e:	68b9      	ldr	r1, [r7, #8]
 800bb10:	f003 ffd1 	bl	800fab6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	68da      	ldr	r2, [r3, #12]
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb1c:	425b      	negs	r3, r3
 800bb1e:	441a      	add	r2, r3
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	68da      	ldr	r2, [r3, #12]
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	429a      	cmp	r2, r3
 800bb2e:	d207      	bcs.n	800bb40 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	689a      	ldr	r2, [r3, #8]
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb38:	425b      	negs	r3, r3
 800bb3a:	441a      	add	r2, r3
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2b02      	cmp	r3, #2
 800bb44:	d105      	bne.n	800bb52 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bb46:	693b      	ldr	r3, [r7, #16]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d002      	beq.n	800bb52 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bb4c:	693b      	ldr	r3, [r7, #16]
 800bb4e:	3b01      	subs	r3, #1
 800bb50:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bb52:	693b      	ldr	r3, [r7, #16]
 800bb54:	1c5a      	adds	r2, r3, #1
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bb5a:	697b      	ldr	r3, [r7, #20]
}
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	3718      	adds	r7, #24
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}

0800bb64 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b082      	sub	sp, #8
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
 800bb6c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d018      	beq.n	800bba8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	68da      	ldr	r2, [r3, #12]
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb7e:	441a      	add	r2, r3
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	68da      	ldr	r2, [r3, #12]
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	689b      	ldr	r3, [r3, #8]
 800bb8c:	429a      	cmp	r2, r3
 800bb8e:	d303      	bcc.n	800bb98 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681a      	ldr	r2, [r3, #0]
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	68d9      	ldr	r1, [r3, #12]
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bba0:	461a      	mov	r2, r3
 800bba2:	6838      	ldr	r0, [r7, #0]
 800bba4:	f003 ff87 	bl	800fab6 <memcpy>
	}
}
 800bba8:	bf00      	nop
 800bbaa:	3708      	adds	r7, #8
 800bbac:	46bd      	mov	sp, r7
 800bbae:	bd80      	pop	{r7, pc}

0800bbb0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b084      	sub	sp, #16
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bbb8:	f7ff fa8c 	bl	800b0d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bbc2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bbc4:	e011      	b.n	800bbea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d012      	beq.n	800bbf4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	3324      	adds	r3, #36	; 0x24
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	f000 fc9c 	bl	800c510 <xTaskRemoveFromEventList>
 800bbd8:	4603      	mov	r3, r0
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d001      	beq.n	800bbe2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800bbde:	f000 fd71 	bl	800c6c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800bbe2:	7bfb      	ldrb	r3, [r7, #15]
 800bbe4:	3b01      	subs	r3, #1
 800bbe6:	b2db      	uxtb	r3, r3
 800bbe8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bbea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	dce9      	bgt.n	800bbc6 <prvUnlockQueue+0x16>
 800bbf2:	e000      	b.n	800bbf6 <prvUnlockQueue+0x46>
					break;
 800bbf4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	22ff      	movs	r2, #255	; 0xff
 800bbfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800bbfe:	f7ff fa99 	bl	800b134 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800bc02:	f7ff fa67 	bl	800b0d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bc0c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bc0e:	e011      	b.n	800bc34 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	691b      	ldr	r3, [r3, #16]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d012      	beq.n	800bc3e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	3310      	adds	r3, #16
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	f000 fc77 	bl	800c510 <xTaskRemoveFromEventList>
 800bc22:	4603      	mov	r3, r0
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d001      	beq.n	800bc2c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800bc28:	f000 fd4c 	bl	800c6c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800bc2c:	7bbb      	ldrb	r3, [r7, #14]
 800bc2e:	3b01      	subs	r3, #1
 800bc30:	b2db      	uxtb	r3, r3
 800bc32:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bc34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	dce9      	bgt.n	800bc10 <prvUnlockQueue+0x60>
 800bc3c:	e000      	b.n	800bc40 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bc3e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	22ff      	movs	r2, #255	; 0xff
 800bc44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bc48:	f7ff fa74 	bl	800b134 <vPortExitCritical>
}
 800bc4c:	bf00      	nop
 800bc4e:	3710      	adds	r7, #16
 800bc50:	46bd      	mov	sp, r7
 800bc52:	bd80      	pop	{r7, pc}

0800bc54 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b084      	sub	sp, #16
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bc5c:	f7ff fa3a 	bl	800b0d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d102      	bne.n	800bc6e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bc68:	2301      	movs	r3, #1
 800bc6a:	60fb      	str	r3, [r7, #12]
 800bc6c:	e001      	b.n	800bc72 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bc6e:	2300      	movs	r3, #0
 800bc70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bc72:	f7ff fa5f 	bl	800b134 <vPortExitCritical>

	return xReturn;
 800bc76:	68fb      	ldr	r3, [r7, #12]
}
 800bc78:	4618      	mov	r0, r3
 800bc7a:	3710      	adds	r7, #16
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	bd80      	pop	{r7, pc}

0800bc80 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b084      	sub	sp, #16
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bc88:	f7ff fa24 	bl	800b0d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc94:	429a      	cmp	r2, r3
 800bc96:	d102      	bne.n	800bc9e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bc98:	2301      	movs	r3, #1
 800bc9a:	60fb      	str	r3, [r7, #12]
 800bc9c:	e001      	b.n	800bca2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bc9e:	2300      	movs	r3, #0
 800bca0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bca2:	f7ff fa47 	bl	800b134 <vPortExitCritical>

	return xReturn;
 800bca6:	68fb      	ldr	r3, [r7, #12]
}
 800bca8:	4618      	mov	r0, r3
 800bcaa:	3710      	adds	r7, #16
 800bcac:	46bd      	mov	sp, r7
 800bcae:	bd80      	pop	{r7, pc}

0800bcb0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b08e      	sub	sp, #56	; 0x38
 800bcb4:	af04      	add	r7, sp, #16
 800bcb6:	60f8      	str	r0, [r7, #12]
 800bcb8:	60b9      	str	r1, [r7, #8]
 800bcba:	607a      	str	r2, [r7, #4]
 800bcbc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bcbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d10a      	bne.n	800bcda <xTaskCreateStatic+0x2a>
	__asm volatile
 800bcc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcc8:	f383 8811 	msr	BASEPRI, r3
 800bccc:	f3bf 8f6f 	isb	sy
 800bcd0:	f3bf 8f4f 	dsb	sy
 800bcd4:	623b      	str	r3, [r7, #32]
}
 800bcd6:	bf00      	nop
 800bcd8:	e7fe      	b.n	800bcd8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800bcda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d10a      	bne.n	800bcf6 <xTaskCreateStatic+0x46>
	__asm volatile
 800bce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bce4:	f383 8811 	msr	BASEPRI, r3
 800bce8:	f3bf 8f6f 	isb	sy
 800bcec:	f3bf 8f4f 	dsb	sy
 800bcf0:	61fb      	str	r3, [r7, #28]
}
 800bcf2:	bf00      	nop
 800bcf4:	e7fe      	b.n	800bcf4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bcf6:	23b4      	movs	r3, #180	; 0xb4
 800bcf8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bcfa:	693b      	ldr	r3, [r7, #16]
 800bcfc:	2bb4      	cmp	r3, #180	; 0xb4
 800bcfe:	d00a      	beq.n	800bd16 <xTaskCreateStatic+0x66>
	__asm volatile
 800bd00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd04:	f383 8811 	msr	BASEPRI, r3
 800bd08:	f3bf 8f6f 	isb	sy
 800bd0c:	f3bf 8f4f 	dsb	sy
 800bd10:	61bb      	str	r3, [r7, #24]
}
 800bd12:	bf00      	nop
 800bd14:	e7fe      	b.n	800bd14 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bd16:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bd18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d01e      	beq.n	800bd5c <xTaskCreateStatic+0xac>
 800bd1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d01b      	beq.n	800bd5c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bd24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd26:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bd28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bd2c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bd2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd30:	2202      	movs	r2, #2
 800bd32:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bd36:	2300      	movs	r3, #0
 800bd38:	9303      	str	r3, [sp, #12]
 800bd3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd3c:	9302      	str	r3, [sp, #8]
 800bd3e:	f107 0314 	add.w	r3, r7, #20
 800bd42:	9301      	str	r3, [sp, #4]
 800bd44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd46:	9300      	str	r3, [sp, #0]
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	687a      	ldr	r2, [r7, #4]
 800bd4c:	68b9      	ldr	r1, [r7, #8]
 800bd4e:	68f8      	ldr	r0, [r7, #12]
 800bd50:	f000 f850 	bl	800bdf4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bd54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bd56:	f000 f8eb 	bl	800bf30 <prvAddNewTaskToReadyList>
 800bd5a:	e001      	b.n	800bd60 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800bd60:	697b      	ldr	r3, [r7, #20]
	}
 800bd62:	4618      	mov	r0, r3
 800bd64:	3728      	adds	r7, #40	; 0x28
 800bd66:	46bd      	mov	sp, r7
 800bd68:	bd80      	pop	{r7, pc}

0800bd6a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bd6a:	b580      	push	{r7, lr}
 800bd6c:	b08c      	sub	sp, #48	; 0x30
 800bd6e:	af04      	add	r7, sp, #16
 800bd70:	60f8      	str	r0, [r7, #12]
 800bd72:	60b9      	str	r1, [r7, #8]
 800bd74:	603b      	str	r3, [r7, #0]
 800bd76:	4613      	mov	r3, r2
 800bd78:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bd7a:	88fb      	ldrh	r3, [r7, #6]
 800bd7c:	009b      	lsls	r3, r3, #2
 800bd7e:	4618      	mov	r0, r3
 800bd80:	f7fe fdda 	bl	800a938 <pvPortMalloc>
 800bd84:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bd86:	697b      	ldr	r3, [r7, #20]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d00e      	beq.n	800bdaa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bd8c:	20b4      	movs	r0, #180	; 0xb4
 800bd8e:	f7fe fdd3 	bl	800a938 <pvPortMalloc>
 800bd92:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bd94:	69fb      	ldr	r3, [r7, #28]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d003      	beq.n	800bda2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bd9a:	69fb      	ldr	r3, [r7, #28]
 800bd9c:	697a      	ldr	r2, [r7, #20]
 800bd9e:	631a      	str	r2, [r3, #48]	; 0x30
 800bda0:	e005      	b.n	800bdae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bda2:	6978      	ldr	r0, [r7, #20]
 800bda4:	f7fe fe94 	bl	800aad0 <vPortFree>
 800bda8:	e001      	b.n	800bdae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bdaa:	2300      	movs	r3, #0
 800bdac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bdae:	69fb      	ldr	r3, [r7, #28]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d017      	beq.n	800bde4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bdb4:	69fb      	ldr	r3, [r7, #28]
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bdbc:	88fa      	ldrh	r2, [r7, #6]
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	9303      	str	r3, [sp, #12]
 800bdc2:	69fb      	ldr	r3, [r7, #28]
 800bdc4:	9302      	str	r3, [sp, #8]
 800bdc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdc8:	9301      	str	r3, [sp, #4]
 800bdca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdcc:	9300      	str	r3, [sp, #0]
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	68b9      	ldr	r1, [r7, #8]
 800bdd2:	68f8      	ldr	r0, [r7, #12]
 800bdd4:	f000 f80e 	bl	800bdf4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bdd8:	69f8      	ldr	r0, [r7, #28]
 800bdda:	f000 f8a9 	bl	800bf30 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bdde:	2301      	movs	r3, #1
 800bde0:	61bb      	str	r3, [r7, #24]
 800bde2:	e002      	b.n	800bdea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bde4:	f04f 33ff 	mov.w	r3, #4294967295
 800bde8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bdea:	69bb      	ldr	r3, [r7, #24]
	}
 800bdec:	4618      	mov	r0, r3
 800bdee:	3720      	adds	r7, #32
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	bd80      	pop	{r7, pc}

0800bdf4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b088      	sub	sp, #32
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	60f8      	str	r0, [r7, #12]
 800bdfc:	60b9      	str	r1, [r7, #8]
 800bdfe:	607a      	str	r2, [r7, #4]
 800be00:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800be02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800be0c:	3b01      	subs	r3, #1
 800be0e:	009b      	lsls	r3, r3, #2
 800be10:	4413      	add	r3, r2
 800be12:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800be14:	69bb      	ldr	r3, [r7, #24]
 800be16:	f023 0307 	bic.w	r3, r3, #7
 800be1a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800be1c:	69bb      	ldr	r3, [r7, #24]
 800be1e:	f003 0307 	and.w	r3, r3, #7
 800be22:	2b00      	cmp	r3, #0
 800be24:	d00a      	beq.n	800be3c <prvInitialiseNewTask+0x48>
	__asm volatile
 800be26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be2a:	f383 8811 	msr	BASEPRI, r3
 800be2e:	f3bf 8f6f 	isb	sy
 800be32:	f3bf 8f4f 	dsb	sy
 800be36:	617b      	str	r3, [r7, #20]
}
 800be38:	bf00      	nop
 800be3a:	e7fe      	b.n	800be3a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800be3c:	68bb      	ldr	r3, [r7, #8]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d01f      	beq.n	800be82 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800be42:	2300      	movs	r3, #0
 800be44:	61fb      	str	r3, [r7, #28]
 800be46:	e012      	b.n	800be6e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800be48:	68ba      	ldr	r2, [r7, #8]
 800be4a:	69fb      	ldr	r3, [r7, #28]
 800be4c:	4413      	add	r3, r2
 800be4e:	7819      	ldrb	r1, [r3, #0]
 800be50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be52:	69fb      	ldr	r3, [r7, #28]
 800be54:	4413      	add	r3, r2
 800be56:	3334      	adds	r3, #52	; 0x34
 800be58:	460a      	mov	r2, r1
 800be5a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800be5c:	68ba      	ldr	r2, [r7, #8]
 800be5e:	69fb      	ldr	r3, [r7, #28]
 800be60:	4413      	add	r3, r2
 800be62:	781b      	ldrb	r3, [r3, #0]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d006      	beq.n	800be76 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800be68:	69fb      	ldr	r3, [r7, #28]
 800be6a:	3301      	adds	r3, #1
 800be6c:	61fb      	str	r3, [r7, #28]
 800be6e:	69fb      	ldr	r3, [r7, #28]
 800be70:	2b0f      	cmp	r3, #15
 800be72:	d9e9      	bls.n	800be48 <prvInitialiseNewTask+0x54>
 800be74:	e000      	b.n	800be78 <prvInitialiseNewTask+0x84>
			{
				break;
 800be76:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800be78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be7a:	2200      	movs	r2, #0
 800be7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800be80:	e003      	b.n	800be8a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800be82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be84:	2200      	movs	r2, #0
 800be86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800be8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be8c:	2b06      	cmp	r3, #6
 800be8e:	d901      	bls.n	800be94 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800be90:	2306      	movs	r3, #6
 800be92:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800be94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be98:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800be9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be9e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800bea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bea2:	2200      	movs	r2, #0
 800bea4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bea8:	3304      	adds	r3, #4
 800beaa:	4618      	mov	r0, r3
 800beac:	f7fe ff4e 	bl	800ad4c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800beb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beb2:	3318      	adds	r3, #24
 800beb4:	4618      	mov	r0, r3
 800beb6:	f7fe ff49 	bl	800ad4c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800beba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bebc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bebe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bec2:	f1c3 0207 	rsb	r2, r3, #7
 800bec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bec8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800beca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800becc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bece:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed2:	2200      	movs	r2, #0
 800bed4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beda:	2200      	movs	r2, #0
 800bedc:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800bee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bee2:	334c      	adds	r3, #76	; 0x4c
 800bee4:	2260      	movs	r2, #96	; 0x60
 800bee6:	2100      	movs	r1, #0
 800bee8:	4618      	mov	r0, r3
 800beea:	f003 fdf2 	bl	800fad2 <memset>
 800beee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bef0:	4a0c      	ldr	r2, [pc, #48]	; (800bf24 <prvInitialiseNewTask+0x130>)
 800bef2:	651a      	str	r2, [r3, #80]	; 0x50
 800bef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bef6:	4a0c      	ldr	r2, [pc, #48]	; (800bf28 <prvInitialiseNewTask+0x134>)
 800bef8:	655a      	str	r2, [r3, #84]	; 0x54
 800befa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800befc:	4a0b      	ldr	r2, [pc, #44]	; (800bf2c <prvInitialiseNewTask+0x138>)
 800befe:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bf00:	683a      	ldr	r2, [r7, #0]
 800bf02:	68f9      	ldr	r1, [r7, #12]
 800bf04:	69b8      	ldr	r0, [r7, #24]
 800bf06:	f7fe ffb5 	bl	800ae74 <pxPortInitialiseStack>
 800bf0a:	4602      	mov	r2, r0
 800bf0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf0e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bf10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d002      	beq.n	800bf1c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bf16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf1a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bf1c:	bf00      	nop
 800bf1e:	3720      	adds	r7, #32
 800bf20:	46bd      	mov	sp, r7
 800bf22:	bd80      	pop	{r7, pc}
 800bf24:	08014354 	.word	0x08014354
 800bf28:	08014374 	.word	0x08014374
 800bf2c:	08014334 	.word	0x08014334

0800bf30 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b082      	sub	sp, #8
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bf38:	f7ff f8cc 	bl	800b0d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bf3c:	4b2a      	ldr	r3, [pc, #168]	; (800bfe8 <prvAddNewTaskToReadyList+0xb8>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	3301      	adds	r3, #1
 800bf42:	4a29      	ldr	r2, [pc, #164]	; (800bfe8 <prvAddNewTaskToReadyList+0xb8>)
 800bf44:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bf46:	4b29      	ldr	r3, [pc, #164]	; (800bfec <prvAddNewTaskToReadyList+0xbc>)
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d109      	bne.n	800bf62 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bf4e:	4a27      	ldr	r2, [pc, #156]	; (800bfec <prvAddNewTaskToReadyList+0xbc>)
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bf54:	4b24      	ldr	r3, [pc, #144]	; (800bfe8 <prvAddNewTaskToReadyList+0xb8>)
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	2b01      	cmp	r3, #1
 800bf5a:	d110      	bne.n	800bf7e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bf5c:	f000 fbd6 	bl	800c70c <prvInitialiseTaskLists>
 800bf60:	e00d      	b.n	800bf7e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bf62:	4b23      	ldr	r3, [pc, #140]	; (800bff0 <prvAddNewTaskToReadyList+0xc0>)
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d109      	bne.n	800bf7e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bf6a:	4b20      	ldr	r3, [pc, #128]	; (800bfec <prvAddNewTaskToReadyList+0xbc>)
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf74:	429a      	cmp	r2, r3
 800bf76:	d802      	bhi.n	800bf7e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bf78:	4a1c      	ldr	r2, [pc, #112]	; (800bfec <prvAddNewTaskToReadyList+0xbc>)
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bf7e:	4b1d      	ldr	r3, [pc, #116]	; (800bff4 <prvAddNewTaskToReadyList+0xc4>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	3301      	adds	r3, #1
 800bf84:	4a1b      	ldr	r2, [pc, #108]	; (800bff4 <prvAddNewTaskToReadyList+0xc4>)
 800bf86:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf8c:	2201      	movs	r2, #1
 800bf8e:	409a      	lsls	r2, r3
 800bf90:	4b19      	ldr	r3, [pc, #100]	; (800bff8 <prvAddNewTaskToReadyList+0xc8>)
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	4313      	orrs	r3, r2
 800bf96:	4a18      	ldr	r2, [pc, #96]	; (800bff8 <prvAddNewTaskToReadyList+0xc8>)
 800bf98:	6013      	str	r3, [r2, #0]
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf9e:	4613      	mov	r3, r2
 800bfa0:	009b      	lsls	r3, r3, #2
 800bfa2:	4413      	add	r3, r2
 800bfa4:	009b      	lsls	r3, r3, #2
 800bfa6:	4a15      	ldr	r2, [pc, #84]	; (800bffc <prvAddNewTaskToReadyList+0xcc>)
 800bfa8:	441a      	add	r2, r3
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	3304      	adds	r3, #4
 800bfae:	4619      	mov	r1, r3
 800bfb0:	4610      	mov	r0, r2
 800bfb2:	f7fe fed8 	bl	800ad66 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bfb6:	f7ff f8bd 	bl	800b134 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bfba:	4b0d      	ldr	r3, [pc, #52]	; (800bff0 <prvAddNewTaskToReadyList+0xc0>)
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d00e      	beq.n	800bfe0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bfc2:	4b0a      	ldr	r3, [pc, #40]	; (800bfec <prvAddNewTaskToReadyList+0xbc>)
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfcc:	429a      	cmp	r2, r3
 800bfce:	d207      	bcs.n	800bfe0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bfd0:	4b0b      	ldr	r3, [pc, #44]	; (800c000 <prvAddNewTaskToReadyList+0xd0>)
 800bfd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfd6:	601a      	str	r2, [r3, #0]
 800bfd8:	f3bf 8f4f 	dsb	sy
 800bfdc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bfe0:	bf00      	nop
 800bfe2:	3708      	adds	r7, #8
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd80      	pop	{r7, pc}
 800bfe8:	20004650 	.word	0x20004650
 800bfec:	20004550 	.word	0x20004550
 800bff0:	2000465c 	.word	0x2000465c
 800bff4:	2000466c 	.word	0x2000466c
 800bff8:	20004658 	.word	0x20004658
 800bffc:	20004554 	.word	0x20004554
 800c000:	e000ed04 	.word	0xe000ed04

0800c004 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c004:	b580      	push	{r7, lr}
 800c006:	b084      	sub	sp, #16
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c00c:	2300      	movs	r3, #0
 800c00e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d017      	beq.n	800c046 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c016:	4b13      	ldr	r3, [pc, #76]	; (800c064 <vTaskDelay+0x60>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d00a      	beq.n	800c034 <vTaskDelay+0x30>
	__asm volatile
 800c01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c022:	f383 8811 	msr	BASEPRI, r3
 800c026:	f3bf 8f6f 	isb	sy
 800c02a:	f3bf 8f4f 	dsb	sy
 800c02e:	60bb      	str	r3, [r7, #8]
}
 800c030:	bf00      	nop
 800c032:	e7fe      	b.n	800c032 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c034:	f000 f884 	bl	800c140 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c038:	2100      	movs	r1, #0
 800c03a:	6878      	ldr	r0, [r7, #4]
 800c03c:	f000 fece 	bl	800cddc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c040:	f000 f88c 	bl	800c15c <xTaskResumeAll>
 800c044:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d107      	bne.n	800c05c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c04c:	4b06      	ldr	r3, [pc, #24]	; (800c068 <vTaskDelay+0x64>)
 800c04e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c052:	601a      	str	r2, [r3, #0]
 800c054:	f3bf 8f4f 	dsb	sy
 800c058:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c05c:	bf00      	nop
 800c05e:	3710      	adds	r7, #16
 800c060:	46bd      	mov	sp, r7
 800c062:	bd80      	pop	{r7, pc}
 800c064:	20004678 	.word	0x20004678
 800c068:	e000ed04 	.word	0xe000ed04

0800c06c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b08a      	sub	sp, #40	; 0x28
 800c070:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c072:	2300      	movs	r3, #0
 800c074:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c076:	2300      	movs	r3, #0
 800c078:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c07a:	463a      	mov	r2, r7
 800c07c:	1d39      	adds	r1, r7, #4
 800c07e:	f107 0308 	add.w	r3, r7, #8
 800c082:	4618      	mov	r0, r3
 800c084:	f7f4 ff72 	bl	8000f6c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c088:	6839      	ldr	r1, [r7, #0]
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	68ba      	ldr	r2, [r7, #8]
 800c08e:	9202      	str	r2, [sp, #8]
 800c090:	9301      	str	r3, [sp, #4]
 800c092:	2300      	movs	r3, #0
 800c094:	9300      	str	r3, [sp, #0]
 800c096:	2300      	movs	r3, #0
 800c098:	460a      	mov	r2, r1
 800c09a:	4921      	ldr	r1, [pc, #132]	; (800c120 <vTaskStartScheduler+0xb4>)
 800c09c:	4821      	ldr	r0, [pc, #132]	; (800c124 <vTaskStartScheduler+0xb8>)
 800c09e:	f7ff fe07 	bl	800bcb0 <xTaskCreateStatic>
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	4a20      	ldr	r2, [pc, #128]	; (800c128 <vTaskStartScheduler+0xbc>)
 800c0a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c0a8:	4b1f      	ldr	r3, [pc, #124]	; (800c128 <vTaskStartScheduler+0xbc>)
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d002      	beq.n	800c0b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c0b0:	2301      	movs	r3, #1
 800c0b2:	617b      	str	r3, [r7, #20]
 800c0b4:	e001      	b.n	800c0ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c0ba:	697b      	ldr	r3, [r7, #20]
 800c0bc:	2b01      	cmp	r3, #1
 800c0be:	d11b      	bne.n	800c0f8 <vTaskStartScheduler+0x8c>
	__asm volatile
 800c0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0c4:	f383 8811 	msr	BASEPRI, r3
 800c0c8:	f3bf 8f6f 	isb	sy
 800c0cc:	f3bf 8f4f 	dsb	sy
 800c0d0:	613b      	str	r3, [r7, #16]
}
 800c0d2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c0d4:	4b15      	ldr	r3, [pc, #84]	; (800c12c <vTaskStartScheduler+0xc0>)
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	334c      	adds	r3, #76	; 0x4c
 800c0da:	4a15      	ldr	r2, [pc, #84]	; (800c130 <vTaskStartScheduler+0xc4>)
 800c0dc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c0de:	4b15      	ldr	r3, [pc, #84]	; (800c134 <vTaskStartScheduler+0xc8>)
 800c0e0:	f04f 32ff 	mov.w	r2, #4294967295
 800c0e4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c0e6:	4b14      	ldr	r3, [pc, #80]	; (800c138 <vTaskStartScheduler+0xcc>)
 800c0e8:	2201      	movs	r2, #1
 800c0ea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c0ec:	4b13      	ldr	r3, [pc, #76]	; (800c13c <vTaskStartScheduler+0xd0>)
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c0f2:	f7fe ff4d 	bl	800af90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c0f6:	e00e      	b.n	800c116 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c0f8:	697b      	ldr	r3, [r7, #20]
 800c0fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0fe:	d10a      	bne.n	800c116 <vTaskStartScheduler+0xaa>
	__asm volatile
 800c100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c104:	f383 8811 	msr	BASEPRI, r3
 800c108:	f3bf 8f6f 	isb	sy
 800c10c:	f3bf 8f4f 	dsb	sy
 800c110:	60fb      	str	r3, [r7, #12]
}
 800c112:	bf00      	nop
 800c114:	e7fe      	b.n	800c114 <vTaskStartScheduler+0xa8>
}
 800c116:	bf00      	nop
 800c118:	3718      	adds	r7, #24
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bd80      	pop	{r7, pc}
 800c11e:	bf00      	nop
 800c120:	0801280c 	.word	0x0801280c
 800c124:	0800c6dd 	.word	0x0800c6dd
 800c128:	20004674 	.word	0x20004674
 800c12c:	20004550 	.word	0x20004550
 800c130:	2000017c 	.word	0x2000017c
 800c134:	20004670 	.word	0x20004670
 800c138:	2000465c 	.word	0x2000465c
 800c13c:	20004654 	.word	0x20004654

0800c140 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c140:	b480      	push	{r7}
 800c142:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c144:	4b04      	ldr	r3, [pc, #16]	; (800c158 <vTaskSuspendAll+0x18>)
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	3301      	adds	r3, #1
 800c14a:	4a03      	ldr	r2, [pc, #12]	; (800c158 <vTaskSuspendAll+0x18>)
 800c14c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c14e:	bf00      	nop
 800c150:	46bd      	mov	sp, r7
 800c152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c156:	4770      	bx	lr
 800c158:	20004678 	.word	0x20004678

0800c15c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b084      	sub	sp, #16
 800c160:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c162:	2300      	movs	r3, #0
 800c164:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c166:	2300      	movs	r3, #0
 800c168:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c16a:	4b41      	ldr	r3, [pc, #260]	; (800c270 <xTaskResumeAll+0x114>)
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d10a      	bne.n	800c188 <xTaskResumeAll+0x2c>
	__asm volatile
 800c172:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c176:	f383 8811 	msr	BASEPRI, r3
 800c17a:	f3bf 8f6f 	isb	sy
 800c17e:	f3bf 8f4f 	dsb	sy
 800c182:	603b      	str	r3, [r7, #0]
}
 800c184:	bf00      	nop
 800c186:	e7fe      	b.n	800c186 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c188:	f7fe ffa4 	bl	800b0d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c18c:	4b38      	ldr	r3, [pc, #224]	; (800c270 <xTaskResumeAll+0x114>)
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	3b01      	subs	r3, #1
 800c192:	4a37      	ldr	r2, [pc, #220]	; (800c270 <xTaskResumeAll+0x114>)
 800c194:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c196:	4b36      	ldr	r3, [pc, #216]	; (800c270 <xTaskResumeAll+0x114>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d161      	bne.n	800c262 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c19e:	4b35      	ldr	r3, [pc, #212]	; (800c274 <xTaskResumeAll+0x118>)
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d05d      	beq.n	800c262 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c1a6:	e02e      	b.n	800c206 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c1a8:	4b33      	ldr	r3, [pc, #204]	; (800c278 <xTaskResumeAll+0x11c>)
 800c1aa:	68db      	ldr	r3, [r3, #12]
 800c1ac:	68db      	ldr	r3, [r3, #12]
 800c1ae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	3318      	adds	r3, #24
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	f7fe fe33 	bl	800ae20 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	3304      	adds	r3, #4
 800c1be:	4618      	mov	r0, r3
 800c1c0:	f7fe fe2e 	bl	800ae20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1c8:	2201      	movs	r2, #1
 800c1ca:	409a      	lsls	r2, r3
 800c1cc:	4b2b      	ldr	r3, [pc, #172]	; (800c27c <xTaskResumeAll+0x120>)
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	4313      	orrs	r3, r2
 800c1d2:	4a2a      	ldr	r2, [pc, #168]	; (800c27c <xTaskResumeAll+0x120>)
 800c1d4:	6013      	str	r3, [r2, #0]
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1da:	4613      	mov	r3, r2
 800c1dc:	009b      	lsls	r3, r3, #2
 800c1de:	4413      	add	r3, r2
 800c1e0:	009b      	lsls	r3, r3, #2
 800c1e2:	4a27      	ldr	r2, [pc, #156]	; (800c280 <xTaskResumeAll+0x124>)
 800c1e4:	441a      	add	r2, r3
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	3304      	adds	r3, #4
 800c1ea:	4619      	mov	r1, r3
 800c1ec:	4610      	mov	r0, r2
 800c1ee:	f7fe fdba 	bl	800ad66 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1f6:	4b23      	ldr	r3, [pc, #140]	; (800c284 <xTaskResumeAll+0x128>)
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1fc:	429a      	cmp	r2, r3
 800c1fe:	d302      	bcc.n	800c206 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800c200:	4b21      	ldr	r3, [pc, #132]	; (800c288 <xTaskResumeAll+0x12c>)
 800c202:	2201      	movs	r2, #1
 800c204:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c206:	4b1c      	ldr	r3, [pc, #112]	; (800c278 <xTaskResumeAll+0x11c>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d1cc      	bne.n	800c1a8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d001      	beq.n	800c218 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c214:	f000 fb1c 	bl	800c850 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c218:	4b1c      	ldr	r3, [pc, #112]	; (800c28c <xTaskResumeAll+0x130>)
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d010      	beq.n	800c246 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c224:	f000 f836 	bl	800c294 <xTaskIncrementTick>
 800c228:	4603      	mov	r3, r0
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d002      	beq.n	800c234 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800c22e:	4b16      	ldr	r3, [pc, #88]	; (800c288 <xTaskResumeAll+0x12c>)
 800c230:	2201      	movs	r2, #1
 800c232:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	3b01      	subs	r3, #1
 800c238:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d1f1      	bne.n	800c224 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800c240:	4b12      	ldr	r3, [pc, #72]	; (800c28c <xTaskResumeAll+0x130>)
 800c242:	2200      	movs	r2, #0
 800c244:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c246:	4b10      	ldr	r3, [pc, #64]	; (800c288 <xTaskResumeAll+0x12c>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d009      	beq.n	800c262 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c24e:	2301      	movs	r3, #1
 800c250:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c252:	4b0f      	ldr	r3, [pc, #60]	; (800c290 <xTaskResumeAll+0x134>)
 800c254:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c258:	601a      	str	r2, [r3, #0]
 800c25a:	f3bf 8f4f 	dsb	sy
 800c25e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c262:	f7fe ff67 	bl	800b134 <vPortExitCritical>

	return xAlreadyYielded;
 800c266:	68bb      	ldr	r3, [r7, #8]
}
 800c268:	4618      	mov	r0, r3
 800c26a:	3710      	adds	r7, #16
 800c26c:	46bd      	mov	sp, r7
 800c26e:	bd80      	pop	{r7, pc}
 800c270:	20004678 	.word	0x20004678
 800c274:	20004650 	.word	0x20004650
 800c278:	20004610 	.word	0x20004610
 800c27c:	20004658 	.word	0x20004658
 800c280:	20004554 	.word	0x20004554
 800c284:	20004550 	.word	0x20004550
 800c288:	20004664 	.word	0x20004664
 800c28c:	20004660 	.word	0x20004660
 800c290:	e000ed04 	.word	0xe000ed04

0800c294 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b086      	sub	sp, #24
 800c298:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c29a:	2300      	movs	r3, #0
 800c29c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c29e:	4b4e      	ldr	r3, [pc, #312]	; (800c3d8 <xTaskIncrementTick+0x144>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	f040 808e 	bne.w	800c3c4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c2a8:	4b4c      	ldr	r3, [pc, #304]	; (800c3dc <xTaskIncrementTick+0x148>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	3301      	adds	r3, #1
 800c2ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c2b0:	4a4a      	ldr	r2, [pc, #296]	; (800c3dc <xTaskIncrementTick+0x148>)
 800c2b2:	693b      	ldr	r3, [r7, #16]
 800c2b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c2b6:	693b      	ldr	r3, [r7, #16]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d120      	bne.n	800c2fe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c2bc:	4b48      	ldr	r3, [pc, #288]	; (800c3e0 <xTaskIncrementTick+0x14c>)
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d00a      	beq.n	800c2dc <xTaskIncrementTick+0x48>
	__asm volatile
 800c2c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2ca:	f383 8811 	msr	BASEPRI, r3
 800c2ce:	f3bf 8f6f 	isb	sy
 800c2d2:	f3bf 8f4f 	dsb	sy
 800c2d6:	603b      	str	r3, [r7, #0]
}
 800c2d8:	bf00      	nop
 800c2da:	e7fe      	b.n	800c2da <xTaskIncrementTick+0x46>
 800c2dc:	4b40      	ldr	r3, [pc, #256]	; (800c3e0 <xTaskIncrementTick+0x14c>)
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	60fb      	str	r3, [r7, #12]
 800c2e2:	4b40      	ldr	r3, [pc, #256]	; (800c3e4 <xTaskIncrementTick+0x150>)
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	4a3e      	ldr	r2, [pc, #248]	; (800c3e0 <xTaskIncrementTick+0x14c>)
 800c2e8:	6013      	str	r3, [r2, #0]
 800c2ea:	4a3e      	ldr	r2, [pc, #248]	; (800c3e4 <xTaskIncrementTick+0x150>)
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	6013      	str	r3, [r2, #0]
 800c2f0:	4b3d      	ldr	r3, [pc, #244]	; (800c3e8 <xTaskIncrementTick+0x154>)
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	3301      	adds	r3, #1
 800c2f6:	4a3c      	ldr	r2, [pc, #240]	; (800c3e8 <xTaskIncrementTick+0x154>)
 800c2f8:	6013      	str	r3, [r2, #0]
 800c2fa:	f000 faa9 	bl	800c850 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c2fe:	4b3b      	ldr	r3, [pc, #236]	; (800c3ec <xTaskIncrementTick+0x158>)
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	693a      	ldr	r2, [r7, #16]
 800c304:	429a      	cmp	r2, r3
 800c306:	d348      	bcc.n	800c39a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c308:	4b35      	ldr	r3, [pc, #212]	; (800c3e0 <xTaskIncrementTick+0x14c>)
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d104      	bne.n	800c31c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c312:	4b36      	ldr	r3, [pc, #216]	; (800c3ec <xTaskIncrementTick+0x158>)
 800c314:	f04f 32ff 	mov.w	r2, #4294967295
 800c318:	601a      	str	r2, [r3, #0]
					break;
 800c31a:	e03e      	b.n	800c39a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c31c:	4b30      	ldr	r3, [pc, #192]	; (800c3e0 <xTaskIncrementTick+0x14c>)
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	68db      	ldr	r3, [r3, #12]
 800c322:	68db      	ldr	r3, [r3, #12]
 800c324:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c326:	68bb      	ldr	r3, [r7, #8]
 800c328:	685b      	ldr	r3, [r3, #4]
 800c32a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c32c:	693a      	ldr	r2, [r7, #16]
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	429a      	cmp	r2, r3
 800c332:	d203      	bcs.n	800c33c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c334:	4a2d      	ldr	r2, [pc, #180]	; (800c3ec <xTaskIncrementTick+0x158>)
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c33a:	e02e      	b.n	800c39a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c33c:	68bb      	ldr	r3, [r7, #8]
 800c33e:	3304      	adds	r3, #4
 800c340:	4618      	mov	r0, r3
 800c342:	f7fe fd6d 	bl	800ae20 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c346:	68bb      	ldr	r3, [r7, #8]
 800c348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d004      	beq.n	800c358 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c34e:	68bb      	ldr	r3, [r7, #8]
 800c350:	3318      	adds	r3, #24
 800c352:	4618      	mov	r0, r3
 800c354:	f7fe fd64 	bl	800ae20 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c358:	68bb      	ldr	r3, [r7, #8]
 800c35a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c35c:	2201      	movs	r2, #1
 800c35e:	409a      	lsls	r2, r3
 800c360:	4b23      	ldr	r3, [pc, #140]	; (800c3f0 <xTaskIncrementTick+0x15c>)
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	4313      	orrs	r3, r2
 800c366:	4a22      	ldr	r2, [pc, #136]	; (800c3f0 <xTaskIncrementTick+0x15c>)
 800c368:	6013      	str	r3, [r2, #0]
 800c36a:	68bb      	ldr	r3, [r7, #8]
 800c36c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c36e:	4613      	mov	r3, r2
 800c370:	009b      	lsls	r3, r3, #2
 800c372:	4413      	add	r3, r2
 800c374:	009b      	lsls	r3, r3, #2
 800c376:	4a1f      	ldr	r2, [pc, #124]	; (800c3f4 <xTaskIncrementTick+0x160>)
 800c378:	441a      	add	r2, r3
 800c37a:	68bb      	ldr	r3, [r7, #8]
 800c37c:	3304      	adds	r3, #4
 800c37e:	4619      	mov	r1, r3
 800c380:	4610      	mov	r0, r2
 800c382:	f7fe fcf0 	bl	800ad66 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c386:	68bb      	ldr	r3, [r7, #8]
 800c388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c38a:	4b1b      	ldr	r3, [pc, #108]	; (800c3f8 <xTaskIncrementTick+0x164>)
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c390:	429a      	cmp	r2, r3
 800c392:	d3b9      	bcc.n	800c308 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c394:	2301      	movs	r3, #1
 800c396:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c398:	e7b6      	b.n	800c308 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c39a:	4b17      	ldr	r3, [pc, #92]	; (800c3f8 <xTaskIncrementTick+0x164>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3a0:	4914      	ldr	r1, [pc, #80]	; (800c3f4 <xTaskIncrementTick+0x160>)
 800c3a2:	4613      	mov	r3, r2
 800c3a4:	009b      	lsls	r3, r3, #2
 800c3a6:	4413      	add	r3, r2
 800c3a8:	009b      	lsls	r3, r3, #2
 800c3aa:	440b      	add	r3, r1
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	2b01      	cmp	r3, #1
 800c3b0:	d901      	bls.n	800c3b6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800c3b2:	2301      	movs	r3, #1
 800c3b4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c3b6:	4b11      	ldr	r3, [pc, #68]	; (800c3fc <xTaskIncrementTick+0x168>)
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d007      	beq.n	800c3ce <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800c3be:	2301      	movs	r3, #1
 800c3c0:	617b      	str	r3, [r7, #20]
 800c3c2:	e004      	b.n	800c3ce <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c3c4:	4b0e      	ldr	r3, [pc, #56]	; (800c400 <xTaskIncrementTick+0x16c>)
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	3301      	adds	r3, #1
 800c3ca:	4a0d      	ldr	r2, [pc, #52]	; (800c400 <xTaskIncrementTick+0x16c>)
 800c3cc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c3ce:	697b      	ldr	r3, [r7, #20]
}
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	3718      	adds	r7, #24
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	bd80      	pop	{r7, pc}
 800c3d8:	20004678 	.word	0x20004678
 800c3dc:	20004654 	.word	0x20004654
 800c3e0:	20004608 	.word	0x20004608
 800c3e4:	2000460c 	.word	0x2000460c
 800c3e8:	20004668 	.word	0x20004668
 800c3ec:	20004670 	.word	0x20004670
 800c3f0:	20004658 	.word	0x20004658
 800c3f4:	20004554 	.word	0x20004554
 800c3f8:	20004550 	.word	0x20004550
 800c3fc:	20004664 	.word	0x20004664
 800c400:	20004660 	.word	0x20004660

0800c404 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c404:	b480      	push	{r7}
 800c406:	b087      	sub	sp, #28
 800c408:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c40a:	4b29      	ldr	r3, [pc, #164]	; (800c4b0 <vTaskSwitchContext+0xac>)
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d003      	beq.n	800c41a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c412:	4b28      	ldr	r3, [pc, #160]	; (800c4b4 <vTaskSwitchContext+0xb0>)
 800c414:	2201      	movs	r2, #1
 800c416:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c418:	e044      	b.n	800c4a4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800c41a:	4b26      	ldr	r3, [pc, #152]	; (800c4b4 <vTaskSwitchContext+0xb0>)
 800c41c:	2200      	movs	r2, #0
 800c41e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c420:	4b25      	ldr	r3, [pc, #148]	; (800c4b8 <vTaskSwitchContext+0xb4>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	fab3 f383 	clz	r3, r3
 800c42c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c42e:	7afb      	ldrb	r3, [r7, #11]
 800c430:	f1c3 031f 	rsb	r3, r3, #31
 800c434:	617b      	str	r3, [r7, #20]
 800c436:	4921      	ldr	r1, [pc, #132]	; (800c4bc <vTaskSwitchContext+0xb8>)
 800c438:	697a      	ldr	r2, [r7, #20]
 800c43a:	4613      	mov	r3, r2
 800c43c:	009b      	lsls	r3, r3, #2
 800c43e:	4413      	add	r3, r2
 800c440:	009b      	lsls	r3, r3, #2
 800c442:	440b      	add	r3, r1
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d10a      	bne.n	800c460 <vTaskSwitchContext+0x5c>
	__asm volatile
 800c44a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c44e:	f383 8811 	msr	BASEPRI, r3
 800c452:	f3bf 8f6f 	isb	sy
 800c456:	f3bf 8f4f 	dsb	sy
 800c45a:	607b      	str	r3, [r7, #4]
}
 800c45c:	bf00      	nop
 800c45e:	e7fe      	b.n	800c45e <vTaskSwitchContext+0x5a>
 800c460:	697a      	ldr	r2, [r7, #20]
 800c462:	4613      	mov	r3, r2
 800c464:	009b      	lsls	r3, r3, #2
 800c466:	4413      	add	r3, r2
 800c468:	009b      	lsls	r3, r3, #2
 800c46a:	4a14      	ldr	r2, [pc, #80]	; (800c4bc <vTaskSwitchContext+0xb8>)
 800c46c:	4413      	add	r3, r2
 800c46e:	613b      	str	r3, [r7, #16]
 800c470:	693b      	ldr	r3, [r7, #16]
 800c472:	685b      	ldr	r3, [r3, #4]
 800c474:	685a      	ldr	r2, [r3, #4]
 800c476:	693b      	ldr	r3, [r7, #16]
 800c478:	605a      	str	r2, [r3, #4]
 800c47a:	693b      	ldr	r3, [r7, #16]
 800c47c:	685a      	ldr	r2, [r3, #4]
 800c47e:	693b      	ldr	r3, [r7, #16]
 800c480:	3308      	adds	r3, #8
 800c482:	429a      	cmp	r2, r3
 800c484:	d104      	bne.n	800c490 <vTaskSwitchContext+0x8c>
 800c486:	693b      	ldr	r3, [r7, #16]
 800c488:	685b      	ldr	r3, [r3, #4]
 800c48a:	685a      	ldr	r2, [r3, #4]
 800c48c:	693b      	ldr	r3, [r7, #16]
 800c48e:	605a      	str	r2, [r3, #4]
 800c490:	693b      	ldr	r3, [r7, #16]
 800c492:	685b      	ldr	r3, [r3, #4]
 800c494:	68db      	ldr	r3, [r3, #12]
 800c496:	4a0a      	ldr	r2, [pc, #40]	; (800c4c0 <vTaskSwitchContext+0xbc>)
 800c498:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c49a:	4b09      	ldr	r3, [pc, #36]	; (800c4c0 <vTaskSwitchContext+0xbc>)
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	334c      	adds	r3, #76	; 0x4c
 800c4a0:	4a08      	ldr	r2, [pc, #32]	; (800c4c4 <vTaskSwitchContext+0xc0>)
 800c4a2:	6013      	str	r3, [r2, #0]
}
 800c4a4:	bf00      	nop
 800c4a6:	371c      	adds	r7, #28
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ae:	4770      	bx	lr
 800c4b0:	20004678 	.word	0x20004678
 800c4b4:	20004664 	.word	0x20004664
 800c4b8:	20004658 	.word	0x20004658
 800c4bc:	20004554 	.word	0x20004554
 800c4c0:	20004550 	.word	0x20004550
 800c4c4:	2000017c 	.word	0x2000017c

0800c4c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b084      	sub	sp, #16
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
 800c4d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d10a      	bne.n	800c4ee <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c4d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4dc:	f383 8811 	msr	BASEPRI, r3
 800c4e0:	f3bf 8f6f 	isb	sy
 800c4e4:	f3bf 8f4f 	dsb	sy
 800c4e8:	60fb      	str	r3, [r7, #12]
}
 800c4ea:	bf00      	nop
 800c4ec:	e7fe      	b.n	800c4ec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c4ee:	4b07      	ldr	r3, [pc, #28]	; (800c50c <vTaskPlaceOnEventList+0x44>)
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	3318      	adds	r3, #24
 800c4f4:	4619      	mov	r1, r3
 800c4f6:	6878      	ldr	r0, [r7, #4]
 800c4f8:	f7fe fc59 	bl	800adae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c4fc:	2101      	movs	r1, #1
 800c4fe:	6838      	ldr	r0, [r7, #0]
 800c500:	f000 fc6c 	bl	800cddc <prvAddCurrentTaskToDelayedList>
}
 800c504:	bf00      	nop
 800c506:	3710      	adds	r7, #16
 800c508:	46bd      	mov	sp, r7
 800c50a:	bd80      	pop	{r7, pc}
 800c50c:	20004550 	.word	0x20004550

0800c510 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b086      	sub	sp, #24
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	68db      	ldr	r3, [r3, #12]
 800c51c:	68db      	ldr	r3, [r3, #12]
 800c51e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c520:	693b      	ldr	r3, [r7, #16]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d10a      	bne.n	800c53c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c52a:	f383 8811 	msr	BASEPRI, r3
 800c52e:	f3bf 8f6f 	isb	sy
 800c532:	f3bf 8f4f 	dsb	sy
 800c536:	60fb      	str	r3, [r7, #12]
}
 800c538:	bf00      	nop
 800c53a:	e7fe      	b.n	800c53a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c53c:	693b      	ldr	r3, [r7, #16]
 800c53e:	3318      	adds	r3, #24
 800c540:	4618      	mov	r0, r3
 800c542:	f7fe fc6d 	bl	800ae20 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c546:	4b1d      	ldr	r3, [pc, #116]	; (800c5bc <xTaskRemoveFromEventList+0xac>)
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d11c      	bne.n	800c588 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c54e:	693b      	ldr	r3, [r7, #16]
 800c550:	3304      	adds	r3, #4
 800c552:	4618      	mov	r0, r3
 800c554:	f7fe fc64 	bl	800ae20 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c558:	693b      	ldr	r3, [r7, #16]
 800c55a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c55c:	2201      	movs	r2, #1
 800c55e:	409a      	lsls	r2, r3
 800c560:	4b17      	ldr	r3, [pc, #92]	; (800c5c0 <xTaskRemoveFromEventList+0xb0>)
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	4313      	orrs	r3, r2
 800c566:	4a16      	ldr	r2, [pc, #88]	; (800c5c0 <xTaskRemoveFromEventList+0xb0>)
 800c568:	6013      	str	r3, [r2, #0]
 800c56a:	693b      	ldr	r3, [r7, #16]
 800c56c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c56e:	4613      	mov	r3, r2
 800c570:	009b      	lsls	r3, r3, #2
 800c572:	4413      	add	r3, r2
 800c574:	009b      	lsls	r3, r3, #2
 800c576:	4a13      	ldr	r2, [pc, #76]	; (800c5c4 <xTaskRemoveFromEventList+0xb4>)
 800c578:	441a      	add	r2, r3
 800c57a:	693b      	ldr	r3, [r7, #16]
 800c57c:	3304      	adds	r3, #4
 800c57e:	4619      	mov	r1, r3
 800c580:	4610      	mov	r0, r2
 800c582:	f7fe fbf0 	bl	800ad66 <vListInsertEnd>
 800c586:	e005      	b.n	800c594 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c588:	693b      	ldr	r3, [r7, #16]
 800c58a:	3318      	adds	r3, #24
 800c58c:	4619      	mov	r1, r3
 800c58e:	480e      	ldr	r0, [pc, #56]	; (800c5c8 <xTaskRemoveFromEventList+0xb8>)
 800c590:	f7fe fbe9 	bl	800ad66 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c594:	693b      	ldr	r3, [r7, #16]
 800c596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c598:	4b0c      	ldr	r3, [pc, #48]	; (800c5cc <xTaskRemoveFromEventList+0xbc>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c59e:	429a      	cmp	r2, r3
 800c5a0:	d905      	bls.n	800c5ae <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c5a2:	2301      	movs	r3, #1
 800c5a4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c5a6:	4b0a      	ldr	r3, [pc, #40]	; (800c5d0 <xTaskRemoveFromEventList+0xc0>)
 800c5a8:	2201      	movs	r2, #1
 800c5aa:	601a      	str	r2, [r3, #0]
 800c5ac:	e001      	b.n	800c5b2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c5b2:	697b      	ldr	r3, [r7, #20]
}
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	3718      	adds	r7, #24
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	bd80      	pop	{r7, pc}
 800c5bc:	20004678 	.word	0x20004678
 800c5c0:	20004658 	.word	0x20004658
 800c5c4:	20004554 	.word	0x20004554
 800c5c8:	20004610 	.word	0x20004610
 800c5cc:	20004550 	.word	0x20004550
 800c5d0:	20004664 	.word	0x20004664

0800c5d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c5d4:	b480      	push	{r7}
 800c5d6:	b083      	sub	sp, #12
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c5dc:	4b06      	ldr	r3, [pc, #24]	; (800c5f8 <vTaskInternalSetTimeOutState+0x24>)
 800c5de:	681a      	ldr	r2, [r3, #0]
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c5e4:	4b05      	ldr	r3, [pc, #20]	; (800c5fc <vTaskInternalSetTimeOutState+0x28>)
 800c5e6:	681a      	ldr	r2, [r3, #0]
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	605a      	str	r2, [r3, #4]
}
 800c5ec:	bf00      	nop
 800c5ee:	370c      	adds	r7, #12
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f6:	4770      	bx	lr
 800c5f8:	20004668 	.word	0x20004668
 800c5fc:	20004654 	.word	0x20004654

0800c600 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b088      	sub	sp, #32
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
 800c608:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d10a      	bne.n	800c626 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c610:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c614:	f383 8811 	msr	BASEPRI, r3
 800c618:	f3bf 8f6f 	isb	sy
 800c61c:	f3bf 8f4f 	dsb	sy
 800c620:	613b      	str	r3, [r7, #16]
}
 800c622:	bf00      	nop
 800c624:	e7fe      	b.n	800c624 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c626:	683b      	ldr	r3, [r7, #0]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d10a      	bne.n	800c642 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c62c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c630:	f383 8811 	msr	BASEPRI, r3
 800c634:	f3bf 8f6f 	isb	sy
 800c638:	f3bf 8f4f 	dsb	sy
 800c63c:	60fb      	str	r3, [r7, #12]
}
 800c63e:	bf00      	nop
 800c640:	e7fe      	b.n	800c640 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c642:	f7fe fd47 	bl	800b0d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c646:	4b1d      	ldr	r3, [pc, #116]	; (800c6bc <xTaskCheckForTimeOut+0xbc>)
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	685b      	ldr	r3, [r3, #4]
 800c650:	69ba      	ldr	r2, [r7, #24]
 800c652:	1ad3      	subs	r3, r2, r3
 800c654:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c65e:	d102      	bne.n	800c666 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c660:	2300      	movs	r3, #0
 800c662:	61fb      	str	r3, [r7, #28]
 800c664:	e023      	b.n	800c6ae <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681a      	ldr	r2, [r3, #0]
 800c66a:	4b15      	ldr	r3, [pc, #84]	; (800c6c0 <xTaskCheckForTimeOut+0xc0>)
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	429a      	cmp	r2, r3
 800c670:	d007      	beq.n	800c682 <xTaskCheckForTimeOut+0x82>
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	685b      	ldr	r3, [r3, #4]
 800c676:	69ba      	ldr	r2, [r7, #24]
 800c678:	429a      	cmp	r2, r3
 800c67a:	d302      	bcc.n	800c682 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c67c:	2301      	movs	r3, #1
 800c67e:	61fb      	str	r3, [r7, #28]
 800c680:	e015      	b.n	800c6ae <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c682:	683b      	ldr	r3, [r7, #0]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	697a      	ldr	r2, [r7, #20]
 800c688:	429a      	cmp	r2, r3
 800c68a:	d20b      	bcs.n	800c6a4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	681a      	ldr	r2, [r3, #0]
 800c690:	697b      	ldr	r3, [r7, #20]
 800c692:	1ad2      	subs	r2, r2, r3
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c698:	6878      	ldr	r0, [r7, #4]
 800c69a:	f7ff ff9b 	bl	800c5d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c69e:	2300      	movs	r3, #0
 800c6a0:	61fb      	str	r3, [r7, #28]
 800c6a2:	e004      	b.n	800c6ae <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c6a4:	683b      	ldr	r3, [r7, #0]
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c6aa:	2301      	movs	r3, #1
 800c6ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c6ae:	f7fe fd41 	bl	800b134 <vPortExitCritical>

	return xReturn;
 800c6b2:	69fb      	ldr	r3, [r7, #28]
}
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	3720      	adds	r7, #32
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	bd80      	pop	{r7, pc}
 800c6bc:	20004654 	.word	0x20004654
 800c6c0:	20004668 	.word	0x20004668

0800c6c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c6c4:	b480      	push	{r7}
 800c6c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c6c8:	4b03      	ldr	r3, [pc, #12]	; (800c6d8 <vTaskMissedYield+0x14>)
 800c6ca:	2201      	movs	r2, #1
 800c6cc:	601a      	str	r2, [r3, #0]
}
 800c6ce:	bf00      	nop
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d6:	4770      	bx	lr
 800c6d8:	20004664 	.word	0x20004664

0800c6dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b082      	sub	sp, #8
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c6e4:	f000 f852 	bl	800c78c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c6e8:	4b06      	ldr	r3, [pc, #24]	; (800c704 <prvIdleTask+0x28>)
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	2b01      	cmp	r3, #1
 800c6ee:	d9f9      	bls.n	800c6e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c6f0:	4b05      	ldr	r3, [pc, #20]	; (800c708 <prvIdleTask+0x2c>)
 800c6f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6f6:	601a      	str	r2, [r3, #0]
 800c6f8:	f3bf 8f4f 	dsb	sy
 800c6fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c700:	e7f0      	b.n	800c6e4 <prvIdleTask+0x8>
 800c702:	bf00      	nop
 800c704:	20004554 	.word	0x20004554
 800c708:	e000ed04 	.word	0xe000ed04

0800c70c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b082      	sub	sp, #8
 800c710:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c712:	2300      	movs	r3, #0
 800c714:	607b      	str	r3, [r7, #4]
 800c716:	e00c      	b.n	800c732 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c718:	687a      	ldr	r2, [r7, #4]
 800c71a:	4613      	mov	r3, r2
 800c71c:	009b      	lsls	r3, r3, #2
 800c71e:	4413      	add	r3, r2
 800c720:	009b      	lsls	r3, r3, #2
 800c722:	4a12      	ldr	r2, [pc, #72]	; (800c76c <prvInitialiseTaskLists+0x60>)
 800c724:	4413      	add	r3, r2
 800c726:	4618      	mov	r0, r3
 800c728:	f7fe faf0 	bl	800ad0c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	3301      	adds	r3, #1
 800c730:	607b      	str	r3, [r7, #4]
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	2b06      	cmp	r3, #6
 800c736:	d9ef      	bls.n	800c718 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c738:	480d      	ldr	r0, [pc, #52]	; (800c770 <prvInitialiseTaskLists+0x64>)
 800c73a:	f7fe fae7 	bl	800ad0c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c73e:	480d      	ldr	r0, [pc, #52]	; (800c774 <prvInitialiseTaskLists+0x68>)
 800c740:	f7fe fae4 	bl	800ad0c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c744:	480c      	ldr	r0, [pc, #48]	; (800c778 <prvInitialiseTaskLists+0x6c>)
 800c746:	f7fe fae1 	bl	800ad0c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c74a:	480c      	ldr	r0, [pc, #48]	; (800c77c <prvInitialiseTaskLists+0x70>)
 800c74c:	f7fe fade 	bl	800ad0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c750:	480b      	ldr	r0, [pc, #44]	; (800c780 <prvInitialiseTaskLists+0x74>)
 800c752:	f7fe fadb 	bl	800ad0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c756:	4b0b      	ldr	r3, [pc, #44]	; (800c784 <prvInitialiseTaskLists+0x78>)
 800c758:	4a05      	ldr	r2, [pc, #20]	; (800c770 <prvInitialiseTaskLists+0x64>)
 800c75a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c75c:	4b0a      	ldr	r3, [pc, #40]	; (800c788 <prvInitialiseTaskLists+0x7c>)
 800c75e:	4a05      	ldr	r2, [pc, #20]	; (800c774 <prvInitialiseTaskLists+0x68>)
 800c760:	601a      	str	r2, [r3, #0]
}
 800c762:	bf00      	nop
 800c764:	3708      	adds	r7, #8
 800c766:	46bd      	mov	sp, r7
 800c768:	bd80      	pop	{r7, pc}
 800c76a:	bf00      	nop
 800c76c:	20004554 	.word	0x20004554
 800c770:	200045e0 	.word	0x200045e0
 800c774:	200045f4 	.word	0x200045f4
 800c778:	20004610 	.word	0x20004610
 800c77c:	20004624 	.word	0x20004624
 800c780:	2000463c 	.word	0x2000463c
 800c784:	20004608 	.word	0x20004608
 800c788:	2000460c 	.word	0x2000460c

0800c78c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b082      	sub	sp, #8
 800c790:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c792:	e019      	b.n	800c7c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c794:	f7fe fc9e 	bl	800b0d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c798:	4b10      	ldr	r3, [pc, #64]	; (800c7dc <prvCheckTasksWaitingTermination+0x50>)
 800c79a:	68db      	ldr	r3, [r3, #12]
 800c79c:	68db      	ldr	r3, [r3, #12]
 800c79e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	3304      	adds	r3, #4
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	f7fe fb3b 	bl	800ae20 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c7aa:	4b0d      	ldr	r3, [pc, #52]	; (800c7e0 <prvCheckTasksWaitingTermination+0x54>)
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	3b01      	subs	r3, #1
 800c7b0:	4a0b      	ldr	r2, [pc, #44]	; (800c7e0 <prvCheckTasksWaitingTermination+0x54>)
 800c7b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c7b4:	4b0b      	ldr	r3, [pc, #44]	; (800c7e4 <prvCheckTasksWaitingTermination+0x58>)
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	3b01      	subs	r3, #1
 800c7ba:	4a0a      	ldr	r2, [pc, #40]	; (800c7e4 <prvCheckTasksWaitingTermination+0x58>)
 800c7bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c7be:	f7fe fcb9 	bl	800b134 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c7c2:	6878      	ldr	r0, [r7, #4]
 800c7c4:	f000 f810 	bl	800c7e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c7c8:	4b06      	ldr	r3, [pc, #24]	; (800c7e4 <prvCheckTasksWaitingTermination+0x58>)
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d1e1      	bne.n	800c794 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c7d0:	bf00      	nop
 800c7d2:	bf00      	nop
 800c7d4:	3708      	adds	r7, #8
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	bd80      	pop	{r7, pc}
 800c7da:	bf00      	nop
 800c7dc:	20004624 	.word	0x20004624
 800c7e0:	20004650 	.word	0x20004650
 800c7e4:	20004638 	.word	0x20004638

0800c7e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b084      	sub	sp, #16
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	334c      	adds	r3, #76	; 0x4c
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	f003 fe81 	bl	80104fc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c800:	2b00      	cmp	r3, #0
 800c802:	d108      	bne.n	800c816 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c808:	4618      	mov	r0, r3
 800c80a:	f7fe f961 	bl	800aad0 <vPortFree>
				vPortFree( pxTCB );
 800c80e:	6878      	ldr	r0, [r7, #4]
 800c810:	f7fe f95e 	bl	800aad0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c814:	e018      	b.n	800c848 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c81c:	2b01      	cmp	r3, #1
 800c81e:	d103      	bne.n	800c828 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c820:	6878      	ldr	r0, [r7, #4]
 800c822:	f7fe f955 	bl	800aad0 <vPortFree>
	}
 800c826:	e00f      	b.n	800c848 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c82e:	2b02      	cmp	r3, #2
 800c830:	d00a      	beq.n	800c848 <prvDeleteTCB+0x60>
	__asm volatile
 800c832:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c836:	f383 8811 	msr	BASEPRI, r3
 800c83a:	f3bf 8f6f 	isb	sy
 800c83e:	f3bf 8f4f 	dsb	sy
 800c842:	60fb      	str	r3, [r7, #12]
}
 800c844:	bf00      	nop
 800c846:	e7fe      	b.n	800c846 <prvDeleteTCB+0x5e>
	}
 800c848:	bf00      	nop
 800c84a:	3710      	adds	r7, #16
 800c84c:	46bd      	mov	sp, r7
 800c84e:	bd80      	pop	{r7, pc}

0800c850 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c850:	b480      	push	{r7}
 800c852:	b083      	sub	sp, #12
 800c854:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c856:	4b0c      	ldr	r3, [pc, #48]	; (800c888 <prvResetNextTaskUnblockTime+0x38>)
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d104      	bne.n	800c86a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c860:	4b0a      	ldr	r3, [pc, #40]	; (800c88c <prvResetNextTaskUnblockTime+0x3c>)
 800c862:	f04f 32ff 	mov.w	r2, #4294967295
 800c866:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c868:	e008      	b.n	800c87c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c86a:	4b07      	ldr	r3, [pc, #28]	; (800c888 <prvResetNextTaskUnblockTime+0x38>)
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	68db      	ldr	r3, [r3, #12]
 800c870:	68db      	ldr	r3, [r3, #12]
 800c872:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	685b      	ldr	r3, [r3, #4]
 800c878:	4a04      	ldr	r2, [pc, #16]	; (800c88c <prvResetNextTaskUnblockTime+0x3c>)
 800c87a:	6013      	str	r3, [r2, #0]
}
 800c87c:	bf00      	nop
 800c87e:	370c      	adds	r7, #12
 800c880:	46bd      	mov	sp, r7
 800c882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c886:	4770      	bx	lr
 800c888:	20004608 	.word	0x20004608
 800c88c:	20004670 	.word	0x20004670

0800c890 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c890:	b480      	push	{r7}
 800c892:	b083      	sub	sp, #12
 800c894:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c896:	4b0b      	ldr	r3, [pc, #44]	; (800c8c4 <xTaskGetSchedulerState+0x34>)
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d102      	bne.n	800c8a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c89e:	2301      	movs	r3, #1
 800c8a0:	607b      	str	r3, [r7, #4]
 800c8a2:	e008      	b.n	800c8b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c8a4:	4b08      	ldr	r3, [pc, #32]	; (800c8c8 <xTaskGetSchedulerState+0x38>)
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d102      	bne.n	800c8b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c8ac:	2302      	movs	r3, #2
 800c8ae:	607b      	str	r3, [r7, #4]
 800c8b0:	e001      	b.n	800c8b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c8b6:	687b      	ldr	r3, [r7, #4]
	}
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	370c      	adds	r7, #12
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c2:	4770      	bx	lr
 800c8c4:	2000465c 	.word	0x2000465c
 800c8c8:	20004678 	.word	0x20004678

0800c8cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b086      	sub	sp, #24
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c8d8:	2300      	movs	r3, #0
 800c8da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d06e      	beq.n	800c9c0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c8e2:	4b3a      	ldr	r3, [pc, #232]	; (800c9cc <xTaskPriorityDisinherit+0x100>)
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	693a      	ldr	r2, [r7, #16]
 800c8e8:	429a      	cmp	r2, r3
 800c8ea:	d00a      	beq.n	800c902 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c8ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8f0:	f383 8811 	msr	BASEPRI, r3
 800c8f4:	f3bf 8f6f 	isb	sy
 800c8f8:	f3bf 8f4f 	dsb	sy
 800c8fc:	60fb      	str	r3, [r7, #12]
}
 800c8fe:	bf00      	nop
 800c900:	e7fe      	b.n	800c900 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c902:	693b      	ldr	r3, [r7, #16]
 800c904:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c906:	2b00      	cmp	r3, #0
 800c908:	d10a      	bne.n	800c920 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c90a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c90e:	f383 8811 	msr	BASEPRI, r3
 800c912:	f3bf 8f6f 	isb	sy
 800c916:	f3bf 8f4f 	dsb	sy
 800c91a:	60bb      	str	r3, [r7, #8]
}
 800c91c:	bf00      	nop
 800c91e:	e7fe      	b.n	800c91e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c920:	693b      	ldr	r3, [r7, #16]
 800c922:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c924:	1e5a      	subs	r2, r3, #1
 800c926:	693b      	ldr	r3, [r7, #16]
 800c928:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c92a:	693b      	ldr	r3, [r7, #16]
 800c92c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c92e:	693b      	ldr	r3, [r7, #16]
 800c930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c932:	429a      	cmp	r2, r3
 800c934:	d044      	beq.n	800c9c0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c936:	693b      	ldr	r3, [r7, #16]
 800c938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d140      	bne.n	800c9c0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c93e:	693b      	ldr	r3, [r7, #16]
 800c940:	3304      	adds	r3, #4
 800c942:	4618      	mov	r0, r3
 800c944:	f7fe fa6c 	bl	800ae20 <uxListRemove>
 800c948:	4603      	mov	r3, r0
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d115      	bne.n	800c97a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c94e:	693b      	ldr	r3, [r7, #16]
 800c950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c952:	491f      	ldr	r1, [pc, #124]	; (800c9d0 <xTaskPriorityDisinherit+0x104>)
 800c954:	4613      	mov	r3, r2
 800c956:	009b      	lsls	r3, r3, #2
 800c958:	4413      	add	r3, r2
 800c95a:	009b      	lsls	r3, r3, #2
 800c95c:	440b      	add	r3, r1
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d10a      	bne.n	800c97a <xTaskPriorityDisinherit+0xae>
 800c964:	693b      	ldr	r3, [r7, #16]
 800c966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c968:	2201      	movs	r2, #1
 800c96a:	fa02 f303 	lsl.w	r3, r2, r3
 800c96e:	43da      	mvns	r2, r3
 800c970:	4b18      	ldr	r3, [pc, #96]	; (800c9d4 <xTaskPriorityDisinherit+0x108>)
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	4013      	ands	r3, r2
 800c976:	4a17      	ldr	r2, [pc, #92]	; (800c9d4 <xTaskPriorityDisinherit+0x108>)
 800c978:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c97a:	693b      	ldr	r3, [r7, #16]
 800c97c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c97e:	693b      	ldr	r3, [r7, #16]
 800c980:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c982:	693b      	ldr	r3, [r7, #16]
 800c984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c986:	f1c3 0207 	rsb	r2, r3, #7
 800c98a:	693b      	ldr	r3, [r7, #16]
 800c98c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c98e:	693b      	ldr	r3, [r7, #16]
 800c990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c992:	2201      	movs	r2, #1
 800c994:	409a      	lsls	r2, r3
 800c996:	4b0f      	ldr	r3, [pc, #60]	; (800c9d4 <xTaskPriorityDisinherit+0x108>)
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	4313      	orrs	r3, r2
 800c99c:	4a0d      	ldr	r2, [pc, #52]	; (800c9d4 <xTaskPriorityDisinherit+0x108>)
 800c99e:	6013      	str	r3, [r2, #0]
 800c9a0:	693b      	ldr	r3, [r7, #16]
 800c9a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9a4:	4613      	mov	r3, r2
 800c9a6:	009b      	lsls	r3, r3, #2
 800c9a8:	4413      	add	r3, r2
 800c9aa:	009b      	lsls	r3, r3, #2
 800c9ac:	4a08      	ldr	r2, [pc, #32]	; (800c9d0 <xTaskPriorityDisinherit+0x104>)
 800c9ae:	441a      	add	r2, r3
 800c9b0:	693b      	ldr	r3, [r7, #16]
 800c9b2:	3304      	adds	r3, #4
 800c9b4:	4619      	mov	r1, r3
 800c9b6:	4610      	mov	r0, r2
 800c9b8:	f7fe f9d5 	bl	800ad66 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c9bc:	2301      	movs	r3, #1
 800c9be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c9c0:	697b      	ldr	r3, [r7, #20]
	}
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	3718      	adds	r7, #24
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	bd80      	pop	{r7, pc}
 800c9ca:	bf00      	nop
 800c9cc:	20004550 	.word	0x20004550
 800c9d0:	20004554 	.word	0x20004554
 800c9d4:	20004658 	.word	0x20004658

0800c9d8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b086      	sub	sp, #24
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	60f8      	str	r0, [r7, #12]
 800c9e0:	60b9      	str	r1, [r7, #8]
 800c9e2:	607a      	str	r2, [r7, #4]
 800c9e4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800c9e6:	f7fe fb75 	bl	800b0d4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800c9ea:	4b29      	ldr	r3, [pc, #164]	; (800ca90 <xTaskNotifyWait+0xb8>)
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800c9f2:	b2db      	uxtb	r3, r3
 800c9f4:	2b02      	cmp	r3, #2
 800c9f6:	d01c      	beq.n	800ca32 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800c9f8:	4b25      	ldr	r3, [pc, #148]	; (800ca90 <xTaskNotifyWait+0xb8>)
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 800ca00:	68fa      	ldr	r2, [r7, #12]
 800ca02:	43d2      	mvns	r2, r2
 800ca04:	400a      	ands	r2, r1
 800ca06:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800ca0a:	4b21      	ldr	r3, [pc, #132]	; (800ca90 <xTaskNotifyWait+0xb8>)
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	2201      	movs	r2, #1
 800ca10:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

				if( xTicksToWait > ( TickType_t ) 0 )
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d00b      	beq.n	800ca32 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ca1a:	2101      	movs	r1, #1
 800ca1c:	6838      	ldr	r0, [r7, #0]
 800ca1e:	f000 f9dd 	bl	800cddc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800ca22:	4b1c      	ldr	r3, [pc, #112]	; (800ca94 <xTaskNotifyWait+0xbc>)
 800ca24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca28:	601a      	str	r2, [r3, #0]
 800ca2a:	f3bf 8f4f 	dsb	sy
 800ca2e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ca32:	f7fe fb7f 	bl	800b134 <vPortExitCritical>

		taskENTER_CRITICAL();
 800ca36:	f7fe fb4d 	bl	800b0d4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d005      	beq.n	800ca4c <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800ca40:	4b13      	ldr	r3, [pc, #76]	; (800ca90 <xTaskNotifyWait+0xb8>)
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800ca4c:	4b10      	ldr	r3, [pc, #64]	; (800ca90 <xTaskNotifyWait+0xb8>)
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800ca54:	b2db      	uxtb	r3, r3
 800ca56:	2b02      	cmp	r3, #2
 800ca58:	d002      	beq.n	800ca60 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	617b      	str	r3, [r7, #20]
 800ca5e:	e00a      	b.n	800ca76 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800ca60:	4b0b      	ldr	r3, [pc, #44]	; (800ca90 <xTaskNotifyWait+0xb8>)
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 800ca68:	68ba      	ldr	r2, [r7, #8]
 800ca6a:	43d2      	mvns	r2, r2
 800ca6c:	400a      	ands	r2, r1
 800ca6e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
				xReturn = pdTRUE;
 800ca72:	2301      	movs	r3, #1
 800ca74:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ca76:	4b06      	ldr	r3, [pc, #24]	; (800ca90 <xTaskNotifyWait+0xb8>)
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		}
		taskEXIT_CRITICAL();
 800ca80:	f7fe fb58 	bl	800b134 <vPortExitCritical>

		return xReturn;
 800ca84:	697b      	ldr	r3, [r7, #20]
	}
 800ca86:	4618      	mov	r0, r3
 800ca88:	3718      	adds	r7, #24
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	bd80      	pop	{r7, pc}
 800ca8e:	bf00      	nop
 800ca90:	20004550 	.word	0x20004550
 800ca94:	e000ed04 	.word	0xe000ed04

0800ca98 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b08a      	sub	sp, #40	; 0x28
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	60f8      	str	r0, [r7, #12]
 800caa0:	60b9      	str	r1, [r7, #8]
 800caa2:	603b      	str	r3, [r7, #0]
 800caa4:	4613      	mov	r3, r2
 800caa6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800caa8:	2301      	movs	r3, #1
 800caaa:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d10a      	bne.n	800cac8 <xTaskGenericNotify+0x30>
	__asm volatile
 800cab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cab6:	f383 8811 	msr	BASEPRI, r3
 800caba:	f3bf 8f6f 	isb	sy
 800cabe:	f3bf 8f4f 	dsb	sy
 800cac2:	61bb      	str	r3, [r7, #24]
}
 800cac4:	bf00      	nop
 800cac6:	e7fe      	b.n	800cac6 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800cacc:	f7fe fb02 	bl	800b0d4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d004      	beq.n	800cae0 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800cad6:	6a3b      	ldr	r3, [r7, #32]
 800cad8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800cae0:	6a3b      	ldr	r3, [r7, #32]
 800cae2:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800cae6:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800cae8:	6a3b      	ldr	r3, [r7, #32]
 800caea:	2202      	movs	r2, #2
 800caec:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

			switch( eAction )
 800caf0:	79fb      	ldrb	r3, [r7, #7]
 800caf2:	2b04      	cmp	r3, #4
 800caf4:	d82d      	bhi.n	800cb52 <xTaskGenericNotify+0xba>
 800caf6:	a201      	add	r2, pc, #4	; (adr r2, 800cafc <xTaskGenericNotify+0x64>)
 800caf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cafc:	0800cb75 	.word	0x0800cb75
 800cb00:	0800cb11 	.word	0x0800cb11
 800cb04:	0800cb23 	.word	0x0800cb23
 800cb08:	0800cb33 	.word	0x0800cb33
 800cb0c:	0800cb3d 	.word	0x0800cb3d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800cb10:	6a3b      	ldr	r3, [r7, #32]
 800cb12:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800cb16:	68bb      	ldr	r3, [r7, #8]
 800cb18:	431a      	orrs	r2, r3
 800cb1a:	6a3b      	ldr	r3, [r7, #32]
 800cb1c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 800cb20:	e02b      	b.n	800cb7a <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800cb22:	6a3b      	ldr	r3, [r7, #32]
 800cb24:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800cb28:	1c5a      	adds	r2, r3, #1
 800cb2a:	6a3b      	ldr	r3, [r7, #32]
 800cb2c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 800cb30:	e023      	b.n	800cb7a <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800cb32:	6a3b      	ldr	r3, [r7, #32]
 800cb34:	68ba      	ldr	r2, [r7, #8]
 800cb36:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 800cb3a:	e01e      	b.n	800cb7a <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800cb3c:	7ffb      	ldrb	r3, [r7, #31]
 800cb3e:	2b02      	cmp	r3, #2
 800cb40:	d004      	beq.n	800cb4c <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800cb42:	6a3b      	ldr	r3, [r7, #32]
 800cb44:	68ba      	ldr	r2, [r7, #8]
 800cb46:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800cb4a:	e016      	b.n	800cb7a <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800cb50:	e013      	b.n	800cb7a <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800cb52:	6a3b      	ldr	r3, [r7, #32]
 800cb54:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800cb58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb5c:	d00c      	beq.n	800cb78 <xTaskGenericNotify+0xe0>
	__asm volatile
 800cb5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb62:	f383 8811 	msr	BASEPRI, r3
 800cb66:	f3bf 8f6f 	isb	sy
 800cb6a:	f3bf 8f4f 	dsb	sy
 800cb6e:	617b      	str	r3, [r7, #20]
}
 800cb70:	bf00      	nop
 800cb72:	e7fe      	b.n	800cb72 <xTaskGenericNotify+0xda>
					break;
 800cb74:	bf00      	nop
 800cb76:	e000      	b.n	800cb7a <xTaskGenericNotify+0xe2>

					break;
 800cb78:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800cb7a:	7ffb      	ldrb	r3, [r7, #31]
 800cb7c:	2b01      	cmp	r3, #1
 800cb7e:	d139      	bne.n	800cbf4 <xTaskGenericNotify+0x15c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cb80:	6a3b      	ldr	r3, [r7, #32]
 800cb82:	3304      	adds	r3, #4
 800cb84:	4618      	mov	r0, r3
 800cb86:	f7fe f94b 	bl	800ae20 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800cb8a:	6a3b      	ldr	r3, [r7, #32]
 800cb8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb8e:	2201      	movs	r2, #1
 800cb90:	409a      	lsls	r2, r3
 800cb92:	4b1c      	ldr	r3, [pc, #112]	; (800cc04 <xTaskGenericNotify+0x16c>)
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	4313      	orrs	r3, r2
 800cb98:	4a1a      	ldr	r2, [pc, #104]	; (800cc04 <xTaskGenericNotify+0x16c>)
 800cb9a:	6013      	str	r3, [r2, #0]
 800cb9c:	6a3b      	ldr	r3, [r7, #32]
 800cb9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cba0:	4613      	mov	r3, r2
 800cba2:	009b      	lsls	r3, r3, #2
 800cba4:	4413      	add	r3, r2
 800cba6:	009b      	lsls	r3, r3, #2
 800cba8:	4a17      	ldr	r2, [pc, #92]	; (800cc08 <xTaskGenericNotify+0x170>)
 800cbaa:	441a      	add	r2, r3
 800cbac:	6a3b      	ldr	r3, [r7, #32]
 800cbae:	3304      	adds	r3, #4
 800cbb0:	4619      	mov	r1, r3
 800cbb2:	4610      	mov	r0, r2
 800cbb4:	f7fe f8d7 	bl	800ad66 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800cbb8:	6a3b      	ldr	r3, [r7, #32]
 800cbba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d00a      	beq.n	800cbd6 <xTaskGenericNotify+0x13e>
	__asm volatile
 800cbc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbc4:	f383 8811 	msr	BASEPRI, r3
 800cbc8:	f3bf 8f6f 	isb	sy
 800cbcc:	f3bf 8f4f 	dsb	sy
 800cbd0:	613b      	str	r3, [r7, #16]
}
 800cbd2:	bf00      	nop
 800cbd4:	e7fe      	b.n	800cbd4 <xTaskGenericNotify+0x13c>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cbd6:	6a3b      	ldr	r3, [r7, #32]
 800cbd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbda:	4b0c      	ldr	r3, [pc, #48]	; (800cc0c <xTaskGenericNotify+0x174>)
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbe0:	429a      	cmp	r2, r3
 800cbe2:	d907      	bls.n	800cbf4 <xTaskGenericNotify+0x15c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800cbe4:	4b0a      	ldr	r3, [pc, #40]	; (800cc10 <xTaskGenericNotify+0x178>)
 800cbe6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbea:	601a      	str	r2, [r3, #0]
 800cbec:	f3bf 8f4f 	dsb	sy
 800cbf0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800cbf4:	f7fe fa9e 	bl	800b134 <vPortExitCritical>

		return xReturn;
 800cbf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	3728      	adds	r7, #40	; 0x28
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	bd80      	pop	{r7, pc}
 800cc02:	bf00      	nop
 800cc04:	20004658 	.word	0x20004658
 800cc08:	20004554 	.word	0x20004554
 800cc0c:	20004550 	.word	0x20004550
 800cc10:	e000ed04 	.word	0xe000ed04

0800cc14 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b08e      	sub	sp, #56	; 0x38
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	60f8      	str	r0, [r7, #12]
 800cc1c:	60b9      	str	r1, [r7, #8]
 800cc1e:	603b      	str	r3, [r7, #0]
 800cc20:	4613      	mov	r3, r2
 800cc22:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800cc24:	2301      	movs	r3, #1
 800cc26:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d10a      	bne.n	800cc44 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800cc2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc32:	f383 8811 	msr	BASEPRI, r3
 800cc36:	f3bf 8f6f 	isb	sy
 800cc3a:	f3bf 8f4f 	dsb	sy
 800cc3e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cc40:	bf00      	nop
 800cc42:	e7fe      	b.n	800cc42 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cc44:	f7fe fb28 	bl	800b298 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800cc4c:	f3ef 8211 	mrs	r2, BASEPRI
 800cc50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc54:	f383 8811 	msr	BASEPRI, r3
 800cc58:	f3bf 8f6f 	isb	sy
 800cc5c:	f3bf 8f4f 	dsb	sy
 800cc60:	623a      	str	r2, [r7, #32]
 800cc62:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800cc64:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cc66:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d004      	beq.n	800cc78 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800cc6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc70:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800cc78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc7a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800cc7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800cc82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc84:	2202      	movs	r2, #2
 800cc86:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

			switch( eAction )
 800cc8a:	79fb      	ldrb	r3, [r7, #7]
 800cc8c:	2b04      	cmp	r3, #4
 800cc8e:	d82f      	bhi.n	800ccf0 <xTaskGenericNotifyFromISR+0xdc>
 800cc90:	a201      	add	r2, pc, #4	; (adr r2, 800cc98 <xTaskGenericNotifyFromISR+0x84>)
 800cc92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc96:	bf00      	nop
 800cc98:	0800cd13 	.word	0x0800cd13
 800cc9c:	0800ccad 	.word	0x0800ccad
 800cca0:	0800ccbf 	.word	0x0800ccbf
 800cca4:	0800cccf 	.word	0x0800cccf
 800cca8:	0800ccd9 	.word	0x0800ccd9
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800ccac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccae:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800ccb2:	68bb      	ldr	r3, [r7, #8]
 800ccb4:	431a      	orrs	r2, r3
 800ccb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccb8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 800ccbc:	e02c      	b.n	800cd18 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800ccbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccc0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ccc4:	1c5a      	adds	r2, r3, #1
 800ccc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccc8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 800cccc:	e024      	b.n	800cd18 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800ccce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccd0:	68ba      	ldr	r2, [r7, #8]
 800ccd2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					break;
 800ccd6:	e01f      	b.n	800cd18 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800ccd8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ccdc:	2b02      	cmp	r3, #2
 800ccde:	d004      	beq.n	800ccea <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800cce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cce2:	68ba      	ldr	r2, [r7, #8]
 800cce4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800cce8:	e016      	b.n	800cd18 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800ccea:	2300      	movs	r3, #0
 800ccec:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800ccee:	e013      	b.n	800cd18 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800ccf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccf2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ccf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccfa:	d00c      	beq.n	800cd16 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800ccfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd00:	f383 8811 	msr	BASEPRI, r3
 800cd04:	f3bf 8f6f 	isb	sy
 800cd08:	f3bf 8f4f 	dsb	sy
 800cd0c:	61bb      	str	r3, [r7, #24]
}
 800cd0e:	bf00      	nop
 800cd10:	e7fe      	b.n	800cd10 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800cd12:	bf00      	nop
 800cd14:	e000      	b.n	800cd18 <xTaskGenericNotifyFromISR+0x104>
					break;
 800cd16:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800cd18:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cd1c:	2b01      	cmp	r3, #1
 800cd1e:	d145      	bne.n	800cdac <xTaskGenericNotifyFromISR+0x198>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800cd20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d00a      	beq.n	800cd3e <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 800cd28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd2c:	f383 8811 	msr	BASEPRI, r3
 800cd30:	f3bf 8f6f 	isb	sy
 800cd34:	f3bf 8f4f 	dsb	sy
 800cd38:	617b      	str	r3, [r7, #20]
}
 800cd3a:	bf00      	nop
 800cd3c:	e7fe      	b.n	800cd3c <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cd3e:	4b21      	ldr	r3, [pc, #132]	; (800cdc4 <xTaskGenericNotifyFromISR+0x1b0>)
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d11c      	bne.n	800cd80 <xTaskGenericNotifyFromISR+0x16c>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cd46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd48:	3304      	adds	r3, #4
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	f7fe f868 	bl	800ae20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cd50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd54:	2201      	movs	r2, #1
 800cd56:	409a      	lsls	r2, r3
 800cd58:	4b1b      	ldr	r3, [pc, #108]	; (800cdc8 <xTaskGenericNotifyFromISR+0x1b4>)
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	4313      	orrs	r3, r2
 800cd5e:	4a1a      	ldr	r2, [pc, #104]	; (800cdc8 <xTaskGenericNotifyFromISR+0x1b4>)
 800cd60:	6013      	str	r3, [r2, #0]
 800cd62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd66:	4613      	mov	r3, r2
 800cd68:	009b      	lsls	r3, r3, #2
 800cd6a:	4413      	add	r3, r2
 800cd6c:	009b      	lsls	r3, r3, #2
 800cd6e:	4a17      	ldr	r2, [pc, #92]	; (800cdcc <xTaskGenericNotifyFromISR+0x1b8>)
 800cd70:	441a      	add	r2, r3
 800cd72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd74:	3304      	adds	r3, #4
 800cd76:	4619      	mov	r1, r3
 800cd78:	4610      	mov	r0, r2
 800cd7a:	f7fd fff4 	bl	800ad66 <vListInsertEnd>
 800cd7e:	e005      	b.n	800cd8c <xTaskGenericNotifyFromISR+0x178>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800cd80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd82:	3318      	adds	r3, #24
 800cd84:	4619      	mov	r1, r3
 800cd86:	4812      	ldr	r0, [pc, #72]	; (800cdd0 <xTaskGenericNotifyFromISR+0x1bc>)
 800cd88:	f7fd ffed 	bl	800ad66 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cd8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd90:	4b10      	ldr	r3, [pc, #64]	; (800cdd4 <xTaskGenericNotifyFromISR+0x1c0>)
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd96:	429a      	cmp	r2, r3
 800cd98:	d908      	bls.n	800cdac <xTaskGenericNotifyFromISR+0x198>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800cd9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d002      	beq.n	800cda6 <xTaskGenericNotifyFromISR+0x192>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800cda0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cda2:	2201      	movs	r2, #1
 800cda4:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800cda6:	4b0c      	ldr	r3, [pc, #48]	; (800cdd8 <xTaskGenericNotifyFromISR+0x1c4>)
 800cda8:	2201      	movs	r2, #1
 800cdaa:	601a      	str	r2, [r3, #0]
 800cdac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdae:	613b      	str	r3, [r7, #16]
	__asm volatile
 800cdb0:	693b      	ldr	r3, [r7, #16]
 800cdb2:	f383 8811 	msr	BASEPRI, r3
}
 800cdb6:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800cdb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800cdba:	4618      	mov	r0, r3
 800cdbc:	3738      	adds	r7, #56	; 0x38
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	bd80      	pop	{r7, pc}
 800cdc2:	bf00      	nop
 800cdc4:	20004678 	.word	0x20004678
 800cdc8:	20004658 	.word	0x20004658
 800cdcc:	20004554 	.word	0x20004554
 800cdd0:	20004610 	.word	0x20004610
 800cdd4:	20004550 	.word	0x20004550
 800cdd8:	20004664 	.word	0x20004664

0800cddc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b084      	sub	sp, #16
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
 800cde4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cde6:	4b29      	ldr	r3, [pc, #164]	; (800ce8c <prvAddCurrentTaskToDelayedList+0xb0>)
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cdec:	4b28      	ldr	r3, [pc, #160]	; (800ce90 <prvAddCurrentTaskToDelayedList+0xb4>)
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	3304      	adds	r3, #4
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	f7fe f814 	bl	800ae20 <uxListRemove>
 800cdf8:	4603      	mov	r3, r0
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d10b      	bne.n	800ce16 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800cdfe:	4b24      	ldr	r3, [pc, #144]	; (800ce90 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce04:	2201      	movs	r2, #1
 800ce06:	fa02 f303 	lsl.w	r3, r2, r3
 800ce0a:	43da      	mvns	r2, r3
 800ce0c:	4b21      	ldr	r3, [pc, #132]	; (800ce94 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	4013      	ands	r3, r2
 800ce12:	4a20      	ldr	r2, [pc, #128]	; (800ce94 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ce14:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce1c:	d10a      	bne.n	800ce34 <prvAddCurrentTaskToDelayedList+0x58>
 800ce1e:	683b      	ldr	r3, [r7, #0]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d007      	beq.n	800ce34 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ce24:	4b1a      	ldr	r3, [pc, #104]	; (800ce90 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	3304      	adds	r3, #4
 800ce2a:	4619      	mov	r1, r3
 800ce2c:	481a      	ldr	r0, [pc, #104]	; (800ce98 <prvAddCurrentTaskToDelayedList+0xbc>)
 800ce2e:	f7fd ff9a 	bl	800ad66 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ce32:	e026      	b.n	800ce82 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ce34:	68fa      	ldr	r2, [r7, #12]
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	4413      	add	r3, r2
 800ce3a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ce3c:	4b14      	ldr	r3, [pc, #80]	; (800ce90 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	68ba      	ldr	r2, [r7, #8]
 800ce42:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ce44:	68ba      	ldr	r2, [r7, #8]
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	429a      	cmp	r2, r3
 800ce4a:	d209      	bcs.n	800ce60 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ce4c:	4b13      	ldr	r3, [pc, #76]	; (800ce9c <prvAddCurrentTaskToDelayedList+0xc0>)
 800ce4e:	681a      	ldr	r2, [r3, #0]
 800ce50:	4b0f      	ldr	r3, [pc, #60]	; (800ce90 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	3304      	adds	r3, #4
 800ce56:	4619      	mov	r1, r3
 800ce58:	4610      	mov	r0, r2
 800ce5a:	f7fd ffa8 	bl	800adae <vListInsert>
}
 800ce5e:	e010      	b.n	800ce82 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ce60:	4b0f      	ldr	r3, [pc, #60]	; (800cea0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800ce62:	681a      	ldr	r2, [r3, #0]
 800ce64:	4b0a      	ldr	r3, [pc, #40]	; (800ce90 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	3304      	adds	r3, #4
 800ce6a:	4619      	mov	r1, r3
 800ce6c:	4610      	mov	r0, r2
 800ce6e:	f7fd ff9e 	bl	800adae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ce72:	4b0c      	ldr	r3, [pc, #48]	; (800cea4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	68ba      	ldr	r2, [r7, #8]
 800ce78:	429a      	cmp	r2, r3
 800ce7a:	d202      	bcs.n	800ce82 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ce7c:	4a09      	ldr	r2, [pc, #36]	; (800cea4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ce7e:	68bb      	ldr	r3, [r7, #8]
 800ce80:	6013      	str	r3, [r2, #0]
}
 800ce82:	bf00      	nop
 800ce84:	3710      	adds	r7, #16
 800ce86:	46bd      	mov	sp, r7
 800ce88:	bd80      	pop	{r7, pc}
 800ce8a:	bf00      	nop
 800ce8c:	20004654 	.word	0x20004654
 800ce90:	20004550 	.word	0x20004550
 800ce94:	20004658 	.word	0x20004658
 800ce98:	2000463c 	.word	0x2000463c
 800ce9c:	2000460c 	.word	0x2000460c
 800cea0:	20004608 	.word	0x20004608
 800cea4:	20004670 	.word	0x20004670

0800cea8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b084      	sub	sp, #16
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	6078      	str	r0, [r7, #4]
 800ceb0:	460b      	mov	r3, r1
 800ceb2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ceb4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ceb8:	f002 fc96 	bl	800f7e8 <USBD_static_malloc>
 800cebc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d109      	bne.n	800ced8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	32b0      	adds	r2, #176	; 0xb0
 800cece:	2100      	movs	r1, #0
 800ced0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800ced4:	2302      	movs	r3, #2
 800ced6:	e0d4      	b.n	800d082 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800ced8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800cedc:	2100      	movs	r1, #0
 800cede:	68f8      	ldr	r0, [r7, #12]
 800cee0:	f002 fdf7 	bl	800fad2 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	32b0      	adds	r2, #176	; 0xb0
 800ceee:	68f9      	ldr	r1, [r7, #12]
 800cef0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	32b0      	adds	r2, #176	; 0xb0
 800cefe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	7c1b      	ldrb	r3, [r3, #16]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d138      	bne.n	800cf82 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800cf10:	4b5e      	ldr	r3, [pc, #376]	; (800d08c <USBD_CDC_Init+0x1e4>)
 800cf12:	7819      	ldrb	r1, [r3, #0]
 800cf14:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cf18:	2202      	movs	r2, #2
 800cf1a:	6878      	ldr	r0, [r7, #4]
 800cf1c:	f002 fb41 	bl	800f5a2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800cf20:	4b5a      	ldr	r3, [pc, #360]	; (800d08c <USBD_CDC_Init+0x1e4>)
 800cf22:	781b      	ldrb	r3, [r3, #0]
 800cf24:	f003 020f 	and.w	r2, r3, #15
 800cf28:	6879      	ldr	r1, [r7, #4]
 800cf2a:	4613      	mov	r3, r2
 800cf2c:	009b      	lsls	r3, r3, #2
 800cf2e:	4413      	add	r3, r2
 800cf30:	009b      	lsls	r3, r3, #2
 800cf32:	440b      	add	r3, r1
 800cf34:	3324      	adds	r3, #36	; 0x24
 800cf36:	2201      	movs	r2, #1
 800cf38:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800cf3a:	4b55      	ldr	r3, [pc, #340]	; (800d090 <USBD_CDC_Init+0x1e8>)
 800cf3c:	7819      	ldrb	r1, [r3, #0]
 800cf3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cf42:	2202      	movs	r2, #2
 800cf44:	6878      	ldr	r0, [r7, #4]
 800cf46:	f002 fb2c 	bl	800f5a2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800cf4a:	4b51      	ldr	r3, [pc, #324]	; (800d090 <USBD_CDC_Init+0x1e8>)
 800cf4c:	781b      	ldrb	r3, [r3, #0]
 800cf4e:	f003 020f 	and.w	r2, r3, #15
 800cf52:	6879      	ldr	r1, [r7, #4]
 800cf54:	4613      	mov	r3, r2
 800cf56:	009b      	lsls	r3, r3, #2
 800cf58:	4413      	add	r3, r2
 800cf5a:	009b      	lsls	r3, r3, #2
 800cf5c:	440b      	add	r3, r1
 800cf5e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cf62:	2201      	movs	r2, #1
 800cf64:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800cf66:	4b4b      	ldr	r3, [pc, #300]	; (800d094 <USBD_CDC_Init+0x1ec>)
 800cf68:	781b      	ldrb	r3, [r3, #0]
 800cf6a:	f003 020f 	and.w	r2, r3, #15
 800cf6e:	6879      	ldr	r1, [r7, #4]
 800cf70:	4613      	mov	r3, r2
 800cf72:	009b      	lsls	r3, r3, #2
 800cf74:	4413      	add	r3, r2
 800cf76:	009b      	lsls	r3, r3, #2
 800cf78:	440b      	add	r3, r1
 800cf7a:	3326      	adds	r3, #38	; 0x26
 800cf7c:	2210      	movs	r2, #16
 800cf7e:	801a      	strh	r2, [r3, #0]
 800cf80:	e035      	b.n	800cfee <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800cf82:	4b42      	ldr	r3, [pc, #264]	; (800d08c <USBD_CDC_Init+0x1e4>)
 800cf84:	7819      	ldrb	r1, [r3, #0]
 800cf86:	2340      	movs	r3, #64	; 0x40
 800cf88:	2202      	movs	r2, #2
 800cf8a:	6878      	ldr	r0, [r7, #4]
 800cf8c:	f002 fb09 	bl	800f5a2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800cf90:	4b3e      	ldr	r3, [pc, #248]	; (800d08c <USBD_CDC_Init+0x1e4>)
 800cf92:	781b      	ldrb	r3, [r3, #0]
 800cf94:	f003 020f 	and.w	r2, r3, #15
 800cf98:	6879      	ldr	r1, [r7, #4]
 800cf9a:	4613      	mov	r3, r2
 800cf9c:	009b      	lsls	r3, r3, #2
 800cf9e:	4413      	add	r3, r2
 800cfa0:	009b      	lsls	r3, r3, #2
 800cfa2:	440b      	add	r3, r1
 800cfa4:	3324      	adds	r3, #36	; 0x24
 800cfa6:	2201      	movs	r2, #1
 800cfa8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800cfaa:	4b39      	ldr	r3, [pc, #228]	; (800d090 <USBD_CDC_Init+0x1e8>)
 800cfac:	7819      	ldrb	r1, [r3, #0]
 800cfae:	2340      	movs	r3, #64	; 0x40
 800cfb0:	2202      	movs	r2, #2
 800cfb2:	6878      	ldr	r0, [r7, #4]
 800cfb4:	f002 faf5 	bl	800f5a2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800cfb8:	4b35      	ldr	r3, [pc, #212]	; (800d090 <USBD_CDC_Init+0x1e8>)
 800cfba:	781b      	ldrb	r3, [r3, #0]
 800cfbc:	f003 020f 	and.w	r2, r3, #15
 800cfc0:	6879      	ldr	r1, [r7, #4]
 800cfc2:	4613      	mov	r3, r2
 800cfc4:	009b      	lsls	r3, r3, #2
 800cfc6:	4413      	add	r3, r2
 800cfc8:	009b      	lsls	r3, r3, #2
 800cfca:	440b      	add	r3, r1
 800cfcc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cfd0:	2201      	movs	r2, #1
 800cfd2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800cfd4:	4b2f      	ldr	r3, [pc, #188]	; (800d094 <USBD_CDC_Init+0x1ec>)
 800cfd6:	781b      	ldrb	r3, [r3, #0]
 800cfd8:	f003 020f 	and.w	r2, r3, #15
 800cfdc:	6879      	ldr	r1, [r7, #4]
 800cfde:	4613      	mov	r3, r2
 800cfe0:	009b      	lsls	r3, r3, #2
 800cfe2:	4413      	add	r3, r2
 800cfe4:	009b      	lsls	r3, r3, #2
 800cfe6:	440b      	add	r3, r1
 800cfe8:	3326      	adds	r3, #38	; 0x26
 800cfea:	2210      	movs	r2, #16
 800cfec:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800cfee:	4b29      	ldr	r3, [pc, #164]	; (800d094 <USBD_CDC_Init+0x1ec>)
 800cff0:	7819      	ldrb	r1, [r3, #0]
 800cff2:	2308      	movs	r3, #8
 800cff4:	2203      	movs	r2, #3
 800cff6:	6878      	ldr	r0, [r7, #4]
 800cff8:	f002 fad3 	bl	800f5a2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800cffc:	4b25      	ldr	r3, [pc, #148]	; (800d094 <USBD_CDC_Init+0x1ec>)
 800cffe:	781b      	ldrb	r3, [r3, #0]
 800d000:	f003 020f 	and.w	r2, r3, #15
 800d004:	6879      	ldr	r1, [r7, #4]
 800d006:	4613      	mov	r3, r2
 800d008:	009b      	lsls	r3, r3, #2
 800d00a:	4413      	add	r3, r2
 800d00c:	009b      	lsls	r3, r3, #2
 800d00e:	440b      	add	r3, r1
 800d010:	3324      	adds	r3, #36	; 0x24
 800d012:	2201      	movs	r2, #1
 800d014:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	2200      	movs	r2, #0
 800d01a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d024:	687a      	ldr	r2, [r7, #4]
 800d026:	33b0      	adds	r3, #176	; 0xb0
 800d028:	009b      	lsls	r3, r3, #2
 800d02a:	4413      	add	r3, r2
 800d02c:	685b      	ldr	r3, [r3, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	2200      	movs	r2, #0
 800d036:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	2200      	movs	r2, #0
 800d03e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d101      	bne.n	800d050 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800d04c:	2302      	movs	r3, #2
 800d04e:	e018      	b.n	800d082 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	7c1b      	ldrb	r3, [r3, #16]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d10a      	bne.n	800d06e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d058:	4b0d      	ldr	r3, [pc, #52]	; (800d090 <USBD_CDC_Init+0x1e8>)
 800d05a:	7819      	ldrb	r1, [r3, #0]
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d062:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d066:	6878      	ldr	r0, [r7, #4]
 800d068:	f002 fb8a 	bl	800f780 <USBD_LL_PrepareReceive>
 800d06c:	e008      	b.n	800d080 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d06e:	4b08      	ldr	r3, [pc, #32]	; (800d090 <USBD_CDC_Init+0x1e8>)
 800d070:	7819      	ldrb	r1, [r3, #0]
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d078:	2340      	movs	r3, #64	; 0x40
 800d07a:	6878      	ldr	r0, [r7, #4]
 800d07c:	f002 fb80 	bl	800f780 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d080:	2300      	movs	r3, #0
}
 800d082:	4618      	mov	r0, r3
 800d084:	3710      	adds	r7, #16
 800d086:	46bd      	mov	sp, r7
 800d088:	bd80      	pop	{r7, pc}
 800d08a:	bf00      	nop
 800d08c:	20000113 	.word	0x20000113
 800d090:	20000114 	.word	0x20000114
 800d094:	20000115 	.word	0x20000115

0800d098 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b082      	sub	sp, #8
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
 800d0a0:	460b      	mov	r3, r1
 800d0a2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800d0a4:	4b3a      	ldr	r3, [pc, #232]	; (800d190 <USBD_CDC_DeInit+0xf8>)
 800d0a6:	781b      	ldrb	r3, [r3, #0]
 800d0a8:	4619      	mov	r1, r3
 800d0aa:	6878      	ldr	r0, [r7, #4]
 800d0ac:	f002 fa9f 	bl	800f5ee <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800d0b0:	4b37      	ldr	r3, [pc, #220]	; (800d190 <USBD_CDC_DeInit+0xf8>)
 800d0b2:	781b      	ldrb	r3, [r3, #0]
 800d0b4:	f003 020f 	and.w	r2, r3, #15
 800d0b8:	6879      	ldr	r1, [r7, #4]
 800d0ba:	4613      	mov	r3, r2
 800d0bc:	009b      	lsls	r3, r3, #2
 800d0be:	4413      	add	r3, r2
 800d0c0:	009b      	lsls	r3, r3, #2
 800d0c2:	440b      	add	r3, r1
 800d0c4:	3324      	adds	r3, #36	; 0x24
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800d0ca:	4b32      	ldr	r3, [pc, #200]	; (800d194 <USBD_CDC_DeInit+0xfc>)
 800d0cc:	781b      	ldrb	r3, [r3, #0]
 800d0ce:	4619      	mov	r1, r3
 800d0d0:	6878      	ldr	r0, [r7, #4]
 800d0d2:	f002 fa8c 	bl	800f5ee <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800d0d6:	4b2f      	ldr	r3, [pc, #188]	; (800d194 <USBD_CDC_DeInit+0xfc>)
 800d0d8:	781b      	ldrb	r3, [r3, #0]
 800d0da:	f003 020f 	and.w	r2, r3, #15
 800d0de:	6879      	ldr	r1, [r7, #4]
 800d0e0:	4613      	mov	r3, r2
 800d0e2:	009b      	lsls	r3, r3, #2
 800d0e4:	4413      	add	r3, r2
 800d0e6:	009b      	lsls	r3, r3, #2
 800d0e8:	440b      	add	r3, r1
 800d0ea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d0ee:	2200      	movs	r2, #0
 800d0f0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800d0f2:	4b29      	ldr	r3, [pc, #164]	; (800d198 <USBD_CDC_DeInit+0x100>)
 800d0f4:	781b      	ldrb	r3, [r3, #0]
 800d0f6:	4619      	mov	r1, r3
 800d0f8:	6878      	ldr	r0, [r7, #4]
 800d0fa:	f002 fa78 	bl	800f5ee <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800d0fe:	4b26      	ldr	r3, [pc, #152]	; (800d198 <USBD_CDC_DeInit+0x100>)
 800d100:	781b      	ldrb	r3, [r3, #0]
 800d102:	f003 020f 	and.w	r2, r3, #15
 800d106:	6879      	ldr	r1, [r7, #4]
 800d108:	4613      	mov	r3, r2
 800d10a:	009b      	lsls	r3, r3, #2
 800d10c:	4413      	add	r3, r2
 800d10e:	009b      	lsls	r3, r3, #2
 800d110:	440b      	add	r3, r1
 800d112:	3324      	adds	r3, #36	; 0x24
 800d114:	2200      	movs	r2, #0
 800d116:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800d118:	4b1f      	ldr	r3, [pc, #124]	; (800d198 <USBD_CDC_DeInit+0x100>)
 800d11a:	781b      	ldrb	r3, [r3, #0]
 800d11c:	f003 020f 	and.w	r2, r3, #15
 800d120:	6879      	ldr	r1, [r7, #4]
 800d122:	4613      	mov	r3, r2
 800d124:	009b      	lsls	r3, r3, #2
 800d126:	4413      	add	r3, r2
 800d128:	009b      	lsls	r3, r3, #2
 800d12a:	440b      	add	r3, r1
 800d12c:	3326      	adds	r3, #38	; 0x26
 800d12e:	2200      	movs	r2, #0
 800d130:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	32b0      	adds	r2, #176	; 0xb0
 800d13c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d01f      	beq.n	800d184 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d14a:	687a      	ldr	r2, [r7, #4]
 800d14c:	33b0      	adds	r3, #176	; 0xb0
 800d14e:	009b      	lsls	r3, r3, #2
 800d150:	4413      	add	r3, r2
 800d152:	685b      	ldr	r3, [r3, #4]
 800d154:	685b      	ldr	r3, [r3, #4]
 800d156:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	32b0      	adds	r2, #176	; 0xb0
 800d162:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d166:	4618      	mov	r0, r3
 800d168:	f002 fb4c 	bl	800f804 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	32b0      	adds	r2, #176	; 0xb0
 800d176:	2100      	movs	r1, #0
 800d178:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	2200      	movs	r2, #0
 800d180:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d184:	2300      	movs	r3, #0
}
 800d186:	4618      	mov	r0, r3
 800d188:	3708      	adds	r7, #8
 800d18a:	46bd      	mov	sp, r7
 800d18c:	bd80      	pop	{r7, pc}
 800d18e:	bf00      	nop
 800d190:	20000113 	.word	0x20000113
 800d194:	20000114 	.word	0x20000114
 800d198:	20000115 	.word	0x20000115

0800d19c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b086      	sub	sp, #24
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
 800d1a4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	32b0      	adds	r2, #176	; 0xb0
 800d1b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1b4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d1be:	2300      	movs	r3, #0
 800d1c0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d1c2:	693b      	ldr	r3, [r7, #16]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d101      	bne.n	800d1cc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800d1c8:	2303      	movs	r3, #3
 800d1ca:	e0bf      	b.n	800d34c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d1cc:	683b      	ldr	r3, [r7, #0]
 800d1ce:	781b      	ldrb	r3, [r3, #0]
 800d1d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d050      	beq.n	800d27a <USBD_CDC_Setup+0xde>
 800d1d8:	2b20      	cmp	r3, #32
 800d1da:	f040 80af 	bne.w	800d33c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	88db      	ldrh	r3, [r3, #6]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d03a      	beq.n	800d25c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d1e6:	683b      	ldr	r3, [r7, #0]
 800d1e8:	781b      	ldrb	r3, [r3, #0]
 800d1ea:	b25b      	sxtb	r3, r3
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	da1b      	bge.n	800d228 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d1f6:	687a      	ldr	r2, [r7, #4]
 800d1f8:	33b0      	adds	r3, #176	; 0xb0
 800d1fa:	009b      	lsls	r3, r3, #2
 800d1fc:	4413      	add	r3, r2
 800d1fe:	685b      	ldr	r3, [r3, #4]
 800d200:	689b      	ldr	r3, [r3, #8]
 800d202:	683a      	ldr	r2, [r7, #0]
 800d204:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800d206:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d208:	683a      	ldr	r2, [r7, #0]
 800d20a:	88d2      	ldrh	r2, [r2, #6]
 800d20c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d20e:	683b      	ldr	r3, [r7, #0]
 800d210:	88db      	ldrh	r3, [r3, #6]
 800d212:	2b07      	cmp	r3, #7
 800d214:	bf28      	it	cs
 800d216:	2307      	movcs	r3, #7
 800d218:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d21a:	693b      	ldr	r3, [r7, #16]
 800d21c:	89fa      	ldrh	r2, [r7, #14]
 800d21e:	4619      	mov	r1, r3
 800d220:	6878      	ldr	r0, [r7, #4]
 800d222:	f001 fd89 	bl	800ed38 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800d226:	e090      	b.n	800d34a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800d228:	683b      	ldr	r3, [r7, #0]
 800d22a:	785a      	ldrb	r2, [r3, #1]
 800d22c:	693b      	ldr	r3, [r7, #16]
 800d22e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800d232:	683b      	ldr	r3, [r7, #0]
 800d234:	88db      	ldrh	r3, [r3, #6]
 800d236:	2b3f      	cmp	r3, #63	; 0x3f
 800d238:	d803      	bhi.n	800d242 <USBD_CDC_Setup+0xa6>
 800d23a:	683b      	ldr	r3, [r7, #0]
 800d23c:	88db      	ldrh	r3, [r3, #6]
 800d23e:	b2da      	uxtb	r2, r3
 800d240:	e000      	b.n	800d244 <USBD_CDC_Setup+0xa8>
 800d242:	2240      	movs	r2, #64	; 0x40
 800d244:	693b      	ldr	r3, [r7, #16]
 800d246:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800d24a:	6939      	ldr	r1, [r7, #16]
 800d24c:	693b      	ldr	r3, [r7, #16]
 800d24e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800d252:	461a      	mov	r2, r3
 800d254:	6878      	ldr	r0, [r7, #4]
 800d256:	f001 fd9b 	bl	800ed90 <USBD_CtlPrepareRx>
      break;
 800d25a:	e076      	b.n	800d34a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d262:	687a      	ldr	r2, [r7, #4]
 800d264:	33b0      	adds	r3, #176	; 0xb0
 800d266:	009b      	lsls	r3, r3, #2
 800d268:	4413      	add	r3, r2
 800d26a:	685b      	ldr	r3, [r3, #4]
 800d26c:	689b      	ldr	r3, [r3, #8]
 800d26e:	683a      	ldr	r2, [r7, #0]
 800d270:	7850      	ldrb	r0, [r2, #1]
 800d272:	2200      	movs	r2, #0
 800d274:	6839      	ldr	r1, [r7, #0]
 800d276:	4798      	blx	r3
      break;
 800d278:	e067      	b.n	800d34a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d27a:	683b      	ldr	r3, [r7, #0]
 800d27c:	785b      	ldrb	r3, [r3, #1]
 800d27e:	2b0b      	cmp	r3, #11
 800d280:	d851      	bhi.n	800d326 <USBD_CDC_Setup+0x18a>
 800d282:	a201      	add	r2, pc, #4	; (adr r2, 800d288 <USBD_CDC_Setup+0xec>)
 800d284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d288:	0800d2b9 	.word	0x0800d2b9
 800d28c:	0800d335 	.word	0x0800d335
 800d290:	0800d327 	.word	0x0800d327
 800d294:	0800d327 	.word	0x0800d327
 800d298:	0800d327 	.word	0x0800d327
 800d29c:	0800d327 	.word	0x0800d327
 800d2a0:	0800d327 	.word	0x0800d327
 800d2a4:	0800d327 	.word	0x0800d327
 800d2a8:	0800d327 	.word	0x0800d327
 800d2ac:	0800d327 	.word	0x0800d327
 800d2b0:	0800d2e3 	.word	0x0800d2e3
 800d2b4:	0800d30d 	.word	0x0800d30d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2be:	b2db      	uxtb	r3, r3
 800d2c0:	2b03      	cmp	r3, #3
 800d2c2:	d107      	bne.n	800d2d4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d2c4:	f107 030a 	add.w	r3, r7, #10
 800d2c8:	2202      	movs	r2, #2
 800d2ca:	4619      	mov	r1, r3
 800d2cc:	6878      	ldr	r0, [r7, #4]
 800d2ce:	f001 fd33 	bl	800ed38 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d2d2:	e032      	b.n	800d33a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d2d4:	6839      	ldr	r1, [r7, #0]
 800d2d6:	6878      	ldr	r0, [r7, #4]
 800d2d8:	f001 fcbd 	bl	800ec56 <USBD_CtlError>
            ret = USBD_FAIL;
 800d2dc:	2303      	movs	r3, #3
 800d2de:	75fb      	strb	r3, [r7, #23]
          break;
 800d2e0:	e02b      	b.n	800d33a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2e8:	b2db      	uxtb	r3, r3
 800d2ea:	2b03      	cmp	r3, #3
 800d2ec:	d107      	bne.n	800d2fe <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d2ee:	f107 030d 	add.w	r3, r7, #13
 800d2f2:	2201      	movs	r2, #1
 800d2f4:	4619      	mov	r1, r3
 800d2f6:	6878      	ldr	r0, [r7, #4]
 800d2f8:	f001 fd1e 	bl	800ed38 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d2fc:	e01d      	b.n	800d33a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d2fe:	6839      	ldr	r1, [r7, #0]
 800d300:	6878      	ldr	r0, [r7, #4]
 800d302:	f001 fca8 	bl	800ec56 <USBD_CtlError>
            ret = USBD_FAIL;
 800d306:	2303      	movs	r3, #3
 800d308:	75fb      	strb	r3, [r7, #23]
          break;
 800d30a:	e016      	b.n	800d33a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d312:	b2db      	uxtb	r3, r3
 800d314:	2b03      	cmp	r3, #3
 800d316:	d00f      	beq.n	800d338 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800d318:	6839      	ldr	r1, [r7, #0]
 800d31a:	6878      	ldr	r0, [r7, #4]
 800d31c:	f001 fc9b 	bl	800ec56 <USBD_CtlError>
            ret = USBD_FAIL;
 800d320:	2303      	movs	r3, #3
 800d322:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d324:	e008      	b.n	800d338 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d326:	6839      	ldr	r1, [r7, #0]
 800d328:	6878      	ldr	r0, [r7, #4]
 800d32a:	f001 fc94 	bl	800ec56 <USBD_CtlError>
          ret = USBD_FAIL;
 800d32e:	2303      	movs	r3, #3
 800d330:	75fb      	strb	r3, [r7, #23]
          break;
 800d332:	e002      	b.n	800d33a <USBD_CDC_Setup+0x19e>
          break;
 800d334:	bf00      	nop
 800d336:	e008      	b.n	800d34a <USBD_CDC_Setup+0x1ae>
          break;
 800d338:	bf00      	nop
      }
      break;
 800d33a:	e006      	b.n	800d34a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800d33c:	6839      	ldr	r1, [r7, #0]
 800d33e:	6878      	ldr	r0, [r7, #4]
 800d340:	f001 fc89 	bl	800ec56 <USBD_CtlError>
      ret = USBD_FAIL;
 800d344:	2303      	movs	r3, #3
 800d346:	75fb      	strb	r3, [r7, #23]
      break;
 800d348:	bf00      	nop
  }

  return (uint8_t)ret;
 800d34a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d34c:	4618      	mov	r0, r3
 800d34e:	3718      	adds	r7, #24
 800d350:	46bd      	mov	sp, r7
 800d352:	bd80      	pop	{r7, pc}

0800d354 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d354:	b580      	push	{r7, lr}
 800d356:	b084      	sub	sp, #16
 800d358:	af00      	add	r7, sp, #0
 800d35a:	6078      	str	r0, [r7, #4]
 800d35c:	460b      	mov	r3, r1
 800d35e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d366:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	32b0      	adds	r2, #176	; 0xb0
 800d372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d101      	bne.n	800d37e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800d37a:	2303      	movs	r3, #3
 800d37c:	e065      	b.n	800d44a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	32b0      	adds	r2, #176	; 0xb0
 800d388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d38c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d38e:	78fb      	ldrb	r3, [r7, #3]
 800d390:	f003 020f 	and.w	r2, r3, #15
 800d394:	6879      	ldr	r1, [r7, #4]
 800d396:	4613      	mov	r3, r2
 800d398:	009b      	lsls	r3, r3, #2
 800d39a:	4413      	add	r3, r2
 800d39c:	009b      	lsls	r3, r3, #2
 800d39e:	440b      	add	r3, r1
 800d3a0:	3318      	adds	r3, #24
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d02f      	beq.n	800d408 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800d3a8:	78fb      	ldrb	r3, [r7, #3]
 800d3aa:	f003 020f 	and.w	r2, r3, #15
 800d3ae:	6879      	ldr	r1, [r7, #4]
 800d3b0:	4613      	mov	r3, r2
 800d3b2:	009b      	lsls	r3, r3, #2
 800d3b4:	4413      	add	r3, r2
 800d3b6:	009b      	lsls	r3, r3, #2
 800d3b8:	440b      	add	r3, r1
 800d3ba:	3318      	adds	r3, #24
 800d3bc:	681a      	ldr	r2, [r3, #0]
 800d3be:	78fb      	ldrb	r3, [r7, #3]
 800d3c0:	f003 010f 	and.w	r1, r3, #15
 800d3c4:	68f8      	ldr	r0, [r7, #12]
 800d3c6:	460b      	mov	r3, r1
 800d3c8:	00db      	lsls	r3, r3, #3
 800d3ca:	440b      	add	r3, r1
 800d3cc:	009b      	lsls	r3, r3, #2
 800d3ce:	4403      	add	r3, r0
 800d3d0:	3348      	adds	r3, #72	; 0x48
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	fbb2 f1f3 	udiv	r1, r2, r3
 800d3d8:	fb01 f303 	mul.w	r3, r1, r3
 800d3dc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d112      	bne.n	800d408 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800d3e2:	78fb      	ldrb	r3, [r7, #3]
 800d3e4:	f003 020f 	and.w	r2, r3, #15
 800d3e8:	6879      	ldr	r1, [r7, #4]
 800d3ea:	4613      	mov	r3, r2
 800d3ec:	009b      	lsls	r3, r3, #2
 800d3ee:	4413      	add	r3, r2
 800d3f0:	009b      	lsls	r3, r3, #2
 800d3f2:	440b      	add	r3, r1
 800d3f4:	3318      	adds	r3, #24
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d3fa:	78f9      	ldrb	r1, [r7, #3]
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	2200      	movs	r2, #0
 800d400:	6878      	ldr	r0, [r7, #4]
 800d402:	f002 f99c 	bl	800f73e <USBD_LL_Transmit>
 800d406:	e01f      	b.n	800d448 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800d408:	68bb      	ldr	r3, [r7, #8]
 800d40a:	2200      	movs	r2, #0
 800d40c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d416:	687a      	ldr	r2, [r7, #4]
 800d418:	33b0      	adds	r3, #176	; 0xb0
 800d41a:	009b      	lsls	r3, r3, #2
 800d41c:	4413      	add	r3, r2
 800d41e:	685b      	ldr	r3, [r3, #4]
 800d420:	691b      	ldr	r3, [r3, #16]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d010      	beq.n	800d448 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d42c:	687a      	ldr	r2, [r7, #4]
 800d42e:	33b0      	adds	r3, #176	; 0xb0
 800d430:	009b      	lsls	r3, r3, #2
 800d432:	4413      	add	r3, r2
 800d434:	685b      	ldr	r3, [r3, #4]
 800d436:	691b      	ldr	r3, [r3, #16]
 800d438:	68ba      	ldr	r2, [r7, #8]
 800d43a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800d43e:	68ba      	ldr	r2, [r7, #8]
 800d440:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800d444:	78fa      	ldrb	r2, [r7, #3]
 800d446:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d448:	2300      	movs	r3, #0
}
 800d44a:	4618      	mov	r0, r3
 800d44c:	3710      	adds	r7, #16
 800d44e:	46bd      	mov	sp, r7
 800d450:	bd80      	pop	{r7, pc}

0800d452 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d452:	b580      	push	{r7, lr}
 800d454:	b084      	sub	sp, #16
 800d456:	af00      	add	r7, sp, #0
 800d458:	6078      	str	r0, [r7, #4]
 800d45a:	460b      	mov	r3, r1
 800d45c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	32b0      	adds	r2, #176	; 0xb0
 800d468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d46c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	32b0      	adds	r2, #176	; 0xb0
 800d478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d101      	bne.n	800d484 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d480:	2303      	movs	r3, #3
 800d482:	e01a      	b.n	800d4ba <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d484:	78fb      	ldrb	r3, [r7, #3]
 800d486:	4619      	mov	r1, r3
 800d488:	6878      	ldr	r0, [r7, #4]
 800d48a:	f002 f99a 	bl	800f7c2 <USBD_LL_GetRxDataSize>
 800d48e:	4602      	mov	r2, r0
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d49c:	687a      	ldr	r2, [r7, #4]
 800d49e:	33b0      	adds	r3, #176	; 0xb0
 800d4a0:	009b      	lsls	r3, r3, #2
 800d4a2:	4413      	add	r3, r2
 800d4a4:	685b      	ldr	r3, [r3, #4]
 800d4a6:	68db      	ldr	r3, [r3, #12]
 800d4a8:	68fa      	ldr	r2, [r7, #12]
 800d4aa:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d4ae:	68fa      	ldr	r2, [r7, #12]
 800d4b0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d4b4:	4611      	mov	r1, r2
 800d4b6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d4b8:	2300      	movs	r3, #0
}
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	3710      	adds	r7, #16
 800d4be:	46bd      	mov	sp, r7
 800d4c0:	bd80      	pop	{r7, pc}

0800d4c2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d4c2:	b580      	push	{r7, lr}
 800d4c4:	b084      	sub	sp, #16
 800d4c6:	af00      	add	r7, sp, #0
 800d4c8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	32b0      	adds	r2, #176	; 0xb0
 800d4d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4d8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d101      	bne.n	800d4e4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d4e0:	2303      	movs	r3, #3
 800d4e2:	e025      	b.n	800d530 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d4ea:	687a      	ldr	r2, [r7, #4]
 800d4ec:	33b0      	adds	r3, #176	; 0xb0
 800d4ee:	009b      	lsls	r3, r3, #2
 800d4f0:	4413      	add	r3, r2
 800d4f2:	685b      	ldr	r3, [r3, #4]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d01a      	beq.n	800d52e <USBD_CDC_EP0_RxReady+0x6c>
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d4fe:	2bff      	cmp	r3, #255	; 0xff
 800d500:	d015      	beq.n	800d52e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d508:	687a      	ldr	r2, [r7, #4]
 800d50a:	33b0      	adds	r3, #176	; 0xb0
 800d50c:	009b      	lsls	r3, r3, #2
 800d50e:	4413      	add	r3, r2
 800d510:	685b      	ldr	r3, [r3, #4]
 800d512:	689b      	ldr	r3, [r3, #8]
 800d514:	68fa      	ldr	r2, [r7, #12]
 800d516:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800d51a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800d51c:	68fa      	ldr	r2, [r7, #12]
 800d51e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d522:	b292      	uxth	r2, r2
 800d524:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	22ff      	movs	r2, #255	; 0xff
 800d52a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800d52e:	2300      	movs	r3, #0
}
 800d530:	4618      	mov	r0, r3
 800d532:	3710      	adds	r7, #16
 800d534:	46bd      	mov	sp, r7
 800d536:	bd80      	pop	{r7, pc}

0800d538 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b086      	sub	sp, #24
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d540:	2182      	movs	r1, #130	; 0x82
 800d542:	4818      	ldr	r0, [pc, #96]	; (800d5a4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d544:	f000 fd4f 	bl	800dfe6 <USBD_GetEpDesc>
 800d548:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d54a:	2101      	movs	r1, #1
 800d54c:	4815      	ldr	r0, [pc, #84]	; (800d5a4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d54e:	f000 fd4a 	bl	800dfe6 <USBD_GetEpDesc>
 800d552:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d554:	2181      	movs	r1, #129	; 0x81
 800d556:	4813      	ldr	r0, [pc, #76]	; (800d5a4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d558:	f000 fd45 	bl	800dfe6 <USBD_GetEpDesc>
 800d55c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d55e:	697b      	ldr	r3, [r7, #20]
 800d560:	2b00      	cmp	r3, #0
 800d562:	d002      	beq.n	800d56a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d564:	697b      	ldr	r3, [r7, #20]
 800d566:	2210      	movs	r2, #16
 800d568:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d56a:	693b      	ldr	r3, [r7, #16]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d006      	beq.n	800d57e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d570:	693b      	ldr	r3, [r7, #16]
 800d572:	2200      	movs	r2, #0
 800d574:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d578:	711a      	strb	r2, [r3, #4]
 800d57a:	2200      	movs	r2, #0
 800d57c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d006      	beq.n	800d592 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	2200      	movs	r2, #0
 800d588:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d58c:	711a      	strb	r2, [r3, #4]
 800d58e:	2200      	movs	r2, #0
 800d590:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	2243      	movs	r2, #67	; 0x43
 800d596:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d598:	4b02      	ldr	r3, [pc, #8]	; (800d5a4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800d59a:	4618      	mov	r0, r3
 800d59c:	3718      	adds	r7, #24
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	bd80      	pop	{r7, pc}
 800d5a2:	bf00      	nop
 800d5a4:	200000d0 	.word	0x200000d0

0800d5a8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b086      	sub	sp, #24
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d5b0:	2182      	movs	r1, #130	; 0x82
 800d5b2:	4818      	ldr	r0, [pc, #96]	; (800d614 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d5b4:	f000 fd17 	bl	800dfe6 <USBD_GetEpDesc>
 800d5b8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d5ba:	2101      	movs	r1, #1
 800d5bc:	4815      	ldr	r0, [pc, #84]	; (800d614 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d5be:	f000 fd12 	bl	800dfe6 <USBD_GetEpDesc>
 800d5c2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d5c4:	2181      	movs	r1, #129	; 0x81
 800d5c6:	4813      	ldr	r0, [pc, #76]	; (800d614 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d5c8:	f000 fd0d 	bl	800dfe6 <USBD_GetEpDesc>
 800d5cc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d5ce:	697b      	ldr	r3, [r7, #20]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d002      	beq.n	800d5da <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800d5d4:	697b      	ldr	r3, [r7, #20]
 800d5d6:	2210      	movs	r2, #16
 800d5d8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d5da:	693b      	ldr	r3, [r7, #16]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d006      	beq.n	800d5ee <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d5e0:	693b      	ldr	r3, [r7, #16]
 800d5e2:	2200      	movs	r2, #0
 800d5e4:	711a      	strb	r2, [r3, #4]
 800d5e6:	2200      	movs	r2, #0
 800d5e8:	f042 0202 	orr.w	r2, r2, #2
 800d5ec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d006      	beq.n	800d602 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	711a      	strb	r2, [r3, #4]
 800d5fa:	2200      	movs	r2, #0
 800d5fc:	f042 0202 	orr.w	r2, r2, #2
 800d600:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	2243      	movs	r2, #67	; 0x43
 800d606:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d608:	4b02      	ldr	r3, [pc, #8]	; (800d614 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800d60a:	4618      	mov	r0, r3
 800d60c:	3718      	adds	r7, #24
 800d60e:	46bd      	mov	sp, r7
 800d610:	bd80      	pop	{r7, pc}
 800d612:	bf00      	nop
 800d614:	200000d0 	.word	0x200000d0

0800d618 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b086      	sub	sp, #24
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d620:	2182      	movs	r1, #130	; 0x82
 800d622:	4818      	ldr	r0, [pc, #96]	; (800d684 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d624:	f000 fcdf 	bl	800dfe6 <USBD_GetEpDesc>
 800d628:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d62a:	2101      	movs	r1, #1
 800d62c:	4815      	ldr	r0, [pc, #84]	; (800d684 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d62e:	f000 fcda 	bl	800dfe6 <USBD_GetEpDesc>
 800d632:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d634:	2181      	movs	r1, #129	; 0x81
 800d636:	4813      	ldr	r0, [pc, #76]	; (800d684 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d638:	f000 fcd5 	bl	800dfe6 <USBD_GetEpDesc>
 800d63c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d63e:	697b      	ldr	r3, [r7, #20]
 800d640:	2b00      	cmp	r3, #0
 800d642:	d002      	beq.n	800d64a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d644:	697b      	ldr	r3, [r7, #20]
 800d646:	2210      	movs	r2, #16
 800d648:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d64a:	693b      	ldr	r3, [r7, #16]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d006      	beq.n	800d65e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d650:	693b      	ldr	r3, [r7, #16]
 800d652:	2200      	movs	r2, #0
 800d654:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d658:	711a      	strb	r2, [r3, #4]
 800d65a:	2200      	movs	r2, #0
 800d65c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d006      	beq.n	800d672 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	2200      	movs	r2, #0
 800d668:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d66c:	711a      	strb	r2, [r3, #4]
 800d66e:	2200      	movs	r2, #0
 800d670:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	2243      	movs	r2, #67	; 0x43
 800d676:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d678:	4b02      	ldr	r3, [pc, #8]	; (800d684 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800d67a:	4618      	mov	r0, r3
 800d67c:	3718      	adds	r7, #24
 800d67e:	46bd      	mov	sp, r7
 800d680:	bd80      	pop	{r7, pc}
 800d682:	bf00      	nop
 800d684:	200000d0 	.word	0x200000d0

0800d688 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d688:	b480      	push	{r7}
 800d68a:	b083      	sub	sp, #12
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	220a      	movs	r2, #10
 800d694:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d696:	4b03      	ldr	r3, [pc, #12]	; (800d6a4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d698:	4618      	mov	r0, r3
 800d69a:	370c      	adds	r7, #12
 800d69c:	46bd      	mov	sp, r7
 800d69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a2:	4770      	bx	lr
 800d6a4:	2000008c 	.word	0x2000008c

0800d6a8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d6a8:	b480      	push	{r7}
 800d6aa:	b083      	sub	sp, #12
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
 800d6b0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d101      	bne.n	800d6bc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d6b8:	2303      	movs	r3, #3
 800d6ba:	e009      	b.n	800d6d0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d6c2:	687a      	ldr	r2, [r7, #4]
 800d6c4:	33b0      	adds	r3, #176	; 0xb0
 800d6c6:	009b      	lsls	r3, r3, #2
 800d6c8:	4413      	add	r3, r2
 800d6ca:	683a      	ldr	r2, [r7, #0]
 800d6cc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d6ce:	2300      	movs	r3, #0
}
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	370c      	adds	r7, #12
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6da:	4770      	bx	lr

0800d6dc <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d6dc:	b480      	push	{r7}
 800d6de:	b087      	sub	sp, #28
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	60f8      	str	r0, [r7, #12]
 800d6e4:	60b9      	str	r1, [r7, #8]
 800d6e6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	32b0      	adds	r2, #176	; 0xb0
 800d6f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6f6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800d6f8:	697b      	ldr	r3, [r7, #20]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d101      	bne.n	800d702 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d6fe:	2303      	movs	r3, #3
 800d700:	e008      	b.n	800d714 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d702:	697b      	ldr	r3, [r7, #20]
 800d704:	68ba      	ldr	r2, [r7, #8]
 800d706:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d70a:	697b      	ldr	r3, [r7, #20]
 800d70c:	687a      	ldr	r2, [r7, #4]
 800d70e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800d712:	2300      	movs	r3, #0
}
 800d714:	4618      	mov	r0, r3
 800d716:	371c      	adds	r7, #28
 800d718:	46bd      	mov	sp, r7
 800d71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d71e:	4770      	bx	lr

0800d720 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d720:	b480      	push	{r7}
 800d722:	b085      	sub	sp, #20
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
 800d728:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	32b0      	adds	r2, #176	; 0xb0
 800d734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d738:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d101      	bne.n	800d744 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d740:	2303      	movs	r3, #3
 800d742:	e004      	b.n	800d74e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	683a      	ldr	r2, [r7, #0]
 800d748:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800d74c:	2300      	movs	r3, #0
}
 800d74e:	4618      	mov	r0, r3
 800d750:	3714      	adds	r7, #20
 800d752:	46bd      	mov	sp, r7
 800d754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d758:	4770      	bx	lr
	...

0800d75c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b084      	sub	sp, #16
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	32b0      	adds	r2, #176	; 0xb0
 800d76e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d772:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800d774:	2301      	movs	r3, #1
 800d776:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	32b0      	adds	r2, #176	; 0xb0
 800d782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d101      	bne.n	800d78e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d78a:	2303      	movs	r3, #3
 800d78c:	e025      	b.n	800d7da <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800d78e:	68bb      	ldr	r3, [r7, #8]
 800d790:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d794:	2b00      	cmp	r3, #0
 800d796:	d11f      	bne.n	800d7d8 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800d798:	68bb      	ldr	r3, [r7, #8]
 800d79a:	2201      	movs	r2, #1
 800d79c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800d7a0:	4b10      	ldr	r3, [pc, #64]	; (800d7e4 <USBD_CDC_TransmitPacket+0x88>)
 800d7a2:	781b      	ldrb	r3, [r3, #0]
 800d7a4:	f003 020f 	and.w	r2, r3, #15
 800d7a8:	68bb      	ldr	r3, [r7, #8]
 800d7aa:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800d7ae:	6878      	ldr	r0, [r7, #4]
 800d7b0:	4613      	mov	r3, r2
 800d7b2:	009b      	lsls	r3, r3, #2
 800d7b4:	4413      	add	r3, r2
 800d7b6:	009b      	lsls	r3, r3, #2
 800d7b8:	4403      	add	r3, r0
 800d7ba:	3318      	adds	r3, #24
 800d7bc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800d7be:	4b09      	ldr	r3, [pc, #36]	; (800d7e4 <USBD_CDC_TransmitPacket+0x88>)
 800d7c0:	7819      	ldrb	r1, [r3, #0]
 800d7c2:	68bb      	ldr	r3, [r7, #8]
 800d7c4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800d7c8:	68bb      	ldr	r3, [r7, #8]
 800d7ca:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d7ce:	6878      	ldr	r0, [r7, #4]
 800d7d0:	f001 ffb5 	bl	800f73e <USBD_LL_Transmit>

    ret = USBD_OK;
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d7d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7da:	4618      	mov	r0, r3
 800d7dc:	3710      	adds	r7, #16
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	bd80      	pop	{r7, pc}
 800d7e2:	bf00      	nop
 800d7e4:	20000113 	.word	0x20000113

0800d7e8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b084      	sub	sp, #16
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	32b0      	adds	r2, #176	; 0xb0
 800d7fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7fe:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	32b0      	adds	r2, #176	; 0xb0
 800d80a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d101      	bne.n	800d816 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800d812:	2303      	movs	r3, #3
 800d814:	e018      	b.n	800d848 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	7c1b      	ldrb	r3, [r3, #16]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d10a      	bne.n	800d834 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d81e:	4b0c      	ldr	r3, [pc, #48]	; (800d850 <USBD_CDC_ReceivePacket+0x68>)
 800d820:	7819      	ldrb	r1, [r3, #0]
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d828:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d82c:	6878      	ldr	r0, [r7, #4]
 800d82e:	f001 ffa7 	bl	800f780 <USBD_LL_PrepareReceive>
 800d832:	e008      	b.n	800d846 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d834:	4b06      	ldr	r3, [pc, #24]	; (800d850 <USBD_CDC_ReceivePacket+0x68>)
 800d836:	7819      	ldrb	r1, [r3, #0]
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d83e:	2340      	movs	r3, #64	; 0x40
 800d840:	6878      	ldr	r0, [r7, #4]
 800d842:	f001 ff9d 	bl	800f780 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d846:	2300      	movs	r3, #0
}
 800d848:	4618      	mov	r0, r3
 800d84a:	3710      	adds	r7, #16
 800d84c:	46bd      	mov	sp, r7
 800d84e:	bd80      	pop	{r7, pc}
 800d850:	20000114 	.word	0x20000114

0800d854 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d854:	b580      	push	{r7, lr}
 800d856:	b086      	sub	sp, #24
 800d858:	af00      	add	r7, sp, #0
 800d85a:	60f8      	str	r0, [r7, #12]
 800d85c:	60b9      	str	r1, [r7, #8]
 800d85e:	4613      	mov	r3, r2
 800d860:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d101      	bne.n	800d86c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d868:	2303      	movs	r3, #3
 800d86a:	e01f      	b.n	800d8ac <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	2200      	movs	r2, #0
 800d870:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	2200      	movs	r2, #0
 800d878:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	2200      	movs	r2, #0
 800d880:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d884:	68bb      	ldr	r3, [r7, #8]
 800d886:	2b00      	cmp	r3, #0
 800d888:	d003      	beq.n	800d892 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	68ba      	ldr	r2, [r7, #8]
 800d88e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	2201      	movs	r2, #1
 800d896:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	79fa      	ldrb	r2, [r7, #7]
 800d89e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d8a0:	68f8      	ldr	r0, [r7, #12]
 800d8a2:	f001 fe11 	bl	800f4c8 <USBD_LL_Init>
 800d8a6:	4603      	mov	r3, r0
 800d8a8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d8aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	3718      	adds	r7, #24
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	bd80      	pop	{r7, pc}

0800d8b4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b084      	sub	sp, #16
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
 800d8bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d8be:	2300      	movs	r3, #0
 800d8c0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d8c2:	683b      	ldr	r3, [r7, #0]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d101      	bne.n	800d8cc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d8c8:	2303      	movs	r3, #3
 800d8ca:	e025      	b.n	800d918 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	683a      	ldr	r2, [r7, #0]
 800d8d0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	32ae      	adds	r2, #174	; 0xae
 800d8de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d00f      	beq.n	800d908 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	32ae      	adds	r2, #174	; 0xae
 800d8f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8f8:	f107 020e 	add.w	r2, r7, #14
 800d8fc:	4610      	mov	r0, r2
 800d8fe:	4798      	blx	r3
 800d900:	4602      	mov	r2, r0
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800d90e:	1c5a      	adds	r2, r3, #1
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800d916:	2300      	movs	r3, #0
}
 800d918:	4618      	mov	r0, r3
 800d91a:	3710      	adds	r7, #16
 800d91c:	46bd      	mov	sp, r7
 800d91e:	bd80      	pop	{r7, pc}

0800d920 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b082      	sub	sp, #8
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d928:	6878      	ldr	r0, [r7, #4]
 800d92a:	f001 fe1f 	bl	800f56c <USBD_LL_Start>
 800d92e:	4603      	mov	r3, r0
}
 800d930:	4618      	mov	r0, r3
 800d932:	3708      	adds	r7, #8
 800d934:	46bd      	mov	sp, r7
 800d936:	bd80      	pop	{r7, pc}

0800d938 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800d938:	b480      	push	{r7}
 800d93a:	b083      	sub	sp, #12
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d940:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800d942:	4618      	mov	r0, r3
 800d944:	370c      	adds	r7, #12
 800d946:	46bd      	mov	sp, r7
 800d948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94c:	4770      	bx	lr

0800d94e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d94e:	b580      	push	{r7, lr}
 800d950:	b084      	sub	sp, #16
 800d952:	af00      	add	r7, sp, #0
 800d954:	6078      	str	r0, [r7, #4]
 800d956:	460b      	mov	r3, r1
 800d958:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d95a:	2300      	movs	r3, #0
 800d95c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d964:	2b00      	cmp	r3, #0
 800d966:	d009      	beq.n	800d97c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	78fa      	ldrb	r2, [r7, #3]
 800d972:	4611      	mov	r1, r2
 800d974:	6878      	ldr	r0, [r7, #4]
 800d976:	4798      	blx	r3
 800d978:	4603      	mov	r3, r0
 800d97a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d97c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d97e:	4618      	mov	r0, r3
 800d980:	3710      	adds	r7, #16
 800d982:	46bd      	mov	sp, r7
 800d984:	bd80      	pop	{r7, pc}

0800d986 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d986:	b580      	push	{r7, lr}
 800d988:	b084      	sub	sp, #16
 800d98a:	af00      	add	r7, sp, #0
 800d98c:	6078      	str	r0, [r7, #4]
 800d98e:	460b      	mov	r3, r1
 800d990:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d992:	2300      	movs	r3, #0
 800d994:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d99c:	685b      	ldr	r3, [r3, #4]
 800d99e:	78fa      	ldrb	r2, [r7, #3]
 800d9a0:	4611      	mov	r1, r2
 800d9a2:	6878      	ldr	r0, [r7, #4]
 800d9a4:	4798      	blx	r3
 800d9a6:	4603      	mov	r3, r0
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d001      	beq.n	800d9b0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800d9ac:	2303      	movs	r3, #3
 800d9ae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d9b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	3710      	adds	r7, #16
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	bd80      	pop	{r7, pc}

0800d9ba <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d9ba:	b580      	push	{r7, lr}
 800d9bc:	b084      	sub	sp, #16
 800d9be:	af00      	add	r7, sp, #0
 800d9c0:	6078      	str	r0, [r7, #4]
 800d9c2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d9ca:	6839      	ldr	r1, [r7, #0]
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	f001 f908 	bl	800ebe2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	2201      	movs	r2, #1
 800d9d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d9e0:	461a      	mov	r2, r3
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d9ee:	f003 031f 	and.w	r3, r3, #31
 800d9f2:	2b02      	cmp	r3, #2
 800d9f4:	d01a      	beq.n	800da2c <USBD_LL_SetupStage+0x72>
 800d9f6:	2b02      	cmp	r3, #2
 800d9f8:	d822      	bhi.n	800da40 <USBD_LL_SetupStage+0x86>
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d002      	beq.n	800da04 <USBD_LL_SetupStage+0x4a>
 800d9fe:	2b01      	cmp	r3, #1
 800da00:	d00a      	beq.n	800da18 <USBD_LL_SetupStage+0x5e>
 800da02:	e01d      	b.n	800da40 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800da0a:	4619      	mov	r1, r3
 800da0c:	6878      	ldr	r0, [r7, #4]
 800da0e:	f000 fb5f 	bl	800e0d0 <USBD_StdDevReq>
 800da12:	4603      	mov	r3, r0
 800da14:	73fb      	strb	r3, [r7, #15]
      break;
 800da16:	e020      	b.n	800da5a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800da1e:	4619      	mov	r1, r3
 800da20:	6878      	ldr	r0, [r7, #4]
 800da22:	f000 fbc7 	bl	800e1b4 <USBD_StdItfReq>
 800da26:	4603      	mov	r3, r0
 800da28:	73fb      	strb	r3, [r7, #15]
      break;
 800da2a:	e016      	b.n	800da5a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800da32:	4619      	mov	r1, r3
 800da34:	6878      	ldr	r0, [r7, #4]
 800da36:	f000 fc29 	bl	800e28c <USBD_StdEPReq>
 800da3a:	4603      	mov	r3, r0
 800da3c:	73fb      	strb	r3, [r7, #15]
      break;
 800da3e:	e00c      	b.n	800da5a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800da46:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800da4a:	b2db      	uxtb	r3, r3
 800da4c:	4619      	mov	r1, r3
 800da4e:	6878      	ldr	r0, [r7, #4]
 800da50:	f001 fdec 	bl	800f62c <USBD_LL_StallEP>
 800da54:	4603      	mov	r3, r0
 800da56:	73fb      	strb	r3, [r7, #15]
      break;
 800da58:	bf00      	nop
  }

  return ret;
 800da5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800da5c:	4618      	mov	r0, r3
 800da5e:	3710      	adds	r7, #16
 800da60:	46bd      	mov	sp, r7
 800da62:	bd80      	pop	{r7, pc}

0800da64 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b086      	sub	sp, #24
 800da68:	af00      	add	r7, sp, #0
 800da6a:	60f8      	str	r0, [r7, #12]
 800da6c:	460b      	mov	r3, r1
 800da6e:	607a      	str	r2, [r7, #4]
 800da70:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800da72:	2300      	movs	r3, #0
 800da74:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800da76:	7afb      	ldrb	r3, [r7, #11]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d16e      	bne.n	800db5a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800da82:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800da8a:	2b03      	cmp	r3, #3
 800da8c:	f040 8098 	bne.w	800dbc0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800da90:	693b      	ldr	r3, [r7, #16]
 800da92:	689a      	ldr	r2, [r3, #8]
 800da94:	693b      	ldr	r3, [r7, #16]
 800da96:	68db      	ldr	r3, [r3, #12]
 800da98:	429a      	cmp	r2, r3
 800da9a:	d913      	bls.n	800dac4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800da9c:	693b      	ldr	r3, [r7, #16]
 800da9e:	689a      	ldr	r2, [r3, #8]
 800daa0:	693b      	ldr	r3, [r7, #16]
 800daa2:	68db      	ldr	r3, [r3, #12]
 800daa4:	1ad2      	subs	r2, r2, r3
 800daa6:	693b      	ldr	r3, [r7, #16]
 800daa8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800daaa:	693b      	ldr	r3, [r7, #16]
 800daac:	68da      	ldr	r2, [r3, #12]
 800daae:	693b      	ldr	r3, [r7, #16]
 800dab0:	689b      	ldr	r3, [r3, #8]
 800dab2:	4293      	cmp	r3, r2
 800dab4:	bf28      	it	cs
 800dab6:	4613      	movcs	r3, r2
 800dab8:	461a      	mov	r2, r3
 800daba:	6879      	ldr	r1, [r7, #4]
 800dabc:	68f8      	ldr	r0, [r7, #12]
 800dabe:	f001 f984 	bl	800edca <USBD_CtlContinueRx>
 800dac2:	e07d      	b.n	800dbc0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800daca:	f003 031f 	and.w	r3, r3, #31
 800dace:	2b02      	cmp	r3, #2
 800dad0:	d014      	beq.n	800dafc <USBD_LL_DataOutStage+0x98>
 800dad2:	2b02      	cmp	r3, #2
 800dad4:	d81d      	bhi.n	800db12 <USBD_LL_DataOutStage+0xae>
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d002      	beq.n	800dae0 <USBD_LL_DataOutStage+0x7c>
 800dada:	2b01      	cmp	r3, #1
 800dadc:	d003      	beq.n	800dae6 <USBD_LL_DataOutStage+0x82>
 800dade:	e018      	b.n	800db12 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800dae0:	2300      	movs	r3, #0
 800dae2:	75bb      	strb	r3, [r7, #22]
            break;
 800dae4:	e018      	b.n	800db18 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800daec:	b2db      	uxtb	r3, r3
 800daee:	4619      	mov	r1, r3
 800daf0:	68f8      	ldr	r0, [r7, #12]
 800daf2:	f000 fa5e 	bl	800dfb2 <USBD_CoreFindIF>
 800daf6:	4603      	mov	r3, r0
 800daf8:	75bb      	strb	r3, [r7, #22]
            break;
 800dafa:	e00d      	b.n	800db18 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800db02:	b2db      	uxtb	r3, r3
 800db04:	4619      	mov	r1, r3
 800db06:	68f8      	ldr	r0, [r7, #12]
 800db08:	f000 fa60 	bl	800dfcc <USBD_CoreFindEP>
 800db0c:	4603      	mov	r3, r0
 800db0e:	75bb      	strb	r3, [r7, #22]
            break;
 800db10:	e002      	b.n	800db18 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800db12:	2300      	movs	r3, #0
 800db14:	75bb      	strb	r3, [r7, #22]
            break;
 800db16:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800db18:	7dbb      	ldrb	r3, [r7, #22]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d119      	bne.n	800db52 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db24:	b2db      	uxtb	r3, r3
 800db26:	2b03      	cmp	r3, #3
 800db28:	d113      	bne.n	800db52 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800db2a:	7dba      	ldrb	r2, [r7, #22]
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	32ae      	adds	r2, #174	; 0xae
 800db30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db34:	691b      	ldr	r3, [r3, #16]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d00b      	beq.n	800db52 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800db3a:	7dba      	ldrb	r2, [r7, #22]
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800db42:	7dba      	ldrb	r2, [r7, #22]
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	32ae      	adds	r2, #174	; 0xae
 800db48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db4c:	691b      	ldr	r3, [r3, #16]
 800db4e:	68f8      	ldr	r0, [r7, #12]
 800db50:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800db52:	68f8      	ldr	r0, [r7, #12]
 800db54:	f001 f94a 	bl	800edec <USBD_CtlSendStatus>
 800db58:	e032      	b.n	800dbc0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800db5a:	7afb      	ldrb	r3, [r7, #11]
 800db5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db60:	b2db      	uxtb	r3, r3
 800db62:	4619      	mov	r1, r3
 800db64:	68f8      	ldr	r0, [r7, #12]
 800db66:	f000 fa31 	bl	800dfcc <USBD_CoreFindEP>
 800db6a:	4603      	mov	r3, r0
 800db6c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800db6e:	7dbb      	ldrb	r3, [r7, #22]
 800db70:	2bff      	cmp	r3, #255	; 0xff
 800db72:	d025      	beq.n	800dbc0 <USBD_LL_DataOutStage+0x15c>
 800db74:	7dbb      	ldrb	r3, [r7, #22]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d122      	bne.n	800dbc0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db80:	b2db      	uxtb	r3, r3
 800db82:	2b03      	cmp	r3, #3
 800db84:	d117      	bne.n	800dbb6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800db86:	7dba      	ldrb	r2, [r7, #22]
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	32ae      	adds	r2, #174	; 0xae
 800db8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db90:	699b      	ldr	r3, [r3, #24]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d00f      	beq.n	800dbb6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800db96:	7dba      	ldrb	r2, [r7, #22]
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800db9e:	7dba      	ldrb	r2, [r7, #22]
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	32ae      	adds	r2, #174	; 0xae
 800dba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dba8:	699b      	ldr	r3, [r3, #24]
 800dbaa:	7afa      	ldrb	r2, [r7, #11]
 800dbac:	4611      	mov	r1, r2
 800dbae:	68f8      	ldr	r0, [r7, #12]
 800dbb0:	4798      	blx	r3
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800dbb6:	7dfb      	ldrb	r3, [r7, #23]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d001      	beq.n	800dbc0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800dbbc:	7dfb      	ldrb	r3, [r7, #23]
 800dbbe:	e000      	b.n	800dbc2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800dbc0:	2300      	movs	r3, #0
}
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	3718      	adds	r7, #24
 800dbc6:	46bd      	mov	sp, r7
 800dbc8:	bd80      	pop	{r7, pc}

0800dbca <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800dbca:	b580      	push	{r7, lr}
 800dbcc:	b086      	sub	sp, #24
 800dbce:	af00      	add	r7, sp, #0
 800dbd0:	60f8      	str	r0, [r7, #12]
 800dbd2:	460b      	mov	r3, r1
 800dbd4:	607a      	str	r2, [r7, #4]
 800dbd6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800dbd8:	7afb      	ldrb	r3, [r7, #11]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d16f      	bne.n	800dcbe <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	3314      	adds	r3, #20
 800dbe2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800dbea:	2b02      	cmp	r3, #2
 800dbec:	d15a      	bne.n	800dca4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800dbee:	693b      	ldr	r3, [r7, #16]
 800dbf0:	689a      	ldr	r2, [r3, #8]
 800dbf2:	693b      	ldr	r3, [r7, #16]
 800dbf4:	68db      	ldr	r3, [r3, #12]
 800dbf6:	429a      	cmp	r2, r3
 800dbf8:	d914      	bls.n	800dc24 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800dbfa:	693b      	ldr	r3, [r7, #16]
 800dbfc:	689a      	ldr	r2, [r3, #8]
 800dbfe:	693b      	ldr	r3, [r7, #16]
 800dc00:	68db      	ldr	r3, [r3, #12]
 800dc02:	1ad2      	subs	r2, r2, r3
 800dc04:	693b      	ldr	r3, [r7, #16]
 800dc06:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800dc08:	693b      	ldr	r3, [r7, #16]
 800dc0a:	689b      	ldr	r3, [r3, #8]
 800dc0c:	461a      	mov	r2, r3
 800dc0e:	6879      	ldr	r1, [r7, #4]
 800dc10:	68f8      	ldr	r0, [r7, #12]
 800dc12:	f001 f8ac 	bl	800ed6e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dc16:	2300      	movs	r3, #0
 800dc18:	2200      	movs	r2, #0
 800dc1a:	2100      	movs	r1, #0
 800dc1c:	68f8      	ldr	r0, [r7, #12]
 800dc1e:	f001 fdaf 	bl	800f780 <USBD_LL_PrepareReceive>
 800dc22:	e03f      	b.n	800dca4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800dc24:	693b      	ldr	r3, [r7, #16]
 800dc26:	68da      	ldr	r2, [r3, #12]
 800dc28:	693b      	ldr	r3, [r7, #16]
 800dc2a:	689b      	ldr	r3, [r3, #8]
 800dc2c:	429a      	cmp	r2, r3
 800dc2e:	d11c      	bne.n	800dc6a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800dc30:	693b      	ldr	r3, [r7, #16]
 800dc32:	685a      	ldr	r2, [r3, #4]
 800dc34:	693b      	ldr	r3, [r7, #16]
 800dc36:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800dc38:	429a      	cmp	r2, r3
 800dc3a:	d316      	bcc.n	800dc6a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800dc3c:	693b      	ldr	r3, [r7, #16]
 800dc3e:	685a      	ldr	r2, [r3, #4]
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800dc46:	429a      	cmp	r2, r3
 800dc48:	d20f      	bcs.n	800dc6a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800dc4a:	2200      	movs	r2, #0
 800dc4c:	2100      	movs	r1, #0
 800dc4e:	68f8      	ldr	r0, [r7, #12]
 800dc50:	f001 f88d 	bl	800ed6e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	2200      	movs	r2, #0
 800dc58:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	2200      	movs	r2, #0
 800dc60:	2100      	movs	r1, #0
 800dc62:	68f8      	ldr	r0, [r7, #12]
 800dc64:	f001 fd8c 	bl	800f780 <USBD_LL_PrepareReceive>
 800dc68:	e01c      	b.n	800dca4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc70:	b2db      	uxtb	r3, r3
 800dc72:	2b03      	cmp	r3, #3
 800dc74:	d10f      	bne.n	800dc96 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc7c:	68db      	ldr	r3, [r3, #12]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d009      	beq.n	800dc96 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	2200      	movs	r2, #0
 800dc86:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc90:	68db      	ldr	r3, [r3, #12]
 800dc92:	68f8      	ldr	r0, [r7, #12]
 800dc94:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800dc96:	2180      	movs	r1, #128	; 0x80
 800dc98:	68f8      	ldr	r0, [r7, #12]
 800dc9a:	f001 fcc7 	bl	800f62c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800dc9e:	68f8      	ldr	r0, [r7, #12]
 800dca0:	f001 f8b7 	bl	800ee12 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d03a      	beq.n	800dd24 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800dcae:	68f8      	ldr	r0, [r7, #12]
 800dcb0:	f7ff fe42 	bl	800d938 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	2200      	movs	r2, #0
 800dcb8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800dcbc:	e032      	b.n	800dd24 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800dcbe:	7afb      	ldrb	r3, [r7, #11]
 800dcc0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800dcc4:	b2db      	uxtb	r3, r3
 800dcc6:	4619      	mov	r1, r3
 800dcc8:	68f8      	ldr	r0, [r7, #12]
 800dcca:	f000 f97f 	bl	800dfcc <USBD_CoreFindEP>
 800dcce:	4603      	mov	r3, r0
 800dcd0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dcd2:	7dfb      	ldrb	r3, [r7, #23]
 800dcd4:	2bff      	cmp	r3, #255	; 0xff
 800dcd6:	d025      	beq.n	800dd24 <USBD_LL_DataInStage+0x15a>
 800dcd8:	7dfb      	ldrb	r3, [r7, #23]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d122      	bne.n	800dd24 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dce4:	b2db      	uxtb	r3, r3
 800dce6:	2b03      	cmp	r3, #3
 800dce8:	d11c      	bne.n	800dd24 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800dcea:	7dfa      	ldrb	r2, [r7, #23]
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	32ae      	adds	r2, #174	; 0xae
 800dcf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcf4:	695b      	ldr	r3, [r3, #20]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d014      	beq.n	800dd24 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800dcfa:	7dfa      	ldrb	r2, [r7, #23]
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800dd02:	7dfa      	ldrb	r2, [r7, #23]
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	32ae      	adds	r2, #174	; 0xae
 800dd08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd0c:	695b      	ldr	r3, [r3, #20]
 800dd0e:	7afa      	ldrb	r2, [r7, #11]
 800dd10:	4611      	mov	r1, r2
 800dd12:	68f8      	ldr	r0, [r7, #12]
 800dd14:	4798      	blx	r3
 800dd16:	4603      	mov	r3, r0
 800dd18:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800dd1a:	7dbb      	ldrb	r3, [r7, #22]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d001      	beq.n	800dd24 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800dd20:	7dbb      	ldrb	r3, [r7, #22]
 800dd22:	e000      	b.n	800dd26 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800dd24:	2300      	movs	r3, #0
}
 800dd26:	4618      	mov	r0, r3
 800dd28:	3718      	adds	r7, #24
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	bd80      	pop	{r7, pc}

0800dd2e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800dd2e:	b580      	push	{r7, lr}
 800dd30:	b084      	sub	sp, #16
 800dd32:	af00      	add	r7, sp, #0
 800dd34:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800dd36:	2300      	movs	r3, #0
 800dd38:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	2201      	movs	r2, #1
 800dd3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	2200      	movs	r2, #0
 800dd46:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	2200      	movs	r2, #0
 800dd4e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	2200      	movs	r2, #0
 800dd54:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d014      	beq.n	800dd94 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd70:	685b      	ldr	r3, [r3, #4]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d00e      	beq.n	800dd94 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd7c:	685b      	ldr	r3, [r3, #4]
 800dd7e:	687a      	ldr	r2, [r7, #4]
 800dd80:	6852      	ldr	r2, [r2, #4]
 800dd82:	b2d2      	uxtb	r2, r2
 800dd84:	4611      	mov	r1, r2
 800dd86:	6878      	ldr	r0, [r7, #4]
 800dd88:	4798      	blx	r3
 800dd8a:	4603      	mov	r3, r0
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d001      	beq.n	800dd94 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800dd90:	2303      	movs	r3, #3
 800dd92:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dd94:	2340      	movs	r3, #64	; 0x40
 800dd96:	2200      	movs	r2, #0
 800dd98:	2100      	movs	r1, #0
 800dd9a:	6878      	ldr	r0, [r7, #4]
 800dd9c:	f001 fc01 	bl	800f5a2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	2201      	movs	r2, #1
 800dda4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	2240      	movs	r2, #64	; 0x40
 800ddac:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ddb0:	2340      	movs	r3, #64	; 0x40
 800ddb2:	2200      	movs	r2, #0
 800ddb4:	2180      	movs	r1, #128	; 0x80
 800ddb6:	6878      	ldr	r0, [r7, #4]
 800ddb8:	f001 fbf3 	bl	800f5a2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	2201      	movs	r2, #1
 800ddc0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	2240      	movs	r2, #64	; 0x40
 800ddc6:	621a      	str	r2, [r3, #32]

  return ret;
 800ddc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddca:	4618      	mov	r0, r3
 800ddcc:	3710      	adds	r7, #16
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	bd80      	pop	{r7, pc}

0800ddd2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ddd2:	b480      	push	{r7}
 800ddd4:	b083      	sub	sp, #12
 800ddd6:	af00      	add	r7, sp, #0
 800ddd8:	6078      	str	r0, [r7, #4]
 800ddda:	460b      	mov	r3, r1
 800dddc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	78fa      	ldrb	r2, [r7, #3]
 800dde2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800dde4:	2300      	movs	r3, #0
}
 800dde6:	4618      	mov	r0, r3
 800dde8:	370c      	adds	r7, #12
 800ddea:	46bd      	mov	sp, r7
 800ddec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf0:	4770      	bx	lr

0800ddf2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ddf2:	b480      	push	{r7}
 800ddf4:	b083      	sub	sp, #12
 800ddf6:	af00      	add	r7, sp, #0
 800ddf8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de00:	b2da      	uxtb	r2, r3
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	2204      	movs	r2, #4
 800de0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800de10:	2300      	movs	r3, #0
}
 800de12:	4618      	mov	r0, r3
 800de14:	370c      	adds	r7, #12
 800de16:	46bd      	mov	sp, r7
 800de18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de1c:	4770      	bx	lr

0800de1e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800de1e:	b480      	push	{r7}
 800de20:	b083      	sub	sp, #12
 800de22:	af00      	add	r7, sp, #0
 800de24:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de2c:	b2db      	uxtb	r3, r3
 800de2e:	2b04      	cmp	r3, #4
 800de30:	d106      	bne.n	800de40 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800de38:	b2da      	uxtb	r2, r3
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800de40:	2300      	movs	r3, #0
}
 800de42:	4618      	mov	r0, r3
 800de44:	370c      	adds	r7, #12
 800de46:	46bd      	mov	sp, r7
 800de48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4c:	4770      	bx	lr

0800de4e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800de4e:	b580      	push	{r7, lr}
 800de50:	b082      	sub	sp, #8
 800de52:	af00      	add	r7, sp, #0
 800de54:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de5c:	b2db      	uxtb	r3, r3
 800de5e:	2b03      	cmp	r3, #3
 800de60:	d110      	bne.n	800de84 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d00b      	beq.n	800de84 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de72:	69db      	ldr	r3, [r3, #28]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d005      	beq.n	800de84 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de7e:	69db      	ldr	r3, [r3, #28]
 800de80:	6878      	ldr	r0, [r7, #4]
 800de82:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800de84:	2300      	movs	r3, #0
}
 800de86:	4618      	mov	r0, r3
 800de88:	3708      	adds	r7, #8
 800de8a:	46bd      	mov	sp, r7
 800de8c:	bd80      	pop	{r7, pc}

0800de8e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800de8e:	b580      	push	{r7, lr}
 800de90:	b082      	sub	sp, #8
 800de92:	af00      	add	r7, sp, #0
 800de94:	6078      	str	r0, [r7, #4]
 800de96:	460b      	mov	r3, r1
 800de98:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	32ae      	adds	r2, #174	; 0xae
 800dea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d101      	bne.n	800deb0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800deac:	2303      	movs	r3, #3
 800deae:	e01c      	b.n	800deea <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800deb6:	b2db      	uxtb	r3, r3
 800deb8:	2b03      	cmp	r3, #3
 800deba:	d115      	bne.n	800dee8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	32ae      	adds	r2, #174	; 0xae
 800dec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800deca:	6a1b      	ldr	r3, [r3, #32]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d00b      	beq.n	800dee8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	32ae      	adds	r2, #174	; 0xae
 800deda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dede:	6a1b      	ldr	r3, [r3, #32]
 800dee0:	78fa      	ldrb	r2, [r7, #3]
 800dee2:	4611      	mov	r1, r2
 800dee4:	6878      	ldr	r0, [r7, #4]
 800dee6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800dee8:	2300      	movs	r3, #0
}
 800deea:	4618      	mov	r0, r3
 800deec:	3708      	adds	r7, #8
 800deee:	46bd      	mov	sp, r7
 800def0:	bd80      	pop	{r7, pc}

0800def2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800def2:	b580      	push	{r7, lr}
 800def4:	b082      	sub	sp, #8
 800def6:	af00      	add	r7, sp, #0
 800def8:	6078      	str	r0, [r7, #4]
 800defa:	460b      	mov	r3, r1
 800defc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	32ae      	adds	r2, #174	; 0xae
 800df08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d101      	bne.n	800df14 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800df10:	2303      	movs	r3, #3
 800df12:	e01c      	b.n	800df4e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df1a:	b2db      	uxtb	r3, r3
 800df1c:	2b03      	cmp	r3, #3
 800df1e:	d115      	bne.n	800df4c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	32ae      	adds	r2, #174	; 0xae
 800df2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df30:	2b00      	cmp	r3, #0
 800df32:	d00b      	beq.n	800df4c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	32ae      	adds	r2, #174	; 0xae
 800df3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df44:	78fa      	ldrb	r2, [r7, #3]
 800df46:	4611      	mov	r1, r2
 800df48:	6878      	ldr	r0, [r7, #4]
 800df4a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800df4c:	2300      	movs	r3, #0
}
 800df4e:	4618      	mov	r0, r3
 800df50:	3708      	adds	r7, #8
 800df52:	46bd      	mov	sp, r7
 800df54:	bd80      	pop	{r7, pc}

0800df56 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800df56:	b480      	push	{r7}
 800df58:	b083      	sub	sp, #12
 800df5a:	af00      	add	r7, sp, #0
 800df5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800df5e:	2300      	movs	r3, #0
}
 800df60:	4618      	mov	r0, r3
 800df62:	370c      	adds	r7, #12
 800df64:	46bd      	mov	sp, r7
 800df66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6a:	4770      	bx	lr

0800df6c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800df6c:	b580      	push	{r7, lr}
 800df6e:	b084      	sub	sp, #16
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800df74:	2300      	movs	r3, #0
 800df76:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	2201      	movs	r2, #1
 800df7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df86:	2b00      	cmp	r3, #0
 800df88:	d00e      	beq.n	800dfa8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df90:	685b      	ldr	r3, [r3, #4]
 800df92:	687a      	ldr	r2, [r7, #4]
 800df94:	6852      	ldr	r2, [r2, #4]
 800df96:	b2d2      	uxtb	r2, r2
 800df98:	4611      	mov	r1, r2
 800df9a:	6878      	ldr	r0, [r7, #4]
 800df9c:	4798      	blx	r3
 800df9e:	4603      	mov	r3, r0
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d001      	beq.n	800dfa8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800dfa4:	2303      	movs	r3, #3
 800dfa6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800dfa8:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfaa:	4618      	mov	r0, r3
 800dfac:	3710      	adds	r7, #16
 800dfae:	46bd      	mov	sp, r7
 800dfb0:	bd80      	pop	{r7, pc}

0800dfb2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800dfb2:	b480      	push	{r7}
 800dfb4:	b083      	sub	sp, #12
 800dfb6:	af00      	add	r7, sp, #0
 800dfb8:	6078      	str	r0, [r7, #4]
 800dfba:	460b      	mov	r3, r1
 800dfbc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800dfbe:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	370c      	adds	r7, #12
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfca:	4770      	bx	lr

0800dfcc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800dfcc:	b480      	push	{r7}
 800dfce:	b083      	sub	sp, #12
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
 800dfd4:	460b      	mov	r3, r1
 800dfd6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800dfd8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800dfda:	4618      	mov	r0, r3
 800dfdc:	370c      	adds	r7, #12
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe4:	4770      	bx	lr

0800dfe6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800dfe6:	b580      	push	{r7, lr}
 800dfe8:	b086      	sub	sp, #24
 800dfea:	af00      	add	r7, sp, #0
 800dfec:	6078      	str	r0, [r7, #4]
 800dfee:	460b      	mov	r3, r1
 800dff0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800dffa:	2300      	movs	r3, #0
 800dffc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	885b      	ldrh	r3, [r3, #2]
 800e002:	b29a      	uxth	r2, r3
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	781b      	ldrb	r3, [r3, #0]
 800e008:	b29b      	uxth	r3, r3
 800e00a:	429a      	cmp	r2, r3
 800e00c:	d920      	bls.n	800e050 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	781b      	ldrb	r3, [r3, #0]
 800e012:	b29b      	uxth	r3, r3
 800e014:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800e016:	e013      	b.n	800e040 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800e018:	f107 030a 	add.w	r3, r7, #10
 800e01c:	4619      	mov	r1, r3
 800e01e:	6978      	ldr	r0, [r7, #20]
 800e020:	f000 f81b 	bl	800e05a <USBD_GetNextDesc>
 800e024:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800e026:	697b      	ldr	r3, [r7, #20]
 800e028:	785b      	ldrb	r3, [r3, #1]
 800e02a:	2b05      	cmp	r3, #5
 800e02c:	d108      	bne.n	800e040 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800e02e:	697b      	ldr	r3, [r7, #20]
 800e030:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800e032:	693b      	ldr	r3, [r7, #16]
 800e034:	789b      	ldrb	r3, [r3, #2]
 800e036:	78fa      	ldrb	r2, [r7, #3]
 800e038:	429a      	cmp	r2, r3
 800e03a:	d008      	beq.n	800e04e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800e03c:	2300      	movs	r3, #0
 800e03e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	885b      	ldrh	r3, [r3, #2]
 800e044:	b29a      	uxth	r2, r3
 800e046:	897b      	ldrh	r3, [r7, #10]
 800e048:	429a      	cmp	r2, r3
 800e04a:	d8e5      	bhi.n	800e018 <USBD_GetEpDesc+0x32>
 800e04c:	e000      	b.n	800e050 <USBD_GetEpDesc+0x6a>
          break;
 800e04e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800e050:	693b      	ldr	r3, [r7, #16]
}
 800e052:	4618      	mov	r0, r3
 800e054:	3718      	adds	r7, #24
 800e056:	46bd      	mov	sp, r7
 800e058:	bd80      	pop	{r7, pc}

0800e05a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800e05a:	b480      	push	{r7}
 800e05c:	b085      	sub	sp, #20
 800e05e:	af00      	add	r7, sp, #0
 800e060:	6078      	str	r0, [r7, #4]
 800e062:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800e068:	683b      	ldr	r3, [r7, #0]
 800e06a:	881a      	ldrh	r2, [r3, #0]
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	781b      	ldrb	r3, [r3, #0]
 800e070:	b29b      	uxth	r3, r3
 800e072:	4413      	add	r3, r2
 800e074:	b29a      	uxth	r2, r3
 800e076:	683b      	ldr	r3, [r7, #0]
 800e078:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	781b      	ldrb	r3, [r3, #0]
 800e07e:	461a      	mov	r2, r3
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	4413      	add	r3, r2
 800e084:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e086:	68fb      	ldr	r3, [r7, #12]
}
 800e088:	4618      	mov	r0, r3
 800e08a:	3714      	adds	r7, #20
 800e08c:	46bd      	mov	sp, r7
 800e08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e092:	4770      	bx	lr

0800e094 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e094:	b480      	push	{r7}
 800e096:	b087      	sub	sp, #28
 800e098:	af00      	add	r7, sp, #0
 800e09a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e0a0:	697b      	ldr	r3, [r7, #20]
 800e0a2:	781b      	ldrb	r3, [r3, #0]
 800e0a4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e0a6:	697b      	ldr	r3, [r7, #20]
 800e0a8:	3301      	adds	r3, #1
 800e0aa:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e0ac:	697b      	ldr	r3, [r7, #20]
 800e0ae:	781b      	ldrb	r3, [r3, #0]
 800e0b0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e0b2:	8a3b      	ldrh	r3, [r7, #16]
 800e0b4:	021b      	lsls	r3, r3, #8
 800e0b6:	b21a      	sxth	r2, r3
 800e0b8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e0bc:	4313      	orrs	r3, r2
 800e0be:	b21b      	sxth	r3, r3
 800e0c0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e0c2:	89fb      	ldrh	r3, [r7, #14]
}
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	371c      	adds	r7, #28
 800e0c8:	46bd      	mov	sp, r7
 800e0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ce:	4770      	bx	lr

0800e0d0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e0d0:	b580      	push	{r7, lr}
 800e0d2:	b084      	sub	sp, #16
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	6078      	str	r0, [r7, #4]
 800e0d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e0da:	2300      	movs	r3, #0
 800e0dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e0de:	683b      	ldr	r3, [r7, #0]
 800e0e0:	781b      	ldrb	r3, [r3, #0]
 800e0e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e0e6:	2b40      	cmp	r3, #64	; 0x40
 800e0e8:	d005      	beq.n	800e0f6 <USBD_StdDevReq+0x26>
 800e0ea:	2b40      	cmp	r3, #64	; 0x40
 800e0ec:	d857      	bhi.n	800e19e <USBD_StdDevReq+0xce>
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d00f      	beq.n	800e112 <USBD_StdDevReq+0x42>
 800e0f2:	2b20      	cmp	r3, #32
 800e0f4:	d153      	bne.n	800e19e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	32ae      	adds	r2, #174	; 0xae
 800e100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e104:	689b      	ldr	r3, [r3, #8]
 800e106:	6839      	ldr	r1, [r7, #0]
 800e108:	6878      	ldr	r0, [r7, #4]
 800e10a:	4798      	blx	r3
 800e10c:	4603      	mov	r3, r0
 800e10e:	73fb      	strb	r3, [r7, #15]
      break;
 800e110:	e04a      	b.n	800e1a8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e112:	683b      	ldr	r3, [r7, #0]
 800e114:	785b      	ldrb	r3, [r3, #1]
 800e116:	2b09      	cmp	r3, #9
 800e118:	d83b      	bhi.n	800e192 <USBD_StdDevReq+0xc2>
 800e11a:	a201      	add	r2, pc, #4	; (adr r2, 800e120 <USBD_StdDevReq+0x50>)
 800e11c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e120:	0800e175 	.word	0x0800e175
 800e124:	0800e189 	.word	0x0800e189
 800e128:	0800e193 	.word	0x0800e193
 800e12c:	0800e17f 	.word	0x0800e17f
 800e130:	0800e193 	.word	0x0800e193
 800e134:	0800e153 	.word	0x0800e153
 800e138:	0800e149 	.word	0x0800e149
 800e13c:	0800e193 	.word	0x0800e193
 800e140:	0800e16b 	.word	0x0800e16b
 800e144:	0800e15d 	.word	0x0800e15d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e148:	6839      	ldr	r1, [r7, #0]
 800e14a:	6878      	ldr	r0, [r7, #4]
 800e14c:	f000 fa3c 	bl	800e5c8 <USBD_GetDescriptor>
          break;
 800e150:	e024      	b.n	800e19c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e152:	6839      	ldr	r1, [r7, #0]
 800e154:	6878      	ldr	r0, [r7, #4]
 800e156:	f000 fba1 	bl	800e89c <USBD_SetAddress>
          break;
 800e15a:	e01f      	b.n	800e19c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e15c:	6839      	ldr	r1, [r7, #0]
 800e15e:	6878      	ldr	r0, [r7, #4]
 800e160:	f000 fbe0 	bl	800e924 <USBD_SetConfig>
 800e164:	4603      	mov	r3, r0
 800e166:	73fb      	strb	r3, [r7, #15]
          break;
 800e168:	e018      	b.n	800e19c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e16a:	6839      	ldr	r1, [r7, #0]
 800e16c:	6878      	ldr	r0, [r7, #4]
 800e16e:	f000 fc83 	bl	800ea78 <USBD_GetConfig>
          break;
 800e172:	e013      	b.n	800e19c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e174:	6839      	ldr	r1, [r7, #0]
 800e176:	6878      	ldr	r0, [r7, #4]
 800e178:	f000 fcb4 	bl	800eae4 <USBD_GetStatus>
          break;
 800e17c:	e00e      	b.n	800e19c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e17e:	6839      	ldr	r1, [r7, #0]
 800e180:	6878      	ldr	r0, [r7, #4]
 800e182:	f000 fce3 	bl	800eb4c <USBD_SetFeature>
          break;
 800e186:	e009      	b.n	800e19c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e188:	6839      	ldr	r1, [r7, #0]
 800e18a:	6878      	ldr	r0, [r7, #4]
 800e18c:	f000 fd07 	bl	800eb9e <USBD_ClrFeature>
          break;
 800e190:	e004      	b.n	800e19c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800e192:	6839      	ldr	r1, [r7, #0]
 800e194:	6878      	ldr	r0, [r7, #4]
 800e196:	f000 fd5e 	bl	800ec56 <USBD_CtlError>
          break;
 800e19a:	bf00      	nop
      }
      break;
 800e19c:	e004      	b.n	800e1a8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800e19e:	6839      	ldr	r1, [r7, #0]
 800e1a0:	6878      	ldr	r0, [r7, #4]
 800e1a2:	f000 fd58 	bl	800ec56 <USBD_CtlError>
      break;
 800e1a6:	bf00      	nop
  }

  return ret;
 800e1a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	3710      	adds	r7, #16
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	bd80      	pop	{r7, pc}
 800e1b2:	bf00      	nop

0800e1b4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	b084      	sub	sp, #16
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	6078      	str	r0, [r7, #4]
 800e1bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e1be:	2300      	movs	r3, #0
 800e1c0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e1c2:	683b      	ldr	r3, [r7, #0]
 800e1c4:	781b      	ldrb	r3, [r3, #0]
 800e1c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e1ca:	2b40      	cmp	r3, #64	; 0x40
 800e1cc:	d005      	beq.n	800e1da <USBD_StdItfReq+0x26>
 800e1ce:	2b40      	cmp	r3, #64	; 0x40
 800e1d0:	d852      	bhi.n	800e278 <USBD_StdItfReq+0xc4>
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d001      	beq.n	800e1da <USBD_StdItfReq+0x26>
 800e1d6:	2b20      	cmp	r3, #32
 800e1d8:	d14e      	bne.n	800e278 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e1e0:	b2db      	uxtb	r3, r3
 800e1e2:	3b01      	subs	r3, #1
 800e1e4:	2b02      	cmp	r3, #2
 800e1e6:	d840      	bhi.n	800e26a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e1e8:	683b      	ldr	r3, [r7, #0]
 800e1ea:	889b      	ldrh	r3, [r3, #4]
 800e1ec:	b2db      	uxtb	r3, r3
 800e1ee:	2b01      	cmp	r3, #1
 800e1f0:	d836      	bhi.n	800e260 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800e1f2:	683b      	ldr	r3, [r7, #0]
 800e1f4:	889b      	ldrh	r3, [r3, #4]
 800e1f6:	b2db      	uxtb	r3, r3
 800e1f8:	4619      	mov	r1, r3
 800e1fa:	6878      	ldr	r0, [r7, #4]
 800e1fc:	f7ff fed9 	bl	800dfb2 <USBD_CoreFindIF>
 800e200:	4603      	mov	r3, r0
 800e202:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e204:	7bbb      	ldrb	r3, [r7, #14]
 800e206:	2bff      	cmp	r3, #255	; 0xff
 800e208:	d01d      	beq.n	800e246 <USBD_StdItfReq+0x92>
 800e20a:	7bbb      	ldrb	r3, [r7, #14]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d11a      	bne.n	800e246 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800e210:	7bba      	ldrb	r2, [r7, #14]
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	32ae      	adds	r2, #174	; 0xae
 800e216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e21a:	689b      	ldr	r3, [r3, #8]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d00f      	beq.n	800e240 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800e220:	7bba      	ldrb	r2, [r7, #14]
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e228:	7bba      	ldrb	r2, [r7, #14]
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	32ae      	adds	r2, #174	; 0xae
 800e22e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e232:	689b      	ldr	r3, [r3, #8]
 800e234:	6839      	ldr	r1, [r7, #0]
 800e236:	6878      	ldr	r0, [r7, #4]
 800e238:	4798      	blx	r3
 800e23a:	4603      	mov	r3, r0
 800e23c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e23e:	e004      	b.n	800e24a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800e240:	2303      	movs	r3, #3
 800e242:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e244:	e001      	b.n	800e24a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800e246:	2303      	movs	r3, #3
 800e248:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e24a:	683b      	ldr	r3, [r7, #0]
 800e24c:	88db      	ldrh	r3, [r3, #6]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d110      	bne.n	800e274 <USBD_StdItfReq+0xc0>
 800e252:	7bfb      	ldrb	r3, [r7, #15]
 800e254:	2b00      	cmp	r3, #0
 800e256:	d10d      	bne.n	800e274 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e258:	6878      	ldr	r0, [r7, #4]
 800e25a:	f000 fdc7 	bl	800edec <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e25e:	e009      	b.n	800e274 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800e260:	6839      	ldr	r1, [r7, #0]
 800e262:	6878      	ldr	r0, [r7, #4]
 800e264:	f000 fcf7 	bl	800ec56 <USBD_CtlError>
          break;
 800e268:	e004      	b.n	800e274 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800e26a:	6839      	ldr	r1, [r7, #0]
 800e26c:	6878      	ldr	r0, [r7, #4]
 800e26e:	f000 fcf2 	bl	800ec56 <USBD_CtlError>
          break;
 800e272:	e000      	b.n	800e276 <USBD_StdItfReq+0xc2>
          break;
 800e274:	bf00      	nop
      }
      break;
 800e276:	e004      	b.n	800e282 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800e278:	6839      	ldr	r1, [r7, #0]
 800e27a:	6878      	ldr	r0, [r7, #4]
 800e27c:	f000 fceb 	bl	800ec56 <USBD_CtlError>
      break;
 800e280:	bf00      	nop
  }

  return ret;
 800e282:	7bfb      	ldrb	r3, [r7, #15]
}
 800e284:	4618      	mov	r0, r3
 800e286:	3710      	adds	r7, #16
 800e288:	46bd      	mov	sp, r7
 800e28a:	bd80      	pop	{r7, pc}

0800e28c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e28c:	b580      	push	{r7, lr}
 800e28e:	b084      	sub	sp, #16
 800e290:	af00      	add	r7, sp, #0
 800e292:	6078      	str	r0, [r7, #4]
 800e294:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800e296:	2300      	movs	r3, #0
 800e298:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800e29a:	683b      	ldr	r3, [r7, #0]
 800e29c:	889b      	ldrh	r3, [r3, #4]
 800e29e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e2a0:	683b      	ldr	r3, [r7, #0]
 800e2a2:	781b      	ldrb	r3, [r3, #0]
 800e2a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e2a8:	2b40      	cmp	r3, #64	; 0x40
 800e2aa:	d007      	beq.n	800e2bc <USBD_StdEPReq+0x30>
 800e2ac:	2b40      	cmp	r3, #64	; 0x40
 800e2ae:	f200 817f 	bhi.w	800e5b0 <USBD_StdEPReq+0x324>
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d02a      	beq.n	800e30c <USBD_StdEPReq+0x80>
 800e2b6:	2b20      	cmp	r3, #32
 800e2b8:	f040 817a 	bne.w	800e5b0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800e2bc:	7bbb      	ldrb	r3, [r7, #14]
 800e2be:	4619      	mov	r1, r3
 800e2c0:	6878      	ldr	r0, [r7, #4]
 800e2c2:	f7ff fe83 	bl	800dfcc <USBD_CoreFindEP>
 800e2c6:	4603      	mov	r3, r0
 800e2c8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e2ca:	7b7b      	ldrb	r3, [r7, #13]
 800e2cc:	2bff      	cmp	r3, #255	; 0xff
 800e2ce:	f000 8174 	beq.w	800e5ba <USBD_StdEPReq+0x32e>
 800e2d2:	7b7b      	ldrb	r3, [r7, #13]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	f040 8170 	bne.w	800e5ba <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800e2da:	7b7a      	ldrb	r2, [r7, #13]
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800e2e2:	7b7a      	ldrb	r2, [r7, #13]
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	32ae      	adds	r2, #174	; 0xae
 800e2e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2ec:	689b      	ldr	r3, [r3, #8]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	f000 8163 	beq.w	800e5ba <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800e2f4:	7b7a      	ldrb	r2, [r7, #13]
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	32ae      	adds	r2, #174	; 0xae
 800e2fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2fe:	689b      	ldr	r3, [r3, #8]
 800e300:	6839      	ldr	r1, [r7, #0]
 800e302:	6878      	ldr	r0, [r7, #4]
 800e304:	4798      	blx	r3
 800e306:	4603      	mov	r3, r0
 800e308:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e30a:	e156      	b.n	800e5ba <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e30c:	683b      	ldr	r3, [r7, #0]
 800e30e:	785b      	ldrb	r3, [r3, #1]
 800e310:	2b03      	cmp	r3, #3
 800e312:	d008      	beq.n	800e326 <USBD_StdEPReq+0x9a>
 800e314:	2b03      	cmp	r3, #3
 800e316:	f300 8145 	bgt.w	800e5a4 <USBD_StdEPReq+0x318>
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	f000 809b 	beq.w	800e456 <USBD_StdEPReq+0x1ca>
 800e320:	2b01      	cmp	r3, #1
 800e322:	d03c      	beq.n	800e39e <USBD_StdEPReq+0x112>
 800e324:	e13e      	b.n	800e5a4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e32c:	b2db      	uxtb	r3, r3
 800e32e:	2b02      	cmp	r3, #2
 800e330:	d002      	beq.n	800e338 <USBD_StdEPReq+0xac>
 800e332:	2b03      	cmp	r3, #3
 800e334:	d016      	beq.n	800e364 <USBD_StdEPReq+0xd8>
 800e336:	e02c      	b.n	800e392 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e338:	7bbb      	ldrb	r3, [r7, #14]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d00d      	beq.n	800e35a <USBD_StdEPReq+0xce>
 800e33e:	7bbb      	ldrb	r3, [r7, #14]
 800e340:	2b80      	cmp	r3, #128	; 0x80
 800e342:	d00a      	beq.n	800e35a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e344:	7bbb      	ldrb	r3, [r7, #14]
 800e346:	4619      	mov	r1, r3
 800e348:	6878      	ldr	r0, [r7, #4]
 800e34a:	f001 f96f 	bl	800f62c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e34e:	2180      	movs	r1, #128	; 0x80
 800e350:	6878      	ldr	r0, [r7, #4]
 800e352:	f001 f96b 	bl	800f62c <USBD_LL_StallEP>
 800e356:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e358:	e020      	b.n	800e39c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800e35a:	6839      	ldr	r1, [r7, #0]
 800e35c:	6878      	ldr	r0, [r7, #4]
 800e35e:	f000 fc7a 	bl	800ec56 <USBD_CtlError>
              break;
 800e362:	e01b      	b.n	800e39c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e364:	683b      	ldr	r3, [r7, #0]
 800e366:	885b      	ldrh	r3, [r3, #2]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d10e      	bne.n	800e38a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e36c:	7bbb      	ldrb	r3, [r7, #14]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d00b      	beq.n	800e38a <USBD_StdEPReq+0xfe>
 800e372:	7bbb      	ldrb	r3, [r7, #14]
 800e374:	2b80      	cmp	r3, #128	; 0x80
 800e376:	d008      	beq.n	800e38a <USBD_StdEPReq+0xfe>
 800e378:	683b      	ldr	r3, [r7, #0]
 800e37a:	88db      	ldrh	r3, [r3, #6]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d104      	bne.n	800e38a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e380:	7bbb      	ldrb	r3, [r7, #14]
 800e382:	4619      	mov	r1, r3
 800e384:	6878      	ldr	r0, [r7, #4]
 800e386:	f001 f951 	bl	800f62c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e38a:	6878      	ldr	r0, [r7, #4]
 800e38c:	f000 fd2e 	bl	800edec <USBD_CtlSendStatus>

              break;
 800e390:	e004      	b.n	800e39c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800e392:	6839      	ldr	r1, [r7, #0]
 800e394:	6878      	ldr	r0, [r7, #4]
 800e396:	f000 fc5e 	bl	800ec56 <USBD_CtlError>
              break;
 800e39a:	bf00      	nop
          }
          break;
 800e39c:	e107      	b.n	800e5ae <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e3a4:	b2db      	uxtb	r3, r3
 800e3a6:	2b02      	cmp	r3, #2
 800e3a8:	d002      	beq.n	800e3b0 <USBD_StdEPReq+0x124>
 800e3aa:	2b03      	cmp	r3, #3
 800e3ac:	d016      	beq.n	800e3dc <USBD_StdEPReq+0x150>
 800e3ae:	e04b      	b.n	800e448 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e3b0:	7bbb      	ldrb	r3, [r7, #14]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d00d      	beq.n	800e3d2 <USBD_StdEPReq+0x146>
 800e3b6:	7bbb      	ldrb	r3, [r7, #14]
 800e3b8:	2b80      	cmp	r3, #128	; 0x80
 800e3ba:	d00a      	beq.n	800e3d2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e3bc:	7bbb      	ldrb	r3, [r7, #14]
 800e3be:	4619      	mov	r1, r3
 800e3c0:	6878      	ldr	r0, [r7, #4]
 800e3c2:	f001 f933 	bl	800f62c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e3c6:	2180      	movs	r1, #128	; 0x80
 800e3c8:	6878      	ldr	r0, [r7, #4]
 800e3ca:	f001 f92f 	bl	800f62c <USBD_LL_StallEP>
 800e3ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e3d0:	e040      	b.n	800e454 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800e3d2:	6839      	ldr	r1, [r7, #0]
 800e3d4:	6878      	ldr	r0, [r7, #4]
 800e3d6:	f000 fc3e 	bl	800ec56 <USBD_CtlError>
              break;
 800e3da:	e03b      	b.n	800e454 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e3dc:	683b      	ldr	r3, [r7, #0]
 800e3de:	885b      	ldrh	r3, [r3, #2]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d136      	bne.n	800e452 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e3e4:	7bbb      	ldrb	r3, [r7, #14]
 800e3e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d004      	beq.n	800e3f8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e3ee:	7bbb      	ldrb	r3, [r7, #14]
 800e3f0:	4619      	mov	r1, r3
 800e3f2:	6878      	ldr	r0, [r7, #4]
 800e3f4:	f001 f939 	bl	800f66a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e3f8:	6878      	ldr	r0, [r7, #4]
 800e3fa:	f000 fcf7 	bl	800edec <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800e3fe:	7bbb      	ldrb	r3, [r7, #14]
 800e400:	4619      	mov	r1, r3
 800e402:	6878      	ldr	r0, [r7, #4]
 800e404:	f7ff fde2 	bl	800dfcc <USBD_CoreFindEP>
 800e408:	4603      	mov	r3, r0
 800e40a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e40c:	7b7b      	ldrb	r3, [r7, #13]
 800e40e:	2bff      	cmp	r3, #255	; 0xff
 800e410:	d01f      	beq.n	800e452 <USBD_StdEPReq+0x1c6>
 800e412:	7b7b      	ldrb	r3, [r7, #13]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d11c      	bne.n	800e452 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800e418:	7b7a      	ldrb	r2, [r7, #13]
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800e420:	7b7a      	ldrb	r2, [r7, #13]
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	32ae      	adds	r2, #174	; 0xae
 800e426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e42a:	689b      	ldr	r3, [r3, #8]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d010      	beq.n	800e452 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e430:	7b7a      	ldrb	r2, [r7, #13]
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	32ae      	adds	r2, #174	; 0xae
 800e436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e43a:	689b      	ldr	r3, [r3, #8]
 800e43c:	6839      	ldr	r1, [r7, #0]
 800e43e:	6878      	ldr	r0, [r7, #4]
 800e440:	4798      	blx	r3
 800e442:	4603      	mov	r3, r0
 800e444:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800e446:	e004      	b.n	800e452 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800e448:	6839      	ldr	r1, [r7, #0]
 800e44a:	6878      	ldr	r0, [r7, #4]
 800e44c:	f000 fc03 	bl	800ec56 <USBD_CtlError>
              break;
 800e450:	e000      	b.n	800e454 <USBD_StdEPReq+0x1c8>
              break;
 800e452:	bf00      	nop
          }
          break;
 800e454:	e0ab      	b.n	800e5ae <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e45c:	b2db      	uxtb	r3, r3
 800e45e:	2b02      	cmp	r3, #2
 800e460:	d002      	beq.n	800e468 <USBD_StdEPReq+0x1dc>
 800e462:	2b03      	cmp	r3, #3
 800e464:	d032      	beq.n	800e4cc <USBD_StdEPReq+0x240>
 800e466:	e097      	b.n	800e598 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e468:	7bbb      	ldrb	r3, [r7, #14]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d007      	beq.n	800e47e <USBD_StdEPReq+0x1f2>
 800e46e:	7bbb      	ldrb	r3, [r7, #14]
 800e470:	2b80      	cmp	r3, #128	; 0x80
 800e472:	d004      	beq.n	800e47e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800e474:	6839      	ldr	r1, [r7, #0]
 800e476:	6878      	ldr	r0, [r7, #4]
 800e478:	f000 fbed 	bl	800ec56 <USBD_CtlError>
                break;
 800e47c:	e091      	b.n	800e5a2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e47e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e482:	2b00      	cmp	r3, #0
 800e484:	da0b      	bge.n	800e49e <USBD_StdEPReq+0x212>
 800e486:	7bbb      	ldrb	r3, [r7, #14]
 800e488:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e48c:	4613      	mov	r3, r2
 800e48e:	009b      	lsls	r3, r3, #2
 800e490:	4413      	add	r3, r2
 800e492:	009b      	lsls	r3, r3, #2
 800e494:	3310      	adds	r3, #16
 800e496:	687a      	ldr	r2, [r7, #4]
 800e498:	4413      	add	r3, r2
 800e49a:	3304      	adds	r3, #4
 800e49c:	e00b      	b.n	800e4b6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e49e:	7bbb      	ldrb	r3, [r7, #14]
 800e4a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e4a4:	4613      	mov	r3, r2
 800e4a6:	009b      	lsls	r3, r3, #2
 800e4a8:	4413      	add	r3, r2
 800e4aa:	009b      	lsls	r3, r3, #2
 800e4ac:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e4b0:	687a      	ldr	r2, [r7, #4]
 800e4b2:	4413      	add	r3, r2
 800e4b4:	3304      	adds	r3, #4
 800e4b6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e4b8:	68bb      	ldr	r3, [r7, #8]
 800e4ba:	2200      	movs	r2, #0
 800e4bc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e4be:	68bb      	ldr	r3, [r7, #8]
 800e4c0:	2202      	movs	r2, #2
 800e4c2:	4619      	mov	r1, r3
 800e4c4:	6878      	ldr	r0, [r7, #4]
 800e4c6:	f000 fc37 	bl	800ed38 <USBD_CtlSendData>
              break;
 800e4ca:	e06a      	b.n	800e5a2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e4cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	da11      	bge.n	800e4f8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e4d4:	7bbb      	ldrb	r3, [r7, #14]
 800e4d6:	f003 020f 	and.w	r2, r3, #15
 800e4da:	6879      	ldr	r1, [r7, #4]
 800e4dc:	4613      	mov	r3, r2
 800e4de:	009b      	lsls	r3, r3, #2
 800e4e0:	4413      	add	r3, r2
 800e4e2:	009b      	lsls	r3, r3, #2
 800e4e4:	440b      	add	r3, r1
 800e4e6:	3324      	adds	r3, #36	; 0x24
 800e4e8:	881b      	ldrh	r3, [r3, #0]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d117      	bne.n	800e51e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e4ee:	6839      	ldr	r1, [r7, #0]
 800e4f0:	6878      	ldr	r0, [r7, #4]
 800e4f2:	f000 fbb0 	bl	800ec56 <USBD_CtlError>
                  break;
 800e4f6:	e054      	b.n	800e5a2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e4f8:	7bbb      	ldrb	r3, [r7, #14]
 800e4fa:	f003 020f 	and.w	r2, r3, #15
 800e4fe:	6879      	ldr	r1, [r7, #4]
 800e500:	4613      	mov	r3, r2
 800e502:	009b      	lsls	r3, r3, #2
 800e504:	4413      	add	r3, r2
 800e506:	009b      	lsls	r3, r3, #2
 800e508:	440b      	add	r3, r1
 800e50a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e50e:	881b      	ldrh	r3, [r3, #0]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d104      	bne.n	800e51e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e514:	6839      	ldr	r1, [r7, #0]
 800e516:	6878      	ldr	r0, [r7, #4]
 800e518:	f000 fb9d 	bl	800ec56 <USBD_CtlError>
                  break;
 800e51c:	e041      	b.n	800e5a2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e51e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e522:	2b00      	cmp	r3, #0
 800e524:	da0b      	bge.n	800e53e <USBD_StdEPReq+0x2b2>
 800e526:	7bbb      	ldrb	r3, [r7, #14]
 800e528:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e52c:	4613      	mov	r3, r2
 800e52e:	009b      	lsls	r3, r3, #2
 800e530:	4413      	add	r3, r2
 800e532:	009b      	lsls	r3, r3, #2
 800e534:	3310      	adds	r3, #16
 800e536:	687a      	ldr	r2, [r7, #4]
 800e538:	4413      	add	r3, r2
 800e53a:	3304      	adds	r3, #4
 800e53c:	e00b      	b.n	800e556 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e53e:	7bbb      	ldrb	r3, [r7, #14]
 800e540:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e544:	4613      	mov	r3, r2
 800e546:	009b      	lsls	r3, r3, #2
 800e548:	4413      	add	r3, r2
 800e54a:	009b      	lsls	r3, r3, #2
 800e54c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e550:	687a      	ldr	r2, [r7, #4]
 800e552:	4413      	add	r3, r2
 800e554:	3304      	adds	r3, #4
 800e556:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e558:	7bbb      	ldrb	r3, [r7, #14]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d002      	beq.n	800e564 <USBD_StdEPReq+0x2d8>
 800e55e:	7bbb      	ldrb	r3, [r7, #14]
 800e560:	2b80      	cmp	r3, #128	; 0x80
 800e562:	d103      	bne.n	800e56c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800e564:	68bb      	ldr	r3, [r7, #8]
 800e566:	2200      	movs	r2, #0
 800e568:	601a      	str	r2, [r3, #0]
 800e56a:	e00e      	b.n	800e58a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e56c:	7bbb      	ldrb	r3, [r7, #14]
 800e56e:	4619      	mov	r1, r3
 800e570:	6878      	ldr	r0, [r7, #4]
 800e572:	f001 f899 	bl	800f6a8 <USBD_LL_IsStallEP>
 800e576:	4603      	mov	r3, r0
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d003      	beq.n	800e584 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800e57c:	68bb      	ldr	r3, [r7, #8]
 800e57e:	2201      	movs	r2, #1
 800e580:	601a      	str	r2, [r3, #0]
 800e582:	e002      	b.n	800e58a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800e584:	68bb      	ldr	r3, [r7, #8]
 800e586:	2200      	movs	r2, #0
 800e588:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e58a:	68bb      	ldr	r3, [r7, #8]
 800e58c:	2202      	movs	r2, #2
 800e58e:	4619      	mov	r1, r3
 800e590:	6878      	ldr	r0, [r7, #4]
 800e592:	f000 fbd1 	bl	800ed38 <USBD_CtlSendData>
              break;
 800e596:	e004      	b.n	800e5a2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800e598:	6839      	ldr	r1, [r7, #0]
 800e59a:	6878      	ldr	r0, [r7, #4]
 800e59c:	f000 fb5b 	bl	800ec56 <USBD_CtlError>
              break;
 800e5a0:	bf00      	nop
          }
          break;
 800e5a2:	e004      	b.n	800e5ae <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800e5a4:	6839      	ldr	r1, [r7, #0]
 800e5a6:	6878      	ldr	r0, [r7, #4]
 800e5a8:	f000 fb55 	bl	800ec56 <USBD_CtlError>
          break;
 800e5ac:	bf00      	nop
      }
      break;
 800e5ae:	e005      	b.n	800e5bc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800e5b0:	6839      	ldr	r1, [r7, #0]
 800e5b2:	6878      	ldr	r0, [r7, #4]
 800e5b4:	f000 fb4f 	bl	800ec56 <USBD_CtlError>
      break;
 800e5b8:	e000      	b.n	800e5bc <USBD_StdEPReq+0x330>
      break;
 800e5ba:	bf00      	nop
  }

  return ret;
 800e5bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5be:	4618      	mov	r0, r3
 800e5c0:	3710      	adds	r7, #16
 800e5c2:	46bd      	mov	sp, r7
 800e5c4:	bd80      	pop	{r7, pc}
	...

0800e5c8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b084      	sub	sp, #16
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]
 800e5d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e5da:	2300      	movs	r3, #0
 800e5dc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e5de:	683b      	ldr	r3, [r7, #0]
 800e5e0:	885b      	ldrh	r3, [r3, #2]
 800e5e2:	0a1b      	lsrs	r3, r3, #8
 800e5e4:	b29b      	uxth	r3, r3
 800e5e6:	3b01      	subs	r3, #1
 800e5e8:	2b06      	cmp	r3, #6
 800e5ea:	f200 8128 	bhi.w	800e83e <USBD_GetDescriptor+0x276>
 800e5ee:	a201      	add	r2, pc, #4	; (adr r2, 800e5f4 <USBD_GetDescriptor+0x2c>)
 800e5f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5f4:	0800e611 	.word	0x0800e611
 800e5f8:	0800e629 	.word	0x0800e629
 800e5fc:	0800e669 	.word	0x0800e669
 800e600:	0800e83f 	.word	0x0800e83f
 800e604:	0800e83f 	.word	0x0800e83f
 800e608:	0800e7df 	.word	0x0800e7df
 800e60c:	0800e80b 	.word	0x0800e80b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	687a      	ldr	r2, [r7, #4]
 800e61a:	7c12      	ldrb	r2, [r2, #16]
 800e61c:	f107 0108 	add.w	r1, r7, #8
 800e620:	4610      	mov	r0, r2
 800e622:	4798      	blx	r3
 800e624:	60f8      	str	r0, [r7, #12]
      break;
 800e626:	e112      	b.n	800e84e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	7c1b      	ldrb	r3, [r3, #16]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d10d      	bne.n	800e64c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e638:	f107 0208 	add.w	r2, r7, #8
 800e63c:	4610      	mov	r0, r2
 800e63e:	4798      	blx	r3
 800e640:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	3301      	adds	r3, #1
 800e646:	2202      	movs	r2, #2
 800e648:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e64a:	e100      	b.n	800e84e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e654:	f107 0208 	add.w	r2, r7, #8
 800e658:	4610      	mov	r0, r2
 800e65a:	4798      	blx	r3
 800e65c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	3301      	adds	r3, #1
 800e662:	2202      	movs	r2, #2
 800e664:	701a      	strb	r2, [r3, #0]
      break;
 800e666:	e0f2      	b.n	800e84e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e668:	683b      	ldr	r3, [r7, #0]
 800e66a:	885b      	ldrh	r3, [r3, #2]
 800e66c:	b2db      	uxtb	r3, r3
 800e66e:	2b05      	cmp	r3, #5
 800e670:	f200 80ac 	bhi.w	800e7cc <USBD_GetDescriptor+0x204>
 800e674:	a201      	add	r2, pc, #4	; (adr r2, 800e67c <USBD_GetDescriptor+0xb4>)
 800e676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e67a:	bf00      	nop
 800e67c:	0800e695 	.word	0x0800e695
 800e680:	0800e6c9 	.word	0x0800e6c9
 800e684:	0800e6fd 	.word	0x0800e6fd
 800e688:	0800e731 	.word	0x0800e731
 800e68c:	0800e765 	.word	0x0800e765
 800e690:	0800e799 	.word	0x0800e799
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e69a:	685b      	ldr	r3, [r3, #4]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d00b      	beq.n	800e6b8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e6a6:	685b      	ldr	r3, [r3, #4]
 800e6a8:	687a      	ldr	r2, [r7, #4]
 800e6aa:	7c12      	ldrb	r2, [r2, #16]
 800e6ac:	f107 0108 	add.w	r1, r7, #8
 800e6b0:	4610      	mov	r0, r2
 800e6b2:	4798      	blx	r3
 800e6b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e6b6:	e091      	b.n	800e7dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e6b8:	6839      	ldr	r1, [r7, #0]
 800e6ba:	6878      	ldr	r0, [r7, #4]
 800e6bc:	f000 facb 	bl	800ec56 <USBD_CtlError>
            err++;
 800e6c0:	7afb      	ldrb	r3, [r7, #11]
 800e6c2:	3301      	adds	r3, #1
 800e6c4:	72fb      	strb	r3, [r7, #11]
          break;
 800e6c6:	e089      	b.n	800e7dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e6ce:	689b      	ldr	r3, [r3, #8]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d00b      	beq.n	800e6ec <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e6da:	689b      	ldr	r3, [r3, #8]
 800e6dc:	687a      	ldr	r2, [r7, #4]
 800e6de:	7c12      	ldrb	r2, [r2, #16]
 800e6e0:	f107 0108 	add.w	r1, r7, #8
 800e6e4:	4610      	mov	r0, r2
 800e6e6:	4798      	blx	r3
 800e6e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e6ea:	e077      	b.n	800e7dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e6ec:	6839      	ldr	r1, [r7, #0]
 800e6ee:	6878      	ldr	r0, [r7, #4]
 800e6f0:	f000 fab1 	bl	800ec56 <USBD_CtlError>
            err++;
 800e6f4:	7afb      	ldrb	r3, [r7, #11]
 800e6f6:	3301      	adds	r3, #1
 800e6f8:	72fb      	strb	r3, [r7, #11]
          break;
 800e6fa:	e06f      	b.n	800e7dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e702:	68db      	ldr	r3, [r3, #12]
 800e704:	2b00      	cmp	r3, #0
 800e706:	d00b      	beq.n	800e720 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e70e:	68db      	ldr	r3, [r3, #12]
 800e710:	687a      	ldr	r2, [r7, #4]
 800e712:	7c12      	ldrb	r2, [r2, #16]
 800e714:	f107 0108 	add.w	r1, r7, #8
 800e718:	4610      	mov	r0, r2
 800e71a:	4798      	blx	r3
 800e71c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e71e:	e05d      	b.n	800e7dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e720:	6839      	ldr	r1, [r7, #0]
 800e722:	6878      	ldr	r0, [r7, #4]
 800e724:	f000 fa97 	bl	800ec56 <USBD_CtlError>
            err++;
 800e728:	7afb      	ldrb	r3, [r7, #11]
 800e72a:	3301      	adds	r3, #1
 800e72c:	72fb      	strb	r3, [r7, #11]
          break;
 800e72e:	e055      	b.n	800e7dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e736:	691b      	ldr	r3, [r3, #16]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d00b      	beq.n	800e754 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e742:	691b      	ldr	r3, [r3, #16]
 800e744:	687a      	ldr	r2, [r7, #4]
 800e746:	7c12      	ldrb	r2, [r2, #16]
 800e748:	f107 0108 	add.w	r1, r7, #8
 800e74c:	4610      	mov	r0, r2
 800e74e:	4798      	blx	r3
 800e750:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e752:	e043      	b.n	800e7dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e754:	6839      	ldr	r1, [r7, #0]
 800e756:	6878      	ldr	r0, [r7, #4]
 800e758:	f000 fa7d 	bl	800ec56 <USBD_CtlError>
            err++;
 800e75c:	7afb      	ldrb	r3, [r7, #11]
 800e75e:	3301      	adds	r3, #1
 800e760:	72fb      	strb	r3, [r7, #11]
          break;
 800e762:	e03b      	b.n	800e7dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e76a:	695b      	ldr	r3, [r3, #20]
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d00b      	beq.n	800e788 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e776:	695b      	ldr	r3, [r3, #20]
 800e778:	687a      	ldr	r2, [r7, #4]
 800e77a:	7c12      	ldrb	r2, [r2, #16]
 800e77c:	f107 0108 	add.w	r1, r7, #8
 800e780:	4610      	mov	r0, r2
 800e782:	4798      	blx	r3
 800e784:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e786:	e029      	b.n	800e7dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e788:	6839      	ldr	r1, [r7, #0]
 800e78a:	6878      	ldr	r0, [r7, #4]
 800e78c:	f000 fa63 	bl	800ec56 <USBD_CtlError>
            err++;
 800e790:	7afb      	ldrb	r3, [r7, #11]
 800e792:	3301      	adds	r3, #1
 800e794:	72fb      	strb	r3, [r7, #11]
          break;
 800e796:	e021      	b.n	800e7dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e79e:	699b      	ldr	r3, [r3, #24]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d00b      	beq.n	800e7bc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e7aa:	699b      	ldr	r3, [r3, #24]
 800e7ac:	687a      	ldr	r2, [r7, #4]
 800e7ae:	7c12      	ldrb	r2, [r2, #16]
 800e7b0:	f107 0108 	add.w	r1, r7, #8
 800e7b4:	4610      	mov	r0, r2
 800e7b6:	4798      	blx	r3
 800e7b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e7ba:	e00f      	b.n	800e7dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e7bc:	6839      	ldr	r1, [r7, #0]
 800e7be:	6878      	ldr	r0, [r7, #4]
 800e7c0:	f000 fa49 	bl	800ec56 <USBD_CtlError>
            err++;
 800e7c4:	7afb      	ldrb	r3, [r7, #11]
 800e7c6:	3301      	adds	r3, #1
 800e7c8:	72fb      	strb	r3, [r7, #11]
          break;
 800e7ca:	e007      	b.n	800e7dc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e7cc:	6839      	ldr	r1, [r7, #0]
 800e7ce:	6878      	ldr	r0, [r7, #4]
 800e7d0:	f000 fa41 	bl	800ec56 <USBD_CtlError>
          err++;
 800e7d4:	7afb      	ldrb	r3, [r7, #11]
 800e7d6:	3301      	adds	r3, #1
 800e7d8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e7da:	bf00      	nop
      }
      break;
 800e7dc:	e037      	b.n	800e84e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	7c1b      	ldrb	r3, [r3, #16]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d109      	bne.n	800e7fa <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7ee:	f107 0208 	add.w	r2, r7, #8
 800e7f2:	4610      	mov	r0, r2
 800e7f4:	4798      	blx	r3
 800e7f6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e7f8:	e029      	b.n	800e84e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e7fa:	6839      	ldr	r1, [r7, #0]
 800e7fc:	6878      	ldr	r0, [r7, #4]
 800e7fe:	f000 fa2a 	bl	800ec56 <USBD_CtlError>
        err++;
 800e802:	7afb      	ldrb	r3, [r7, #11]
 800e804:	3301      	adds	r3, #1
 800e806:	72fb      	strb	r3, [r7, #11]
      break;
 800e808:	e021      	b.n	800e84e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	7c1b      	ldrb	r3, [r3, #16]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d10d      	bne.n	800e82e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e81a:	f107 0208 	add.w	r2, r7, #8
 800e81e:	4610      	mov	r0, r2
 800e820:	4798      	blx	r3
 800e822:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	3301      	adds	r3, #1
 800e828:	2207      	movs	r2, #7
 800e82a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e82c:	e00f      	b.n	800e84e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e82e:	6839      	ldr	r1, [r7, #0]
 800e830:	6878      	ldr	r0, [r7, #4]
 800e832:	f000 fa10 	bl	800ec56 <USBD_CtlError>
        err++;
 800e836:	7afb      	ldrb	r3, [r7, #11]
 800e838:	3301      	adds	r3, #1
 800e83a:	72fb      	strb	r3, [r7, #11]
      break;
 800e83c:	e007      	b.n	800e84e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800e83e:	6839      	ldr	r1, [r7, #0]
 800e840:	6878      	ldr	r0, [r7, #4]
 800e842:	f000 fa08 	bl	800ec56 <USBD_CtlError>
      err++;
 800e846:	7afb      	ldrb	r3, [r7, #11]
 800e848:	3301      	adds	r3, #1
 800e84a:	72fb      	strb	r3, [r7, #11]
      break;
 800e84c:	bf00      	nop
  }

  if (err != 0U)
 800e84e:	7afb      	ldrb	r3, [r7, #11]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d11e      	bne.n	800e892 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800e854:	683b      	ldr	r3, [r7, #0]
 800e856:	88db      	ldrh	r3, [r3, #6]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d016      	beq.n	800e88a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800e85c:	893b      	ldrh	r3, [r7, #8]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d00e      	beq.n	800e880 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800e862:	683b      	ldr	r3, [r7, #0]
 800e864:	88da      	ldrh	r2, [r3, #6]
 800e866:	893b      	ldrh	r3, [r7, #8]
 800e868:	4293      	cmp	r3, r2
 800e86a:	bf28      	it	cs
 800e86c:	4613      	movcs	r3, r2
 800e86e:	b29b      	uxth	r3, r3
 800e870:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e872:	893b      	ldrh	r3, [r7, #8]
 800e874:	461a      	mov	r2, r3
 800e876:	68f9      	ldr	r1, [r7, #12]
 800e878:	6878      	ldr	r0, [r7, #4]
 800e87a:	f000 fa5d 	bl	800ed38 <USBD_CtlSendData>
 800e87e:	e009      	b.n	800e894 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e880:	6839      	ldr	r1, [r7, #0]
 800e882:	6878      	ldr	r0, [r7, #4]
 800e884:	f000 f9e7 	bl	800ec56 <USBD_CtlError>
 800e888:	e004      	b.n	800e894 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e88a:	6878      	ldr	r0, [r7, #4]
 800e88c:	f000 faae 	bl	800edec <USBD_CtlSendStatus>
 800e890:	e000      	b.n	800e894 <USBD_GetDescriptor+0x2cc>
    return;
 800e892:	bf00      	nop
  }
}
 800e894:	3710      	adds	r7, #16
 800e896:	46bd      	mov	sp, r7
 800e898:	bd80      	pop	{r7, pc}
 800e89a:	bf00      	nop

0800e89c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e89c:	b580      	push	{r7, lr}
 800e89e:	b084      	sub	sp, #16
 800e8a0:	af00      	add	r7, sp, #0
 800e8a2:	6078      	str	r0, [r7, #4]
 800e8a4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e8a6:	683b      	ldr	r3, [r7, #0]
 800e8a8:	889b      	ldrh	r3, [r3, #4]
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d131      	bne.n	800e912 <USBD_SetAddress+0x76>
 800e8ae:	683b      	ldr	r3, [r7, #0]
 800e8b0:	88db      	ldrh	r3, [r3, #6]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d12d      	bne.n	800e912 <USBD_SetAddress+0x76>
 800e8b6:	683b      	ldr	r3, [r7, #0]
 800e8b8:	885b      	ldrh	r3, [r3, #2]
 800e8ba:	2b7f      	cmp	r3, #127	; 0x7f
 800e8bc:	d829      	bhi.n	800e912 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e8be:	683b      	ldr	r3, [r7, #0]
 800e8c0:	885b      	ldrh	r3, [r3, #2]
 800e8c2:	b2db      	uxtb	r3, r3
 800e8c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e8c8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e8d0:	b2db      	uxtb	r3, r3
 800e8d2:	2b03      	cmp	r3, #3
 800e8d4:	d104      	bne.n	800e8e0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e8d6:	6839      	ldr	r1, [r7, #0]
 800e8d8:	6878      	ldr	r0, [r7, #4]
 800e8da:	f000 f9bc 	bl	800ec56 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e8de:	e01d      	b.n	800e91c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	7bfa      	ldrb	r2, [r7, #15]
 800e8e4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e8e8:	7bfb      	ldrb	r3, [r7, #15]
 800e8ea:	4619      	mov	r1, r3
 800e8ec:	6878      	ldr	r0, [r7, #4]
 800e8ee:	f000 ff07 	bl	800f700 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e8f2:	6878      	ldr	r0, [r7, #4]
 800e8f4:	f000 fa7a 	bl	800edec <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e8f8:	7bfb      	ldrb	r3, [r7, #15]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d004      	beq.n	800e908 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	2202      	movs	r2, #2
 800e902:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e906:	e009      	b.n	800e91c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	2201      	movs	r2, #1
 800e90c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e910:	e004      	b.n	800e91c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e912:	6839      	ldr	r1, [r7, #0]
 800e914:	6878      	ldr	r0, [r7, #4]
 800e916:	f000 f99e 	bl	800ec56 <USBD_CtlError>
  }
}
 800e91a:	bf00      	nop
 800e91c:	bf00      	nop
 800e91e:	3710      	adds	r7, #16
 800e920:	46bd      	mov	sp, r7
 800e922:	bd80      	pop	{r7, pc}

0800e924 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e924:	b580      	push	{r7, lr}
 800e926:	b084      	sub	sp, #16
 800e928:	af00      	add	r7, sp, #0
 800e92a:	6078      	str	r0, [r7, #4]
 800e92c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e92e:	2300      	movs	r3, #0
 800e930:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e932:	683b      	ldr	r3, [r7, #0]
 800e934:	885b      	ldrh	r3, [r3, #2]
 800e936:	b2da      	uxtb	r2, r3
 800e938:	4b4e      	ldr	r3, [pc, #312]	; (800ea74 <USBD_SetConfig+0x150>)
 800e93a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e93c:	4b4d      	ldr	r3, [pc, #308]	; (800ea74 <USBD_SetConfig+0x150>)
 800e93e:	781b      	ldrb	r3, [r3, #0]
 800e940:	2b01      	cmp	r3, #1
 800e942:	d905      	bls.n	800e950 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e944:	6839      	ldr	r1, [r7, #0]
 800e946:	6878      	ldr	r0, [r7, #4]
 800e948:	f000 f985 	bl	800ec56 <USBD_CtlError>
    return USBD_FAIL;
 800e94c:	2303      	movs	r3, #3
 800e94e:	e08c      	b.n	800ea6a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e956:	b2db      	uxtb	r3, r3
 800e958:	2b02      	cmp	r3, #2
 800e95a:	d002      	beq.n	800e962 <USBD_SetConfig+0x3e>
 800e95c:	2b03      	cmp	r3, #3
 800e95e:	d029      	beq.n	800e9b4 <USBD_SetConfig+0x90>
 800e960:	e075      	b.n	800ea4e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e962:	4b44      	ldr	r3, [pc, #272]	; (800ea74 <USBD_SetConfig+0x150>)
 800e964:	781b      	ldrb	r3, [r3, #0]
 800e966:	2b00      	cmp	r3, #0
 800e968:	d020      	beq.n	800e9ac <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e96a:	4b42      	ldr	r3, [pc, #264]	; (800ea74 <USBD_SetConfig+0x150>)
 800e96c:	781b      	ldrb	r3, [r3, #0]
 800e96e:	461a      	mov	r2, r3
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e974:	4b3f      	ldr	r3, [pc, #252]	; (800ea74 <USBD_SetConfig+0x150>)
 800e976:	781b      	ldrb	r3, [r3, #0]
 800e978:	4619      	mov	r1, r3
 800e97a:	6878      	ldr	r0, [r7, #4]
 800e97c:	f7fe ffe7 	bl	800d94e <USBD_SetClassConfig>
 800e980:	4603      	mov	r3, r0
 800e982:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e984:	7bfb      	ldrb	r3, [r7, #15]
 800e986:	2b00      	cmp	r3, #0
 800e988:	d008      	beq.n	800e99c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e98a:	6839      	ldr	r1, [r7, #0]
 800e98c:	6878      	ldr	r0, [r7, #4]
 800e98e:	f000 f962 	bl	800ec56 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	2202      	movs	r2, #2
 800e996:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e99a:	e065      	b.n	800ea68 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e99c:	6878      	ldr	r0, [r7, #4]
 800e99e:	f000 fa25 	bl	800edec <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	2203      	movs	r2, #3
 800e9a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e9aa:	e05d      	b.n	800ea68 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e9ac:	6878      	ldr	r0, [r7, #4]
 800e9ae:	f000 fa1d 	bl	800edec <USBD_CtlSendStatus>
      break;
 800e9b2:	e059      	b.n	800ea68 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e9b4:	4b2f      	ldr	r3, [pc, #188]	; (800ea74 <USBD_SetConfig+0x150>)
 800e9b6:	781b      	ldrb	r3, [r3, #0]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d112      	bne.n	800e9e2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	2202      	movs	r2, #2
 800e9c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800e9c4:	4b2b      	ldr	r3, [pc, #172]	; (800ea74 <USBD_SetConfig+0x150>)
 800e9c6:	781b      	ldrb	r3, [r3, #0]
 800e9c8:	461a      	mov	r2, r3
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e9ce:	4b29      	ldr	r3, [pc, #164]	; (800ea74 <USBD_SetConfig+0x150>)
 800e9d0:	781b      	ldrb	r3, [r3, #0]
 800e9d2:	4619      	mov	r1, r3
 800e9d4:	6878      	ldr	r0, [r7, #4]
 800e9d6:	f7fe ffd6 	bl	800d986 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e9da:	6878      	ldr	r0, [r7, #4]
 800e9dc:	f000 fa06 	bl	800edec <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e9e0:	e042      	b.n	800ea68 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e9e2:	4b24      	ldr	r3, [pc, #144]	; (800ea74 <USBD_SetConfig+0x150>)
 800e9e4:	781b      	ldrb	r3, [r3, #0]
 800e9e6:	461a      	mov	r2, r3
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	685b      	ldr	r3, [r3, #4]
 800e9ec:	429a      	cmp	r2, r3
 800e9ee:	d02a      	beq.n	800ea46 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	685b      	ldr	r3, [r3, #4]
 800e9f4:	b2db      	uxtb	r3, r3
 800e9f6:	4619      	mov	r1, r3
 800e9f8:	6878      	ldr	r0, [r7, #4]
 800e9fa:	f7fe ffc4 	bl	800d986 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e9fe:	4b1d      	ldr	r3, [pc, #116]	; (800ea74 <USBD_SetConfig+0x150>)
 800ea00:	781b      	ldrb	r3, [r3, #0]
 800ea02:	461a      	mov	r2, r3
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ea08:	4b1a      	ldr	r3, [pc, #104]	; (800ea74 <USBD_SetConfig+0x150>)
 800ea0a:	781b      	ldrb	r3, [r3, #0]
 800ea0c:	4619      	mov	r1, r3
 800ea0e:	6878      	ldr	r0, [r7, #4]
 800ea10:	f7fe ff9d 	bl	800d94e <USBD_SetClassConfig>
 800ea14:	4603      	mov	r3, r0
 800ea16:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ea18:	7bfb      	ldrb	r3, [r7, #15]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d00f      	beq.n	800ea3e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ea1e:	6839      	ldr	r1, [r7, #0]
 800ea20:	6878      	ldr	r0, [r7, #4]
 800ea22:	f000 f918 	bl	800ec56 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	685b      	ldr	r3, [r3, #4]
 800ea2a:	b2db      	uxtb	r3, r3
 800ea2c:	4619      	mov	r1, r3
 800ea2e:	6878      	ldr	r0, [r7, #4]
 800ea30:	f7fe ffa9 	bl	800d986 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	2202      	movs	r2, #2
 800ea38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ea3c:	e014      	b.n	800ea68 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ea3e:	6878      	ldr	r0, [r7, #4]
 800ea40:	f000 f9d4 	bl	800edec <USBD_CtlSendStatus>
      break;
 800ea44:	e010      	b.n	800ea68 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ea46:	6878      	ldr	r0, [r7, #4]
 800ea48:	f000 f9d0 	bl	800edec <USBD_CtlSendStatus>
      break;
 800ea4c:	e00c      	b.n	800ea68 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ea4e:	6839      	ldr	r1, [r7, #0]
 800ea50:	6878      	ldr	r0, [r7, #4]
 800ea52:	f000 f900 	bl	800ec56 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ea56:	4b07      	ldr	r3, [pc, #28]	; (800ea74 <USBD_SetConfig+0x150>)
 800ea58:	781b      	ldrb	r3, [r3, #0]
 800ea5a:	4619      	mov	r1, r3
 800ea5c:	6878      	ldr	r0, [r7, #4]
 800ea5e:	f7fe ff92 	bl	800d986 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ea62:	2303      	movs	r3, #3
 800ea64:	73fb      	strb	r3, [r7, #15]
      break;
 800ea66:	bf00      	nop
  }

  return ret;
 800ea68:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	3710      	adds	r7, #16
 800ea6e:	46bd      	mov	sp, r7
 800ea70:	bd80      	pop	{r7, pc}
 800ea72:	bf00      	nop
 800ea74:	2000467c 	.word	0x2000467c

0800ea78 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea78:	b580      	push	{r7, lr}
 800ea7a:	b082      	sub	sp, #8
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	6078      	str	r0, [r7, #4]
 800ea80:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ea82:	683b      	ldr	r3, [r7, #0]
 800ea84:	88db      	ldrh	r3, [r3, #6]
 800ea86:	2b01      	cmp	r3, #1
 800ea88:	d004      	beq.n	800ea94 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ea8a:	6839      	ldr	r1, [r7, #0]
 800ea8c:	6878      	ldr	r0, [r7, #4]
 800ea8e:	f000 f8e2 	bl	800ec56 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ea92:	e023      	b.n	800eadc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea9a:	b2db      	uxtb	r3, r3
 800ea9c:	2b02      	cmp	r3, #2
 800ea9e:	dc02      	bgt.n	800eaa6 <USBD_GetConfig+0x2e>
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	dc03      	bgt.n	800eaac <USBD_GetConfig+0x34>
 800eaa4:	e015      	b.n	800ead2 <USBD_GetConfig+0x5a>
 800eaa6:	2b03      	cmp	r3, #3
 800eaa8:	d00b      	beq.n	800eac2 <USBD_GetConfig+0x4a>
 800eaaa:	e012      	b.n	800ead2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	2200      	movs	r2, #0
 800eab0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	3308      	adds	r3, #8
 800eab6:	2201      	movs	r2, #1
 800eab8:	4619      	mov	r1, r3
 800eaba:	6878      	ldr	r0, [r7, #4]
 800eabc:	f000 f93c 	bl	800ed38 <USBD_CtlSendData>
        break;
 800eac0:	e00c      	b.n	800eadc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	3304      	adds	r3, #4
 800eac6:	2201      	movs	r2, #1
 800eac8:	4619      	mov	r1, r3
 800eaca:	6878      	ldr	r0, [r7, #4]
 800eacc:	f000 f934 	bl	800ed38 <USBD_CtlSendData>
        break;
 800ead0:	e004      	b.n	800eadc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ead2:	6839      	ldr	r1, [r7, #0]
 800ead4:	6878      	ldr	r0, [r7, #4]
 800ead6:	f000 f8be 	bl	800ec56 <USBD_CtlError>
        break;
 800eada:	bf00      	nop
}
 800eadc:	bf00      	nop
 800eade:	3708      	adds	r7, #8
 800eae0:	46bd      	mov	sp, r7
 800eae2:	bd80      	pop	{r7, pc}

0800eae4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eae4:	b580      	push	{r7, lr}
 800eae6:	b082      	sub	sp, #8
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	6078      	str	r0, [r7, #4]
 800eaec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eaf4:	b2db      	uxtb	r3, r3
 800eaf6:	3b01      	subs	r3, #1
 800eaf8:	2b02      	cmp	r3, #2
 800eafa:	d81e      	bhi.n	800eb3a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800eafc:	683b      	ldr	r3, [r7, #0]
 800eafe:	88db      	ldrh	r3, [r3, #6]
 800eb00:	2b02      	cmp	r3, #2
 800eb02:	d004      	beq.n	800eb0e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800eb04:	6839      	ldr	r1, [r7, #0]
 800eb06:	6878      	ldr	r0, [r7, #4]
 800eb08:	f000 f8a5 	bl	800ec56 <USBD_CtlError>
        break;
 800eb0c:	e01a      	b.n	800eb44 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	2201      	movs	r2, #1
 800eb12:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d005      	beq.n	800eb2a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	68db      	ldr	r3, [r3, #12]
 800eb22:	f043 0202 	orr.w	r2, r3, #2
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	330c      	adds	r3, #12
 800eb2e:	2202      	movs	r2, #2
 800eb30:	4619      	mov	r1, r3
 800eb32:	6878      	ldr	r0, [r7, #4]
 800eb34:	f000 f900 	bl	800ed38 <USBD_CtlSendData>
      break;
 800eb38:	e004      	b.n	800eb44 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800eb3a:	6839      	ldr	r1, [r7, #0]
 800eb3c:	6878      	ldr	r0, [r7, #4]
 800eb3e:	f000 f88a 	bl	800ec56 <USBD_CtlError>
      break;
 800eb42:	bf00      	nop
  }
}
 800eb44:	bf00      	nop
 800eb46:	3708      	adds	r7, #8
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	bd80      	pop	{r7, pc}

0800eb4c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b082      	sub	sp, #8
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	6078      	str	r0, [r7, #4]
 800eb54:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800eb56:	683b      	ldr	r3, [r7, #0]
 800eb58:	885b      	ldrh	r3, [r3, #2]
 800eb5a:	2b01      	cmp	r3, #1
 800eb5c:	d107      	bne.n	800eb6e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	2201      	movs	r2, #1
 800eb62:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800eb66:	6878      	ldr	r0, [r7, #4]
 800eb68:	f000 f940 	bl	800edec <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800eb6c:	e013      	b.n	800eb96 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800eb6e:	683b      	ldr	r3, [r7, #0]
 800eb70:	885b      	ldrh	r3, [r3, #2]
 800eb72:	2b02      	cmp	r3, #2
 800eb74:	d10b      	bne.n	800eb8e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800eb76:	683b      	ldr	r3, [r7, #0]
 800eb78:	889b      	ldrh	r3, [r3, #4]
 800eb7a:	0a1b      	lsrs	r3, r3, #8
 800eb7c:	b29b      	uxth	r3, r3
 800eb7e:	b2da      	uxtb	r2, r3
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800eb86:	6878      	ldr	r0, [r7, #4]
 800eb88:	f000 f930 	bl	800edec <USBD_CtlSendStatus>
}
 800eb8c:	e003      	b.n	800eb96 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800eb8e:	6839      	ldr	r1, [r7, #0]
 800eb90:	6878      	ldr	r0, [r7, #4]
 800eb92:	f000 f860 	bl	800ec56 <USBD_CtlError>
}
 800eb96:	bf00      	nop
 800eb98:	3708      	adds	r7, #8
 800eb9a:	46bd      	mov	sp, r7
 800eb9c:	bd80      	pop	{r7, pc}

0800eb9e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb9e:	b580      	push	{r7, lr}
 800eba0:	b082      	sub	sp, #8
 800eba2:	af00      	add	r7, sp, #0
 800eba4:	6078      	str	r0, [r7, #4]
 800eba6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ebae:	b2db      	uxtb	r3, r3
 800ebb0:	3b01      	subs	r3, #1
 800ebb2:	2b02      	cmp	r3, #2
 800ebb4:	d80b      	bhi.n	800ebce <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ebb6:	683b      	ldr	r3, [r7, #0]
 800ebb8:	885b      	ldrh	r3, [r3, #2]
 800ebba:	2b01      	cmp	r3, #1
 800ebbc:	d10c      	bne.n	800ebd8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	2200      	movs	r2, #0
 800ebc2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ebc6:	6878      	ldr	r0, [r7, #4]
 800ebc8:	f000 f910 	bl	800edec <USBD_CtlSendStatus>
      }
      break;
 800ebcc:	e004      	b.n	800ebd8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ebce:	6839      	ldr	r1, [r7, #0]
 800ebd0:	6878      	ldr	r0, [r7, #4]
 800ebd2:	f000 f840 	bl	800ec56 <USBD_CtlError>
      break;
 800ebd6:	e000      	b.n	800ebda <USBD_ClrFeature+0x3c>
      break;
 800ebd8:	bf00      	nop
  }
}
 800ebda:	bf00      	nop
 800ebdc:	3708      	adds	r7, #8
 800ebde:	46bd      	mov	sp, r7
 800ebe0:	bd80      	pop	{r7, pc}

0800ebe2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ebe2:	b580      	push	{r7, lr}
 800ebe4:	b084      	sub	sp, #16
 800ebe6:	af00      	add	r7, sp, #0
 800ebe8:	6078      	str	r0, [r7, #4]
 800ebea:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ebec:	683b      	ldr	r3, [r7, #0]
 800ebee:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	781a      	ldrb	r2, [r3, #0]
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	3301      	adds	r3, #1
 800ebfc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	781a      	ldrb	r2, [r3, #0]
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	3301      	adds	r3, #1
 800ec0a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ec0c:	68f8      	ldr	r0, [r7, #12]
 800ec0e:	f7ff fa41 	bl	800e094 <SWAPBYTE>
 800ec12:	4603      	mov	r3, r0
 800ec14:	461a      	mov	r2, r3
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	3301      	adds	r3, #1
 800ec1e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	3301      	adds	r3, #1
 800ec24:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ec26:	68f8      	ldr	r0, [r7, #12]
 800ec28:	f7ff fa34 	bl	800e094 <SWAPBYTE>
 800ec2c:	4603      	mov	r3, r0
 800ec2e:	461a      	mov	r2, r3
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	3301      	adds	r3, #1
 800ec38:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	3301      	adds	r3, #1
 800ec3e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ec40:	68f8      	ldr	r0, [r7, #12]
 800ec42:	f7ff fa27 	bl	800e094 <SWAPBYTE>
 800ec46:	4603      	mov	r3, r0
 800ec48:	461a      	mov	r2, r3
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	80da      	strh	r2, [r3, #6]
}
 800ec4e:	bf00      	nop
 800ec50:	3710      	adds	r7, #16
 800ec52:	46bd      	mov	sp, r7
 800ec54:	bd80      	pop	{r7, pc}

0800ec56 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec56:	b580      	push	{r7, lr}
 800ec58:	b082      	sub	sp, #8
 800ec5a:	af00      	add	r7, sp, #0
 800ec5c:	6078      	str	r0, [r7, #4]
 800ec5e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ec60:	2180      	movs	r1, #128	; 0x80
 800ec62:	6878      	ldr	r0, [r7, #4]
 800ec64:	f000 fce2 	bl	800f62c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ec68:	2100      	movs	r1, #0
 800ec6a:	6878      	ldr	r0, [r7, #4]
 800ec6c:	f000 fcde 	bl	800f62c <USBD_LL_StallEP>
}
 800ec70:	bf00      	nop
 800ec72:	3708      	adds	r7, #8
 800ec74:	46bd      	mov	sp, r7
 800ec76:	bd80      	pop	{r7, pc}

0800ec78 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ec78:	b580      	push	{r7, lr}
 800ec7a:	b086      	sub	sp, #24
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	60f8      	str	r0, [r7, #12]
 800ec80:	60b9      	str	r1, [r7, #8]
 800ec82:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ec84:	2300      	movs	r3, #0
 800ec86:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d036      	beq.n	800ecfc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ec92:	6938      	ldr	r0, [r7, #16]
 800ec94:	f000 f836 	bl	800ed04 <USBD_GetLen>
 800ec98:	4603      	mov	r3, r0
 800ec9a:	3301      	adds	r3, #1
 800ec9c:	b29b      	uxth	r3, r3
 800ec9e:	005b      	lsls	r3, r3, #1
 800eca0:	b29a      	uxth	r2, r3
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800eca6:	7dfb      	ldrb	r3, [r7, #23]
 800eca8:	68ba      	ldr	r2, [r7, #8]
 800ecaa:	4413      	add	r3, r2
 800ecac:	687a      	ldr	r2, [r7, #4]
 800ecae:	7812      	ldrb	r2, [r2, #0]
 800ecb0:	701a      	strb	r2, [r3, #0]
  idx++;
 800ecb2:	7dfb      	ldrb	r3, [r7, #23]
 800ecb4:	3301      	adds	r3, #1
 800ecb6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ecb8:	7dfb      	ldrb	r3, [r7, #23]
 800ecba:	68ba      	ldr	r2, [r7, #8]
 800ecbc:	4413      	add	r3, r2
 800ecbe:	2203      	movs	r2, #3
 800ecc0:	701a      	strb	r2, [r3, #0]
  idx++;
 800ecc2:	7dfb      	ldrb	r3, [r7, #23]
 800ecc4:	3301      	adds	r3, #1
 800ecc6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ecc8:	e013      	b.n	800ecf2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ecca:	7dfb      	ldrb	r3, [r7, #23]
 800eccc:	68ba      	ldr	r2, [r7, #8]
 800ecce:	4413      	add	r3, r2
 800ecd0:	693a      	ldr	r2, [r7, #16]
 800ecd2:	7812      	ldrb	r2, [r2, #0]
 800ecd4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ecd6:	693b      	ldr	r3, [r7, #16]
 800ecd8:	3301      	adds	r3, #1
 800ecda:	613b      	str	r3, [r7, #16]
    idx++;
 800ecdc:	7dfb      	ldrb	r3, [r7, #23]
 800ecde:	3301      	adds	r3, #1
 800ece0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ece2:	7dfb      	ldrb	r3, [r7, #23]
 800ece4:	68ba      	ldr	r2, [r7, #8]
 800ece6:	4413      	add	r3, r2
 800ece8:	2200      	movs	r2, #0
 800ecea:	701a      	strb	r2, [r3, #0]
    idx++;
 800ecec:	7dfb      	ldrb	r3, [r7, #23]
 800ecee:	3301      	adds	r3, #1
 800ecf0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ecf2:	693b      	ldr	r3, [r7, #16]
 800ecf4:	781b      	ldrb	r3, [r3, #0]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d1e7      	bne.n	800ecca <USBD_GetString+0x52>
 800ecfa:	e000      	b.n	800ecfe <USBD_GetString+0x86>
    return;
 800ecfc:	bf00      	nop
  }
}
 800ecfe:	3718      	adds	r7, #24
 800ed00:	46bd      	mov	sp, r7
 800ed02:	bd80      	pop	{r7, pc}

0800ed04 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ed04:	b480      	push	{r7}
 800ed06:	b085      	sub	sp, #20
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ed0c:	2300      	movs	r3, #0
 800ed0e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ed14:	e005      	b.n	800ed22 <USBD_GetLen+0x1e>
  {
    len++;
 800ed16:	7bfb      	ldrb	r3, [r7, #15]
 800ed18:	3301      	adds	r3, #1
 800ed1a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ed1c:	68bb      	ldr	r3, [r7, #8]
 800ed1e:	3301      	adds	r3, #1
 800ed20:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ed22:	68bb      	ldr	r3, [r7, #8]
 800ed24:	781b      	ldrb	r3, [r3, #0]
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d1f5      	bne.n	800ed16 <USBD_GetLen+0x12>
  }

  return len;
 800ed2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed2c:	4618      	mov	r0, r3
 800ed2e:	3714      	adds	r7, #20
 800ed30:	46bd      	mov	sp, r7
 800ed32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed36:	4770      	bx	lr

0800ed38 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ed38:	b580      	push	{r7, lr}
 800ed3a:	b084      	sub	sp, #16
 800ed3c:	af00      	add	r7, sp, #0
 800ed3e:	60f8      	str	r0, [r7, #12]
 800ed40:	60b9      	str	r1, [r7, #8]
 800ed42:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	2202      	movs	r2, #2
 800ed48:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	687a      	ldr	r2, [r7, #4]
 800ed50:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	687a      	ldr	r2, [r7, #4]
 800ed56:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	68ba      	ldr	r2, [r7, #8]
 800ed5c:	2100      	movs	r1, #0
 800ed5e:	68f8      	ldr	r0, [r7, #12]
 800ed60:	f000 fced 	bl	800f73e <USBD_LL_Transmit>

  return USBD_OK;
 800ed64:	2300      	movs	r3, #0
}
 800ed66:	4618      	mov	r0, r3
 800ed68:	3710      	adds	r7, #16
 800ed6a:	46bd      	mov	sp, r7
 800ed6c:	bd80      	pop	{r7, pc}

0800ed6e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ed6e:	b580      	push	{r7, lr}
 800ed70:	b084      	sub	sp, #16
 800ed72:	af00      	add	r7, sp, #0
 800ed74:	60f8      	str	r0, [r7, #12]
 800ed76:	60b9      	str	r1, [r7, #8]
 800ed78:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	68ba      	ldr	r2, [r7, #8]
 800ed7e:	2100      	movs	r1, #0
 800ed80:	68f8      	ldr	r0, [r7, #12]
 800ed82:	f000 fcdc 	bl	800f73e <USBD_LL_Transmit>

  return USBD_OK;
 800ed86:	2300      	movs	r3, #0
}
 800ed88:	4618      	mov	r0, r3
 800ed8a:	3710      	adds	r7, #16
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	bd80      	pop	{r7, pc}

0800ed90 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ed90:	b580      	push	{r7, lr}
 800ed92:	b084      	sub	sp, #16
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	60f8      	str	r0, [r7, #12]
 800ed98:	60b9      	str	r1, [r7, #8]
 800ed9a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	2203      	movs	r2, #3
 800eda0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	687a      	ldr	r2, [r7, #4]
 800eda8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	687a      	ldr	r2, [r7, #4]
 800edb0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	68ba      	ldr	r2, [r7, #8]
 800edb8:	2100      	movs	r1, #0
 800edba:	68f8      	ldr	r0, [r7, #12]
 800edbc:	f000 fce0 	bl	800f780 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800edc0:	2300      	movs	r3, #0
}
 800edc2:	4618      	mov	r0, r3
 800edc4:	3710      	adds	r7, #16
 800edc6:	46bd      	mov	sp, r7
 800edc8:	bd80      	pop	{r7, pc}

0800edca <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800edca:	b580      	push	{r7, lr}
 800edcc:	b084      	sub	sp, #16
 800edce:	af00      	add	r7, sp, #0
 800edd0:	60f8      	str	r0, [r7, #12]
 800edd2:	60b9      	str	r1, [r7, #8]
 800edd4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	68ba      	ldr	r2, [r7, #8]
 800edda:	2100      	movs	r1, #0
 800eddc:	68f8      	ldr	r0, [r7, #12]
 800edde:	f000 fccf 	bl	800f780 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ede2:	2300      	movs	r3, #0
}
 800ede4:	4618      	mov	r0, r3
 800ede6:	3710      	adds	r7, #16
 800ede8:	46bd      	mov	sp, r7
 800edea:	bd80      	pop	{r7, pc}

0800edec <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800edec:	b580      	push	{r7, lr}
 800edee:	b082      	sub	sp, #8
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	2204      	movs	r2, #4
 800edf8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800edfc:	2300      	movs	r3, #0
 800edfe:	2200      	movs	r2, #0
 800ee00:	2100      	movs	r1, #0
 800ee02:	6878      	ldr	r0, [r7, #4]
 800ee04:	f000 fc9b 	bl	800f73e <USBD_LL_Transmit>

  return USBD_OK;
 800ee08:	2300      	movs	r3, #0
}
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	3708      	adds	r7, #8
 800ee0e:	46bd      	mov	sp, r7
 800ee10:	bd80      	pop	{r7, pc}

0800ee12 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ee12:	b580      	push	{r7, lr}
 800ee14:	b082      	sub	sp, #8
 800ee16:	af00      	add	r7, sp, #0
 800ee18:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	2205      	movs	r2, #5
 800ee1e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ee22:	2300      	movs	r3, #0
 800ee24:	2200      	movs	r2, #0
 800ee26:	2100      	movs	r1, #0
 800ee28:	6878      	ldr	r0, [r7, #4]
 800ee2a:	f000 fca9 	bl	800f780 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ee2e:	2300      	movs	r3, #0
}
 800ee30:	4618      	mov	r0, r3
 800ee32:	3708      	adds	r7, #8
 800ee34:	46bd      	mov	sp, r7
 800ee36:	bd80      	pop	{r7, pc}

0800ee38 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ee38:	b580      	push	{r7, lr}
 800ee3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800ee3c:	2201      	movs	r2, #1
 800ee3e:	4912      	ldr	r1, [pc, #72]	; (800ee88 <MX_USB_DEVICE_Init+0x50>)
 800ee40:	4812      	ldr	r0, [pc, #72]	; (800ee8c <MX_USB_DEVICE_Init+0x54>)
 800ee42:	f7fe fd07 	bl	800d854 <USBD_Init>
 800ee46:	4603      	mov	r3, r0
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d001      	beq.n	800ee50 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ee4c:	f7f2 fe78 	bl	8001b40 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800ee50:	490f      	ldr	r1, [pc, #60]	; (800ee90 <MX_USB_DEVICE_Init+0x58>)
 800ee52:	480e      	ldr	r0, [pc, #56]	; (800ee8c <MX_USB_DEVICE_Init+0x54>)
 800ee54:	f7fe fd2e 	bl	800d8b4 <USBD_RegisterClass>
 800ee58:	4603      	mov	r3, r0
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d001      	beq.n	800ee62 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ee5e:	f7f2 fe6f 	bl	8001b40 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800ee62:	490c      	ldr	r1, [pc, #48]	; (800ee94 <MX_USB_DEVICE_Init+0x5c>)
 800ee64:	4809      	ldr	r0, [pc, #36]	; (800ee8c <MX_USB_DEVICE_Init+0x54>)
 800ee66:	f7fe fc1f 	bl	800d6a8 <USBD_CDC_RegisterInterface>
 800ee6a:	4603      	mov	r3, r0
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d001      	beq.n	800ee74 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ee70:	f7f2 fe66 	bl	8001b40 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800ee74:	4805      	ldr	r0, [pc, #20]	; (800ee8c <MX_USB_DEVICE_Init+0x54>)
 800ee76:	f7fe fd53 	bl	800d920 <USBD_Start>
 800ee7a:	4603      	mov	r3, r0
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d001      	beq.n	800ee84 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ee80:	f7f2 fe5e 	bl	8001b40 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ee84:	bf00      	nop
 800ee86:	bd80      	pop	{r7, pc}
 800ee88:	2000012c 	.word	0x2000012c
 800ee8c:	20004680 	.word	0x20004680
 800ee90:	20000098 	.word	0x20000098
 800ee94:	20000118 	.word	0x20000118

0800ee98 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800ee9c:	2200      	movs	r2, #0
 800ee9e:	4905      	ldr	r1, [pc, #20]	; (800eeb4 <CDC_Init_HS+0x1c>)
 800eea0:	4805      	ldr	r0, [pc, #20]	; (800eeb8 <CDC_Init_HS+0x20>)
 800eea2:	f7fe fc1b 	bl	800d6dc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800eea6:	4905      	ldr	r1, [pc, #20]	; (800eebc <CDC_Init_HS+0x24>)
 800eea8:	4803      	ldr	r0, [pc, #12]	; (800eeb8 <CDC_Init_HS+0x20>)
 800eeaa:	f7fe fc39 	bl	800d720 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800eeae:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	bd80      	pop	{r7, pc}
 800eeb4:	2000515c 	.word	0x2000515c
 800eeb8:	20004680 	.word	0x20004680
 800eebc:	2000495c 	.word	0x2000495c

0800eec0 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800eec0:	b480      	push	{r7}
 800eec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800eec4:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800eec6:	4618      	mov	r0, r3
 800eec8:	46bd      	mov	sp, r7
 800eeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eece:	4770      	bx	lr

0800eed0 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800eed0:	b480      	push	{r7}
 800eed2:	b083      	sub	sp, #12
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	4603      	mov	r3, r0
 800eed8:	6039      	str	r1, [r7, #0]
 800eeda:	71fb      	strb	r3, [r7, #7]
 800eedc:	4613      	mov	r3, r2
 800eede:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800eee0:	79fb      	ldrb	r3, [r7, #7]
 800eee2:	2b23      	cmp	r3, #35	; 0x23
 800eee4:	d84a      	bhi.n	800ef7c <CDC_Control_HS+0xac>
 800eee6:	a201      	add	r2, pc, #4	; (adr r2, 800eeec <CDC_Control_HS+0x1c>)
 800eee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eeec:	0800ef7d 	.word	0x0800ef7d
 800eef0:	0800ef7d 	.word	0x0800ef7d
 800eef4:	0800ef7d 	.word	0x0800ef7d
 800eef8:	0800ef7d 	.word	0x0800ef7d
 800eefc:	0800ef7d 	.word	0x0800ef7d
 800ef00:	0800ef7d 	.word	0x0800ef7d
 800ef04:	0800ef7d 	.word	0x0800ef7d
 800ef08:	0800ef7d 	.word	0x0800ef7d
 800ef0c:	0800ef7d 	.word	0x0800ef7d
 800ef10:	0800ef7d 	.word	0x0800ef7d
 800ef14:	0800ef7d 	.word	0x0800ef7d
 800ef18:	0800ef7d 	.word	0x0800ef7d
 800ef1c:	0800ef7d 	.word	0x0800ef7d
 800ef20:	0800ef7d 	.word	0x0800ef7d
 800ef24:	0800ef7d 	.word	0x0800ef7d
 800ef28:	0800ef7d 	.word	0x0800ef7d
 800ef2c:	0800ef7d 	.word	0x0800ef7d
 800ef30:	0800ef7d 	.word	0x0800ef7d
 800ef34:	0800ef7d 	.word	0x0800ef7d
 800ef38:	0800ef7d 	.word	0x0800ef7d
 800ef3c:	0800ef7d 	.word	0x0800ef7d
 800ef40:	0800ef7d 	.word	0x0800ef7d
 800ef44:	0800ef7d 	.word	0x0800ef7d
 800ef48:	0800ef7d 	.word	0x0800ef7d
 800ef4c:	0800ef7d 	.word	0x0800ef7d
 800ef50:	0800ef7d 	.word	0x0800ef7d
 800ef54:	0800ef7d 	.word	0x0800ef7d
 800ef58:	0800ef7d 	.word	0x0800ef7d
 800ef5c:	0800ef7d 	.word	0x0800ef7d
 800ef60:	0800ef7d 	.word	0x0800ef7d
 800ef64:	0800ef7d 	.word	0x0800ef7d
 800ef68:	0800ef7d 	.word	0x0800ef7d
 800ef6c:	0800ef7d 	.word	0x0800ef7d
 800ef70:	0800ef7d 	.word	0x0800ef7d
 800ef74:	0800ef7d 	.word	0x0800ef7d
 800ef78:	0800ef7d 	.word	0x0800ef7d
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ef7c:	bf00      	nop
  }

  return (USBD_OK);
 800ef7e:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800ef80:	4618      	mov	r0, r3
 800ef82:	370c      	adds	r7, #12
 800ef84:	46bd      	mov	sp, r7
 800ef86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef8a:	4770      	bx	lr

0800ef8c <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800ef8c:	b580      	push	{r7, lr}
 800ef8e:	b082      	sub	sp, #8
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	6078      	str	r0, [r7, #4]
 800ef94:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800ef96:	6879      	ldr	r1, [r7, #4]
 800ef98:	4805      	ldr	r0, [pc, #20]	; (800efb0 <CDC_Receive_HS+0x24>)
 800ef9a:	f7fe fbc1 	bl	800d720 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800ef9e:	4804      	ldr	r0, [pc, #16]	; (800efb0 <CDC_Receive_HS+0x24>)
 800efa0:	f7fe fc22 	bl	800d7e8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800efa4:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800efa6:	4618      	mov	r0, r3
 800efa8:	3708      	adds	r7, #8
 800efaa:	46bd      	mov	sp, r7
 800efac:	bd80      	pop	{r7, pc}
 800efae:	bf00      	nop
 800efb0:	20004680 	.word	0x20004680

0800efb4 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 800efb4:	b580      	push	{r7, lr}
 800efb6:	b084      	sub	sp, #16
 800efb8:	af00      	add	r7, sp, #0
 800efba:	6078      	str	r0, [r7, #4]
 800efbc:	460b      	mov	r3, r1
 800efbe:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800efc0:	2300      	movs	r3, #0
 800efc2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 800efc4:	4b0d      	ldr	r3, [pc, #52]	; (800effc <CDC_Transmit_HS+0x48>)
 800efc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800efca:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800efcc:	68bb      	ldr	r3, [r7, #8]
 800efce:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d001      	beq.n	800efda <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 800efd6:	2301      	movs	r3, #1
 800efd8:	e00b      	b.n	800eff2 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 800efda:	887b      	ldrh	r3, [r7, #2]
 800efdc:	461a      	mov	r2, r3
 800efde:	6879      	ldr	r1, [r7, #4]
 800efe0:	4806      	ldr	r0, [pc, #24]	; (800effc <CDC_Transmit_HS+0x48>)
 800efe2:	f7fe fb7b 	bl	800d6dc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 800efe6:	4805      	ldr	r0, [pc, #20]	; (800effc <CDC_Transmit_HS+0x48>)
 800efe8:	f7fe fbb8 	bl	800d75c <USBD_CDC_TransmitPacket>
 800efec:	4603      	mov	r3, r0
 800efee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 800eff0:	7bfb      	ldrb	r3, [r7, #15]
}
 800eff2:	4618      	mov	r0, r3
 800eff4:	3710      	adds	r7, #16
 800eff6:	46bd      	mov	sp, r7
 800eff8:	bd80      	pop	{r7, pc}
 800effa:	bf00      	nop
 800effc:	20004680 	.word	0x20004680

0800f000 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f000:	b480      	push	{r7}
 800f002:	b087      	sub	sp, #28
 800f004:	af00      	add	r7, sp, #0
 800f006:	60f8      	str	r0, [r7, #12]
 800f008:	60b9      	str	r1, [r7, #8]
 800f00a:	4613      	mov	r3, r2
 800f00c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f00e:	2300      	movs	r3, #0
 800f010:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800f012:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f016:	4618      	mov	r0, r3
 800f018:	371c      	adds	r7, #28
 800f01a:	46bd      	mov	sp, r7
 800f01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f020:	4770      	bx	lr
	...

0800f024 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f024:	b480      	push	{r7}
 800f026:	b083      	sub	sp, #12
 800f028:	af00      	add	r7, sp, #0
 800f02a:	4603      	mov	r3, r0
 800f02c:	6039      	str	r1, [r7, #0]
 800f02e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800f030:	683b      	ldr	r3, [r7, #0]
 800f032:	2212      	movs	r2, #18
 800f034:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800f036:	4b03      	ldr	r3, [pc, #12]	; (800f044 <USBD_HS_DeviceDescriptor+0x20>)
}
 800f038:	4618      	mov	r0, r3
 800f03a:	370c      	adds	r7, #12
 800f03c:	46bd      	mov	sp, r7
 800f03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f042:	4770      	bx	lr
 800f044:	20000148 	.word	0x20000148

0800f048 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f048:	b480      	push	{r7}
 800f04a:	b083      	sub	sp, #12
 800f04c:	af00      	add	r7, sp, #0
 800f04e:	4603      	mov	r3, r0
 800f050:	6039      	str	r1, [r7, #0]
 800f052:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f054:	683b      	ldr	r3, [r7, #0]
 800f056:	2204      	movs	r2, #4
 800f058:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f05a:	4b03      	ldr	r3, [pc, #12]	; (800f068 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800f05c:	4618      	mov	r0, r3
 800f05e:	370c      	adds	r7, #12
 800f060:	46bd      	mov	sp, r7
 800f062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f066:	4770      	bx	lr
 800f068:	2000015c 	.word	0x2000015c

0800f06c <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f06c:	b580      	push	{r7, lr}
 800f06e:	b082      	sub	sp, #8
 800f070:	af00      	add	r7, sp, #0
 800f072:	4603      	mov	r3, r0
 800f074:	6039      	str	r1, [r7, #0]
 800f076:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f078:	79fb      	ldrb	r3, [r7, #7]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d105      	bne.n	800f08a <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800f07e:	683a      	ldr	r2, [r7, #0]
 800f080:	4907      	ldr	r1, [pc, #28]	; (800f0a0 <USBD_HS_ProductStrDescriptor+0x34>)
 800f082:	4808      	ldr	r0, [pc, #32]	; (800f0a4 <USBD_HS_ProductStrDescriptor+0x38>)
 800f084:	f7ff fdf8 	bl	800ec78 <USBD_GetString>
 800f088:	e004      	b.n	800f094 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800f08a:	683a      	ldr	r2, [r7, #0]
 800f08c:	4904      	ldr	r1, [pc, #16]	; (800f0a0 <USBD_HS_ProductStrDescriptor+0x34>)
 800f08e:	4805      	ldr	r0, [pc, #20]	; (800f0a4 <USBD_HS_ProductStrDescriptor+0x38>)
 800f090:	f7ff fdf2 	bl	800ec78 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f094:	4b02      	ldr	r3, [pc, #8]	; (800f0a0 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800f096:	4618      	mov	r0, r3
 800f098:	3708      	adds	r7, #8
 800f09a:	46bd      	mov	sp, r7
 800f09c:	bd80      	pop	{r7, pc}
 800f09e:	bf00      	nop
 800f0a0:	2000595c 	.word	0x2000595c
 800f0a4:	08012814 	.word	0x08012814

0800f0a8 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f0a8:	b580      	push	{r7, lr}
 800f0aa:	b082      	sub	sp, #8
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	4603      	mov	r3, r0
 800f0b0:	6039      	str	r1, [r7, #0]
 800f0b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f0b4:	683a      	ldr	r2, [r7, #0]
 800f0b6:	4904      	ldr	r1, [pc, #16]	; (800f0c8 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800f0b8:	4804      	ldr	r0, [pc, #16]	; (800f0cc <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800f0ba:	f7ff fddd 	bl	800ec78 <USBD_GetString>
  return USBD_StrDesc;
 800f0be:	4b02      	ldr	r3, [pc, #8]	; (800f0c8 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	3708      	adds	r7, #8
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	bd80      	pop	{r7, pc}
 800f0c8:	2000595c 	.word	0x2000595c
 800f0cc:	0801282c 	.word	0x0801282c

0800f0d0 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f0d0:	b580      	push	{r7, lr}
 800f0d2:	b082      	sub	sp, #8
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	4603      	mov	r3, r0
 800f0d8:	6039      	str	r1, [r7, #0]
 800f0da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f0dc:	683b      	ldr	r3, [r7, #0]
 800f0de:	221a      	movs	r2, #26
 800f0e0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f0e2:	f000 f843 	bl	800f16c <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800f0e6:	4b02      	ldr	r3, [pc, #8]	; (800f0f0 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	3708      	adds	r7, #8
 800f0ec:	46bd      	mov	sp, r7
 800f0ee:	bd80      	pop	{r7, pc}
 800f0f0:	20000160 	.word	0x20000160

0800f0f4 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f0f4:	b580      	push	{r7, lr}
 800f0f6:	b082      	sub	sp, #8
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	4603      	mov	r3, r0
 800f0fc:	6039      	str	r1, [r7, #0]
 800f0fe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f100:	79fb      	ldrb	r3, [r7, #7]
 800f102:	2b00      	cmp	r3, #0
 800f104:	d105      	bne.n	800f112 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800f106:	683a      	ldr	r2, [r7, #0]
 800f108:	4907      	ldr	r1, [pc, #28]	; (800f128 <USBD_HS_ConfigStrDescriptor+0x34>)
 800f10a:	4808      	ldr	r0, [pc, #32]	; (800f12c <USBD_HS_ConfigStrDescriptor+0x38>)
 800f10c:	f7ff fdb4 	bl	800ec78 <USBD_GetString>
 800f110:	e004      	b.n	800f11c <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800f112:	683a      	ldr	r2, [r7, #0]
 800f114:	4904      	ldr	r1, [pc, #16]	; (800f128 <USBD_HS_ConfigStrDescriptor+0x34>)
 800f116:	4805      	ldr	r0, [pc, #20]	; (800f12c <USBD_HS_ConfigStrDescriptor+0x38>)
 800f118:	f7ff fdae 	bl	800ec78 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f11c:	4b02      	ldr	r3, [pc, #8]	; (800f128 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800f11e:	4618      	mov	r0, r3
 800f120:	3708      	adds	r7, #8
 800f122:	46bd      	mov	sp, r7
 800f124:	bd80      	pop	{r7, pc}
 800f126:	bf00      	nop
 800f128:	2000595c 	.word	0x2000595c
 800f12c:	08012840 	.word	0x08012840

0800f130 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f130:	b580      	push	{r7, lr}
 800f132:	b082      	sub	sp, #8
 800f134:	af00      	add	r7, sp, #0
 800f136:	4603      	mov	r3, r0
 800f138:	6039      	str	r1, [r7, #0]
 800f13a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f13c:	79fb      	ldrb	r3, [r7, #7]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d105      	bne.n	800f14e <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800f142:	683a      	ldr	r2, [r7, #0]
 800f144:	4907      	ldr	r1, [pc, #28]	; (800f164 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800f146:	4808      	ldr	r0, [pc, #32]	; (800f168 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800f148:	f7ff fd96 	bl	800ec78 <USBD_GetString>
 800f14c:	e004      	b.n	800f158 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800f14e:	683a      	ldr	r2, [r7, #0]
 800f150:	4904      	ldr	r1, [pc, #16]	; (800f164 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800f152:	4805      	ldr	r0, [pc, #20]	; (800f168 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800f154:	f7ff fd90 	bl	800ec78 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f158:	4b02      	ldr	r3, [pc, #8]	; (800f164 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800f15a:	4618      	mov	r0, r3
 800f15c:	3708      	adds	r7, #8
 800f15e:	46bd      	mov	sp, r7
 800f160:	bd80      	pop	{r7, pc}
 800f162:	bf00      	nop
 800f164:	2000595c 	.word	0x2000595c
 800f168:	0801284c 	.word	0x0801284c

0800f16c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f16c:	b580      	push	{r7, lr}
 800f16e:	b084      	sub	sp, #16
 800f170:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f172:	4b0f      	ldr	r3, [pc, #60]	; (800f1b0 <Get_SerialNum+0x44>)
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f178:	4b0e      	ldr	r3, [pc, #56]	; (800f1b4 <Get_SerialNum+0x48>)
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f17e:	4b0e      	ldr	r3, [pc, #56]	; (800f1b8 <Get_SerialNum+0x4c>)
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f184:	68fa      	ldr	r2, [r7, #12]
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	4413      	add	r3, r2
 800f18a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d009      	beq.n	800f1a6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f192:	2208      	movs	r2, #8
 800f194:	4909      	ldr	r1, [pc, #36]	; (800f1bc <Get_SerialNum+0x50>)
 800f196:	68f8      	ldr	r0, [r7, #12]
 800f198:	f000 f814 	bl	800f1c4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f19c:	2204      	movs	r2, #4
 800f19e:	4908      	ldr	r1, [pc, #32]	; (800f1c0 <Get_SerialNum+0x54>)
 800f1a0:	68b8      	ldr	r0, [r7, #8]
 800f1a2:	f000 f80f 	bl	800f1c4 <IntToUnicode>
  }
}
 800f1a6:	bf00      	nop
 800f1a8:	3710      	adds	r7, #16
 800f1aa:	46bd      	mov	sp, r7
 800f1ac:	bd80      	pop	{r7, pc}
 800f1ae:	bf00      	nop
 800f1b0:	1fff7a10 	.word	0x1fff7a10
 800f1b4:	1fff7a14 	.word	0x1fff7a14
 800f1b8:	1fff7a18 	.word	0x1fff7a18
 800f1bc:	20000162 	.word	0x20000162
 800f1c0:	20000172 	.word	0x20000172

0800f1c4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f1c4:	b480      	push	{r7}
 800f1c6:	b087      	sub	sp, #28
 800f1c8:	af00      	add	r7, sp, #0
 800f1ca:	60f8      	str	r0, [r7, #12]
 800f1cc:	60b9      	str	r1, [r7, #8]
 800f1ce:	4613      	mov	r3, r2
 800f1d0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f1d6:	2300      	movs	r3, #0
 800f1d8:	75fb      	strb	r3, [r7, #23]
 800f1da:	e027      	b.n	800f22c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	0f1b      	lsrs	r3, r3, #28
 800f1e0:	2b09      	cmp	r3, #9
 800f1e2:	d80b      	bhi.n	800f1fc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	0f1b      	lsrs	r3, r3, #28
 800f1e8:	b2da      	uxtb	r2, r3
 800f1ea:	7dfb      	ldrb	r3, [r7, #23]
 800f1ec:	005b      	lsls	r3, r3, #1
 800f1ee:	4619      	mov	r1, r3
 800f1f0:	68bb      	ldr	r3, [r7, #8]
 800f1f2:	440b      	add	r3, r1
 800f1f4:	3230      	adds	r2, #48	; 0x30
 800f1f6:	b2d2      	uxtb	r2, r2
 800f1f8:	701a      	strb	r2, [r3, #0]
 800f1fa:	e00a      	b.n	800f212 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	0f1b      	lsrs	r3, r3, #28
 800f200:	b2da      	uxtb	r2, r3
 800f202:	7dfb      	ldrb	r3, [r7, #23]
 800f204:	005b      	lsls	r3, r3, #1
 800f206:	4619      	mov	r1, r3
 800f208:	68bb      	ldr	r3, [r7, #8]
 800f20a:	440b      	add	r3, r1
 800f20c:	3237      	adds	r2, #55	; 0x37
 800f20e:	b2d2      	uxtb	r2, r2
 800f210:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	011b      	lsls	r3, r3, #4
 800f216:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f218:	7dfb      	ldrb	r3, [r7, #23]
 800f21a:	005b      	lsls	r3, r3, #1
 800f21c:	3301      	adds	r3, #1
 800f21e:	68ba      	ldr	r2, [r7, #8]
 800f220:	4413      	add	r3, r2
 800f222:	2200      	movs	r2, #0
 800f224:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f226:	7dfb      	ldrb	r3, [r7, #23]
 800f228:	3301      	adds	r3, #1
 800f22a:	75fb      	strb	r3, [r7, #23]
 800f22c:	7dfa      	ldrb	r2, [r7, #23]
 800f22e:	79fb      	ldrb	r3, [r7, #7]
 800f230:	429a      	cmp	r2, r3
 800f232:	d3d3      	bcc.n	800f1dc <IntToUnicode+0x18>
  }
}
 800f234:	bf00      	nop
 800f236:	bf00      	nop
 800f238:	371c      	adds	r7, #28
 800f23a:	46bd      	mov	sp, r7
 800f23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f240:	4770      	bx	lr
	...

0800f244 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f244:	b580      	push	{r7, lr}
 800f246:	b08a      	sub	sp, #40	; 0x28
 800f248:	af00      	add	r7, sp, #0
 800f24a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f24c:	f107 0314 	add.w	r3, r7, #20
 800f250:	2200      	movs	r2, #0
 800f252:	601a      	str	r2, [r3, #0]
 800f254:	605a      	str	r2, [r3, #4]
 800f256:	609a      	str	r2, [r3, #8]
 800f258:	60da      	str	r2, [r3, #12]
 800f25a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	4a1d      	ldr	r2, [pc, #116]	; (800f2d8 <HAL_PCD_MspInit+0x94>)
 800f262:	4293      	cmp	r3, r2
 800f264:	d134      	bne.n	800f2d0 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f266:	2300      	movs	r3, #0
 800f268:	613b      	str	r3, [r7, #16]
 800f26a:	4b1c      	ldr	r3, [pc, #112]	; (800f2dc <HAL_PCD_MspInit+0x98>)
 800f26c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f26e:	4a1b      	ldr	r2, [pc, #108]	; (800f2dc <HAL_PCD_MspInit+0x98>)
 800f270:	f043 0302 	orr.w	r3, r3, #2
 800f274:	6313      	str	r3, [r2, #48]	; 0x30
 800f276:	4b19      	ldr	r3, [pc, #100]	; (800f2dc <HAL_PCD_MspInit+0x98>)
 800f278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f27a:	f003 0302 	and.w	r3, r3, #2
 800f27e:	613b      	str	r3, [r7, #16]
 800f280:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800f282:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800f286:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f288:	2302      	movs	r3, #2
 800f28a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f28c:	2300      	movs	r3, #0
 800f28e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f290:	2303      	movs	r3, #3
 800f292:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800f294:	230c      	movs	r3, #12
 800f296:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f298:	f107 0314 	add.w	r3, r7, #20
 800f29c:	4619      	mov	r1, r3
 800f29e:	4810      	ldr	r0, [pc, #64]	; (800f2e0 <HAL_PCD_MspInit+0x9c>)
 800f2a0:	f7f5 fac8 	bl	8004834 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800f2a4:	2300      	movs	r3, #0
 800f2a6:	60fb      	str	r3, [r7, #12]
 800f2a8:	4b0c      	ldr	r3, [pc, #48]	; (800f2dc <HAL_PCD_MspInit+0x98>)
 800f2aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2ac:	4a0b      	ldr	r2, [pc, #44]	; (800f2dc <HAL_PCD_MspInit+0x98>)
 800f2ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f2b2:	6313      	str	r3, [r2, #48]	; 0x30
 800f2b4:	4b09      	ldr	r3, [pc, #36]	; (800f2dc <HAL_PCD_MspInit+0x98>)
 800f2b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f2bc:	60fb      	str	r3, [r7, #12]
 800f2be:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800f2c0:	2200      	movs	r2, #0
 800f2c2:	2105      	movs	r1, #5
 800f2c4:	204d      	movs	r0, #77	; 0x4d
 800f2c6:	f7f4 fe37 	bl	8003f38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800f2ca:	204d      	movs	r0, #77	; 0x4d
 800f2cc:	f7f4 fe50 	bl	8003f70 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800f2d0:	bf00      	nop
 800f2d2:	3728      	adds	r7, #40	; 0x28
 800f2d4:	46bd      	mov	sp, r7
 800f2d6:	bd80      	pop	{r7, pc}
 800f2d8:	40040000 	.word	0x40040000
 800f2dc:	40023800 	.word	0x40023800
 800f2e0:	40020400 	.word	0x40020400

0800f2e4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f2e4:	b580      	push	{r7, lr}
 800f2e6:	b082      	sub	sp, #8
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f2f8:	4619      	mov	r1, r3
 800f2fa:	4610      	mov	r0, r2
 800f2fc:	f7fe fb5d 	bl	800d9ba <USBD_LL_SetupStage>
}
 800f300:	bf00      	nop
 800f302:	3708      	adds	r7, #8
 800f304:	46bd      	mov	sp, r7
 800f306:	bd80      	pop	{r7, pc}

0800f308 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f308:	b580      	push	{r7, lr}
 800f30a:	b082      	sub	sp, #8
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	6078      	str	r0, [r7, #4]
 800f310:	460b      	mov	r3, r1
 800f312:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f31a:	78fa      	ldrb	r2, [r7, #3]
 800f31c:	6879      	ldr	r1, [r7, #4]
 800f31e:	4613      	mov	r3, r2
 800f320:	00db      	lsls	r3, r3, #3
 800f322:	4413      	add	r3, r2
 800f324:	009b      	lsls	r3, r3, #2
 800f326:	440b      	add	r3, r1
 800f328:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800f32c:	681a      	ldr	r2, [r3, #0]
 800f32e:	78fb      	ldrb	r3, [r7, #3]
 800f330:	4619      	mov	r1, r3
 800f332:	f7fe fb97 	bl	800da64 <USBD_LL_DataOutStage>
}
 800f336:	bf00      	nop
 800f338:	3708      	adds	r7, #8
 800f33a:	46bd      	mov	sp, r7
 800f33c:	bd80      	pop	{r7, pc}

0800f33e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f33e:	b580      	push	{r7, lr}
 800f340:	b082      	sub	sp, #8
 800f342:	af00      	add	r7, sp, #0
 800f344:	6078      	str	r0, [r7, #4]
 800f346:	460b      	mov	r3, r1
 800f348:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f350:	78fa      	ldrb	r2, [r7, #3]
 800f352:	6879      	ldr	r1, [r7, #4]
 800f354:	4613      	mov	r3, r2
 800f356:	00db      	lsls	r3, r3, #3
 800f358:	4413      	add	r3, r2
 800f35a:	009b      	lsls	r3, r3, #2
 800f35c:	440b      	add	r3, r1
 800f35e:	334c      	adds	r3, #76	; 0x4c
 800f360:	681a      	ldr	r2, [r3, #0]
 800f362:	78fb      	ldrb	r3, [r7, #3]
 800f364:	4619      	mov	r1, r3
 800f366:	f7fe fc30 	bl	800dbca <USBD_LL_DataInStage>
}
 800f36a:	bf00      	nop
 800f36c:	3708      	adds	r7, #8
 800f36e:	46bd      	mov	sp, r7
 800f370:	bd80      	pop	{r7, pc}

0800f372 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f372:	b580      	push	{r7, lr}
 800f374:	b082      	sub	sp, #8
 800f376:	af00      	add	r7, sp, #0
 800f378:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f380:	4618      	mov	r0, r3
 800f382:	f7fe fd64 	bl	800de4e <USBD_LL_SOF>
}
 800f386:	bf00      	nop
 800f388:	3708      	adds	r7, #8
 800f38a:	46bd      	mov	sp, r7
 800f38c:	bd80      	pop	{r7, pc}

0800f38e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f38e:	b580      	push	{r7, lr}
 800f390:	b084      	sub	sp, #16
 800f392:	af00      	add	r7, sp, #0
 800f394:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f396:	2301      	movs	r3, #1
 800f398:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	68db      	ldr	r3, [r3, #12]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d102      	bne.n	800f3a8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800f3a2:	2300      	movs	r3, #0
 800f3a4:	73fb      	strb	r3, [r7, #15]
 800f3a6:	e008      	b.n	800f3ba <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	68db      	ldr	r3, [r3, #12]
 800f3ac:	2b02      	cmp	r3, #2
 800f3ae:	d102      	bne.n	800f3b6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800f3b0:	2301      	movs	r3, #1
 800f3b2:	73fb      	strb	r3, [r7, #15]
 800f3b4:	e001      	b.n	800f3ba <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800f3b6:	f7f2 fbc3 	bl	8001b40 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f3c0:	7bfa      	ldrb	r2, [r7, #15]
 800f3c2:	4611      	mov	r1, r2
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	f7fe fd04 	bl	800ddd2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	f7fe fcac 	bl	800dd2e <USBD_LL_Reset>
}
 800f3d6:	bf00      	nop
 800f3d8:	3710      	adds	r7, #16
 800f3da:	46bd      	mov	sp, r7
 800f3dc:	bd80      	pop	{r7, pc}
	...

0800f3e0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f3e0:	b580      	push	{r7, lr}
 800f3e2:	b082      	sub	sp, #8
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	f7fe fcff 	bl	800ddf2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	687a      	ldr	r2, [r7, #4]
 800f400:	6812      	ldr	r2, [r2, #0]
 800f402:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f406:	f043 0301 	orr.w	r3, r3, #1
 800f40a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	6a1b      	ldr	r3, [r3, #32]
 800f410:	2b00      	cmp	r3, #0
 800f412:	d005      	beq.n	800f420 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f414:	4b04      	ldr	r3, [pc, #16]	; (800f428 <HAL_PCD_SuspendCallback+0x48>)
 800f416:	691b      	ldr	r3, [r3, #16]
 800f418:	4a03      	ldr	r2, [pc, #12]	; (800f428 <HAL_PCD_SuspendCallback+0x48>)
 800f41a:	f043 0306 	orr.w	r3, r3, #6
 800f41e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f420:	bf00      	nop
 800f422:	3708      	adds	r7, #8
 800f424:	46bd      	mov	sp, r7
 800f426:	bd80      	pop	{r7, pc}
 800f428:	e000ed00 	.word	0xe000ed00

0800f42c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f42c:	b580      	push	{r7, lr}
 800f42e:	b082      	sub	sp, #8
 800f430:	af00      	add	r7, sp, #0
 800f432:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f43a:	4618      	mov	r0, r3
 800f43c:	f7fe fcef 	bl	800de1e <USBD_LL_Resume>
}
 800f440:	bf00      	nop
 800f442:	3708      	adds	r7, #8
 800f444:	46bd      	mov	sp, r7
 800f446:	bd80      	pop	{r7, pc}

0800f448 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f448:	b580      	push	{r7, lr}
 800f44a:	b082      	sub	sp, #8
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	6078      	str	r0, [r7, #4]
 800f450:	460b      	mov	r3, r1
 800f452:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f45a:	78fa      	ldrb	r2, [r7, #3]
 800f45c:	4611      	mov	r1, r2
 800f45e:	4618      	mov	r0, r3
 800f460:	f7fe fd47 	bl	800def2 <USBD_LL_IsoOUTIncomplete>
}
 800f464:	bf00      	nop
 800f466:	3708      	adds	r7, #8
 800f468:	46bd      	mov	sp, r7
 800f46a:	bd80      	pop	{r7, pc}

0800f46c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f46c:	b580      	push	{r7, lr}
 800f46e:	b082      	sub	sp, #8
 800f470:	af00      	add	r7, sp, #0
 800f472:	6078      	str	r0, [r7, #4]
 800f474:	460b      	mov	r3, r1
 800f476:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f47e:	78fa      	ldrb	r2, [r7, #3]
 800f480:	4611      	mov	r1, r2
 800f482:	4618      	mov	r0, r3
 800f484:	f7fe fd03 	bl	800de8e <USBD_LL_IsoINIncomplete>
}
 800f488:	bf00      	nop
 800f48a:	3708      	adds	r7, #8
 800f48c:	46bd      	mov	sp, r7
 800f48e:	bd80      	pop	{r7, pc}

0800f490 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f490:	b580      	push	{r7, lr}
 800f492:	b082      	sub	sp, #8
 800f494:	af00      	add	r7, sp, #0
 800f496:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f49e:	4618      	mov	r0, r3
 800f4a0:	f7fe fd59 	bl	800df56 <USBD_LL_DevConnected>
}
 800f4a4:	bf00      	nop
 800f4a6:	3708      	adds	r7, #8
 800f4a8:	46bd      	mov	sp, r7
 800f4aa:	bd80      	pop	{r7, pc}

0800f4ac <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f4ac:	b580      	push	{r7, lr}
 800f4ae:	b082      	sub	sp, #8
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	f7fe fd56 	bl	800df6c <USBD_LL_DevDisconnected>
}
 800f4c0:	bf00      	nop
 800f4c2:	3708      	adds	r7, #8
 800f4c4:	46bd      	mov	sp, r7
 800f4c6:	bd80      	pop	{r7, pc}

0800f4c8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b082      	sub	sp, #8
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	781b      	ldrb	r3, [r3, #0]
 800f4d4:	2b01      	cmp	r3, #1
 800f4d6:	d140      	bne.n	800f55a <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800f4d8:	4a22      	ldr	r2, [pc, #136]	; (800f564 <USBD_LL_Init+0x9c>)
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	4a20      	ldr	r2, [pc, #128]	; (800f564 <USBD_LL_Init+0x9c>)
 800f4e4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800f4e8:	4b1e      	ldr	r3, [pc, #120]	; (800f564 <USBD_LL_Init+0x9c>)
 800f4ea:	4a1f      	ldr	r2, [pc, #124]	; (800f568 <USBD_LL_Init+0xa0>)
 800f4ec:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 800f4ee:	4b1d      	ldr	r3, [pc, #116]	; (800f564 <USBD_LL_Init+0x9c>)
 800f4f0:	2206      	movs	r2, #6
 800f4f2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800f4f4:	4b1b      	ldr	r3, [pc, #108]	; (800f564 <USBD_LL_Init+0x9c>)
 800f4f6:	2202      	movs	r2, #2
 800f4f8:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800f4fa:	4b1a      	ldr	r3, [pc, #104]	; (800f564 <USBD_LL_Init+0x9c>)
 800f4fc:	2200      	movs	r2, #0
 800f4fe:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800f500:	4b18      	ldr	r3, [pc, #96]	; (800f564 <USBD_LL_Init+0x9c>)
 800f502:	2202      	movs	r2, #2
 800f504:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800f506:	4b17      	ldr	r3, [pc, #92]	; (800f564 <USBD_LL_Init+0x9c>)
 800f508:	2200      	movs	r2, #0
 800f50a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800f50c:	4b15      	ldr	r3, [pc, #84]	; (800f564 <USBD_LL_Init+0x9c>)
 800f50e:	2200      	movs	r2, #0
 800f510:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800f512:	4b14      	ldr	r3, [pc, #80]	; (800f564 <USBD_LL_Init+0x9c>)
 800f514:	2200      	movs	r2, #0
 800f516:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800f518:	4b12      	ldr	r3, [pc, #72]	; (800f564 <USBD_LL_Init+0x9c>)
 800f51a:	2200      	movs	r2, #0
 800f51c:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800f51e:	4b11      	ldr	r3, [pc, #68]	; (800f564 <USBD_LL_Init+0x9c>)
 800f520:	2200      	movs	r2, #0
 800f522:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800f524:	4b0f      	ldr	r3, [pc, #60]	; (800f564 <USBD_LL_Init+0x9c>)
 800f526:	2200      	movs	r2, #0
 800f528:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800f52a:	480e      	ldr	r0, [pc, #56]	; (800f564 <USBD_LL_Init+0x9c>)
 800f52c:	f7f5 ff2d 	bl	800538a <HAL_PCD_Init>
 800f530:	4603      	mov	r3, r0
 800f532:	2b00      	cmp	r3, #0
 800f534:	d001      	beq.n	800f53a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800f536:	f7f2 fb03 	bl	8001b40 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800f53a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f53e:	4809      	ldr	r0, [pc, #36]	; (800f564 <USBD_LL_Init+0x9c>)
 800f540:	f7f7 f983 	bl	800684a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800f544:	2280      	movs	r2, #128	; 0x80
 800f546:	2100      	movs	r1, #0
 800f548:	4806      	ldr	r0, [pc, #24]	; (800f564 <USBD_LL_Init+0x9c>)
 800f54a:	f7f7 f937 	bl	80067bc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800f54e:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800f552:	2101      	movs	r1, #1
 800f554:	4803      	ldr	r0, [pc, #12]	; (800f564 <USBD_LL_Init+0x9c>)
 800f556:	f7f7 f931 	bl	80067bc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f55a:	2300      	movs	r3, #0
}
 800f55c:	4618      	mov	r0, r3
 800f55e:	3708      	adds	r7, #8
 800f560:	46bd      	mov	sp, r7
 800f562:	bd80      	pop	{r7, pc}
 800f564:	20005b5c 	.word	0x20005b5c
 800f568:	40040000 	.word	0x40040000

0800f56c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f56c:	b580      	push	{r7, lr}
 800f56e:	b084      	sub	sp, #16
 800f570:	af00      	add	r7, sp, #0
 800f572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f574:	2300      	movs	r3, #0
 800f576:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f578:	2300      	movs	r3, #0
 800f57a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f582:	4618      	mov	r0, r3
 800f584:	f7f6 f81e 	bl	80055c4 <HAL_PCD_Start>
 800f588:	4603      	mov	r3, r0
 800f58a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f58c:	7bfb      	ldrb	r3, [r7, #15]
 800f58e:	4618      	mov	r0, r3
 800f590:	f000 f942 	bl	800f818 <USBD_Get_USB_Status>
 800f594:	4603      	mov	r3, r0
 800f596:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f598:	7bbb      	ldrb	r3, [r7, #14]
}
 800f59a:	4618      	mov	r0, r3
 800f59c:	3710      	adds	r7, #16
 800f59e:	46bd      	mov	sp, r7
 800f5a0:	bd80      	pop	{r7, pc}

0800f5a2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f5a2:	b580      	push	{r7, lr}
 800f5a4:	b084      	sub	sp, #16
 800f5a6:	af00      	add	r7, sp, #0
 800f5a8:	6078      	str	r0, [r7, #4]
 800f5aa:	4608      	mov	r0, r1
 800f5ac:	4611      	mov	r1, r2
 800f5ae:	461a      	mov	r2, r3
 800f5b0:	4603      	mov	r3, r0
 800f5b2:	70fb      	strb	r3, [r7, #3]
 800f5b4:	460b      	mov	r3, r1
 800f5b6:	70bb      	strb	r3, [r7, #2]
 800f5b8:	4613      	mov	r3, r2
 800f5ba:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f5bc:	2300      	movs	r3, #0
 800f5be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f5ca:	78bb      	ldrb	r3, [r7, #2]
 800f5cc:	883a      	ldrh	r2, [r7, #0]
 800f5ce:	78f9      	ldrb	r1, [r7, #3]
 800f5d0:	f7f6 fcef 	bl	8005fb2 <HAL_PCD_EP_Open>
 800f5d4:	4603      	mov	r3, r0
 800f5d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f5d8:	7bfb      	ldrb	r3, [r7, #15]
 800f5da:	4618      	mov	r0, r3
 800f5dc:	f000 f91c 	bl	800f818 <USBD_Get_USB_Status>
 800f5e0:	4603      	mov	r3, r0
 800f5e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f5e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	3710      	adds	r7, #16
 800f5ea:	46bd      	mov	sp, r7
 800f5ec:	bd80      	pop	{r7, pc}

0800f5ee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f5ee:	b580      	push	{r7, lr}
 800f5f0:	b084      	sub	sp, #16
 800f5f2:	af00      	add	r7, sp, #0
 800f5f4:	6078      	str	r0, [r7, #4]
 800f5f6:	460b      	mov	r3, r1
 800f5f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f5fa:	2300      	movs	r3, #0
 800f5fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f5fe:	2300      	movs	r3, #0
 800f600:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f608:	78fa      	ldrb	r2, [r7, #3]
 800f60a:	4611      	mov	r1, r2
 800f60c:	4618      	mov	r0, r3
 800f60e:	f7f6 fd38 	bl	8006082 <HAL_PCD_EP_Close>
 800f612:	4603      	mov	r3, r0
 800f614:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f616:	7bfb      	ldrb	r3, [r7, #15]
 800f618:	4618      	mov	r0, r3
 800f61a:	f000 f8fd 	bl	800f818 <USBD_Get_USB_Status>
 800f61e:	4603      	mov	r3, r0
 800f620:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f622:	7bbb      	ldrb	r3, [r7, #14]
}
 800f624:	4618      	mov	r0, r3
 800f626:	3710      	adds	r7, #16
 800f628:	46bd      	mov	sp, r7
 800f62a:	bd80      	pop	{r7, pc}

0800f62c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f62c:	b580      	push	{r7, lr}
 800f62e:	b084      	sub	sp, #16
 800f630:	af00      	add	r7, sp, #0
 800f632:	6078      	str	r0, [r7, #4]
 800f634:	460b      	mov	r3, r1
 800f636:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f638:	2300      	movs	r3, #0
 800f63a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f63c:	2300      	movs	r3, #0
 800f63e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f646:	78fa      	ldrb	r2, [r7, #3]
 800f648:	4611      	mov	r1, r2
 800f64a:	4618      	mov	r0, r3
 800f64c:	f7f6 fe10 	bl	8006270 <HAL_PCD_EP_SetStall>
 800f650:	4603      	mov	r3, r0
 800f652:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f654:	7bfb      	ldrb	r3, [r7, #15]
 800f656:	4618      	mov	r0, r3
 800f658:	f000 f8de 	bl	800f818 <USBD_Get_USB_Status>
 800f65c:	4603      	mov	r3, r0
 800f65e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f660:	7bbb      	ldrb	r3, [r7, #14]
}
 800f662:	4618      	mov	r0, r3
 800f664:	3710      	adds	r7, #16
 800f666:	46bd      	mov	sp, r7
 800f668:	bd80      	pop	{r7, pc}

0800f66a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f66a:	b580      	push	{r7, lr}
 800f66c:	b084      	sub	sp, #16
 800f66e:	af00      	add	r7, sp, #0
 800f670:	6078      	str	r0, [r7, #4]
 800f672:	460b      	mov	r3, r1
 800f674:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f676:	2300      	movs	r3, #0
 800f678:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f67a:	2300      	movs	r3, #0
 800f67c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f684:	78fa      	ldrb	r2, [r7, #3]
 800f686:	4611      	mov	r1, r2
 800f688:	4618      	mov	r0, r3
 800f68a:	f7f6 fe55 	bl	8006338 <HAL_PCD_EP_ClrStall>
 800f68e:	4603      	mov	r3, r0
 800f690:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f692:	7bfb      	ldrb	r3, [r7, #15]
 800f694:	4618      	mov	r0, r3
 800f696:	f000 f8bf 	bl	800f818 <USBD_Get_USB_Status>
 800f69a:	4603      	mov	r3, r0
 800f69c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f69e:	7bbb      	ldrb	r3, [r7, #14]
}
 800f6a0:	4618      	mov	r0, r3
 800f6a2:	3710      	adds	r7, #16
 800f6a4:	46bd      	mov	sp, r7
 800f6a6:	bd80      	pop	{r7, pc}

0800f6a8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f6a8:	b480      	push	{r7}
 800f6aa:	b085      	sub	sp, #20
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	6078      	str	r0, [r7, #4]
 800f6b0:	460b      	mov	r3, r1
 800f6b2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f6ba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f6bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	da0b      	bge.n	800f6dc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f6c4:	78fb      	ldrb	r3, [r7, #3]
 800f6c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f6ca:	68f9      	ldr	r1, [r7, #12]
 800f6cc:	4613      	mov	r3, r2
 800f6ce:	00db      	lsls	r3, r3, #3
 800f6d0:	4413      	add	r3, r2
 800f6d2:	009b      	lsls	r3, r3, #2
 800f6d4:	440b      	add	r3, r1
 800f6d6:	333e      	adds	r3, #62	; 0x3e
 800f6d8:	781b      	ldrb	r3, [r3, #0]
 800f6da:	e00b      	b.n	800f6f4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f6dc:	78fb      	ldrb	r3, [r7, #3]
 800f6de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f6e2:	68f9      	ldr	r1, [r7, #12]
 800f6e4:	4613      	mov	r3, r2
 800f6e6:	00db      	lsls	r3, r3, #3
 800f6e8:	4413      	add	r3, r2
 800f6ea:	009b      	lsls	r3, r3, #2
 800f6ec:	440b      	add	r3, r1
 800f6ee:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800f6f2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	3714      	adds	r7, #20
 800f6f8:	46bd      	mov	sp, r7
 800f6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6fe:	4770      	bx	lr

0800f700 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f700:	b580      	push	{r7, lr}
 800f702:	b084      	sub	sp, #16
 800f704:	af00      	add	r7, sp, #0
 800f706:	6078      	str	r0, [r7, #4]
 800f708:	460b      	mov	r3, r1
 800f70a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f70c:	2300      	movs	r3, #0
 800f70e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f710:	2300      	movs	r3, #0
 800f712:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f71a:	78fa      	ldrb	r2, [r7, #3]
 800f71c:	4611      	mov	r1, r2
 800f71e:	4618      	mov	r0, r3
 800f720:	f7f6 fc22 	bl	8005f68 <HAL_PCD_SetAddress>
 800f724:	4603      	mov	r3, r0
 800f726:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f728:	7bfb      	ldrb	r3, [r7, #15]
 800f72a:	4618      	mov	r0, r3
 800f72c:	f000 f874 	bl	800f818 <USBD_Get_USB_Status>
 800f730:	4603      	mov	r3, r0
 800f732:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f734:	7bbb      	ldrb	r3, [r7, #14]
}
 800f736:	4618      	mov	r0, r3
 800f738:	3710      	adds	r7, #16
 800f73a:	46bd      	mov	sp, r7
 800f73c:	bd80      	pop	{r7, pc}

0800f73e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f73e:	b580      	push	{r7, lr}
 800f740:	b086      	sub	sp, #24
 800f742:	af00      	add	r7, sp, #0
 800f744:	60f8      	str	r0, [r7, #12]
 800f746:	607a      	str	r2, [r7, #4]
 800f748:	603b      	str	r3, [r7, #0]
 800f74a:	460b      	mov	r3, r1
 800f74c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f74e:	2300      	movs	r3, #0
 800f750:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f752:	2300      	movs	r3, #0
 800f754:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f75c:	7af9      	ldrb	r1, [r7, #11]
 800f75e:	683b      	ldr	r3, [r7, #0]
 800f760:	687a      	ldr	r2, [r7, #4]
 800f762:	f7f6 fd3b 	bl	80061dc <HAL_PCD_EP_Transmit>
 800f766:	4603      	mov	r3, r0
 800f768:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f76a:	7dfb      	ldrb	r3, [r7, #23]
 800f76c:	4618      	mov	r0, r3
 800f76e:	f000 f853 	bl	800f818 <USBD_Get_USB_Status>
 800f772:	4603      	mov	r3, r0
 800f774:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f776:	7dbb      	ldrb	r3, [r7, #22]
}
 800f778:	4618      	mov	r0, r3
 800f77a:	3718      	adds	r7, #24
 800f77c:	46bd      	mov	sp, r7
 800f77e:	bd80      	pop	{r7, pc}

0800f780 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f780:	b580      	push	{r7, lr}
 800f782:	b086      	sub	sp, #24
 800f784:	af00      	add	r7, sp, #0
 800f786:	60f8      	str	r0, [r7, #12]
 800f788:	607a      	str	r2, [r7, #4]
 800f78a:	603b      	str	r3, [r7, #0]
 800f78c:	460b      	mov	r3, r1
 800f78e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f790:	2300      	movs	r3, #0
 800f792:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f794:	2300      	movs	r3, #0
 800f796:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f79e:	7af9      	ldrb	r1, [r7, #11]
 800f7a0:	683b      	ldr	r3, [r7, #0]
 800f7a2:	687a      	ldr	r2, [r7, #4]
 800f7a4:	f7f6 fcb7 	bl	8006116 <HAL_PCD_EP_Receive>
 800f7a8:	4603      	mov	r3, r0
 800f7aa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f7ac:	7dfb      	ldrb	r3, [r7, #23]
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	f000 f832 	bl	800f818 <USBD_Get_USB_Status>
 800f7b4:	4603      	mov	r3, r0
 800f7b6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f7b8:	7dbb      	ldrb	r3, [r7, #22]
}
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	3718      	adds	r7, #24
 800f7be:	46bd      	mov	sp, r7
 800f7c0:	bd80      	pop	{r7, pc}

0800f7c2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f7c2:	b580      	push	{r7, lr}
 800f7c4:	b082      	sub	sp, #8
 800f7c6:	af00      	add	r7, sp, #0
 800f7c8:	6078      	str	r0, [r7, #4]
 800f7ca:	460b      	mov	r3, r1
 800f7cc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f7d4:	78fa      	ldrb	r2, [r7, #3]
 800f7d6:	4611      	mov	r1, r2
 800f7d8:	4618      	mov	r0, r3
 800f7da:	f7f6 fce7 	bl	80061ac <HAL_PCD_EP_GetRxCount>
 800f7de:	4603      	mov	r3, r0
}
 800f7e0:	4618      	mov	r0, r3
 800f7e2:	3708      	adds	r7, #8
 800f7e4:	46bd      	mov	sp, r7
 800f7e6:	bd80      	pop	{r7, pc}

0800f7e8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f7e8:	b480      	push	{r7}
 800f7ea:	b083      	sub	sp, #12
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f7f0:	4b03      	ldr	r3, [pc, #12]	; (800f800 <USBD_static_malloc+0x18>)
}
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	370c      	adds	r7, #12
 800f7f6:	46bd      	mov	sp, r7
 800f7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7fc:	4770      	bx	lr
 800f7fe:	bf00      	nop
 800f800:	20006068 	.word	0x20006068

0800f804 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f804:	b480      	push	{r7}
 800f806:	b083      	sub	sp, #12
 800f808:	af00      	add	r7, sp, #0
 800f80a:	6078      	str	r0, [r7, #4]

}
 800f80c:	bf00      	nop
 800f80e:	370c      	adds	r7, #12
 800f810:	46bd      	mov	sp, r7
 800f812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f816:	4770      	bx	lr

0800f818 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f818:	b480      	push	{r7}
 800f81a:	b085      	sub	sp, #20
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	4603      	mov	r3, r0
 800f820:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f822:	2300      	movs	r3, #0
 800f824:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f826:	79fb      	ldrb	r3, [r7, #7]
 800f828:	2b03      	cmp	r3, #3
 800f82a:	d817      	bhi.n	800f85c <USBD_Get_USB_Status+0x44>
 800f82c:	a201      	add	r2, pc, #4	; (adr r2, 800f834 <USBD_Get_USB_Status+0x1c>)
 800f82e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f832:	bf00      	nop
 800f834:	0800f845 	.word	0x0800f845
 800f838:	0800f84b 	.word	0x0800f84b
 800f83c:	0800f851 	.word	0x0800f851
 800f840:	0800f857 	.word	0x0800f857
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f844:	2300      	movs	r3, #0
 800f846:	73fb      	strb	r3, [r7, #15]
    break;
 800f848:	e00b      	b.n	800f862 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f84a:	2303      	movs	r3, #3
 800f84c:	73fb      	strb	r3, [r7, #15]
    break;
 800f84e:	e008      	b.n	800f862 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f850:	2301      	movs	r3, #1
 800f852:	73fb      	strb	r3, [r7, #15]
    break;
 800f854:	e005      	b.n	800f862 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f856:	2303      	movs	r3, #3
 800f858:	73fb      	strb	r3, [r7, #15]
    break;
 800f85a:	e002      	b.n	800f862 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f85c:	2303      	movs	r3, #3
 800f85e:	73fb      	strb	r3, [r7, #15]
    break;
 800f860:	bf00      	nop
  }
  return usb_status;
 800f862:	7bfb      	ldrb	r3, [r7, #15]
}
 800f864:	4618      	mov	r0, r3
 800f866:	3714      	adds	r7, #20
 800f868:	46bd      	mov	sp, r7
 800f86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f86e:	4770      	bx	lr

0800f870 <__errno>:
 800f870:	4b01      	ldr	r3, [pc, #4]	; (800f878 <__errno+0x8>)
 800f872:	6818      	ldr	r0, [r3, #0]
 800f874:	4770      	bx	lr
 800f876:	bf00      	nop
 800f878:	2000017c 	.word	0x2000017c

0800f87c <std>:
 800f87c:	2300      	movs	r3, #0
 800f87e:	b510      	push	{r4, lr}
 800f880:	4604      	mov	r4, r0
 800f882:	e9c0 3300 	strd	r3, r3, [r0]
 800f886:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f88a:	6083      	str	r3, [r0, #8]
 800f88c:	8181      	strh	r1, [r0, #12]
 800f88e:	6643      	str	r3, [r0, #100]	; 0x64
 800f890:	81c2      	strh	r2, [r0, #14]
 800f892:	6183      	str	r3, [r0, #24]
 800f894:	4619      	mov	r1, r3
 800f896:	2208      	movs	r2, #8
 800f898:	305c      	adds	r0, #92	; 0x5c
 800f89a:	f000 f91a 	bl	800fad2 <memset>
 800f89e:	4b05      	ldr	r3, [pc, #20]	; (800f8b4 <std+0x38>)
 800f8a0:	6263      	str	r3, [r4, #36]	; 0x24
 800f8a2:	4b05      	ldr	r3, [pc, #20]	; (800f8b8 <std+0x3c>)
 800f8a4:	62a3      	str	r3, [r4, #40]	; 0x28
 800f8a6:	4b05      	ldr	r3, [pc, #20]	; (800f8bc <std+0x40>)
 800f8a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f8aa:	4b05      	ldr	r3, [pc, #20]	; (800f8c0 <std+0x44>)
 800f8ac:	6224      	str	r4, [r4, #32]
 800f8ae:	6323      	str	r3, [r4, #48]	; 0x30
 800f8b0:	bd10      	pop	{r4, pc}
 800f8b2:	bf00      	nop
 800f8b4:	08010615 	.word	0x08010615
 800f8b8:	08010637 	.word	0x08010637
 800f8bc:	0801066f 	.word	0x0801066f
 800f8c0:	08010693 	.word	0x08010693

0800f8c4 <_cleanup_r>:
 800f8c4:	4901      	ldr	r1, [pc, #4]	; (800f8cc <_cleanup_r+0x8>)
 800f8c6:	f000 b8af 	b.w	800fa28 <_fwalk_reent>
 800f8ca:	bf00      	nop
 800f8cc:	080114e1 	.word	0x080114e1

0800f8d0 <__sfmoreglue>:
 800f8d0:	b570      	push	{r4, r5, r6, lr}
 800f8d2:	2268      	movs	r2, #104	; 0x68
 800f8d4:	1e4d      	subs	r5, r1, #1
 800f8d6:	4355      	muls	r5, r2
 800f8d8:	460e      	mov	r6, r1
 800f8da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f8de:	f000 f921 	bl	800fb24 <_malloc_r>
 800f8e2:	4604      	mov	r4, r0
 800f8e4:	b140      	cbz	r0, 800f8f8 <__sfmoreglue+0x28>
 800f8e6:	2100      	movs	r1, #0
 800f8e8:	e9c0 1600 	strd	r1, r6, [r0]
 800f8ec:	300c      	adds	r0, #12
 800f8ee:	60a0      	str	r0, [r4, #8]
 800f8f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f8f4:	f000 f8ed 	bl	800fad2 <memset>
 800f8f8:	4620      	mov	r0, r4
 800f8fa:	bd70      	pop	{r4, r5, r6, pc}

0800f8fc <__sfp_lock_acquire>:
 800f8fc:	4801      	ldr	r0, [pc, #4]	; (800f904 <__sfp_lock_acquire+0x8>)
 800f8fe:	f000 b8d8 	b.w	800fab2 <__retarget_lock_acquire_recursive>
 800f902:	bf00      	nop
 800f904:	20006289 	.word	0x20006289

0800f908 <__sfp_lock_release>:
 800f908:	4801      	ldr	r0, [pc, #4]	; (800f910 <__sfp_lock_release+0x8>)
 800f90a:	f000 b8d3 	b.w	800fab4 <__retarget_lock_release_recursive>
 800f90e:	bf00      	nop
 800f910:	20006289 	.word	0x20006289

0800f914 <__sinit_lock_acquire>:
 800f914:	4801      	ldr	r0, [pc, #4]	; (800f91c <__sinit_lock_acquire+0x8>)
 800f916:	f000 b8cc 	b.w	800fab2 <__retarget_lock_acquire_recursive>
 800f91a:	bf00      	nop
 800f91c:	2000628a 	.word	0x2000628a

0800f920 <__sinit_lock_release>:
 800f920:	4801      	ldr	r0, [pc, #4]	; (800f928 <__sinit_lock_release+0x8>)
 800f922:	f000 b8c7 	b.w	800fab4 <__retarget_lock_release_recursive>
 800f926:	bf00      	nop
 800f928:	2000628a 	.word	0x2000628a

0800f92c <__sinit>:
 800f92c:	b510      	push	{r4, lr}
 800f92e:	4604      	mov	r4, r0
 800f930:	f7ff fff0 	bl	800f914 <__sinit_lock_acquire>
 800f934:	69a3      	ldr	r3, [r4, #24]
 800f936:	b11b      	cbz	r3, 800f940 <__sinit+0x14>
 800f938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f93c:	f7ff bff0 	b.w	800f920 <__sinit_lock_release>
 800f940:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f944:	6523      	str	r3, [r4, #80]	; 0x50
 800f946:	4b13      	ldr	r3, [pc, #76]	; (800f994 <__sinit+0x68>)
 800f948:	4a13      	ldr	r2, [pc, #76]	; (800f998 <__sinit+0x6c>)
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	62a2      	str	r2, [r4, #40]	; 0x28
 800f94e:	42a3      	cmp	r3, r4
 800f950:	bf04      	itt	eq
 800f952:	2301      	moveq	r3, #1
 800f954:	61a3      	streq	r3, [r4, #24]
 800f956:	4620      	mov	r0, r4
 800f958:	f000 f820 	bl	800f99c <__sfp>
 800f95c:	6060      	str	r0, [r4, #4]
 800f95e:	4620      	mov	r0, r4
 800f960:	f000 f81c 	bl	800f99c <__sfp>
 800f964:	60a0      	str	r0, [r4, #8]
 800f966:	4620      	mov	r0, r4
 800f968:	f000 f818 	bl	800f99c <__sfp>
 800f96c:	2200      	movs	r2, #0
 800f96e:	60e0      	str	r0, [r4, #12]
 800f970:	2104      	movs	r1, #4
 800f972:	6860      	ldr	r0, [r4, #4]
 800f974:	f7ff ff82 	bl	800f87c <std>
 800f978:	68a0      	ldr	r0, [r4, #8]
 800f97a:	2201      	movs	r2, #1
 800f97c:	2109      	movs	r1, #9
 800f97e:	f7ff ff7d 	bl	800f87c <std>
 800f982:	68e0      	ldr	r0, [r4, #12]
 800f984:	2202      	movs	r2, #2
 800f986:	2112      	movs	r1, #18
 800f988:	f7ff ff78 	bl	800f87c <std>
 800f98c:	2301      	movs	r3, #1
 800f98e:	61a3      	str	r3, [r4, #24]
 800f990:	e7d2      	b.n	800f938 <__sinit+0xc>
 800f992:	bf00      	nop
 800f994:	08014394 	.word	0x08014394
 800f998:	0800f8c5 	.word	0x0800f8c5

0800f99c <__sfp>:
 800f99c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f99e:	4607      	mov	r7, r0
 800f9a0:	f7ff ffac 	bl	800f8fc <__sfp_lock_acquire>
 800f9a4:	4b1e      	ldr	r3, [pc, #120]	; (800fa20 <__sfp+0x84>)
 800f9a6:	681e      	ldr	r6, [r3, #0]
 800f9a8:	69b3      	ldr	r3, [r6, #24]
 800f9aa:	b913      	cbnz	r3, 800f9b2 <__sfp+0x16>
 800f9ac:	4630      	mov	r0, r6
 800f9ae:	f7ff ffbd 	bl	800f92c <__sinit>
 800f9b2:	3648      	adds	r6, #72	; 0x48
 800f9b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f9b8:	3b01      	subs	r3, #1
 800f9ba:	d503      	bpl.n	800f9c4 <__sfp+0x28>
 800f9bc:	6833      	ldr	r3, [r6, #0]
 800f9be:	b30b      	cbz	r3, 800fa04 <__sfp+0x68>
 800f9c0:	6836      	ldr	r6, [r6, #0]
 800f9c2:	e7f7      	b.n	800f9b4 <__sfp+0x18>
 800f9c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f9c8:	b9d5      	cbnz	r5, 800fa00 <__sfp+0x64>
 800f9ca:	4b16      	ldr	r3, [pc, #88]	; (800fa24 <__sfp+0x88>)
 800f9cc:	60e3      	str	r3, [r4, #12]
 800f9ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f9d2:	6665      	str	r5, [r4, #100]	; 0x64
 800f9d4:	f000 f86c 	bl	800fab0 <__retarget_lock_init_recursive>
 800f9d8:	f7ff ff96 	bl	800f908 <__sfp_lock_release>
 800f9dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f9e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f9e4:	6025      	str	r5, [r4, #0]
 800f9e6:	61a5      	str	r5, [r4, #24]
 800f9e8:	2208      	movs	r2, #8
 800f9ea:	4629      	mov	r1, r5
 800f9ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f9f0:	f000 f86f 	bl	800fad2 <memset>
 800f9f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f9f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f9fc:	4620      	mov	r0, r4
 800f9fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa00:	3468      	adds	r4, #104	; 0x68
 800fa02:	e7d9      	b.n	800f9b8 <__sfp+0x1c>
 800fa04:	2104      	movs	r1, #4
 800fa06:	4638      	mov	r0, r7
 800fa08:	f7ff ff62 	bl	800f8d0 <__sfmoreglue>
 800fa0c:	4604      	mov	r4, r0
 800fa0e:	6030      	str	r0, [r6, #0]
 800fa10:	2800      	cmp	r0, #0
 800fa12:	d1d5      	bne.n	800f9c0 <__sfp+0x24>
 800fa14:	f7ff ff78 	bl	800f908 <__sfp_lock_release>
 800fa18:	230c      	movs	r3, #12
 800fa1a:	603b      	str	r3, [r7, #0]
 800fa1c:	e7ee      	b.n	800f9fc <__sfp+0x60>
 800fa1e:	bf00      	nop
 800fa20:	08014394 	.word	0x08014394
 800fa24:	ffff0001 	.word	0xffff0001

0800fa28 <_fwalk_reent>:
 800fa28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa2c:	4606      	mov	r6, r0
 800fa2e:	4688      	mov	r8, r1
 800fa30:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fa34:	2700      	movs	r7, #0
 800fa36:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fa3a:	f1b9 0901 	subs.w	r9, r9, #1
 800fa3e:	d505      	bpl.n	800fa4c <_fwalk_reent+0x24>
 800fa40:	6824      	ldr	r4, [r4, #0]
 800fa42:	2c00      	cmp	r4, #0
 800fa44:	d1f7      	bne.n	800fa36 <_fwalk_reent+0xe>
 800fa46:	4638      	mov	r0, r7
 800fa48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa4c:	89ab      	ldrh	r3, [r5, #12]
 800fa4e:	2b01      	cmp	r3, #1
 800fa50:	d907      	bls.n	800fa62 <_fwalk_reent+0x3a>
 800fa52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fa56:	3301      	adds	r3, #1
 800fa58:	d003      	beq.n	800fa62 <_fwalk_reent+0x3a>
 800fa5a:	4629      	mov	r1, r5
 800fa5c:	4630      	mov	r0, r6
 800fa5e:	47c0      	blx	r8
 800fa60:	4307      	orrs	r7, r0
 800fa62:	3568      	adds	r5, #104	; 0x68
 800fa64:	e7e9      	b.n	800fa3a <_fwalk_reent+0x12>
	...

0800fa68 <__libc_init_array>:
 800fa68:	b570      	push	{r4, r5, r6, lr}
 800fa6a:	4d0d      	ldr	r5, [pc, #52]	; (800faa0 <__libc_init_array+0x38>)
 800fa6c:	4c0d      	ldr	r4, [pc, #52]	; (800faa4 <__libc_init_array+0x3c>)
 800fa6e:	1b64      	subs	r4, r4, r5
 800fa70:	10a4      	asrs	r4, r4, #2
 800fa72:	2600      	movs	r6, #0
 800fa74:	42a6      	cmp	r6, r4
 800fa76:	d109      	bne.n	800fa8c <__libc_init_array+0x24>
 800fa78:	4d0b      	ldr	r5, [pc, #44]	; (800faa8 <__libc_init_array+0x40>)
 800fa7a:	4c0c      	ldr	r4, [pc, #48]	; (800faac <__libc_init_array+0x44>)
 800fa7c:	f002 fe76 	bl	801276c <_init>
 800fa80:	1b64      	subs	r4, r4, r5
 800fa82:	10a4      	asrs	r4, r4, #2
 800fa84:	2600      	movs	r6, #0
 800fa86:	42a6      	cmp	r6, r4
 800fa88:	d105      	bne.n	800fa96 <__libc_init_array+0x2e>
 800fa8a:	bd70      	pop	{r4, r5, r6, pc}
 800fa8c:	f855 3b04 	ldr.w	r3, [r5], #4
 800fa90:	4798      	blx	r3
 800fa92:	3601      	adds	r6, #1
 800fa94:	e7ee      	b.n	800fa74 <__libc_init_array+0xc>
 800fa96:	f855 3b04 	ldr.w	r3, [r5], #4
 800fa9a:	4798      	blx	r3
 800fa9c:	3601      	adds	r6, #1
 800fa9e:	e7f2      	b.n	800fa86 <__libc_init_array+0x1e>
 800faa0:	08014714 	.word	0x08014714
 800faa4:	08014714 	.word	0x08014714
 800faa8:	08014714 	.word	0x08014714
 800faac:	08014718 	.word	0x08014718

0800fab0 <__retarget_lock_init_recursive>:
 800fab0:	4770      	bx	lr

0800fab2 <__retarget_lock_acquire_recursive>:
 800fab2:	4770      	bx	lr

0800fab4 <__retarget_lock_release_recursive>:
 800fab4:	4770      	bx	lr

0800fab6 <memcpy>:
 800fab6:	440a      	add	r2, r1
 800fab8:	4291      	cmp	r1, r2
 800faba:	f100 33ff 	add.w	r3, r0, #4294967295
 800fabe:	d100      	bne.n	800fac2 <memcpy+0xc>
 800fac0:	4770      	bx	lr
 800fac2:	b510      	push	{r4, lr}
 800fac4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fac8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800facc:	4291      	cmp	r1, r2
 800face:	d1f9      	bne.n	800fac4 <memcpy+0xe>
 800fad0:	bd10      	pop	{r4, pc}

0800fad2 <memset>:
 800fad2:	4402      	add	r2, r0
 800fad4:	4603      	mov	r3, r0
 800fad6:	4293      	cmp	r3, r2
 800fad8:	d100      	bne.n	800fadc <memset+0xa>
 800fada:	4770      	bx	lr
 800fadc:	f803 1b01 	strb.w	r1, [r3], #1
 800fae0:	e7f9      	b.n	800fad6 <memset+0x4>
	...

0800fae4 <sbrk_aligned>:
 800fae4:	b570      	push	{r4, r5, r6, lr}
 800fae6:	4e0e      	ldr	r6, [pc, #56]	; (800fb20 <sbrk_aligned+0x3c>)
 800fae8:	460c      	mov	r4, r1
 800faea:	6831      	ldr	r1, [r6, #0]
 800faec:	4605      	mov	r5, r0
 800faee:	b911      	cbnz	r1, 800faf6 <sbrk_aligned+0x12>
 800faf0:	f000 fd60 	bl	80105b4 <_sbrk_r>
 800faf4:	6030      	str	r0, [r6, #0]
 800faf6:	4621      	mov	r1, r4
 800faf8:	4628      	mov	r0, r5
 800fafa:	f000 fd5b 	bl	80105b4 <_sbrk_r>
 800fafe:	1c43      	adds	r3, r0, #1
 800fb00:	d00a      	beq.n	800fb18 <sbrk_aligned+0x34>
 800fb02:	1cc4      	adds	r4, r0, #3
 800fb04:	f024 0403 	bic.w	r4, r4, #3
 800fb08:	42a0      	cmp	r0, r4
 800fb0a:	d007      	beq.n	800fb1c <sbrk_aligned+0x38>
 800fb0c:	1a21      	subs	r1, r4, r0
 800fb0e:	4628      	mov	r0, r5
 800fb10:	f000 fd50 	bl	80105b4 <_sbrk_r>
 800fb14:	3001      	adds	r0, #1
 800fb16:	d101      	bne.n	800fb1c <sbrk_aligned+0x38>
 800fb18:	f04f 34ff 	mov.w	r4, #4294967295
 800fb1c:	4620      	mov	r0, r4
 800fb1e:	bd70      	pop	{r4, r5, r6, pc}
 800fb20:	20006290 	.word	0x20006290

0800fb24 <_malloc_r>:
 800fb24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb28:	1ccd      	adds	r5, r1, #3
 800fb2a:	f025 0503 	bic.w	r5, r5, #3
 800fb2e:	3508      	adds	r5, #8
 800fb30:	2d0c      	cmp	r5, #12
 800fb32:	bf38      	it	cc
 800fb34:	250c      	movcc	r5, #12
 800fb36:	2d00      	cmp	r5, #0
 800fb38:	4607      	mov	r7, r0
 800fb3a:	db01      	blt.n	800fb40 <_malloc_r+0x1c>
 800fb3c:	42a9      	cmp	r1, r5
 800fb3e:	d905      	bls.n	800fb4c <_malloc_r+0x28>
 800fb40:	230c      	movs	r3, #12
 800fb42:	603b      	str	r3, [r7, #0]
 800fb44:	2600      	movs	r6, #0
 800fb46:	4630      	mov	r0, r6
 800fb48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb4c:	4e2e      	ldr	r6, [pc, #184]	; (800fc08 <_malloc_r+0xe4>)
 800fb4e:	f001 fd21 	bl	8011594 <__malloc_lock>
 800fb52:	6833      	ldr	r3, [r6, #0]
 800fb54:	461c      	mov	r4, r3
 800fb56:	bb34      	cbnz	r4, 800fba6 <_malloc_r+0x82>
 800fb58:	4629      	mov	r1, r5
 800fb5a:	4638      	mov	r0, r7
 800fb5c:	f7ff ffc2 	bl	800fae4 <sbrk_aligned>
 800fb60:	1c43      	adds	r3, r0, #1
 800fb62:	4604      	mov	r4, r0
 800fb64:	d14d      	bne.n	800fc02 <_malloc_r+0xde>
 800fb66:	6834      	ldr	r4, [r6, #0]
 800fb68:	4626      	mov	r6, r4
 800fb6a:	2e00      	cmp	r6, #0
 800fb6c:	d140      	bne.n	800fbf0 <_malloc_r+0xcc>
 800fb6e:	6823      	ldr	r3, [r4, #0]
 800fb70:	4631      	mov	r1, r6
 800fb72:	4638      	mov	r0, r7
 800fb74:	eb04 0803 	add.w	r8, r4, r3
 800fb78:	f000 fd1c 	bl	80105b4 <_sbrk_r>
 800fb7c:	4580      	cmp	r8, r0
 800fb7e:	d13a      	bne.n	800fbf6 <_malloc_r+0xd2>
 800fb80:	6821      	ldr	r1, [r4, #0]
 800fb82:	3503      	adds	r5, #3
 800fb84:	1a6d      	subs	r5, r5, r1
 800fb86:	f025 0503 	bic.w	r5, r5, #3
 800fb8a:	3508      	adds	r5, #8
 800fb8c:	2d0c      	cmp	r5, #12
 800fb8e:	bf38      	it	cc
 800fb90:	250c      	movcc	r5, #12
 800fb92:	4629      	mov	r1, r5
 800fb94:	4638      	mov	r0, r7
 800fb96:	f7ff ffa5 	bl	800fae4 <sbrk_aligned>
 800fb9a:	3001      	adds	r0, #1
 800fb9c:	d02b      	beq.n	800fbf6 <_malloc_r+0xd2>
 800fb9e:	6823      	ldr	r3, [r4, #0]
 800fba0:	442b      	add	r3, r5
 800fba2:	6023      	str	r3, [r4, #0]
 800fba4:	e00e      	b.n	800fbc4 <_malloc_r+0xa0>
 800fba6:	6822      	ldr	r2, [r4, #0]
 800fba8:	1b52      	subs	r2, r2, r5
 800fbaa:	d41e      	bmi.n	800fbea <_malloc_r+0xc6>
 800fbac:	2a0b      	cmp	r2, #11
 800fbae:	d916      	bls.n	800fbde <_malloc_r+0xba>
 800fbb0:	1961      	adds	r1, r4, r5
 800fbb2:	42a3      	cmp	r3, r4
 800fbb4:	6025      	str	r5, [r4, #0]
 800fbb6:	bf18      	it	ne
 800fbb8:	6059      	strne	r1, [r3, #4]
 800fbba:	6863      	ldr	r3, [r4, #4]
 800fbbc:	bf08      	it	eq
 800fbbe:	6031      	streq	r1, [r6, #0]
 800fbc0:	5162      	str	r2, [r4, r5]
 800fbc2:	604b      	str	r3, [r1, #4]
 800fbc4:	4638      	mov	r0, r7
 800fbc6:	f104 060b 	add.w	r6, r4, #11
 800fbca:	f001 fce9 	bl	80115a0 <__malloc_unlock>
 800fbce:	f026 0607 	bic.w	r6, r6, #7
 800fbd2:	1d23      	adds	r3, r4, #4
 800fbd4:	1af2      	subs	r2, r6, r3
 800fbd6:	d0b6      	beq.n	800fb46 <_malloc_r+0x22>
 800fbd8:	1b9b      	subs	r3, r3, r6
 800fbda:	50a3      	str	r3, [r4, r2]
 800fbdc:	e7b3      	b.n	800fb46 <_malloc_r+0x22>
 800fbde:	6862      	ldr	r2, [r4, #4]
 800fbe0:	42a3      	cmp	r3, r4
 800fbe2:	bf0c      	ite	eq
 800fbe4:	6032      	streq	r2, [r6, #0]
 800fbe6:	605a      	strne	r2, [r3, #4]
 800fbe8:	e7ec      	b.n	800fbc4 <_malloc_r+0xa0>
 800fbea:	4623      	mov	r3, r4
 800fbec:	6864      	ldr	r4, [r4, #4]
 800fbee:	e7b2      	b.n	800fb56 <_malloc_r+0x32>
 800fbf0:	4634      	mov	r4, r6
 800fbf2:	6876      	ldr	r6, [r6, #4]
 800fbf4:	e7b9      	b.n	800fb6a <_malloc_r+0x46>
 800fbf6:	230c      	movs	r3, #12
 800fbf8:	603b      	str	r3, [r7, #0]
 800fbfa:	4638      	mov	r0, r7
 800fbfc:	f001 fcd0 	bl	80115a0 <__malloc_unlock>
 800fc00:	e7a1      	b.n	800fb46 <_malloc_r+0x22>
 800fc02:	6025      	str	r5, [r4, #0]
 800fc04:	e7de      	b.n	800fbc4 <_malloc_r+0xa0>
 800fc06:	bf00      	nop
 800fc08:	2000628c 	.word	0x2000628c

0800fc0c <__cvt>:
 800fc0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fc10:	ec55 4b10 	vmov	r4, r5, d0
 800fc14:	2d00      	cmp	r5, #0
 800fc16:	460e      	mov	r6, r1
 800fc18:	4619      	mov	r1, r3
 800fc1a:	462b      	mov	r3, r5
 800fc1c:	bfbb      	ittet	lt
 800fc1e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800fc22:	461d      	movlt	r5, r3
 800fc24:	2300      	movge	r3, #0
 800fc26:	232d      	movlt	r3, #45	; 0x2d
 800fc28:	700b      	strb	r3, [r1, #0]
 800fc2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fc2c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800fc30:	4691      	mov	r9, r2
 800fc32:	f023 0820 	bic.w	r8, r3, #32
 800fc36:	bfbc      	itt	lt
 800fc38:	4622      	movlt	r2, r4
 800fc3a:	4614      	movlt	r4, r2
 800fc3c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fc40:	d005      	beq.n	800fc4e <__cvt+0x42>
 800fc42:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800fc46:	d100      	bne.n	800fc4a <__cvt+0x3e>
 800fc48:	3601      	adds	r6, #1
 800fc4a:	2102      	movs	r1, #2
 800fc4c:	e000      	b.n	800fc50 <__cvt+0x44>
 800fc4e:	2103      	movs	r1, #3
 800fc50:	ab03      	add	r3, sp, #12
 800fc52:	9301      	str	r3, [sp, #4]
 800fc54:	ab02      	add	r3, sp, #8
 800fc56:	9300      	str	r3, [sp, #0]
 800fc58:	ec45 4b10 	vmov	d0, r4, r5
 800fc5c:	4653      	mov	r3, sl
 800fc5e:	4632      	mov	r2, r6
 800fc60:	f000 fdca 	bl	80107f8 <_dtoa_r>
 800fc64:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800fc68:	4607      	mov	r7, r0
 800fc6a:	d102      	bne.n	800fc72 <__cvt+0x66>
 800fc6c:	f019 0f01 	tst.w	r9, #1
 800fc70:	d022      	beq.n	800fcb8 <__cvt+0xac>
 800fc72:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fc76:	eb07 0906 	add.w	r9, r7, r6
 800fc7a:	d110      	bne.n	800fc9e <__cvt+0x92>
 800fc7c:	783b      	ldrb	r3, [r7, #0]
 800fc7e:	2b30      	cmp	r3, #48	; 0x30
 800fc80:	d10a      	bne.n	800fc98 <__cvt+0x8c>
 800fc82:	2200      	movs	r2, #0
 800fc84:	2300      	movs	r3, #0
 800fc86:	4620      	mov	r0, r4
 800fc88:	4629      	mov	r1, r5
 800fc8a:	f7f0 ff2d 	bl	8000ae8 <__aeabi_dcmpeq>
 800fc8e:	b918      	cbnz	r0, 800fc98 <__cvt+0x8c>
 800fc90:	f1c6 0601 	rsb	r6, r6, #1
 800fc94:	f8ca 6000 	str.w	r6, [sl]
 800fc98:	f8da 3000 	ldr.w	r3, [sl]
 800fc9c:	4499      	add	r9, r3
 800fc9e:	2200      	movs	r2, #0
 800fca0:	2300      	movs	r3, #0
 800fca2:	4620      	mov	r0, r4
 800fca4:	4629      	mov	r1, r5
 800fca6:	f7f0 ff1f 	bl	8000ae8 <__aeabi_dcmpeq>
 800fcaa:	b108      	cbz	r0, 800fcb0 <__cvt+0xa4>
 800fcac:	f8cd 900c 	str.w	r9, [sp, #12]
 800fcb0:	2230      	movs	r2, #48	; 0x30
 800fcb2:	9b03      	ldr	r3, [sp, #12]
 800fcb4:	454b      	cmp	r3, r9
 800fcb6:	d307      	bcc.n	800fcc8 <__cvt+0xbc>
 800fcb8:	9b03      	ldr	r3, [sp, #12]
 800fcba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fcbc:	1bdb      	subs	r3, r3, r7
 800fcbe:	4638      	mov	r0, r7
 800fcc0:	6013      	str	r3, [r2, #0]
 800fcc2:	b004      	add	sp, #16
 800fcc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcc8:	1c59      	adds	r1, r3, #1
 800fcca:	9103      	str	r1, [sp, #12]
 800fccc:	701a      	strb	r2, [r3, #0]
 800fcce:	e7f0      	b.n	800fcb2 <__cvt+0xa6>

0800fcd0 <__exponent>:
 800fcd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fcd2:	4603      	mov	r3, r0
 800fcd4:	2900      	cmp	r1, #0
 800fcd6:	bfb8      	it	lt
 800fcd8:	4249      	neglt	r1, r1
 800fcda:	f803 2b02 	strb.w	r2, [r3], #2
 800fcde:	bfb4      	ite	lt
 800fce0:	222d      	movlt	r2, #45	; 0x2d
 800fce2:	222b      	movge	r2, #43	; 0x2b
 800fce4:	2909      	cmp	r1, #9
 800fce6:	7042      	strb	r2, [r0, #1]
 800fce8:	dd2a      	ble.n	800fd40 <__exponent+0x70>
 800fcea:	f10d 0407 	add.w	r4, sp, #7
 800fcee:	46a4      	mov	ip, r4
 800fcf0:	270a      	movs	r7, #10
 800fcf2:	46a6      	mov	lr, r4
 800fcf4:	460a      	mov	r2, r1
 800fcf6:	fb91 f6f7 	sdiv	r6, r1, r7
 800fcfa:	fb07 1516 	mls	r5, r7, r6, r1
 800fcfe:	3530      	adds	r5, #48	; 0x30
 800fd00:	2a63      	cmp	r2, #99	; 0x63
 800fd02:	f104 34ff 	add.w	r4, r4, #4294967295
 800fd06:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800fd0a:	4631      	mov	r1, r6
 800fd0c:	dcf1      	bgt.n	800fcf2 <__exponent+0x22>
 800fd0e:	3130      	adds	r1, #48	; 0x30
 800fd10:	f1ae 0502 	sub.w	r5, lr, #2
 800fd14:	f804 1c01 	strb.w	r1, [r4, #-1]
 800fd18:	1c44      	adds	r4, r0, #1
 800fd1a:	4629      	mov	r1, r5
 800fd1c:	4561      	cmp	r1, ip
 800fd1e:	d30a      	bcc.n	800fd36 <__exponent+0x66>
 800fd20:	f10d 0209 	add.w	r2, sp, #9
 800fd24:	eba2 020e 	sub.w	r2, r2, lr
 800fd28:	4565      	cmp	r5, ip
 800fd2a:	bf88      	it	hi
 800fd2c:	2200      	movhi	r2, #0
 800fd2e:	4413      	add	r3, r2
 800fd30:	1a18      	subs	r0, r3, r0
 800fd32:	b003      	add	sp, #12
 800fd34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd36:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fd3a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800fd3e:	e7ed      	b.n	800fd1c <__exponent+0x4c>
 800fd40:	2330      	movs	r3, #48	; 0x30
 800fd42:	3130      	adds	r1, #48	; 0x30
 800fd44:	7083      	strb	r3, [r0, #2]
 800fd46:	70c1      	strb	r1, [r0, #3]
 800fd48:	1d03      	adds	r3, r0, #4
 800fd4a:	e7f1      	b.n	800fd30 <__exponent+0x60>

0800fd4c <_printf_float>:
 800fd4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd50:	ed2d 8b02 	vpush	{d8}
 800fd54:	b08d      	sub	sp, #52	; 0x34
 800fd56:	460c      	mov	r4, r1
 800fd58:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800fd5c:	4616      	mov	r6, r2
 800fd5e:	461f      	mov	r7, r3
 800fd60:	4605      	mov	r5, r0
 800fd62:	f001 fbf9 	bl	8011558 <_localeconv_r>
 800fd66:	f8d0 a000 	ldr.w	sl, [r0]
 800fd6a:	4650      	mov	r0, sl
 800fd6c:	f7f0 fa40 	bl	80001f0 <strlen>
 800fd70:	2300      	movs	r3, #0
 800fd72:	930a      	str	r3, [sp, #40]	; 0x28
 800fd74:	6823      	ldr	r3, [r4, #0]
 800fd76:	9305      	str	r3, [sp, #20]
 800fd78:	f8d8 3000 	ldr.w	r3, [r8]
 800fd7c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800fd80:	3307      	adds	r3, #7
 800fd82:	f023 0307 	bic.w	r3, r3, #7
 800fd86:	f103 0208 	add.w	r2, r3, #8
 800fd8a:	f8c8 2000 	str.w	r2, [r8]
 800fd8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd92:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800fd96:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800fd9a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800fd9e:	9307      	str	r3, [sp, #28]
 800fda0:	f8cd 8018 	str.w	r8, [sp, #24]
 800fda4:	ee08 0a10 	vmov	s16, r0
 800fda8:	4b9f      	ldr	r3, [pc, #636]	; (8010028 <_printf_float+0x2dc>)
 800fdaa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fdae:	f04f 32ff 	mov.w	r2, #4294967295
 800fdb2:	f7f0 fecb 	bl	8000b4c <__aeabi_dcmpun>
 800fdb6:	bb88      	cbnz	r0, 800fe1c <_printf_float+0xd0>
 800fdb8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fdbc:	4b9a      	ldr	r3, [pc, #616]	; (8010028 <_printf_float+0x2dc>)
 800fdbe:	f04f 32ff 	mov.w	r2, #4294967295
 800fdc2:	f7f0 fea5 	bl	8000b10 <__aeabi_dcmple>
 800fdc6:	bb48      	cbnz	r0, 800fe1c <_printf_float+0xd0>
 800fdc8:	2200      	movs	r2, #0
 800fdca:	2300      	movs	r3, #0
 800fdcc:	4640      	mov	r0, r8
 800fdce:	4649      	mov	r1, r9
 800fdd0:	f7f0 fe94 	bl	8000afc <__aeabi_dcmplt>
 800fdd4:	b110      	cbz	r0, 800fddc <_printf_float+0x90>
 800fdd6:	232d      	movs	r3, #45	; 0x2d
 800fdd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fddc:	4b93      	ldr	r3, [pc, #588]	; (801002c <_printf_float+0x2e0>)
 800fdde:	4894      	ldr	r0, [pc, #592]	; (8010030 <_printf_float+0x2e4>)
 800fde0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800fde4:	bf94      	ite	ls
 800fde6:	4698      	movls	r8, r3
 800fde8:	4680      	movhi	r8, r0
 800fdea:	2303      	movs	r3, #3
 800fdec:	6123      	str	r3, [r4, #16]
 800fdee:	9b05      	ldr	r3, [sp, #20]
 800fdf0:	f023 0204 	bic.w	r2, r3, #4
 800fdf4:	6022      	str	r2, [r4, #0]
 800fdf6:	f04f 0900 	mov.w	r9, #0
 800fdfa:	9700      	str	r7, [sp, #0]
 800fdfc:	4633      	mov	r3, r6
 800fdfe:	aa0b      	add	r2, sp, #44	; 0x2c
 800fe00:	4621      	mov	r1, r4
 800fe02:	4628      	mov	r0, r5
 800fe04:	f000 f9d8 	bl	80101b8 <_printf_common>
 800fe08:	3001      	adds	r0, #1
 800fe0a:	f040 8090 	bne.w	800ff2e <_printf_float+0x1e2>
 800fe0e:	f04f 30ff 	mov.w	r0, #4294967295
 800fe12:	b00d      	add	sp, #52	; 0x34
 800fe14:	ecbd 8b02 	vpop	{d8}
 800fe18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe1c:	4642      	mov	r2, r8
 800fe1e:	464b      	mov	r3, r9
 800fe20:	4640      	mov	r0, r8
 800fe22:	4649      	mov	r1, r9
 800fe24:	f7f0 fe92 	bl	8000b4c <__aeabi_dcmpun>
 800fe28:	b140      	cbz	r0, 800fe3c <_printf_float+0xf0>
 800fe2a:	464b      	mov	r3, r9
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	bfbc      	itt	lt
 800fe30:	232d      	movlt	r3, #45	; 0x2d
 800fe32:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800fe36:	487f      	ldr	r0, [pc, #508]	; (8010034 <_printf_float+0x2e8>)
 800fe38:	4b7f      	ldr	r3, [pc, #508]	; (8010038 <_printf_float+0x2ec>)
 800fe3a:	e7d1      	b.n	800fde0 <_printf_float+0x94>
 800fe3c:	6863      	ldr	r3, [r4, #4]
 800fe3e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800fe42:	9206      	str	r2, [sp, #24]
 800fe44:	1c5a      	adds	r2, r3, #1
 800fe46:	d13f      	bne.n	800fec8 <_printf_float+0x17c>
 800fe48:	2306      	movs	r3, #6
 800fe4a:	6063      	str	r3, [r4, #4]
 800fe4c:	9b05      	ldr	r3, [sp, #20]
 800fe4e:	6861      	ldr	r1, [r4, #4]
 800fe50:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800fe54:	2300      	movs	r3, #0
 800fe56:	9303      	str	r3, [sp, #12]
 800fe58:	ab0a      	add	r3, sp, #40	; 0x28
 800fe5a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800fe5e:	ab09      	add	r3, sp, #36	; 0x24
 800fe60:	ec49 8b10 	vmov	d0, r8, r9
 800fe64:	9300      	str	r3, [sp, #0]
 800fe66:	6022      	str	r2, [r4, #0]
 800fe68:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800fe6c:	4628      	mov	r0, r5
 800fe6e:	f7ff fecd 	bl	800fc0c <__cvt>
 800fe72:	9b06      	ldr	r3, [sp, #24]
 800fe74:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fe76:	2b47      	cmp	r3, #71	; 0x47
 800fe78:	4680      	mov	r8, r0
 800fe7a:	d108      	bne.n	800fe8e <_printf_float+0x142>
 800fe7c:	1cc8      	adds	r0, r1, #3
 800fe7e:	db02      	blt.n	800fe86 <_printf_float+0x13a>
 800fe80:	6863      	ldr	r3, [r4, #4]
 800fe82:	4299      	cmp	r1, r3
 800fe84:	dd41      	ble.n	800ff0a <_printf_float+0x1be>
 800fe86:	f1ab 0b02 	sub.w	fp, fp, #2
 800fe8a:	fa5f fb8b 	uxtb.w	fp, fp
 800fe8e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800fe92:	d820      	bhi.n	800fed6 <_printf_float+0x18a>
 800fe94:	3901      	subs	r1, #1
 800fe96:	465a      	mov	r2, fp
 800fe98:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800fe9c:	9109      	str	r1, [sp, #36]	; 0x24
 800fe9e:	f7ff ff17 	bl	800fcd0 <__exponent>
 800fea2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fea4:	1813      	adds	r3, r2, r0
 800fea6:	2a01      	cmp	r2, #1
 800fea8:	4681      	mov	r9, r0
 800feaa:	6123      	str	r3, [r4, #16]
 800feac:	dc02      	bgt.n	800feb4 <_printf_float+0x168>
 800feae:	6822      	ldr	r2, [r4, #0]
 800feb0:	07d2      	lsls	r2, r2, #31
 800feb2:	d501      	bpl.n	800feb8 <_printf_float+0x16c>
 800feb4:	3301      	adds	r3, #1
 800feb6:	6123      	str	r3, [r4, #16]
 800feb8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800febc:	2b00      	cmp	r3, #0
 800febe:	d09c      	beq.n	800fdfa <_printf_float+0xae>
 800fec0:	232d      	movs	r3, #45	; 0x2d
 800fec2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fec6:	e798      	b.n	800fdfa <_printf_float+0xae>
 800fec8:	9a06      	ldr	r2, [sp, #24]
 800feca:	2a47      	cmp	r2, #71	; 0x47
 800fecc:	d1be      	bne.n	800fe4c <_printf_float+0x100>
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d1bc      	bne.n	800fe4c <_printf_float+0x100>
 800fed2:	2301      	movs	r3, #1
 800fed4:	e7b9      	b.n	800fe4a <_printf_float+0xfe>
 800fed6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800feda:	d118      	bne.n	800ff0e <_printf_float+0x1c2>
 800fedc:	2900      	cmp	r1, #0
 800fede:	6863      	ldr	r3, [r4, #4]
 800fee0:	dd0b      	ble.n	800fefa <_printf_float+0x1ae>
 800fee2:	6121      	str	r1, [r4, #16]
 800fee4:	b913      	cbnz	r3, 800feec <_printf_float+0x1a0>
 800fee6:	6822      	ldr	r2, [r4, #0]
 800fee8:	07d0      	lsls	r0, r2, #31
 800feea:	d502      	bpl.n	800fef2 <_printf_float+0x1a6>
 800feec:	3301      	adds	r3, #1
 800feee:	440b      	add	r3, r1
 800fef0:	6123      	str	r3, [r4, #16]
 800fef2:	65a1      	str	r1, [r4, #88]	; 0x58
 800fef4:	f04f 0900 	mov.w	r9, #0
 800fef8:	e7de      	b.n	800feb8 <_printf_float+0x16c>
 800fefa:	b913      	cbnz	r3, 800ff02 <_printf_float+0x1b6>
 800fefc:	6822      	ldr	r2, [r4, #0]
 800fefe:	07d2      	lsls	r2, r2, #31
 800ff00:	d501      	bpl.n	800ff06 <_printf_float+0x1ba>
 800ff02:	3302      	adds	r3, #2
 800ff04:	e7f4      	b.n	800fef0 <_printf_float+0x1a4>
 800ff06:	2301      	movs	r3, #1
 800ff08:	e7f2      	b.n	800fef0 <_printf_float+0x1a4>
 800ff0a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ff0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff10:	4299      	cmp	r1, r3
 800ff12:	db05      	blt.n	800ff20 <_printf_float+0x1d4>
 800ff14:	6823      	ldr	r3, [r4, #0]
 800ff16:	6121      	str	r1, [r4, #16]
 800ff18:	07d8      	lsls	r0, r3, #31
 800ff1a:	d5ea      	bpl.n	800fef2 <_printf_float+0x1a6>
 800ff1c:	1c4b      	adds	r3, r1, #1
 800ff1e:	e7e7      	b.n	800fef0 <_printf_float+0x1a4>
 800ff20:	2900      	cmp	r1, #0
 800ff22:	bfd4      	ite	le
 800ff24:	f1c1 0202 	rsble	r2, r1, #2
 800ff28:	2201      	movgt	r2, #1
 800ff2a:	4413      	add	r3, r2
 800ff2c:	e7e0      	b.n	800fef0 <_printf_float+0x1a4>
 800ff2e:	6823      	ldr	r3, [r4, #0]
 800ff30:	055a      	lsls	r2, r3, #21
 800ff32:	d407      	bmi.n	800ff44 <_printf_float+0x1f8>
 800ff34:	6923      	ldr	r3, [r4, #16]
 800ff36:	4642      	mov	r2, r8
 800ff38:	4631      	mov	r1, r6
 800ff3a:	4628      	mov	r0, r5
 800ff3c:	47b8      	blx	r7
 800ff3e:	3001      	adds	r0, #1
 800ff40:	d12c      	bne.n	800ff9c <_printf_float+0x250>
 800ff42:	e764      	b.n	800fe0e <_printf_float+0xc2>
 800ff44:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ff48:	f240 80e0 	bls.w	801010c <_printf_float+0x3c0>
 800ff4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ff50:	2200      	movs	r2, #0
 800ff52:	2300      	movs	r3, #0
 800ff54:	f7f0 fdc8 	bl	8000ae8 <__aeabi_dcmpeq>
 800ff58:	2800      	cmp	r0, #0
 800ff5a:	d034      	beq.n	800ffc6 <_printf_float+0x27a>
 800ff5c:	4a37      	ldr	r2, [pc, #220]	; (801003c <_printf_float+0x2f0>)
 800ff5e:	2301      	movs	r3, #1
 800ff60:	4631      	mov	r1, r6
 800ff62:	4628      	mov	r0, r5
 800ff64:	47b8      	blx	r7
 800ff66:	3001      	adds	r0, #1
 800ff68:	f43f af51 	beq.w	800fe0e <_printf_float+0xc2>
 800ff6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ff70:	429a      	cmp	r2, r3
 800ff72:	db02      	blt.n	800ff7a <_printf_float+0x22e>
 800ff74:	6823      	ldr	r3, [r4, #0]
 800ff76:	07d8      	lsls	r0, r3, #31
 800ff78:	d510      	bpl.n	800ff9c <_printf_float+0x250>
 800ff7a:	ee18 3a10 	vmov	r3, s16
 800ff7e:	4652      	mov	r2, sl
 800ff80:	4631      	mov	r1, r6
 800ff82:	4628      	mov	r0, r5
 800ff84:	47b8      	blx	r7
 800ff86:	3001      	adds	r0, #1
 800ff88:	f43f af41 	beq.w	800fe0e <_printf_float+0xc2>
 800ff8c:	f04f 0800 	mov.w	r8, #0
 800ff90:	f104 091a 	add.w	r9, r4, #26
 800ff94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff96:	3b01      	subs	r3, #1
 800ff98:	4543      	cmp	r3, r8
 800ff9a:	dc09      	bgt.n	800ffb0 <_printf_float+0x264>
 800ff9c:	6823      	ldr	r3, [r4, #0]
 800ff9e:	079b      	lsls	r3, r3, #30
 800ffa0:	f100 8105 	bmi.w	80101ae <_printf_float+0x462>
 800ffa4:	68e0      	ldr	r0, [r4, #12]
 800ffa6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ffa8:	4298      	cmp	r0, r3
 800ffaa:	bfb8      	it	lt
 800ffac:	4618      	movlt	r0, r3
 800ffae:	e730      	b.n	800fe12 <_printf_float+0xc6>
 800ffb0:	2301      	movs	r3, #1
 800ffb2:	464a      	mov	r2, r9
 800ffb4:	4631      	mov	r1, r6
 800ffb6:	4628      	mov	r0, r5
 800ffb8:	47b8      	blx	r7
 800ffba:	3001      	adds	r0, #1
 800ffbc:	f43f af27 	beq.w	800fe0e <_printf_float+0xc2>
 800ffc0:	f108 0801 	add.w	r8, r8, #1
 800ffc4:	e7e6      	b.n	800ff94 <_printf_float+0x248>
 800ffc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	dc39      	bgt.n	8010040 <_printf_float+0x2f4>
 800ffcc:	4a1b      	ldr	r2, [pc, #108]	; (801003c <_printf_float+0x2f0>)
 800ffce:	2301      	movs	r3, #1
 800ffd0:	4631      	mov	r1, r6
 800ffd2:	4628      	mov	r0, r5
 800ffd4:	47b8      	blx	r7
 800ffd6:	3001      	adds	r0, #1
 800ffd8:	f43f af19 	beq.w	800fe0e <_printf_float+0xc2>
 800ffdc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ffe0:	4313      	orrs	r3, r2
 800ffe2:	d102      	bne.n	800ffea <_printf_float+0x29e>
 800ffe4:	6823      	ldr	r3, [r4, #0]
 800ffe6:	07d9      	lsls	r1, r3, #31
 800ffe8:	d5d8      	bpl.n	800ff9c <_printf_float+0x250>
 800ffea:	ee18 3a10 	vmov	r3, s16
 800ffee:	4652      	mov	r2, sl
 800fff0:	4631      	mov	r1, r6
 800fff2:	4628      	mov	r0, r5
 800fff4:	47b8      	blx	r7
 800fff6:	3001      	adds	r0, #1
 800fff8:	f43f af09 	beq.w	800fe0e <_printf_float+0xc2>
 800fffc:	f04f 0900 	mov.w	r9, #0
 8010000:	f104 0a1a 	add.w	sl, r4, #26
 8010004:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010006:	425b      	negs	r3, r3
 8010008:	454b      	cmp	r3, r9
 801000a:	dc01      	bgt.n	8010010 <_printf_float+0x2c4>
 801000c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801000e:	e792      	b.n	800ff36 <_printf_float+0x1ea>
 8010010:	2301      	movs	r3, #1
 8010012:	4652      	mov	r2, sl
 8010014:	4631      	mov	r1, r6
 8010016:	4628      	mov	r0, r5
 8010018:	47b8      	blx	r7
 801001a:	3001      	adds	r0, #1
 801001c:	f43f aef7 	beq.w	800fe0e <_printf_float+0xc2>
 8010020:	f109 0901 	add.w	r9, r9, #1
 8010024:	e7ee      	b.n	8010004 <_printf_float+0x2b8>
 8010026:	bf00      	nop
 8010028:	7fefffff 	.word	0x7fefffff
 801002c:	08014398 	.word	0x08014398
 8010030:	0801439c 	.word	0x0801439c
 8010034:	080143a4 	.word	0x080143a4
 8010038:	080143a0 	.word	0x080143a0
 801003c:	080143a8 	.word	0x080143a8
 8010040:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010042:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010044:	429a      	cmp	r2, r3
 8010046:	bfa8      	it	ge
 8010048:	461a      	movge	r2, r3
 801004a:	2a00      	cmp	r2, #0
 801004c:	4691      	mov	r9, r2
 801004e:	dc37      	bgt.n	80100c0 <_printf_float+0x374>
 8010050:	f04f 0b00 	mov.w	fp, #0
 8010054:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010058:	f104 021a 	add.w	r2, r4, #26
 801005c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801005e:	9305      	str	r3, [sp, #20]
 8010060:	eba3 0309 	sub.w	r3, r3, r9
 8010064:	455b      	cmp	r3, fp
 8010066:	dc33      	bgt.n	80100d0 <_printf_float+0x384>
 8010068:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801006c:	429a      	cmp	r2, r3
 801006e:	db3b      	blt.n	80100e8 <_printf_float+0x39c>
 8010070:	6823      	ldr	r3, [r4, #0]
 8010072:	07da      	lsls	r2, r3, #31
 8010074:	d438      	bmi.n	80100e8 <_printf_float+0x39c>
 8010076:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010078:	9a05      	ldr	r2, [sp, #20]
 801007a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801007c:	1a9a      	subs	r2, r3, r2
 801007e:	eba3 0901 	sub.w	r9, r3, r1
 8010082:	4591      	cmp	r9, r2
 8010084:	bfa8      	it	ge
 8010086:	4691      	movge	r9, r2
 8010088:	f1b9 0f00 	cmp.w	r9, #0
 801008c:	dc35      	bgt.n	80100fa <_printf_float+0x3ae>
 801008e:	f04f 0800 	mov.w	r8, #0
 8010092:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010096:	f104 0a1a 	add.w	sl, r4, #26
 801009a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801009e:	1a9b      	subs	r3, r3, r2
 80100a0:	eba3 0309 	sub.w	r3, r3, r9
 80100a4:	4543      	cmp	r3, r8
 80100a6:	f77f af79 	ble.w	800ff9c <_printf_float+0x250>
 80100aa:	2301      	movs	r3, #1
 80100ac:	4652      	mov	r2, sl
 80100ae:	4631      	mov	r1, r6
 80100b0:	4628      	mov	r0, r5
 80100b2:	47b8      	blx	r7
 80100b4:	3001      	adds	r0, #1
 80100b6:	f43f aeaa 	beq.w	800fe0e <_printf_float+0xc2>
 80100ba:	f108 0801 	add.w	r8, r8, #1
 80100be:	e7ec      	b.n	801009a <_printf_float+0x34e>
 80100c0:	4613      	mov	r3, r2
 80100c2:	4631      	mov	r1, r6
 80100c4:	4642      	mov	r2, r8
 80100c6:	4628      	mov	r0, r5
 80100c8:	47b8      	blx	r7
 80100ca:	3001      	adds	r0, #1
 80100cc:	d1c0      	bne.n	8010050 <_printf_float+0x304>
 80100ce:	e69e      	b.n	800fe0e <_printf_float+0xc2>
 80100d0:	2301      	movs	r3, #1
 80100d2:	4631      	mov	r1, r6
 80100d4:	4628      	mov	r0, r5
 80100d6:	9205      	str	r2, [sp, #20]
 80100d8:	47b8      	blx	r7
 80100da:	3001      	adds	r0, #1
 80100dc:	f43f ae97 	beq.w	800fe0e <_printf_float+0xc2>
 80100e0:	9a05      	ldr	r2, [sp, #20]
 80100e2:	f10b 0b01 	add.w	fp, fp, #1
 80100e6:	e7b9      	b.n	801005c <_printf_float+0x310>
 80100e8:	ee18 3a10 	vmov	r3, s16
 80100ec:	4652      	mov	r2, sl
 80100ee:	4631      	mov	r1, r6
 80100f0:	4628      	mov	r0, r5
 80100f2:	47b8      	blx	r7
 80100f4:	3001      	adds	r0, #1
 80100f6:	d1be      	bne.n	8010076 <_printf_float+0x32a>
 80100f8:	e689      	b.n	800fe0e <_printf_float+0xc2>
 80100fa:	9a05      	ldr	r2, [sp, #20]
 80100fc:	464b      	mov	r3, r9
 80100fe:	4442      	add	r2, r8
 8010100:	4631      	mov	r1, r6
 8010102:	4628      	mov	r0, r5
 8010104:	47b8      	blx	r7
 8010106:	3001      	adds	r0, #1
 8010108:	d1c1      	bne.n	801008e <_printf_float+0x342>
 801010a:	e680      	b.n	800fe0e <_printf_float+0xc2>
 801010c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801010e:	2a01      	cmp	r2, #1
 8010110:	dc01      	bgt.n	8010116 <_printf_float+0x3ca>
 8010112:	07db      	lsls	r3, r3, #31
 8010114:	d538      	bpl.n	8010188 <_printf_float+0x43c>
 8010116:	2301      	movs	r3, #1
 8010118:	4642      	mov	r2, r8
 801011a:	4631      	mov	r1, r6
 801011c:	4628      	mov	r0, r5
 801011e:	47b8      	blx	r7
 8010120:	3001      	adds	r0, #1
 8010122:	f43f ae74 	beq.w	800fe0e <_printf_float+0xc2>
 8010126:	ee18 3a10 	vmov	r3, s16
 801012a:	4652      	mov	r2, sl
 801012c:	4631      	mov	r1, r6
 801012e:	4628      	mov	r0, r5
 8010130:	47b8      	blx	r7
 8010132:	3001      	adds	r0, #1
 8010134:	f43f ae6b 	beq.w	800fe0e <_printf_float+0xc2>
 8010138:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801013c:	2200      	movs	r2, #0
 801013e:	2300      	movs	r3, #0
 8010140:	f7f0 fcd2 	bl	8000ae8 <__aeabi_dcmpeq>
 8010144:	b9d8      	cbnz	r0, 801017e <_printf_float+0x432>
 8010146:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010148:	f108 0201 	add.w	r2, r8, #1
 801014c:	3b01      	subs	r3, #1
 801014e:	4631      	mov	r1, r6
 8010150:	4628      	mov	r0, r5
 8010152:	47b8      	blx	r7
 8010154:	3001      	adds	r0, #1
 8010156:	d10e      	bne.n	8010176 <_printf_float+0x42a>
 8010158:	e659      	b.n	800fe0e <_printf_float+0xc2>
 801015a:	2301      	movs	r3, #1
 801015c:	4652      	mov	r2, sl
 801015e:	4631      	mov	r1, r6
 8010160:	4628      	mov	r0, r5
 8010162:	47b8      	blx	r7
 8010164:	3001      	adds	r0, #1
 8010166:	f43f ae52 	beq.w	800fe0e <_printf_float+0xc2>
 801016a:	f108 0801 	add.w	r8, r8, #1
 801016e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010170:	3b01      	subs	r3, #1
 8010172:	4543      	cmp	r3, r8
 8010174:	dcf1      	bgt.n	801015a <_printf_float+0x40e>
 8010176:	464b      	mov	r3, r9
 8010178:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801017c:	e6dc      	b.n	800ff38 <_printf_float+0x1ec>
 801017e:	f04f 0800 	mov.w	r8, #0
 8010182:	f104 0a1a 	add.w	sl, r4, #26
 8010186:	e7f2      	b.n	801016e <_printf_float+0x422>
 8010188:	2301      	movs	r3, #1
 801018a:	4642      	mov	r2, r8
 801018c:	e7df      	b.n	801014e <_printf_float+0x402>
 801018e:	2301      	movs	r3, #1
 8010190:	464a      	mov	r2, r9
 8010192:	4631      	mov	r1, r6
 8010194:	4628      	mov	r0, r5
 8010196:	47b8      	blx	r7
 8010198:	3001      	adds	r0, #1
 801019a:	f43f ae38 	beq.w	800fe0e <_printf_float+0xc2>
 801019e:	f108 0801 	add.w	r8, r8, #1
 80101a2:	68e3      	ldr	r3, [r4, #12]
 80101a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80101a6:	1a5b      	subs	r3, r3, r1
 80101a8:	4543      	cmp	r3, r8
 80101aa:	dcf0      	bgt.n	801018e <_printf_float+0x442>
 80101ac:	e6fa      	b.n	800ffa4 <_printf_float+0x258>
 80101ae:	f04f 0800 	mov.w	r8, #0
 80101b2:	f104 0919 	add.w	r9, r4, #25
 80101b6:	e7f4      	b.n	80101a2 <_printf_float+0x456>

080101b8 <_printf_common>:
 80101b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101bc:	4616      	mov	r6, r2
 80101be:	4699      	mov	r9, r3
 80101c0:	688a      	ldr	r2, [r1, #8]
 80101c2:	690b      	ldr	r3, [r1, #16]
 80101c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80101c8:	4293      	cmp	r3, r2
 80101ca:	bfb8      	it	lt
 80101cc:	4613      	movlt	r3, r2
 80101ce:	6033      	str	r3, [r6, #0]
 80101d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80101d4:	4607      	mov	r7, r0
 80101d6:	460c      	mov	r4, r1
 80101d8:	b10a      	cbz	r2, 80101de <_printf_common+0x26>
 80101da:	3301      	adds	r3, #1
 80101dc:	6033      	str	r3, [r6, #0]
 80101de:	6823      	ldr	r3, [r4, #0]
 80101e0:	0699      	lsls	r1, r3, #26
 80101e2:	bf42      	ittt	mi
 80101e4:	6833      	ldrmi	r3, [r6, #0]
 80101e6:	3302      	addmi	r3, #2
 80101e8:	6033      	strmi	r3, [r6, #0]
 80101ea:	6825      	ldr	r5, [r4, #0]
 80101ec:	f015 0506 	ands.w	r5, r5, #6
 80101f0:	d106      	bne.n	8010200 <_printf_common+0x48>
 80101f2:	f104 0a19 	add.w	sl, r4, #25
 80101f6:	68e3      	ldr	r3, [r4, #12]
 80101f8:	6832      	ldr	r2, [r6, #0]
 80101fa:	1a9b      	subs	r3, r3, r2
 80101fc:	42ab      	cmp	r3, r5
 80101fe:	dc26      	bgt.n	801024e <_printf_common+0x96>
 8010200:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010204:	1e13      	subs	r3, r2, #0
 8010206:	6822      	ldr	r2, [r4, #0]
 8010208:	bf18      	it	ne
 801020a:	2301      	movne	r3, #1
 801020c:	0692      	lsls	r2, r2, #26
 801020e:	d42b      	bmi.n	8010268 <_printf_common+0xb0>
 8010210:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010214:	4649      	mov	r1, r9
 8010216:	4638      	mov	r0, r7
 8010218:	47c0      	blx	r8
 801021a:	3001      	adds	r0, #1
 801021c:	d01e      	beq.n	801025c <_printf_common+0xa4>
 801021e:	6823      	ldr	r3, [r4, #0]
 8010220:	68e5      	ldr	r5, [r4, #12]
 8010222:	6832      	ldr	r2, [r6, #0]
 8010224:	f003 0306 	and.w	r3, r3, #6
 8010228:	2b04      	cmp	r3, #4
 801022a:	bf08      	it	eq
 801022c:	1aad      	subeq	r5, r5, r2
 801022e:	68a3      	ldr	r3, [r4, #8]
 8010230:	6922      	ldr	r2, [r4, #16]
 8010232:	bf0c      	ite	eq
 8010234:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010238:	2500      	movne	r5, #0
 801023a:	4293      	cmp	r3, r2
 801023c:	bfc4      	itt	gt
 801023e:	1a9b      	subgt	r3, r3, r2
 8010240:	18ed      	addgt	r5, r5, r3
 8010242:	2600      	movs	r6, #0
 8010244:	341a      	adds	r4, #26
 8010246:	42b5      	cmp	r5, r6
 8010248:	d11a      	bne.n	8010280 <_printf_common+0xc8>
 801024a:	2000      	movs	r0, #0
 801024c:	e008      	b.n	8010260 <_printf_common+0xa8>
 801024e:	2301      	movs	r3, #1
 8010250:	4652      	mov	r2, sl
 8010252:	4649      	mov	r1, r9
 8010254:	4638      	mov	r0, r7
 8010256:	47c0      	blx	r8
 8010258:	3001      	adds	r0, #1
 801025a:	d103      	bne.n	8010264 <_printf_common+0xac>
 801025c:	f04f 30ff 	mov.w	r0, #4294967295
 8010260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010264:	3501      	adds	r5, #1
 8010266:	e7c6      	b.n	80101f6 <_printf_common+0x3e>
 8010268:	18e1      	adds	r1, r4, r3
 801026a:	1c5a      	adds	r2, r3, #1
 801026c:	2030      	movs	r0, #48	; 0x30
 801026e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010272:	4422      	add	r2, r4
 8010274:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010278:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801027c:	3302      	adds	r3, #2
 801027e:	e7c7      	b.n	8010210 <_printf_common+0x58>
 8010280:	2301      	movs	r3, #1
 8010282:	4622      	mov	r2, r4
 8010284:	4649      	mov	r1, r9
 8010286:	4638      	mov	r0, r7
 8010288:	47c0      	blx	r8
 801028a:	3001      	adds	r0, #1
 801028c:	d0e6      	beq.n	801025c <_printf_common+0xa4>
 801028e:	3601      	adds	r6, #1
 8010290:	e7d9      	b.n	8010246 <_printf_common+0x8e>
	...

08010294 <_printf_i>:
 8010294:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010298:	7e0f      	ldrb	r7, [r1, #24]
 801029a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801029c:	2f78      	cmp	r7, #120	; 0x78
 801029e:	4691      	mov	r9, r2
 80102a0:	4680      	mov	r8, r0
 80102a2:	460c      	mov	r4, r1
 80102a4:	469a      	mov	sl, r3
 80102a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80102aa:	d807      	bhi.n	80102bc <_printf_i+0x28>
 80102ac:	2f62      	cmp	r7, #98	; 0x62
 80102ae:	d80a      	bhi.n	80102c6 <_printf_i+0x32>
 80102b0:	2f00      	cmp	r7, #0
 80102b2:	f000 80d8 	beq.w	8010466 <_printf_i+0x1d2>
 80102b6:	2f58      	cmp	r7, #88	; 0x58
 80102b8:	f000 80a3 	beq.w	8010402 <_printf_i+0x16e>
 80102bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80102c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80102c4:	e03a      	b.n	801033c <_printf_i+0xa8>
 80102c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80102ca:	2b15      	cmp	r3, #21
 80102cc:	d8f6      	bhi.n	80102bc <_printf_i+0x28>
 80102ce:	a101      	add	r1, pc, #4	; (adr r1, 80102d4 <_printf_i+0x40>)
 80102d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80102d4:	0801032d 	.word	0x0801032d
 80102d8:	08010341 	.word	0x08010341
 80102dc:	080102bd 	.word	0x080102bd
 80102e0:	080102bd 	.word	0x080102bd
 80102e4:	080102bd 	.word	0x080102bd
 80102e8:	080102bd 	.word	0x080102bd
 80102ec:	08010341 	.word	0x08010341
 80102f0:	080102bd 	.word	0x080102bd
 80102f4:	080102bd 	.word	0x080102bd
 80102f8:	080102bd 	.word	0x080102bd
 80102fc:	080102bd 	.word	0x080102bd
 8010300:	0801044d 	.word	0x0801044d
 8010304:	08010371 	.word	0x08010371
 8010308:	0801042f 	.word	0x0801042f
 801030c:	080102bd 	.word	0x080102bd
 8010310:	080102bd 	.word	0x080102bd
 8010314:	0801046f 	.word	0x0801046f
 8010318:	080102bd 	.word	0x080102bd
 801031c:	08010371 	.word	0x08010371
 8010320:	080102bd 	.word	0x080102bd
 8010324:	080102bd 	.word	0x080102bd
 8010328:	08010437 	.word	0x08010437
 801032c:	682b      	ldr	r3, [r5, #0]
 801032e:	1d1a      	adds	r2, r3, #4
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	602a      	str	r2, [r5, #0]
 8010334:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010338:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801033c:	2301      	movs	r3, #1
 801033e:	e0a3      	b.n	8010488 <_printf_i+0x1f4>
 8010340:	6820      	ldr	r0, [r4, #0]
 8010342:	6829      	ldr	r1, [r5, #0]
 8010344:	0606      	lsls	r6, r0, #24
 8010346:	f101 0304 	add.w	r3, r1, #4
 801034a:	d50a      	bpl.n	8010362 <_printf_i+0xce>
 801034c:	680e      	ldr	r6, [r1, #0]
 801034e:	602b      	str	r3, [r5, #0]
 8010350:	2e00      	cmp	r6, #0
 8010352:	da03      	bge.n	801035c <_printf_i+0xc8>
 8010354:	232d      	movs	r3, #45	; 0x2d
 8010356:	4276      	negs	r6, r6
 8010358:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801035c:	485e      	ldr	r0, [pc, #376]	; (80104d8 <_printf_i+0x244>)
 801035e:	230a      	movs	r3, #10
 8010360:	e019      	b.n	8010396 <_printf_i+0x102>
 8010362:	680e      	ldr	r6, [r1, #0]
 8010364:	602b      	str	r3, [r5, #0]
 8010366:	f010 0f40 	tst.w	r0, #64	; 0x40
 801036a:	bf18      	it	ne
 801036c:	b236      	sxthne	r6, r6
 801036e:	e7ef      	b.n	8010350 <_printf_i+0xbc>
 8010370:	682b      	ldr	r3, [r5, #0]
 8010372:	6820      	ldr	r0, [r4, #0]
 8010374:	1d19      	adds	r1, r3, #4
 8010376:	6029      	str	r1, [r5, #0]
 8010378:	0601      	lsls	r1, r0, #24
 801037a:	d501      	bpl.n	8010380 <_printf_i+0xec>
 801037c:	681e      	ldr	r6, [r3, #0]
 801037e:	e002      	b.n	8010386 <_printf_i+0xf2>
 8010380:	0646      	lsls	r6, r0, #25
 8010382:	d5fb      	bpl.n	801037c <_printf_i+0xe8>
 8010384:	881e      	ldrh	r6, [r3, #0]
 8010386:	4854      	ldr	r0, [pc, #336]	; (80104d8 <_printf_i+0x244>)
 8010388:	2f6f      	cmp	r7, #111	; 0x6f
 801038a:	bf0c      	ite	eq
 801038c:	2308      	moveq	r3, #8
 801038e:	230a      	movne	r3, #10
 8010390:	2100      	movs	r1, #0
 8010392:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010396:	6865      	ldr	r5, [r4, #4]
 8010398:	60a5      	str	r5, [r4, #8]
 801039a:	2d00      	cmp	r5, #0
 801039c:	bfa2      	ittt	ge
 801039e:	6821      	ldrge	r1, [r4, #0]
 80103a0:	f021 0104 	bicge.w	r1, r1, #4
 80103a4:	6021      	strge	r1, [r4, #0]
 80103a6:	b90e      	cbnz	r6, 80103ac <_printf_i+0x118>
 80103a8:	2d00      	cmp	r5, #0
 80103aa:	d04d      	beq.n	8010448 <_printf_i+0x1b4>
 80103ac:	4615      	mov	r5, r2
 80103ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80103b2:	fb03 6711 	mls	r7, r3, r1, r6
 80103b6:	5dc7      	ldrb	r7, [r0, r7]
 80103b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80103bc:	4637      	mov	r7, r6
 80103be:	42bb      	cmp	r3, r7
 80103c0:	460e      	mov	r6, r1
 80103c2:	d9f4      	bls.n	80103ae <_printf_i+0x11a>
 80103c4:	2b08      	cmp	r3, #8
 80103c6:	d10b      	bne.n	80103e0 <_printf_i+0x14c>
 80103c8:	6823      	ldr	r3, [r4, #0]
 80103ca:	07de      	lsls	r6, r3, #31
 80103cc:	d508      	bpl.n	80103e0 <_printf_i+0x14c>
 80103ce:	6923      	ldr	r3, [r4, #16]
 80103d0:	6861      	ldr	r1, [r4, #4]
 80103d2:	4299      	cmp	r1, r3
 80103d4:	bfde      	ittt	le
 80103d6:	2330      	movle	r3, #48	; 0x30
 80103d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80103dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80103e0:	1b52      	subs	r2, r2, r5
 80103e2:	6122      	str	r2, [r4, #16]
 80103e4:	f8cd a000 	str.w	sl, [sp]
 80103e8:	464b      	mov	r3, r9
 80103ea:	aa03      	add	r2, sp, #12
 80103ec:	4621      	mov	r1, r4
 80103ee:	4640      	mov	r0, r8
 80103f0:	f7ff fee2 	bl	80101b8 <_printf_common>
 80103f4:	3001      	adds	r0, #1
 80103f6:	d14c      	bne.n	8010492 <_printf_i+0x1fe>
 80103f8:	f04f 30ff 	mov.w	r0, #4294967295
 80103fc:	b004      	add	sp, #16
 80103fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010402:	4835      	ldr	r0, [pc, #212]	; (80104d8 <_printf_i+0x244>)
 8010404:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010408:	6829      	ldr	r1, [r5, #0]
 801040a:	6823      	ldr	r3, [r4, #0]
 801040c:	f851 6b04 	ldr.w	r6, [r1], #4
 8010410:	6029      	str	r1, [r5, #0]
 8010412:	061d      	lsls	r5, r3, #24
 8010414:	d514      	bpl.n	8010440 <_printf_i+0x1ac>
 8010416:	07df      	lsls	r7, r3, #31
 8010418:	bf44      	itt	mi
 801041a:	f043 0320 	orrmi.w	r3, r3, #32
 801041e:	6023      	strmi	r3, [r4, #0]
 8010420:	b91e      	cbnz	r6, 801042a <_printf_i+0x196>
 8010422:	6823      	ldr	r3, [r4, #0]
 8010424:	f023 0320 	bic.w	r3, r3, #32
 8010428:	6023      	str	r3, [r4, #0]
 801042a:	2310      	movs	r3, #16
 801042c:	e7b0      	b.n	8010390 <_printf_i+0xfc>
 801042e:	6823      	ldr	r3, [r4, #0]
 8010430:	f043 0320 	orr.w	r3, r3, #32
 8010434:	6023      	str	r3, [r4, #0]
 8010436:	2378      	movs	r3, #120	; 0x78
 8010438:	4828      	ldr	r0, [pc, #160]	; (80104dc <_printf_i+0x248>)
 801043a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801043e:	e7e3      	b.n	8010408 <_printf_i+0x174>
 8010440:	0659      	lsls	r1, r3, #25
 8010442:	bf48      	it	mi
 8010444:	b2b6      	uxthmi	r6, r6
 8010446:	e7e6      	b.n	8010416 <_printf_i+0x182>
 8010448:	4615      	mov	r5, r2
 801044a:	e7bb      	b.n	80103c4 <_printf_i+0x130>
 801044c:	682b      	ldr	r3, [r5, #0]
 801044e:	6826      	ldr	r6, [r4, #0]
 8010450:	6961      	ldr	r1, [r4, #20]
 8010452:	1d18      	adds	r0, r3, #4
 8010454:	6028      	str	r0, [r5, #0]
 8010456:	0635      	lsls	r5, r6, #24
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	d501      	bpl.n	8010460 <_printf_i+0x1cc>
 801045c:	6019      	str	r1, [r3, #0]
 801045e:	e002      	b.n	8010466 <_printf_i+0x1d2>
 8010460:	0670      	lsls	r0, r6, #25
 8010462:	d5fb      	bpl.n	801045c <_printf_i+0x1c8>
 8010464:	8019      	strh	r1, [r3, #0]
 8010466:	2300      	movs	r3, #0
 8010468:	6123      	str	r3, [r4, #16]
 801046a:	4615      	mov	r5, r2
 801046c:	e7ba      	b.n	80103e4 <_printf_i+0x150>
 801046e:	682b      	ldr	r3, [r5, #0]
 8010470:	1d1a      	adds	r2, r3, #4
 8010472:	602a      	str	r2, [r5, #0]
 8010474:	681d      	ldr	r5, [r3, #0]
 8010476:	6862      	ldr	r2, [r4, #4]
 8010478:	2100      	movs	r1, #0
 801047a:	4628      	mov	r0, r5
 801047c:	f7ef fec0 	bl	8000200 <memchr>
 8010480:	b108      	cbz	r0, 8010486 <_printf_i+0x1f2>
 8010482:	1b40      	subs	r0, r0, r5
 8010484:	6060      	str	r0, [r4, #4]
 8010486:	6863      	ldr	r3, [r4, #4]
 8010488:	6123      	str	r3, [r4, #16]
 801048a:	2300      	movs	r3, #0
 801048c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010490:	e7a8      	b.n	80103e4 <_printf_i+0x150>
 8010492:	6923      	ldr	r3, [r4, #16]
 8010494:	462a      	mov	r2, r5
 8010496:	4649      	mov	r1, r9
 8010498:	4640      	mov	r0, r8
 801049a:	47d0      	blx	sl
 801049c:	3001      	adds	r0, #1
 801049e:	d0ab      	beq.n	80103f8 <_printf_i+0x164>
 80104a0:	6823      	ldr	r3, [r4, #0]
 80104a2:	079b      	lsls	r3, r3, #30
 80104a4:	d413      	bmi.n	80104ce <_printf_i+0x23a>
 80104a6:	68e0      	ldr	r0, [r4, #12]
 80104a8:	9b03      	ldr	r3, [sp, #12]
 80104aa:	4298      	cmp	r0, r3
 80104ac:	bfb8      	it	lt
 80104ae:	4618      	movlt	r0, r3
 80104b0:	e7a4      	b.n	80103fc <_printf_i+0x168>
 80104b2:	2301      	movs	r3, #1
 80104b4:	4632      	mov	r2, r6
 80104b6:	4649      	mov	r1, r9
 80104b8:	4640      	mov	r0, r8
 80104ba:	47d0      	blx	sl
 80104bc:	3001      	adds	r0, #1
 80104be:	d09b      	beq.n	80103f8 <_printf_i+0x164>
 80104c0:	3501      	adds	r5, #1
 80104c2:	68e3      	ldr	r3, [r4, #12]
 80104c4:	9903      	ldr	r1, [sp, #12]
 80104c6:	1a5b      	subs	r3, r3, r1
 80104c8:	42ab      	cmp	r3, r5
 80104ca:	dcf2      	bgt.n	80104b2 <_printf_i+0x21e>
 80104cc:	e7eb      	b.n	80104a6 <_printf_i+0x212>
 80104ce:	2500      	movs	r5, #0
 80104d0:	f104 0619 	add.w	r6, r4, #25
 80104d4:	e7f5      	b.n	80104c2 <_printf_i+0x22e>
 80104d6:	bf00      	nop
 80104d8:	080143aa 	.word	0x080143aa
 80104dc:	080143bb 	.word	0x080143bb

080104e0 <cleanup_glue>:
 80104e0:	b538      	push	{r3, r4, r5, lr}
 80104e2:	460c      	mov	r4, r1
 80104e4:	6809      	ldr	r1, [r1, #0]
 80104e6:	4605      	mov	r5, r0
 80104e8:	b109      	cbz	r1, 80104ee <cleanup_glue+0xe>
 80104ea:	f7ff fff9 	bl	80104e0 <cleanup_glue>
 80104ee:	4621      	mov	r1, r4
 80104f0:	4628      	mov	r0, r5
 80104f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80104f6:	f001 bbf3 	b.w	8011ce0 <_free_r>
	...

080104fc <_reclaim_reent>:
 80104fc:	4b2c      	ldr	r3, [pc, #176]	; (80105b0 <_reclaim_reent+0xb4>)
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	4283      	cmp	r3, r0
 8010502:	b570      	push	{r4, r5, r6, lr}
 8010504:	4604      	mov	r4, r0
 8010506:	d051      	beq.n	80105ac <_reclaim_reent+0xb0>
 8010508:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801050a:	b143      	cbz	r3, 801051e <_reclaim_reent+0x22>
 801050c:	68db      	ldr	r3, [r3, #12]
 801050e:	2b00      	cmp	r3, #0
 8010510:	d14a      	bne.n	80105a8 <_reclaim_reent+0xac>
 8010512:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010514:	6819      	ldr	r1, [r3, #0]
 8010516:	b111      	cbz	r1, 801051e <_reclaim_reent+0x22>
 8010518:	4620      	mov	r0, r4
 801051a:	f001 fbe1 	bl	8011ce0 <_free_r>
 801051e:	6961      	ldr	r1, [r4, #20]
 8010520:	b111      	cbz	r1, 8010528 <_reclaim_reent+0x2c>
 8010522:	4620      	mov	r0, r4
 8010524:	f001 fbdc 	bl	8011ce0 <_free_r>
 8010528:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801052a:	b111      	cbz	r1, 8010532 <_reclaim_reent+0x36>
 801052c:	4620      	mov	r0, r4
 801052e:	f001 fbd7 	bl	8011ce0 <_free_r>
 8010532:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010534:	b111      	cbz	r1, 801053c <_reclaim_reent+0x40>
 8010536:	4620      	mov	r0, r4
 8010538:	f001 fbd2 	bl	8011ce0 <_free_r>
 801053c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801053e:	b111      	cbz	r1, 8010546 <_reclaim_reent+0x4a>
 8010540:	4620      	mov	r0, r4
 8010542:	f001 fbcd 	bl	8011ce0 <_free_r>
 8010546:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8010548:	b111      	cbz	r1, 8010550 <_reclaim_reent+0x54>
 801054a:	4620      	mov	r0, r4
 801054c:	f001 fbc8 	bl	8011ce0 <_free_r>
 8010550:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8010552:	b111      	cbz	r1, 801055a <_reclaim_reent+0x5e>
 8010554:	4620      	mov	r0, r4
 8010556:	f001 fbc3 	bl	8011ce0 <_free_r>
 801055a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801055c:	b111      	cbz	r1, 8010564 <_reclaim_reent+0x68>
 801055e:	4620      	mov	r0, r4
 8010560:	f001 fbbe 	bl	8011ce0 <_free_r>
 8010564:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010566:	b111      	cbz	r1, 801056e <_reclaim_reent+0x72>
 8010568:	4620      	mov	r0, r4
 801056a:	f001 fbb9 	bl	8011ce0 <_free_r>
 801056e:	69a3      	ldr	r3, [r4, #24]
 8010570:	b1e3      	cbz	r3, 80105ac <_reclaim_reent+0xb0>
 8010572:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010574:	4620      	mov	r0, r4
 8010576:	4798      	blx	r3
 8010578:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801057a:	b1b9      	cbz	r1, 80105ac <_reclaim_reent+0xb0>
 801057c:	4620      	mov	r0, r4
 801057e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010582:	f7ff bfad 	b.w	80104e0 <cleanup_glue>
 8010586:	5949      	ldr	r1, [r1, r5]
 8010588:	b941      	cbnz	r1, 801059c <_reclaim_reent+0xa0>
 801058a:	3504      	adds	r5, #4
 801058c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801058e:	2d80      	cmp	r5, #128	; 0x80
 8010590:	68d9      	ldr	r1, [r3, #12]
 8010592:	d1f8      	bne.n	8010586 <_reclaim_reent+0x8a>
 8010594:	4620      	mov	r0, r4
 8010596:	f001 fba3 	bl	8011ce0 <_free_r>
 801059a:	e7ba      	b.n	8010512 <_reclaim_reent+0x16>
 801059c:	680e      	ldr	r6, [r1, #0]
 801059e:	4620      	mov	r0, r4
 80105a0:	f001 fb9e 	bl	8011ce0 <_free_r>
 80105a4:	4631      	mov	r1, r6
 80105a6:	e7ef      	b.n	8010588 <_reclaim_reent+0x8c>
 80105a8:	2500      	movs	r5, #0
 80105aa:	e7ef      	b.n	801058c <_reclaim_reent+0x90>
 80105ac:	bd70      	pop	{r4, r5, r6, pc}
 80105ae:	bf00      	nop
 80105b0:	2000017c 	.word	0x2000017c

080105b4 <_sbrk_r>:
 80105b4:	b538      	push	{r3, r4, r5, lr}
 80105b6:	4d06      	ldr	r5, [pc, #24]	; (80105d0 <_sbrk_r+0x1c>)
 80105b8:	2300      	movs	r3, #0
 80105ba:	4604      	mov	r4, r0
 80105bc:	4608      	mov	r0, r1
 80105be:	602b      	str	r3, [r5, #0]
 80105c0:	f7f1 fc8c 	bl	8001edc <_sbrk>
 80105c4:	1c43      	adds	r3, r0, #1
 80105c6:	d102      	bne.n	80105ce <_sbrk_r+0x1a>
 80105c8:	682b      	ldr	r3, [r5, #0]
 80105ca:	b103      	cbz	r3, 80105ce <_sbrk_r+0x1a>
 80105cc:	6023      	str	r3, [r4, #0]
 80105ce:	bd38      	pop	{r3, r4, r5, pc}
 80105d0:	20006294 	.word	0x20006294

080105d4 <siprintf>:
 80105d4:	b40e      	push	{r1, r2, r3}
 80105d6:	b500      	push	{lr}
 80105d8:	b09c      	sub	sp, #112	; 0x70
 80105da:	ab1d      	add	r3, sp, #116	; 0x74
 80105dc:	9002      	str	r0, [sp, #8]
 80105de:	9006      	str	r0, [sp, #24]
 80105e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80105e4:	4809      	ldr	r0, [pc, #36]	; (801060c <siprintf+0x38>)
 80105e6:	9107      	str	r1, [sp, #28]
 80105e8:	9104      	str	r1, [sp, #16]
 80105ea:	4909      	ldr	r1, [pc, #36]	; (8010610 <siprintf+0x3c>)
 80105ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80105f0:	9105      	str	r1, [sp, #20]
 80105f2:	6800      	ldr	r0, [r0, #0]
 80105f4:	9301      	str	r3, [sp, #4]
 80105f6:	a902      	add	r1, sp, #8
 80105f8:	f001 fc1a 	bl	8011e30 <_svfiprintf_r>
 80105fc:	9b02      	ldr	r3, [sp, #8]
 80105fe:	2200      	movs	r2, #0
 8010600:	701a      	strb	r2, [r3, #0]
 8010602:	b01c      	add	sp, #112	; 0x70
 8010604:	f85d eb04 	ldr.w	lr, [sp], #4
 8010608:	b003      	add	sp, #12
 801060a:	4770      	bx	lr
 801060c:	2000017c 	.word	0x2000017c
 8010610:	ffff0208 	.word	0xffff0208

08010614 <__sread>:
 8010614:	b510      	push	{r4, lr}
 8010616:	460c      	mov	r4, r1
 8010618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801061c:	f001 fd08 	bl	8012030 <_read_r>
 8010620:	2800      	cmp	r0, #0
 8010622:	bfab      	itete	ge
 8010624:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010626:	89a3      	ldrhlt	r3, [r4, #12]
 8010628:	181b      	addge	r3, r3, r0
 801062a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801062e:	bfac      	ite	ge
 8010630:	6563      	strge	r3, [r4, #84]	; 0x54
 8010632:	81a3      	strhlt	r3, [r4, #12]
 8010634:	bd10      	pop	{r4, pc}

08010636 <__swrite>:
 8010636:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801063a:	461f      	mov	r7, r3
 801063c:	898b      	ldrh	r3, [r1, #12]
 801063e:	05db      	lsls	r3, r3, #23
 8010640:	4605      	mov	r5, r0
 8010642:	460c      	mov	r4, r1
 8010644:	4616      	mov	r6, r2
 8010646:	d505      	bpl.n	8010654 <__swrite+0x1e>
 8010648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801064c:	2302      	movs	r3, #2
 801064e:	2200      	movs	r2, #0
 8010650:	f000 ff86 	bl	8011560 <_lseek_r>
 8010654:	89a3      	ldrh	r3, [r4, #12]
 8010656:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801065a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801065e:	81a3      	strh	r3, [r4, #12]
 8010660:	4632      	mov	r2, r6
 8010662:	463b      	mov	r3, r7
 8010664:	4628      	mov	r0, r5
 8010666:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801066a:	f000 b817 	b.w	801069c <_write_r>

0801066e <__sseek>:
 801066e:	b510      	push	{r4, lr}
 8010670:	460c      	mov	r4, r1
 8010672:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010676:	f000 ff73 	bl	8011560 <_lseek_r>
 801067a:	1c43      	adds	r3, r0, #1
 801067c:	89a3      	ldrh	r3, [r4, #12]
 801067e:	bf15      	itete	ne
 8010680:	6560      	strne	r0, [r4, #84]	; 0x54
 8010682:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010686:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801068a:	81a3      	strheq	r3, [r4, #12]
 801068c:	bf18      	it	ne
 801068e:	81a3      	strhne	r3, [r4, #12]
 8010690:	bd10      	pop	{r4, pc}

08010692 <__sclose>:
 8010692:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010696:	f000 b813 	b.w	80106c0 <_close_r>
	...

0801069c <_write_r>:
 801069c:	b538      	push	{r3, r4, r5, lr}
 801069e:	4d07      	ldr	r5, [pc, #28]	; (80106bc <_write_r+0x20>)
 80106a0:	4604      	mov	r4, r0
 80106a2:	4608      	mov	r0, r1
 80106a4:	4611      	mov	r1, r2
 80106a6:	2200      	movs	r2, #0
 80106a8:	602a      	str	r2, [r5, #0]
 80106aa:	461a      	mov	r2, r3
 80106ac:	f7f1 fbc5 	bl	8001e3a <_write>
 80106b0:	1c43      	adds	r3, r0, #1
 80106b2:	d102      	bne.n	80106ba <_write_r+0x1e>
 80106b4:	682b      	ldr	r3, [r5, #0]
 80106b6:	b103      	cbz	r3, 80106ba <_write_r+0x1e>
 80106b8:	6023      	str	r3, [r4, #0]
 80106ba:	bd38      	pop	{r3, r4, r5, pc}
 80106bc:	20006294 	.word	0x20006294

080106c0 <_close_r>:
 80106c0:	b538      	push	{r3, r4, r5, lr}
 80106c2:	4d06      	ldr	r5, [pc, #24]	; (80106dc <_close_r+0x1c>)
 80106c4:	2300      	movs	r3, #0
 80106c6:	4604      	mov	r4, r0
 80106c8:	4608      	mov	r0, r1
 80106ca:	602b      	str	r3, [r5, #0]
 80106cc:	f7f1 fbd1 	bl	8001e72 <_close>
 80106d0:	1c43      	adds	r3, r0, #1
 80106d2:	d102      	bne.n	80106da <_close_r+0x1a>
 80106d4:	682b      	ldr	r3, [r5, #0]
 80106d6:	b103      	cbz	r3, 80106da <_close_r+0x1a>
 80106d8:	6023      	str	r3, [r4, #0]
 80106da:	bd38      	pop	{r3, r4, r5, pc}
 80106dc:	20006294 	.word	0x20006294

080106e0 <quorem>:
 80106e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106e4:	6903      	ldr	r3, [r0, #16]
 80106e6:	690c      	ldr	r4, [r1, #16]
 80106e8:	42a3      	cmp	r3, r4
 80106ea:	4607      	mov	r7, r0
 80106ec:	f2c0 8081 	blt.w	80107f2 <quorem+0x112>
 80106f0:	3c01      	subs	r4, #1
 80106f2:	f101 0814 	add.w	r8, r1, #20
 80106f6:	f100 0514 	add.w	r5, r0, #20
 80106fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80106fe:	9301      	str	r3, [sp, #4]
 8010700:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010704:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010708:	3301      	adds	r3, #1
 801070a:	429a      	cmp	r2, r3
 801070c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010710:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010714:	fbb2 f6f3 	udiv	r6, r2, r3
 8010718:	d331      	bcc.n	801077e <quorem+0x9e>
 801071a:	f04f 0e00 	mov.w	lr, #0
 801071e:	4640      	mov	r0, r8
 8010720:	46ac      	mov	ip, r5
 8010722:	46f2      	mov	sl, lr
 8010724:	f850 2b04 	ldr.w	r2, [r0], #4
 8010728:	b293      	uxth	r3, r2
 801072a:	fb06 e303 	mla	r3, r6, r3, lr
 801072e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010732:	b29b      	uxth	r3, r3
 8010734:	ebaa 0303 	sub.w	r3, sl, r3
 8010738:	f8dc a000 	ldr.w	sl, [ip]
 801073c:	0c12      	lsrs	r2, r2, #16
 801073e:	fa13 f38a 	uxtah	r3, r3, sl
 8010742:	fb06 e202 	mla	r2, r6, r2, lr
 8010746:	9300      	str	r3, [sp, #0]
 8010748:	9b00      	ldr	r3, [sp, #0]
 801074a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801074e:	b292      	uxth	r2, r2
 8010750:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010754:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010758:	f8bd 3000 	ldrh.w	r3, [sp]
 801075c:	4581      	cmp	r9, r0
 801075e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010762:	f84c 3b04 	str.w	r3, [ip], #4
 8010766:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801076a:	d2db      	bcs.n	8010724 <quorem+0x44>
 801076c:	f855 300b 	ldr.w	r3, [r5, fp]
 8010770:	b92b      	cbnz	r3, 801077e <quorem+0x9e>
 8010772:	9b01      	ldr	r3, [sp, #4]
 8010774:	3b04      	subs	r3, #4
 8010776:	429d      	cmp	r5, r3
 8010778:	461a      	mov	r2, r3
 801077a:	d32e      	bcc.n	80107da <quorem+0xfa>
 801077c:	613c      	str	r4, [r7, #16]
 801077e:	4638      	mov	r0, r7
 8010780:	f001 f996 	bl	8011ab0 <__mcmp>
 8010784:	2800      	cmp	r0, #0
 8010786:	db24      	blt.n	80107d2 <quorem+0xf2>
 8010788:	3601      	adds	r6, #1
 801078a:	4628      	mov	r0, r5
 801078c:	f04f 0c00 	mov.w	ip, #0
 8010790:	f858 2b04 	ldr.w	r2, [r8], #4
 8010794:	f8d0 e000 	ldr.w	lr, [r0]
 8010798:	b293      	uxth	r3, r2
 801079a:	ebac 0303 	sub.w	r3, ip, r3
 801079e:	0c12      	lsrs	r2, r2, #16
 80107a0:	fa13 f38e 	uxtah	r3, r3, lr
 80107a4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80107a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80107ac:	b29b      	uxth	r3, r3
 80107ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80107b2:	45c1      	cmp	r9, r8
 80107b4:	f840 3b04 	str.w	r3, [r0], #4
 80107b8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80107bc:	d2e8      	bcs.n	8010790 <quorem+0xb0>
 80107be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80107c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80107c6:	b922      	cbnz	r2, 80107d2 <quorem+0xf2>
 80107c8:	3b04      	subs	r3, #4
 80107ca:	429d      	cmp	r5, r3
 80107cc:	461a      	mov	r2, r3
 80107ce:	d30a      	bcc.n	80107e6 <quorem+0x106>
 80107d0:	613c      	str	r4, [r7, #16]
 80107d2:	4630      	mov	r0, r6
 80107d4:	b003      	add	sp, #12
 80107d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107da:	6812      	ldr	r2, [r2, #0]
 80107dc:	3b04      	subs	r3, #4
 80107de:	2a00      	cmp	r2, #0
 80107e0:	d1cc      	bne.n	801077c <quorem+0x9c>
 80107e2:	3c01      	subs	r4, #1
 80107e4:	e7c7      	b.n	8010776 <quorem+0x96>
 80107e6:	6812      	ldr	r2, [r2, #0]
 80107e8:	3b04      	subs	r3, #4
 80107ea:	2a00      	cmp	r2, #0
 80107ec:	d1f0      	bne.n	80107d0 <quorem+0xf0>
 80107ee:	3c01      	subs	r4, #1
 80107f0:	e7eb      	b.n	80107ca <quorem+0xea>
 80107f2:	2000      	movs	r0, #0
 80107f4:	e7ee      	b.n	80107d4 <quorem+0xf4>
	...

080107f8 <_dtoa_r>:
 80107f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107fc:	ed2d 8b04 	vpush	{d8-d9}
 8010800:	ec57 6b10 	vmov	r6, r7, d0
 8010804:	b093      	sub	sp, #76	; 0x4c
 8010806:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010808:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801080c:	9106      	str	r1, [sp, #24]
 801080e:	ee10 aa10 	vmov	sl, s0
 8010812:	4604      	mov	r4, r0
 8010814:	9209      	str	r2, [sp, #36]	; 0x24
 8010816:	930c      	str	r3, [sp, #48]	; 0x30
 8010818:	46bb      	mov	fp, r7
 801081a:	b975      	cbnz	r5, 801083a <_dtoa_r+0x42>
 801081c:	2010      	movs	r0, #16
 801081e:	f000 feb1 	bl	8011584 <malloc>
 8010822:	4602      	mov	r2, r0
 8010824:	6260      	str	r0, [r4, #36]	; 0x24
 8010826:	b920      	cbnz	r0, 8010832 <_dtoa_r+0x3a>
 8010828:	4ba7      	ldr	r3, [pc, #668]	; (8010ac8 <_dtoa_r+0x2d0>)
 801082a:	21ea      	movs	r1, #234	; 0xea
 801082c:	48a7      	ldr	r0, [pc, #668]	; (8010acc <_dtoa_r+0x2d4>)
 801082e:	f001 fc11 	bl	8012054 <__assert_func>
 8010832:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010836:	6005      	str	r5, [r0, #0]
 8010838:	60c5      	str	r5, [r0, #12]
 801083a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801083c:	6819      	ldr	r1, [r3, #0]
 801083e:	b151      	cbz	r1, 8010856 <_dtoa_r+0x5e>
 8010840:	685a      	ldr	r2, [r3, #4]
 8010842:	604a      	str	r2, [r1, #4]
 8010844:	2301      	movs	r3, #1
 8010846:	4093      	lsls	r3, r2
 8010848:	608b      	str	r3, [r1, #8]
 801084a:	4620      	mov	r0, r4
 801084c:	f000 feee 	bl	801162c <_Bfree>
 8010850:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010852:	2200      	movs	r2, #0
 8010854:	601a      	str	r2, [r3, #0]
 8010856:	1e3b      	subs	r3, r7, #0
 8010858:	bfaa      	itet	ge
 801085a:	2300      	movge	r3, #0
 801085c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8010860:	f8c8 3000 	strge.w	r3, [r8]
 8010864:	4b9a      	ldr	r3, [pc, #616]	; (8010ad0 <_dtoa_r+0x2d8>)
 8010866:	bfbc      	itt	lt
 8010868:	2201      	movlt	r2, #1
 801086a:	f8c8 2000 	strlt.w	r2, [r8]
 801086e:	ea33 030b 	bics.w	r3, r3, fp
 8010872:	d11b      	bne.n	80108ac <_dtoa_r+0xb4>
 8010874:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010876:	f242 730f 	movw	r3, #9999	; 0x270f
 801087a:	6013      	str	r3, [r2, #0]
 801087c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010880:	4333      	orrs	r3, r6
 8010882:	f000 8592 	beq.w	80113aa <_dtoa_r+0xbb2>
 8010886:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010888:	b963      	cbnz	r3, 80108a4 <_dtoa_r+0xac>
 801088a:	4b92      	ldr	r3, [pc, #584]	; (8010ad4 <_dtoa_r+0x2dc>)
 801088c:	e022      	b.n	80108d4 <_dtoa_r+0xdc>
 801088e:	4b92      	ldr	r3, [pc, #584]	; (8010ad8 <_dtoa_r+0x2e0>)
 8010890:	9301      	str	r3, [sp, #4]
 8010892:	3308      	adds	r3, #8
 8010894:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010896:	6013      	str	r3, [r2, #0]
 8010898:	9801      	ldr	r0, [sp, #4]
 801089a:	b013      	add	sp, #76	; 0x4c
 801089c:	ecbd 8b04 	vpop	{d8-d9}
 80108a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108a4:	4b8b      	ldr	r3, [pc, #556]	; (8010ad4 <_dtoa_r+0x2dc>)
 80108a6:	9301      	str	r3, [sp, #4]
 80108a8:	3303      	adds	r3, #3
 80108aa:	e7f3      	b.n	8010894 <_dtoa_r+0x9c>
 80108ac:	2200      	movs	r2, #0
 80108ae:	2300      	movs	r3, #0
 80108b0:	4650      	mov	r0, sl
 80108b2:	4659      	mov	r1, fp
 80108b4:	f7f0 f918 	bl	8000ae8 <__aeabi_dcmpeq>
 80108b8:	ec4b ab19 	vmov	d9, sl, fp
 80108bc:	4680      	mov	r8, r0
 80108be:	b158      	cbz	r0, 80108d8 <_dtoa_r+0xe0>
 80108c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80108c2:	2301      	movs	r3, #1
 80108c4:	6013      	str	r3, [r2, #0]
 80108c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	f000 856b 	beq.w	80113a4 <_dtoa_r+0xbac>
 80108ce:	4883      	ldr	r0, [pc, #524]	; (8010adc <_dtoa_r+0x2e4>)
 80108d0:	6018      	str	r0, [r3, #0]
 80108d2:	1e43      	subs	r3, r0, #1
 80108d4:	9301      	str	r3, [sp, #4]
 80108d6:	e7df      	b.n	8010898 <_dtoa_r+0xa0>
 80108d8:	ec4b ab10 	vmov	d0, sl, fp
 80108dc:	aa10      	add	r2, sp, #64	; 0x40
 80108de:	a911      	add	r1, sp, #68	; 0x44
 80108e0:	4620      	mov	r0, r4
 80108e2:	f001 f98b 	bl	8011bfc <__d2b>
 80108e6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80108ea:	ee08 0a10 	vmov	s16, r0
 80108ee:	2d00      	cmp	r5, #0
 80108f0:	f000 8084 	beq.w	80109fc <_dtoa_r+0x204>
 80108f4:	ee19 3a90 	vmov	r3, s19
 80108f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80108fc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8010900:	4656      	mov	r6, sl
 8010902:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8010906:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801090a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801090e:	4b74      	ldr	r3, [pc, #464]	; (8010ae0 <_dtoa_r+0x2e8>)
 8010910:	2200      	movs	r2, #0
 8010912:	4630      	mov	r0, r6
 8010914:	4639      	mov	r1, r7
 8010916:	f7ef fcc7 	bl	80002a8 <__aeabi_dsub>
 801091a:	a365      	add	r3, pc, #404	; (adr r3, 8010ab0 <_dtoa_r+0x2b8>)
 801091c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010920:	f7ef fe7a 	bl	8000618 <__aeabi_dmul>
 8010924:	a364      	add	r3, pc, #400	; (adr r3, 8010ab8 <_dtoa_r+0x2c0>)
 8010926:	e9d3 2300 	ldrd	r2, r3, [r3]
 801092a:	f7ef fcbf 	bl	80002ac <__adddf3>
 801092e:	4606      	mov	r6, r0
 8010930:	4628      	mov	r0, r5
 8010932:	460f      	mov	r7, r1
 8010934:	f7ef fe06 	bl	8000544 <__aeabi_i2d>
 8010938:	a361      	add	r3, pc, #388	; (adr r3, 8010ac0 <_dtoa_r+0x2c8>)
 801093a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801093e:	f7ef fe6b 	bl	8000618 <__aeabi_dmul>
 8010942:	4602      	mov	r2, r0
 8010944:	460b      	mov	r3, r1
 8010946:	4630      	mov	r0, r6
 8010948:	4639      	mov	r1, r7
 801094a:	f7ef fcaf 	bl	80002ac <__adddf3>
 801094e:	4606      	mov	r6, r0
 8010950:	460f      	mov	r7, r1
 8010952:	f7f0 f911 	bl	8000b78 <__aeabi_d2iz>
 8010956:	2200      	movs	r2, #0
 8010958:	9000      	str	r0, [sp, #0]
 801095a:	2300      	movs	r3, #0
 801095c:	4630      	mov	r0, r6
 801095e:	4639      	mov	r1, r7
 8010960:	f7f0 f8cc 	bl	8000afc <__aeabi_dcmplt>
 8010964:	b150      	cbz	r0, 801097c <_dtoa_r+0x184>
 8010966:	9800      	ldr	r0, [sp, #0]
 8010968:	f7ef fdec 	bl	8000544 <__aeabi_i2d>
 801096c:	4632      	mov	r2, r6
 801096e:	463b      	mov	r3, r7
 8010970:	f7f0 f8ba 	bl	8000ae8 <__aeabi_dcmpeq>
 8010974:	b910      	cbnz	r0, 801097c <_dtoa_r+0x184>
 8010976:	9b00      	ldr	r3, [sp, #0]
 8010978:	3b01      	subs	r3, #1
 801097a:	9300      	str	r3, [sp, #0]
 801097c:	9b00      	ldr	r3, [sp, #0]
 801097e:	2b16      	cmp	r3, #22
 8010980:	d85a      	bhi.n	8010a38 <_dtoa_r+0x240>
 8010982:	9a00      	ldr	r2, [sp, #0]
 8010984:	4b57      	ldr	r3, [pc, #348]	; (8010ae4 <_dtoa_r+0x2ec>)
 8010986:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801098a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801098e:	ec51 0b19 	vmov	r0, r1, d9
 8010992:	f7f0 f8b3 	bl	8000afc <__aeabi_dcmplt>
 8010996:	2800      	cmp	r0, #0
 8010998:	d050      	beq.n	8010a3c <_dtoa_r+0x244>
 801099a:	9b00      	ldr	r3, [sp, #0]
 801099c:	3b01      	subs	r3, #1
 801099e:	9300      	str	r3, [sp, #0]
 80109a0:	2300      	movs	r3, #0
 80109a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80109a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80109a6:	1b5d      	subs	r5, r3, r5
 80109a8:	1e6b      	subs	r3, r5, #1
 80109aa:	9305      	str	r3, [sp, #20]
 80109ac:	bf45      	ittet	mi
 80109ae:	f1c5 0301 	rsbmi	r3, r5, #1
 80109b2:	9304      	strmi	r3, [sp, #16]
 80109b4:	2300      	movpl	r3, #0
 80109b6:	2300      	movmi	r3, #0
 80109b8:	bf4c      	ite	mi
 80109ba:	9305      	strmi	r3, [sp, #20]
 80109bc:	9304      	strpl	r3, [sp, #16]
 80109be:	9b00      	ldr	r3, [sp, #0]
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	db3d      	blt.n	8010a40 <_dtoa_r+0x248>
 80109c4:	9b05      	ldr	r3, [sp, #20]
 80109c6:	9a00      	ldr	r2, [sp, #0]
 80109c8:	920a      	str	r2, [sp, #40]	; 0x28
 80109ca:	4413      	add	r3, r2
 80109cc:	9305      	str	r3, [sp, #20]
 80109ce:	2300      	movs	r3, #0
 80109d0:	9307      	str	r3, [sp, #28]
 80109d2:	9b06      	ldr	r3, [sp, #24]
 80109d4:	2b09      	cmp	r3, #9
 80109d6:	f200 8089 	bhi.w	8010aec <_dtoa_r+0x2f4>
 80109da:	2b05      	cmp	r3, #5
 80109dc:	bfc4      	itt	gt
 80109de:	3b04      	subgt	r3, #4
 80109e0:	9306      	strgt	r3, [sp, #24]
 80109e2:	9b06      	ldr	r3, [sp, #24]
 80109e4:	f1a3 0302 	sub.w	r3, r3, #2
 80109e8:	bfcc      	ite	gt
 80109ea:	2500      	movgt	r5, #0
 80109ec:	2501      	movle	r5, #1
 80109ee:	2b03      	cmp	r3, #3
 80109f0:	f200 8087 	bhi.w	8010b02 <_dtoa_r+0x30a>
 80109f4:	e8df f003 	tbb	[pc, r3]
 80109f8:	59383a2d 	.word	0x59383a2d
 80109fc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010a00:	441d      	add	r5, r3
 8010a02:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010a06:	2b20      	cmp	r3, #32
 8010a08:	bfc1      	itttt	gt
 8010a0a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010a0e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8010a12:	fa0b f303 	lslgt.w	r3, fp, r3
 8010a16:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010a1a:	bfda      	itte	le
 8010a1c:	f1c3 0320 	rsble	r3, r3, #32
 8010a20:	fa06 f003 	lslle.w	r0, r6, r3
 8010a24:	4318      	orrgt	r0, r3
 8010a26:	f7ef fd7d 	bl	8000524 <__aeabi_ui2d>
 8010a2a:	2301      	movs	r3, #1
 8010a2c:	4606      	mov	r6, r0
 8010a2e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010a32:	3d01      	subs	r5, #1
 8010a34:	930e      	str	r3, [sp, #56]	; 0x38
 8010a36:	e76a      	b.n	801090e <_dtoa_r+0x116>
 8010a38:	2301      	movs	r3, #1
 8010a3a:	e7b2      	b.n	80109a2 <_dtoa_r+0x1aa>
 8010a3c:	900b      	str	r0, [sp, #44]	; 0x2c
 8010a3e:	e7b1      	b.n	80109a4 <_dtoa_r+0x1ac>
 8010a40:	9b04      	ldr	r3, [sp, #16]
 8010a42:	9a00      	ldr	r2, [sp, #0]
 8010a44:	1a9b      	subs	r3, r3, r2
 8010a46:	9304      	str	r3, [sp, #16]
 8010a48:	4253      	negs	r3, r2
 8010a4a:	9307      	str	r3, [sp, #28]
 8010a4c:	2300      	movs	r3, #0
 8010a4e:	930a      	str	r3, [sp, #40]	; 0x28
 8010a50:	e7bf      	b.n	80109d2 <_dtoa_r+0x1da>
 8010a52:	2300      	movs	r3, #0
 8010a54:	9308      	str	r3, [sp, #32]
 8010a56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	dc55      	bgt.n	8010b08 <_dtoa_r+0x310>
 8010a5c:	2301      	movs	r3, #1
 8010a5e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010a62:	461a      	mov	r2, r3
 8010a64:	9209      	str	r2, [sp, #36]	; 0x24
 8010a66:	e00c      	b.n	8010a82 <_dtoa_r+0x28a>
 8010a68:	2301      	movs	r3, #1
 8010a6a:	e7f3      	b.n	8010a54 <_dtoa_r+0x25c>
 8010a6c:	2300      	movs	r3, #0
 8010a6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010a70:	9308      	str	r3, [sp, #32]
 8010a72:	9b00      	ldr	r3, [sp, #0]
 8010a74:	4413      	add	r3, r2
 8010a76:	9302      	str	r3, [sp, #8]
 8010a78:	3301      	adds	r3, #1
 8010a7a:	2b01      	cmp	r3, #1
 8010a7c:	9303      	str	r3, [sp, #12]
 8010a7e:	bfb8      	it	lt
 8010a80:	2301      	movlt	r3, #1
 8010a82:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010a84:	2200      	movs	r2, #0
 8010a86:	6042      	str	r2, [r0, #4]
 8010a88:	2204      	movs	r2, #4
 8010a8a:	f102 0614 	add.w	r6, r2, #20
 8010a8e:	429e      	cmp	r6, r3
 8010a90:	6841      	ldr	r1, [r0, #4]
 8010a92:	d93d      	bls.n	8010b10 <_dtoa_r+0x318>
 8010a94:	4620      	mov	r0, r4
 8010a96:	f000 fd89 	bl	80115ac <_Balloc>
 8010a9a:	9001      	str	r0, [sp, #4]
 8010a9c:	2800      	cmp	r0, #0
 8010a9e:	d13b      	bne.n	8010b18 <_dtoa_r+0x320>
 8010aa0:	4b11      	ldr	r3, [pc, #68]	; (8010ae8 <_dtoa_r+0x2f0>)
 8010aa2:	4602      	mov	r2, r0
 8010aa4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010aa8:	e6c0      	b.n	801082c <_dtoa_r+0x34>
 8010aaa:	2301      	movs	r3, #1
 8010aac:	e7df      	b.n	8010a6e <_dtoa_r+0x276>
 8010aae:	bf00      	nop
 8010ab0:	636f4361 	.word	0x636f4361
 8010ab4:	3fd287a7 	.word	0x3fd287a7
 8010ab8:	8b60c8b3 	.word	0x8b60c8b3
 8010abc:	3fc68a28 	.word	0x3fc68a28
 8010ac0:	509f79fb 	.word	0x509f79fb
 8010ac4:	3fd34413 	.word	0x3fd34413
 8010ac8:	080143d9 	.word	0x080143d9
 8010acc:	080143f0 	.word	0x080143f0
 8010ad0:	7ff00000 	.word	0x7ff00000
 8010ad4:	080143d5 	.word	0x080143d5
 8010ad8:	080143cc 	.word	0x080143cc
 8010adc:	080143a9 	.word	0x080143a9
 8010ae0:	3ff80000 	.word	0x3ff80000
 8010ae4:	080144e0 	.word	0x080144e0
 8010ae8:	0801444b 	.word	0x0801444b
 8010aec:	2501      	movs	r5, #1
 8010aee:	2300      	movs	r3, #0
 8010af0:	9306      	str	r3, [sp, #24]
 8010af2:	9508      	str	r5, [sp, #32]
 8010af4:	f04f 33ff 	mov.w	r3, #4294967295
 8010af8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010afc:	2200      	movs	r2, #0
 8010afe:	2312      	movs	r3, #18
 8010b00:	e7b0      	b.n	8010a64 <_dtoa_r+0x26c>
 8010b02:	2301      	movs	r3, #1
 8010b04:	9308      	str	r3, [sp, #32]
 8010b06:	e7f5      	b.n	8010af4 <_dtoa_r+0x2fc>
 8010b08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b0a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010b0e:	e7b8      	b.n	8010a82 <_dtoa_r+0x28a>
 8010b10:	3101      	adds	r1, #1
 8010b12:	6041      	str	r1, [r0, #4]
 8010b14:	0052      	lsls	r2, r2, #1
 8010b16:	e7b8      	b.n	8010a8a <_dtoa_r+0x292>
 8010b18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010b1a:	9a01      	ldr	r2, [sp, #4]
 8010b1c:	601a      	str	r2, [r3, #0]
 8010b1e:	9b03      	ldr	r3, [sp, #12]
 8010b20:	2b0e      	cmp	r3, #14
 8010b22:	f200 809d 	bhi.w	8010c60 <_dtoa_r+0x468>
 8010b26:	2d00      	cmp	r5, #0
 8010b28:	f000 809a 	beq.w	8010c60 <_dtoa_r+0x468>
 8010b2c:	9b00      	ldr	r3, [sp, #0]
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	dd32      	ble.n	8010b98 <_dtoa_r+0x3a0>
 8010b32:	4ab7      	ldr	r2, [pc, #732]	; (8010e10 <_dtoa_r+0x618>)
 8010b34:	f003 030f 	and.w	r3, r3, #15
 8010b38:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010b3c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010b40:	9b00      	ldr	r3, [sp, #0]
 8010b42:	05d8      	lsls	r0, r3, #23
 8010b44:	ea4f 1723 	mov.w	r7, r3, asr #4
 8010b48:	d516      	bpl.n	8010b78 <_dtoa_r+0x380>
 8010b4a:	4bb2      	ldr	r3, [pc, #712]	; (8010e14 <_dtoa_r+0x61c>)
 8010b4c:	ec51 0b19 	vmov	r0, r1, d9
 8010b50:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010b54:	f7ef fe8a 	bl	800086c <__aeabi_ddiv>
 8010b58:	f007 070f 	and.w	r7, r7, #15
 8010b5c:	4682      	mov	sl, r0
 8010b5e:	468b      	mov	fp, r1
 8010b60:	2503      	movs	r5, #3
 8010b62:	4eac      	ldr	r6, [pc, #688]	; (8010e14 <_dtoa_r+0x61c>)
 8010b64:	b957      	cbnz	r7, 8010b7c <_dtoa_r+0x384>
 8010b66:	4642      	mov	r2, r8
 8010b68:	464b      	mov	r3, r9
 8010b6a:	4650      	mov	r0, sl
 8010b6c:	4659      	mov	r1, fp
 8010b6e:	f7ef fe7d 	bl	800086c <__aeabi_ddiv>
 8010b72:	4682      	mov	sl, r0
 8010b74:	468b      	mov	fp, r1
 8010b76:	e028      	b.n	8010bca <_dtoa_r+0x3d2>
 8010b78:	2502      	movs	r5, #2
 8010b7a:	e7f2      	b.n	8010b62 <_dtoa_r+0x36a>
 8010b7c:	07f9      	lsls	r1, r7, #31
 8010b7e:	d508      	bpl.n	8010b92 <_dtoa_r+0x39a>
 8010b80:	4640      	mov	r0, r8
 8010b82:	4649      	mov	r1, r9
 8010b84:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010b88:	f7ef fd46 	bl	8000618 <__aeabi_dmul>
 8010b8c:	3501      	adds	r5, #1
 8010b8e:	4680      	mov	r8, r0
 8010b90:	4689      	mov	r9, r1
 8010b92:	107f      	asrs	r7, r7, #1
 8010b94:	3608      	adds	r6, #8
 8010b96:	e7e5      	b.n	8010b64 <_dtoa_r+0x36c>
 8010b98:	f000 809b 	beq.w	8010cd2 <_dtoa_r+0x4da>
 8010b9c:	9b00      	ldr	r3, [sp, #0]
 8010b9e:	4f9d      	ldr	r7, [pc, #628]	; (8010e14 <_dtoa_r+0x61c>)
 8010ba0:	425e      	negs	r6, r3
 8010ba2:	4b9b      	ldr	r3, [pc, #620]	; (8010e10 <_dtoa_r+0x618>)
 8010ba4:	f006 020f 	and.w	r2, r6, #15
 8010ba8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bb0:	ec51 0b19 	vmov	r0, r1, d9
 8010bb4:	f7ef fd30 	bl	8000618 <__aeabi_dmul>
 8010bb8:	1136      	asrs	r6, r6, #4
 8010bba:	4682      	mov	sl, r0
 8010bbc:	468b      	mov	fp, r1
 8010bbe:	2300      	movs	r3, #0
 8010bc0:	2502      	movs	r5, #2
 8010bc2:	2e00      	cmp	r6, #0
 8010bc4:	d17a      	bne.n	8010cbc <_dtoa_r+0x4c4>
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d1d3      	bne.n	8010b72 <_dtoa_r+0x37a>
 8010bca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	f000 8082 	beq.w	8010cd6 <_dtoa_r+0x4de>
 8010bd2:	4b91      	ldr	r3, [pc, #580]	; (8010e18 <_dtoa_r+0x620>)
 8010bd4:	2200      	movs	r2, #0
 8010bd6:	4650      	mov	r0, sl
 8010bd8:	4659      	mov	r1, fp
 8010bda:	f7ef ff8f 	bl	8000afc <__aeabi_dcmplt>
 8010bde:	2800      	cmp	r0, #0
 8010be0:	d079      	beq.n	8010cd6 <_dtoa_r+0x4de>
 8010be2:	9b03      	ldr	r3, [sp, #12]
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d076      	beq.n	8010cd6 <_dtoa_r+0x4de>
 8010be8:	9b02      	ldr	r3, [sp, #8]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	dd36      	ble.n	8010c5c <_dtoa_r+0x464>
 8010bee:	9b00      	ldr	r3, [sp, #0]
 8010bf0:	4650      	mov	r0, sl
 8010bf2:	4659      	mov	r1, fp
 8010bf4:	1e5f      	subs	r7, r3, #1
 8010bf6:	2200      	movs	r2, #0
 8010bf8:	4b88      	ldr	r3, [pc, #544]	; (8010e1c <_dtoa_r+0x624>)
 8010bfa:	f7ef fd0d 	bl	8000618 <__aeabi_dmul>
 8010bfe:	9e02      	ldr	r6, [sp, #8]
 8010c00:	4682      	mov	sl, r0
 8010c02:	468b      	mov	fp, r1
 8010c04:	3501      	adds	r5, #1
 8010c06:	4628      	mov	r0, r5
 8010c08:	f7ef fc9c 	bl	8000544 <__aeabi_i2d>
 8010c0c:	4652      	mov	r2, sl
 8010c0e:	465b      	mov	r3, fp
 8010c10:	f7ef fd02 	bl	8000618 <__aeabi_dmul>
 8010c14:	4b82      	ldr	r3, [pc, #520]	; (8010e20 <_dtoa_r+0x628>)
 8010c16:	2200      	movs	r2, #0
 8010c18:	f7ef fb48 	bl	80002ac <__adddf3>
 8010c1c:	46d0      	mov	r8, sl
 8010c1e:	46d9      	mov	r9, fp
 8010c20:	4682      	mov	sl, r0
 8010c22:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8010c26:	2e00      	cmp	r6, #0
 8010c28:	d158      	bne.n	8010cdc <_dtoa_r+0x4e4>
 8010c2a:	4b7e      	ldr	r3, [pc, #504]	; (8010e24 <_dtoa_r+0x62c>)
 8010c2c:	2200      	movs	r2, #0
 8010c2e:	4640      	mov	r0, r8
 8010c30:	4649      	mov	r1, r9
 8010c32:	f7ef fb39 	bl	80002a8 <__aeabi_dsub>
 8010c36:	4652      	mov	r2, sl
 8010c38:	465b      	mov	r3, fp
 8010c3a:	4680      	mov	r8, r0
 8010c3c:	4689      	mov	r9, r1
 8010c3e:	f7ef ff7b 	bl	8000b38 <__aeabi_dcmpgt>
 8010c42:	2800      	cmp	r0, #0
 8010c44:	f040 8295 	bne.w	8011172 <_dtoa_r+0x97a>
 8010c48:	4652      	mov	r2, sl
 8010c4a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010c4e:	4640      	mov	r0, r8
 8010c50:	4649      	mov	r1, r9
 8010c52:	f7ef ff53 	bl	8000afc <__aeabi_dcmplt>
 8010c56:	2800      	cmp	r0, #0
 8010c58:	f040 8289 	bne.w	801116e <_dtoa_r+0x976>
 8010c5c:	ec5b ab19 	vmov	sl, fp, d9
 8010c60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	f2c0 8148 	blt.w	8010ef8 <_dtoa_r+0x700>
 8010c68:	9a00      	ldr	r2, [sp, #0]
 8010c6a:	2a0e      	cmp	r2, #14
 8010c6c:	f300 8144 	bgt.w	8010ef8 <_dtoa_r+0x700>
 8010c70:	4b67      	ldr	r3, [pc, #412]	; (8010e10 <_dtoa_r+0x618>)
 8010c72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010c76:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010c7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	f280 80d5 	bge.w	8010e2c <_dtoa_r+0x634>
 8010c82:	9b03      	ldr	r3, [sp, #12]
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	f300 80d1 	bgt.w	8010e2c <_dtoa_r+0x634>
 8010c8a:	f040 826f 	bne.w	801116c <_dtoa_r+0x974>
 8010c8e:	4b65      	ldr	r3, [pc, #404]	; (8010e24 <_dtoa_r+0x62c>)
 8010c90:	2200      	movs	r2, #0
 8010c92:	4640      	mov	r0, r8
 8010c94:	4649      	mov	r1, r9
 8010c96:	f7ef fcbf 	bl	8000618 <__aeabi_dmul>
 8010c9a:	4652      	mov	r2, sl
 8010c9c:	465b      	mov	r3, fp
 8010c9e:	f7ef ff41 	bl	8000b24 <__aeabi_dcmpge>
 8010ca2:	9e03      	ldr	r6, [sp, #12]
 8010ca4:	4637      	mov	r7, r6
 8010ca6:	2800      	cmp	r0, #0
 8010ca8:	f040 8245 	bne.w	8011136 <_dtoa_r+0x93e>
 8010cac:	9d01      	ldr	r5, [sp, #4]
 8010cae:	2331      	movs	r3, #49	; 0x31
 8010cb0:	f805 3b01 	strb.w	r3, [r5], #1
 8010cb4:	9b00      	ldr	r3, [sp, #0]
 8010cb6:	3301      	adds	r3, #1
 8010cb8:	9300      	str	r3, [sp, #0]
 8010cba:	e240      	b.n	801113e <_dtoa_r+0x946>
 8010cbc:	07f2      	lsls	r2, r6, #31
 8010cbe:	d505      	bpl.n	8010ccc <_dtoa_r+0x4d4>
 8010cc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010cc4:	f7ef fca8 	bl	8000618 <__aeabi_dmul>
 8010cc8:	3501      	adds	r5, #1
 8010cca:	2301      	movs	r3, #1
 8010ccc:	1076      	asrs	r6, r6, #1
 8010cce:	3708      	adds	r7, #8
 8010cd0:	e777      	b.n	8010bc2 <_dtoa_r+0x3ca>
 8010cd2:	2502      	movs	r5, #2
 8010cd4:	e779      	b.n	8010bca <_dtoa_r+0x3d2>
 8010cd6:	9f00      	ldr	r7, [sp, #0]
 8010cd8:	9e03      	ldr	r6, [sp, #12]
 8010cda:	e794      	b.n	8010c06 <_dtoa_r+0x40e>
 8010cdc:	9901      	ldr	r1, [sp, #4]
 8010cde:	4b4c      	ldr	r3, [pc, #304]	; (8010e10 <_dtoa_r+0x618>)
 8010ce0:	4431      	add	r1, r6
 8010ce2:	910d      	str	r1, [sp, #52]	; 0x34
 8010ce4:	9908      	ldr	r1, [sp, #32]
 8010ce6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010cea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010cee:	2900      	cmp	r1, #0
 8010cf0:	d043      	beq.n	8010d7a <_dtoa_r+0x582>
 8010cf2:	494d      	ldr	r1, [pc, #308]	; (8010e28 <_dtoa_r+0x630>)
 8010cf4:	2000      	movs	r0, #0
 8010cf6:	f7ef fdb9 	bl	800086c <__aeabi_ddiv>
 8010cfa:	4652      	mov	r2, sl
 8010cfc:	465b      	mov	r3, fp
 8010cfe:	f7ef fad3 	bl	80002a8 <__aeabi_dsub>
 8010d02:	9d01      	ldr	r5, [sp, #4]
 8010d04:	4682      	mov	sl, r0
 8010d06:	468b      	mov	fp, r1
 8010d08:	4649      	mov	r1, r9
 8010d0a:	4640      	mov	r0, r8
 8010d0c:	f7ef ff34 	bl	8000b78 <__aeabi_d2iz>
 8010d10:	4606      	mov	r6, r0
 8010d12:	f7ef fc17 	bl	8000544 <__aeabi_i2d>
 8010d16:	4602      	mov	r2, r0
 8010d18:	460b      	mov	r3, r1
 8010d1a:	4640      	mov	r0, r8
 8010d1c:	4649      	mov	r1, r9
 8010d1e:	f7ef fac3 	bl	80002a8 <__aeabi_dsub>
 8010d22:	3630      	adds	r6, #48	; 0x30
 8010d24:	f805 6b01 	strb.w	r6, [r5], #1
 8010d28:	4652      	mov	r2, sl
 8010d2a:	465b      	mov	r3, fp
 8010d2c:	4680      	mov	r8, r0
 8010d2e:	4689      	mov	r9, r1
 8010d30:	f7ef fee4 	bl	8000afc <__aeabi_dcmplt>
 8010d34:	2800      	cmp	r0, #0
 8010d36:	d163      	bne.n	8010e00 <_dtoa_r+0x608>
 8010d38:	4642      	mov	r2, r8
 8010d3a:	464b      	mov	r3, r9
 8010d3c:	4936      	ldr	r1, [pc, #216]	; (8010e18 <_dtoa_r+0x620>)
 8010d3e:	2000      	movs	r0, #0
 8010d40:	f7ef fab2 	bl	80002a8 <__aeabi_dsub>
 8010d44:	4652      	mov	r2, sl
 8010d46:	465b      	mov	r3, fp
 8010d48:	f7ef fed8 	bl	8000afc <__aeabi_dcmplt>
 8010d4c:	2800      	cmp	r0, #0
 8010d4e:	f040 80b5 	bne.w	8010ebc <_dtoa_r+0x6c4>
 8010d52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010d54:	429d      	cmp	r5, r3
 8010d56:	d081      	beq.n	8010c5c <_dtoa_r+0x464>
 8010d58:	4b30      	ldr	r3, [pc, #192]	; (8010e1c <_dtoa_r+0x624>)
 8010d5a:	2200      	movs	r2, #0
 8010d5c:	4650      	mov	r0, sl
 8010d5e:	4659      	mov	r1, fp
 8010d60:	f7ef fc5a 	bl	8000618 <__aeabi_dmul>
 8010d64:	4b2d      	ldr	r3, [pc, #180]	; (8010e1c <_dtoa_r+0x624>)
 8010d66:	4682      	mov	sl, r0
 8010d68:	468b      	mov	fp, r1
 8010d6a:	4640      	mov	r0, r8
 8010d6c:	4649      	mov	r1, r9
 8010d6e:	2200      	movs	r2, #0
 8010d70:	f7ef fc52 	bl	8000618 <__aeabi_dmul>
 8010d74:	4680      	mov	r8, r0
 8010d76:	4689      	mov	r9, r1
 8010d78:	e7c6      	b.n	8010d08 <_dtoa_r+0x510>
 8010d7a:	4650      	mov	r0, sl
 8010d7c:	4659      	mov	r1, fp
 8010d7e:	f7ef fc4b 	bl	8000618 <__aeabi_dmul>
 8010d82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010d84:	9d01      	ldr	r5, [sp, #4]
 8010d86:	930f      	str	r3, [sp, #60]	; 0x3c
 8010d88:	4682      	mov	sl, r0
 8010d8a:	468b      	mov	fp, r1
 8010d8c:	4649      	mov	r1, r9
 8010d8e:	4640      	mov	r0, r8
 8010d90:	f7ef fef2 	bl	8000b78 <__aeabi_d2iz>
 8010d94:	4606      	mov	r6, r0
 8010d96:	f7ef fbd5 	bl	8000544 <__aeabi_i2d>
 8010d9a:	3630      	adds	r6, #48	; 0x30
 8010d9c:	4602      	mov	r2, r0
 8010d9e:	460b      	mov	r3, r1
 8010da0:	4640      	mov	r0, r8
 8010da2:	4649      	mov	r1, r9
 8010da4:	f7ef fa80 	bl	80002a8 <__aeabi_dsub>
 8010da8:	f805 6b01 	strb.w	r6, [r5], #1
 8010dac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010dae:	429d      	cmp	r5, r3
 8010db0:	4680      	mov	r8, r0
 8010db2:	4689      	mov	r9, r1
 8010db4:	f04f 0200 	mov.w	r2, #0
 8010db8:	d124      	bne.n	8010e04 <_dtoa_r+0x60c>
 8010dba:	4b1b      	ldr	r3, [pc, #108]	; (8010e28 <_dtoa_r+0x630>)
 8010dbc:	4650      	mov	r0, sl
 8010dbe:	4659      	mov	r1, fp
 8010dc0:	f7ef fa74 	bl	80002ac <__adddf3>
 8010dc4:	4602      	mov	r2, r0
 8010dc6:	460b      	mov	r3, r1
 8010dc8:	4640      	mov	r0, r8
 8010dca:	4649      	mov	r1, r9
 8010dcc:	f7ef feb4 	bl	8000b38 <__aeabi_dcmpgt>
 8010dd0:	2800      	cmp	r0, #0
 8010dd2:	d173      	bne.n	8010ebc <_dtoa_r+0x6c4>
 8010dd4:	4652      	mov	r2, sl
 8010dd6:	465b      	mov	r3, fp
 8010dd8:	4913      	ldr	r1, [pc, #76]	; (8010e28 <_dtoa_r+0x630>)
 8010dda:	2000      	movs	r0, #0
 8010ddc:	f7ef fa64 	bl	80002a8 <__aeabi_dsub>
 8010de0:	4602      	mov	r2, r0
 8010de2:	460b      	mov	r3, r1
 8010de4:	4640      	mov	r0, r8
 8010de6:	4649      	mov	r1, r9
 8010de8:	f7ef fe88 	bl	8000afc <__aeabi_dcmplt>
 8010dec:	2800      	cmp	r0, #0
 8010dee:	f43f af35 	beq.w	8010c5c <_dtoa_r+0x464>
 8010df2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010df4:	1e6b      	subs	r3, r5, #1
 8010df6:	930f      	str	r3, [sp, #60]	; 0x3c
 8010df8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010dfc:	2b30      	cmp	r3, #48	; 0x30
 8010dfe:	d0f8      	beq.n	8010df2 <_dtoa_r+0x5fa>
 8010e00:	9700      	str	r7, [sp, #0]
 8010e02:	e049      	b.n	8010e98 <_dtoa_r+0x6a0>
 8010e04:	4b05      	ldr	r3, [pc, #20]	; (8010e1c <_dtoa_r+0x624>)
 8010e06:	f7ef fc07 	bl	8000618 <__aeabi_dmul>
 8010e0a:	4680      	mov	r8, r0
 8010e0c:	4689      	mov	r9, r1
 8010e0e:	e7bd      	b.n	8010d8c <_dtoa_r+0x594>
 8010e10:	080144e0 	.word	0x080144e0
 8010e14:	080144b8 	.word	0x080144b8
 8010e18:	3ff00000 	.word	0x3ff00000
 8010e1c:	40240000 	.word	0x40240000
 8010e20:	401c0000 	.word	0x401c0000
 8010e24:	40140000 	.word	0x40140000
 8010e28:	3fe00000 	.word	0x3fe00000
 8010e2c:	9d01      	ldr	r5, [sp, #4]
 8010e2e:	4656      	mov	r6, sl
 8010e30:	465f      	mov	r7, fp
 8010e32:	4642      	mov	r2, r8
 8010e34:	464b      	mov	r3, r9
 8010e36:	4630      	mov	r0, r6
 8010e38:	4639      	mov	r1, r7
 8010e3a:	f7ef fd17 	bl	800086c <__aeabi_ddiv>
 8010e3e:	f7ef fe9b 	bl	8000b78 <__aeabi_d2iz>
 8010e42:	4682      	mov	sl, r0
 8010e44:	f7ef fb7e 	bl	8000544 <__aeabi_i2d>
 8010e48:	4642      	mov	r2, r8
 8010e4a:	464b      	mov	r3, r9
 8010e4c:	f7ef fbe4 	bl	8000618 <__aeabi_dmul>
 8010e50:	4602      	mov	r2, r0
 8010e52:	460b      	mov	r3, r1
 8010e54:	4630      	mov	r0, r6
 8010e56:	4639      	mov	r1, r7
 8010e58:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8010e5c:	f7ef fa24 	bl	80002a8 <__aeabi_dsub>
 8010e60:	f805 6b01 	strb.w	r6, [r5], #1
 8010e64:	9e01      	ldr	r6, [sp, #4]
 8010e66:	9f03      	ldr	r7, [sp, #12]
 8010e68:	1bae      	subs	r6, r5, r6
 8010e6a:	42b7      	cmp	r7, r6
 8010e6c:	4602      	mov	r2, r0
 8010e6e:	460b      	mov	r3, r1
 8010e70:	d135      	bne.n	8010ede <_dtoa_r+0x6e6>
 8010e72:	f7ef fa1b 	bl	80002ac <__adddf3>
 8010e76:	4642      	mov	r2, r8
 8010e78:	464b      	mov	r3, r9
 8010e7a:	4606      	mov	r6, r0
 8010e7c:	460f      	mov	r7, r1
 8010e7e:	f7ef fe5b 	bl	8000b38 <__aeabi_dcmpgt>
 8010e82:	b9d0      	cbnz	r0, 8010eba <_dtoa_r+0x6c2>
 8010e84:	4642      	mov	r2, r8
 8010e86:	464b      	mov	r3, r9
 8010e88:	4630      	mov	r0, r6
 8010e8a:	4639      	mov	r1, r7
 8010e8c:	f7ef fe2c 	bl	8000ae8 <__aeabi_dcmpeq>
 8010e90:	b110      	cbz	r0, 8010e98 <_dtoa_r+0x6a0>
 8010e92:	f01a 0f01 	tst.w	sl, #1
 8010e96:	d110      	bne.n	8010eba <_dtoa_r+0x6c2>
 8010e98:	4620      	mov	r0, r4
 8010e9a:	ee18 1a10 	vmov	r1, s16
 8010e9e:	f000 fbc5 	bl	801162c <_Bfree>
 8010ea2:	2300      	movs	r3, #0
 8010ea4:	9800      	ldr	r0, [sp, #0]
 8010ea6:	702b      	strb	r3, [r5, #0]
 8010ea8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010eaa:	3001      	adds	r0, #1
 8010eac:	6018      	str	r0, [r3, #0]
 8010eae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	f43f acf1 	beq.w	8010898 <_dtoa_r+0xa0>
 8010eb6:	601d      	str	r5, [r3, #0]
 8010eb8:	e4ee      	b.n	8010898 <_dtoa_r+0xa0>
 8010eba:	9f00      	ldr	r7, [sp, #0]
 8010ebc:	462b      	mov	r3, r5
 8010ebe:	461d      	mov	r5, r3
 8010ec0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010ec4:	2a39      	cmp	r2, #57	; 0x39
 8010ec6:	d106      	bne.n	8010ed6 <_dtoa_r+0x6de>
 8010ec8:	9a01      	ldr	r2, [sp, #4]
 8010eca:	429a      	cmp	r2, r3
 8010ecc:	d1f7      	bne.n	8010ebe <_dtoa_r+0x6c6>
 8010ece:	9901      	ldr	r1, [sp, #4]
 8010ed0:	2230      	movs	r2, #48	; 0x30
 8010ed2:	3701      	adds	r7, #1
 8010ed4:	700a      	strb	r2, [r1, #0]
 8010ed6:	781a      	ldrb	r2, [r3, #0]
 8010ed8:	3201      	adds	r2, #1
 8010eda:	701a      	strb	r2, [r3, #0]
 8010edc:	e790      	b.n	8010e00 <_dtoa_r+0x608>
 8010ede:	4ba6      	ldr	r3, [pc, #664]	; (8011178 <_dtoa_r+0x980>)
 8010ee0:	2200      	movs	r2, #0
 8010ee2:	f7ef fb99 	bl	8000618 <__aeabi_dmul>
 8010ee6:	2200      	movs	r2, #0
 8010ee8:	2300      	movs	r3, #0
 8010eea:	4606      	mov	r6, r0
 8010eec:	460f      	mov	r7, r1
 8010eee:	f7ef fdfb 	bl	8000ae8 <__aeabi_dcmpeq>
 8010ef2:	2800      	cmp	r0, #0
 8010ef4:	d09d      	beq.n	8010e32 <_dtoa_r+0x63a>
 8010ef6:	e7cf      	b.n	8010e98 <_dtoa_r+0x6a0>
 8010ef8:	9a08      	ldr	r2, [sp, #32]
 8010efa:	2a00      	cmp	r2, #0
 8010efc:	f000 80d7 	beq.w	80110ae <_dtoa_r+0x8b6>
 8010f00:	9a06      	ldr	r2, [sp, #24]
 8010f02:	2a01      	cmp	r2, #1
 8010f04:	f300 80ba 	bgt.w	801107c <_dtoa_r+0x884>
 8010f08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010f0a:	2a00      	cmp	r2, #0
 8010f0c:	f000 80b2 	beq.w	8011074 <_dtoa_r+0x87c>
 8010f10:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010f14:	9e07      	ldr	r6, [sp, #28]
 8010f16:	9d04      	ldr	r5, [sp, #16]
 8010f18:	9a04      	ldr	r2, [sp, #16]
 8010f1a:	441a      	add	r2, r3
 8010f1c:	9204      	str	r2, [sp, #16]
 8010f1e:	9a05      	ldr	r2, [sp, #20]
 8010f20:	2101      	movs	r1, #1
 8010f22:	441a      	add	r2, r3
 8010f24:	4620      	mov	r0, r4
 8010f26:	9205      	str	r2, [sp, #20]
 8010f28:	f000 fc38 	bl	801179c <__i2b>
 8010f2c:	4607      	mov	r7, r0
 8010f2e:	2d00      	cmp	r5, #0
 8010f30:	dd0c      	ble.n	8010f4c <_dtoa_r+0x754>
 8010f32:	9b05      	ldr	r3, [sp, #20]
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	dd09      	ble.n	8010f4c <_dtoa_r+0x754>
 8010f38:	42ab      	cmp	r3, r5
 8010f3a:	9a04      	ldr	r2, [sp, #16]
 8010f3c:	bfa8      	it	ge
 8010f3e:	462b      	movge	r3, r5
 8010f40:	1ad2      	subs	r2, r2, r3
 8010f42:	9204      	str	r2, [sp, #16]
 8010f44:	9a05      	ldr	r2, [sp, #20]
 8010f46:	1aed      	subs	r5, r5, r3
 8010f48:	1ad3      	subs	r3, r2, r3
 8010f4a:	9305      	str	r3, [sp, #20]
 8010f4c:	9b07      	ldr	r3, [sp, #28]
 8010f4e:	b31b      	cbz	r3, 8010f98 <_dtoa_r+0x7a0>
 8010f50:	9b08      	ldr	r3, [sp, #32]
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	f000 80af 	beq.w	80110b6 <_dtoa_r+0x8be>
 8010f58:	2e00      	cmp	r6, #0
 8010f5a:	dd13      	ble.n	8010f84 <_dtoa_r+0x78c>
 8010f5c:	4639      	mov	r1, r7
 8010f5e:	4632      	mov	r2, r6
 8010f60:	4620      	mov	r0, r4
 8010f62:	f000 fcdb 	bl	801191c <__pow5mult>
 8010f66:	ee18 2a10 	vmov	r2, s16
 8010f6a:	4601      	mov	r1, r0
 8010f6c:	4607      	mov	r7, r0
 8010f6e:	4620      	mov	r0, r4
 8010f70:	f000 fc2a 	bl	80117c8 <__multiply>
 8010f74:	ee18 1a10 	vmov	r1, s16
 8010f78:	4680      	mov	r8, r0
 8010f7a:	4620      	mov	r0, r4
 8010f7c:	f000 fb56 	bl	801162c <_Bfree>
 8010f80:	ee08 8a10 	vmov	s16, r8
 8010f84:	9b07      	ldr	r3, [sp, #28]
 8010f86:	1b9a      	subs	r2, r3, r6
 8010f88:	d006      	beq.n	8010f98 <_dtoa_r+0x7a0>
 8010f8a:	ee18 1a10 	vmov	r1, s16
 8010f8e:	4620      	mov	r0, r4
 8010f90:	f000 fcc4 	bl	801191c <__pow5mult>
 8010f94:	ee08 0a10 	vmov	s16, r0
 8010f98:	2101      	movs	r1, #1
 8010f9a:	4620      	mov	r0, r4
 8010f9c:	f000 fbfe 	bl	801179c <__i2b>
 8010fa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	4606      	mov	r6, r0
 8010fa6:	f340 8088 	ble.w	80110ba <_dtoa_r+0x8c2>
 8010faa:	461a      	mov	r2, r3
 8010fac:	4601      	mov	r1, r0
 8010fae:	4620      	mov	r0, r4
 8010fb0:	f000 fcb4 	bl	801191c <__pow5mult>
 8010fb4:	9b06      	ldr	r3, [sp, #24]
 8010fb6:	2b01      	cmp	r3, #1
 8010fb8:	4606      	mov	r6, r0
 8010fba:	f340 8081 	ble.w	80110c0 <_dtoa_r+0x8c8>
 8010fbe:	f04f 0800 	mov.w	r8, #0
 8010fc2:	6933      	ldr	r3, [r6, #16]
 8010fc4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010fc8:	6918      	ldr	r0, [r3, #16]
 8010fca:	f000 fb97 	bl	80116fc <__hi0bits>
 8010fce:	f1c0 0020 	rsb	r0, r0, #32
 8010fd2:	9b05      	ldr	r3, [sp, #20]
 8010fd4:	4418      	add	r0, r3
 8010fd6:	f010 001f 	ands.w	r0, r0, #31
 8010fda:	f000 8092 	beq.w	8011102 <_dtoa_r+0x90a>
 8010fde:	f1c0 0320 	rsb	r3, r0, #32
 8010fe2:	2b04      	cmp	r3, #4
 8010fe4:	f340 808a 	ble.w	80110fc <_dtoa_r+0x904>
 8010fe8:	f1c0 001c 	rsb	r0, r0, #28
 8010fec:	9b04      	ldr	r3, [sp, #16]
 8010fee:	4403      	add	r3, r0
 8010ff0:	9304      	str	r3, [sp, #16]
 8010ff2:	9b05      	ldr	r3, [sp, #20]
 8010ff4:	4403      	add	r3, r0
 8010ff6:	4405      	add	r5, r0
 8010ff8:	9305      	str	r3, [sp, #20]
 8010ffa:	9b04      	ldr	r3, [sp, #16]
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	dd07      	ble.n	8011010 <_dtoa_r+0x818>
 8011000:	ee18 1a10 	vmov	r1, s16
 8011004:	461a      	mov	r2, r3
 8011006:	4620      	mov	r0, r4
 8011008:	f000 fce2 	bl	80119d0 <__lshift>
 801100c:	ee08 0a10 	vmov	s16, r0
 8011010:	9b05      	ldr	r3, [sp, #20]
 8011012:	2b00      	cmp	r3, #0
 8011014:	dd05      	ble.n	8011022 <_dtoa_r+0x82a>
 8011016:	4631      	mov	r1, r6
 8011018:	461a      	mov	r2, r3
 801101a:	4620      	mov	r0, r4
 801101c:	f000 fcd8 	bl	80119d0 <__lshift>
 8011020:	4606      	mov	r6, r0
 8011022:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011024:	2b00      	cmp	r3, #0
 8011026:	d06e      	beq.n	8011106 <_dtoa_r+0x90e>
 8011028:	ee18 0a10 	vmov	r0, s16
 801102c:	4631      	mov	r1, r6
 801102e:	f000 fd3f 	bl	8011ab0 <__mcmp>
 8011032:	2800      	cmp	r0, #0
 8011034:	da67      	bge.n	8011106 <_dtoa_r+0x90e>
 8011036:	9b00      	ldr	r3, [sp, #0]
 8011038:	3b01      	subs	r3, #1
 801103a:	ee18 1a10 	vmov	r1, s16
 801103e:	9300      	str	r3, [sp, #0]
 8011040:	220a      	movs	r2, #10
 8011042:	2300      	movs	r3, #0
 8011044:	4620      	mov	r0, r4
 8011046:	f000 fb13 	bl	8011670 <__multadd>
 801104a:	9b08      	ldr	r3, [sp, #32]
 801104c:	ee08 0a10 	vmov	s16, r0
 8011050:	2b00      	cmp	r3, #0
 8011052:	f000 81b1 	beq.w	80113b8 <_dtoa_r+0xbc0>
 8011056:	2300      	movs	r3, #0
 8011058:	4639      	mov	r1, r7
 801105a:	220a      	movs	r2, #10
 801105c:	4620      	mov	r0, r4
 801105e:	f000 fb07 	bl	8011670 <__multadd>
 8011062:	9b02      	ldr	r3, [sp, #8]
 8011064:	2b00      	cmp	r3, #0
 8011066:	4607      	mov	r7, r0
 8011068:	f300 808e 	bgt.w	8011188 <_dtoa_r+0x990>
 801106c:	9b06      	ldr	r3, [sp, #24]
 801106e:	2b02      	cmp	r3, #2
 8011070:	dc51      	bgt.n	8011116 <_dtoa_r+0x91e>
 8011072:	e089      	b.n	8011188 <_dtoa_r+0x990>
 8011074:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011076:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801107a:	e74b      	b.n	8010f14 <_dtoa_r+0x71c>
 801107c:	9b03      	ldr	r3, [sp, #12]
 801107e:	1e5e      	subs	r6, r3, #1
 8011080:	9b07      	ldr	r3, [sp, #28]
 8011082:	42b3      	cmp	r3, r6
 8011084:	bfbf      	itttt	lt
 8011086:	9b07      	ldrlt	r3, [sp, #28]
 8011088:	9607      	strlt	r6, [sp, #28]
 801108a:	1af2      	sublt	r2, r6, r3
 801108c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801108e:	bfb6      	itet	lt
 8011090:	189b      	addlt	r3, r3, r2
 8011092:	1b9e      	subge	r6, r3, r6
 8011094:	930a      	strlt	r3, [sp, #40]	; 0x28
 8011096:	9b03      	ldr	r3, [sp, #12]
 8011098:	bfb8      	it	lt
 801109a:	2600      	movlt	r6, #0
 801109c:	2b00      	cmp	r3, #0
 801109e:	bfb7      	itett	lt
 80110a0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80110a4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80110a8:	1a9d      	sublt	r5, r3, r2
 80110aa:	2300      	movlt	r3, #0
 80110ac:	e734      	b.n	8010f18 <_dtoa_r+0x720>
 80110ae:	9e07      	ldr	r6, [sp, #28]
 80110b0:	9d04      	ldr	r5, [sp, #16]
 80110b2:	9f08      	ldr	r7, [sp, #32]
 80110b4:	e73b      	b.n	8010f2e <_dtoa_r+0x736>
 80110b6:	9a07      	ldr	r2, [sp, #28]
 80110b8:	e767      	b.n	8010f8a <_dtoa_r+0x792>
 80110ba:	9b06      	ldr	r3, [sp, #24]
 80110bc:	2b01      	cmp	r3, #1
 80110be:	dc18      	bgt.n	80110f2 <_dtoa_r+0x8fa>
 80110c0:	f1ba 0f00 	cmp.w	sl, #0
 80110c4:	d115      	bne.n	80110f2 <_dtoa_r+0x8fa>
 80110c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80110ca:	b993      	cbnz	r3, 80110f2 <_dtoa_r+0x8fa>
 80110cc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80110d0:	0d1b      	lsrs	r3, r3, #20
 80110d2:	051b      	lsls	r3, r3, #20
 80110d4:	b183      	cbz	r3, 80110f8 <_dtoa_r+0x900>
 80110d6:	9b04      	ldr	r3, [sp, #16]
 80110d8:	3301      	adds	r3, #1
 80110da:	9304      	str	r3, [sp, #16]
 80110dc:	9b05      	ldr	r3, [sp, #20]
 80110de:	3301      	adds	r3, #1
 80110e0:	9305      	str	r3, [sp, #20]
 80110e2:	f04f 0801 	mov.w	r8, #1
 80110e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	f47f af6a 	bne.w	8010fc2 <_dtoa_r+0x7ca>
 80110ee:	2001      	movs	r0, #1
 80110f0:	e76f      	b.n	8010fd2 <_dtoa_r+0x7da>
 80110f2:	f04f 0800 	mov.w	r8, #0
 80110f6:	e7f6      	b.n	80110e6 <_dtoa_r+0x8ee>
 80110f8:	4698      	mov	r8, r3
 80110fa:	e7f4      	b.n	80110e6 <_dtoa_r+0x8ee>
 80110fc:	f43f af7d 	beq.w	8010ffa <_dtoa_r+0x802>
 8011100:	4618      	mov	r0, r3
 8011102:	301c      	adds	r0, #28
 8011104:	e772      	b.n	8010fec <_dtoa_r+0x7f4>
 8011106:	9b03      	ldr	r3, [sp, #12]
 8011108:	2b00      	cmp	r3, #0
 801110a:	dc37      	bgt.n	801117c <_dtoa_r+0x984>
 801110c:	9b06      	ldr	r3, [sp, #24]
 801110e:	2b02      	cmp	r3, #2
 8011110:	dd34      	ble.n	801117c <_dtoa_r+0x984>
 8011112:	9b03      	ldr	r3, [sp, #12]
 8011114:	9302      	str	r3, [sp, #8]
 8011116:	9b02      	ldr	r3, [sp, #8]
 8011118:	b96b      	cbnz	r3, 8011136 <_dtoa_r+0x93e>
 801111a:	4631      	mov	r1, r6
 801111c:	2205      	movs	r2, #5
 801111e:	4620      	mov	r0, r4
 8011120:	f000 faa6 	bl	8011670 <__multadd>
 8011124:	4601      	mov	r1, r0
 8011126:	4606      	mov	r6, r0
 8011128:	ee18 0a10 	vmov	r0, s16
 801112c:	f000 fcc0 	bl	8011ab0 <__mcmp>
 8011130:	2800      	cmp	r0, #0
 8011132:	f73f adbb 	bgt.w	8010cac <_dtoa_r+0x4b4>
 8011136:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011138:	9d01      	ldr	r5, [sp, #4]
 801113a:	43db      	mvns	r3, r3
 801113c:	9300      	str	r3, [sp, #0]
 801113e:	f04f 0800 	mov.w	r8, #0
 8011142:	4631      	mov	r1, r6
 8011144:	4620      	mov	r0, r4
 8011146:	f000 fa71 	bl	801162c <_Bfree>
 801114a:	2f00      	cmp	r7, #0
 801114c:	f43f aea4 	beq.w	8010e98 <_dtoa_r+0x6a0>
 8011150:	f1b8 0f00 	cmp.w	r8, #0
 8011154:	d005      	beq.n	8011162 <_dtoa_r+0x96a>
 8011156:	45b8      	cmp	r8, r7
 8011158:	d003      	beq.n	8011162 <_dtoa_r+0x96a>
 801115a:	4641      	mov	r1, r8
 801115c:	4620      	mov	r0, r4
 801115e:	f000 fa65 	bl	801162c <_Bfree>
 8011162:	4639      	mov	r1, r7
 8011164:	4620      	mov	r0, r4
 8011166:	f000 fa61 	bl	801162c <_Bfree>
 801116a:	e695      	b.n	8010e98 <_dtoa_r+0x6a0>
 801116c:	2600      	movs	r6, #0
 801116e:	4637      	mov	r7, r6
 8011170:	e7e1      	b.n	8011136 <_dtoa_r+0x93e>
 8011172:	9700      	str	r7, [sp, #0]
 8011174:	4637      	mov	r7, r6
 8011176:	e599      	b.n	8010cac <_dtoa_r+0x4b4>
 8011178:	40240000 	.word	0x40240000
 801117c:	9b08      	ldr	r3, [sp, #32]
 801117e:	2b00      	cmp	r3, #0
 8011180:	f000 80ca 	beq.w	8011318 <_dtoa_r+0xb20>
 8011184:	9b03      	ldr	r3, [sp, #12]
 8011186:	9302      	str	r3, [sp, #8]
 8011188:	2d00      	cmp	r5, #0
 801118a:	dd05      	ble.n	8011198 <_dtoa_r+0x9a0>
 801118c:	4639      	mov	r1, r7
 801118e:	462a      	mov	r2, r5
 8011190:	4620      	mov	r0, r4
 8011192:	f000 fc1d 	bl	80119d0 <__lshift>
 8011196:	4607      	mov	r7, r0
 8011198:	f1b8 0f00 	cmp.w	r8, #0
 801119c:	d05b      	beq.n	8011256 <_dtoa_r+0xa5e>
 801119e:	6879      	ldr	r1, [r7, #4]
 80111a0:	4620      	mov	r0, r4
 80111a2:	f000 fa03 	bl	80115ac <_Balloc>
 80111a6:	4605      	mov	r5, r0
 80111a8:	b928      	cbnz	r0, 80111b6 <_dtoa_r+0x9be>
 80111aa:	4b87      	ldr	r3, [pc, #540]	; (80113c8 <_dtoa_r+0xbd0>)
 80111ac:	4602      	mov	r2, r0
 80111ae:	f240 21ea 	movw	r1, #746	; 0x2ea
 80111b2:	f7ff bb3b 	b.w	801082c <_dtoa_r+0x34>
 80111b6:	693a      	ldr	r2, [r7, #16]
 80111b8:	3202      	adds	r2, #2
 80111ba:	0092      	lsls	r2, r2, #2
 80111bc:	f107 010c 	add.w	r1, r7, #12
 80111c0:	300c      	adds	r0, #12
 80111c2:	f7fe fc78 	bl	800fab6 <memcpy>
 80111c6:	2201      	movs	r2, #1
 80111c8:	4629      	mov	r1, r5
 80111ca:	4620      	mov	r0, r4
 80111cc:	f000 fc00 	bl	80119d0 <__lshift>
 80111d0:	9b01      	ldr	r3, [sp, #4]
 80111d2:	f103 0901 	add.w	r9, r3, #1
 80111d6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80111da:	4413      	add	r3, r2
 80111dc:	9305      	str	r3, [sp, #20]
 80111de:	f00a 0301 	and.w	r3, sl, #1
 80111e2:	46b8      	mov	r8, r7
 80111e4:	9304      	str	r3, [sp, #16]
 80111e6:	4607      	mov	r7, r0
 80111e8:	4631      	mov	r1, r6
 80111ea:	ee18 0a10 	vmov	r0, s16
 80111ee:	f7ff fa77 	bl	80106e0 <quorem>
 80111f2:	4641      	mov	r1, r8
 80111f4:	9002      	str	r0, [sp, #8]
 80111f6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80111fa:	ee18 0a10 	vmov	r0, s16
 80111fe:	f000 fc57 	bl	8011ab0 <__mcmp>
 8011202:	463a      	mov	r2, r7
 8011204:	9003      	str	r0, [sp, #12]
 8011206:	4631      	mov	r1, r6
 8011208:	4620      	mov	r0, r4
 801120a:	f000 fc6d 	bl	8011ae8 <__mdiff>
 801120e:	68c2      	ldr	r2, [r0, #12]
 8011210:	f109 3bff 	add.w	fp, r9, #4294967295
 8011214:	4605      	mov	r5, r0
 8011216:	bb02      	cbnz	r2, 801125a <_dtoa_r+0xa62>
 8011218:	4601      	mov	r1, r0
 801121a:	ee18 0a10 	vmov	r0, s16
 801121e:	f000 fc47 	bl	8011ab0 <__mcmp>
 8011222:	4602      	mov	r2, r0
 8011224:	4629      	mov	r1, r5
 8011226:	4620      	mov	r0, r4
 8011228:	9207      	str	r2, [sp, #28]
 801122a:	f000 f9ff 	bl	801162c <_Bfree>
 801122e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8011232:	ea43 0102 	orr.w	r1, r3, r2
 8011236:	9b04      	ldr	r3, [sp, #16]
 8011238:	430b      	orrs	r3, r1
 801123a:	464d      	mov	r5, r9
 801123c:	d10f      	bne.n	801125e <_dtoa_r+0xa66>
 801123e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011242:	d02a      	beq.n	801129a <_dtoa_r+0xaa2>
 8011244:	9b03      	ldr	r3, [sp, #12]
 8011246:	2b00      	cmp	r3, #0
 8011248:	dd02      	ble.n	8011250 <_dtoa_r+0xa58>
 801124a:	9b02      	ldr	r3, [sp, #8]
 801124c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8011250:	f88b a000 	strb.w	sl, [fp]
 8011254:	e775      	b.n	8011142 <_dtoa_r+0x94a>
 8011256:	4638      	mov	r0, r7
 8011258:	e7ba      	b.n	80111d0 <_dtoa_r+0x9d8>
 801125a:	2201      	movs	r2, #1
 801125c:	e7e2      	b.n	8011224 <_dtoa_r+0xa2c>
 801125e:	9b03      	ldr	r3, [sp, #12]
 8011260:	2b00      	cmp	r3, #0
 8011262:	db04      	blt.n	801126e <_dtoa_r+0xa76>
 8011264:	9906      	ldr	r1, [sp, #24]
 8011266:	430b      	orrs	r3, r1
 8011268:	9904      	ldr	r1, [sp, #16]
 801126a:	430b      	orrs	r3, r1
 801126c:	d122      	bne.n	80112b4 <_dtoa_r+0xabc>
 801126e:	2a00      	cmp	r2, #0
 8011270:	ddee      	ble.n	8011250 <_dtoa_r+0xa58>
 8011272:	ee18 1a10 	vmov	r1, s16
 8011276:	2201      	movs	r2, #1
 8011278:	4620      	mov	r0, r4
 801127a:	f000 fba9 	bl	80119d0 <__lshift>
 801127e:	4631      	mov	r1, r6
 8011280:	ee08 0a10 	vmov	s16, r0
 8011284:	f000 fc14 	bl	8011ab0 <__mcmp>
 8011288:	2800      	cmp	r0, #0
 801128a:	dc03      	bgt.n	8011294 <_dtoa_r+0xa9c>
 801128c:	d1e0      	bne.n	8011250 <_dtoa_r+0xa58>
 801128e:	f01a 0f01 	tst.w	sl, #1
 8011292:	d0dd      	beq.n	8011250 <_dtoa_r+0xa58>
 8011294:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011298:	d1d7      	bne.n	801124a <_dtoa_r+0xa52>
 801129a:	2339      	movs	r3, #57	; 0x39
 801129c:	f88b 3000 	strb.w	r3, [fp]
 80112a0:	462b      	mov	r3, r5
 80112a2:	461d      	mov	r5, r3
 80112a4:	3b01      	subs	r3, #1
 80112a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80112aa:	2a39      	cmp	r2, #57	; 0x39
 80112ac:	d071      	beq.n	8011392 <_dtoa_r+0xb9a>
 80112ae:	3201      	adds	r2, #1
 80112b0:	701a      	strb	r2, [r3, #0]
 80112b2:	e746      	b.n	8011142 <_dtoa_r+0x94a>
 80112b4:	2a00      	cmp	r2, #0
 80112b6:	dd07      	ble.n	80112c8 <_dtoa_r+0xad0>
 80112b8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80112bc:	d0ed      	beq.n	801129a <_dtoa_r+0xaa2>
 80112be:	f10a 0301 	add.w	r3, sl, #1
 80112c2:	f88b 3000 	strb.w	r3, [fp]
 80112c6:	e73c      	b.n	8011142 <_dtoa_r+0x94a>
 80112c8:	9b05      	ldr	r3, [sp, #20]
 80112ca:	f809 ac01 	strb.w	sl, [r9, #-1]
 80112ce:	4599      	cmp	r9, r3
 80112d0:	d047      	beq.n	8011362 <_dtoa_r+0xb6a>
 80112d2:	ee18 1a10 	vmov	r1, s16
 80112d6:	2300      	movs	r3, #0
 80112d8:	220a      	movs	r2, #10
 80112da:	4620      	mov	r0, r4
 80112dc:	f000 f9c8 	bl	8011670 <__multadd>
 80112e0:	45b8      	cmp	r8, r7
 80112e2:	ee08 0a10 	vmov	s16, r0
 80112e6:	f04f 0300 	mov.w	r3, #0
 80112ea:	f04f 020a 	mov.w	r2, #10
 80112ee:	4641      	mov	r1, r8
 80112f0:	4620      	mov	r0, r4
 80112f2:	d106      	bne.n	8011302 <_dtoa_r+0xb0a>
 80112f4:	f000 f9bc 	bl	8011670 <__multadd>
 80112f8:	4680      	mov	r8, r0
 80112fa:	4607      	mov	r7, r0
 80112fc:	f109 0901 	add.w	r9, r9, #1
 8011300:	e772      	b.n	80111e8 <_dtoa_r+0x9f0>
 8011302:	f000 f9b5 	bl	8011670 <__multadd>
 8011306:	4639      	mov	r1, r7
 8011308:	4680      	mov	r8, r0
 801130a:	2300      	movs	r3, #0
 801130c:	220a      	movs	r2, #10
 801130e:	4620      	mov	r0, r4
 8011310:	f000 f9ae 	bl	8011670 <__multadd>
 8011314:	4607      	mov	r7, r0
 8011316:	e7f1      	b.n	80112fc <_dtoa_r+0xb04>
 8011318:	9b03      	ldr	r3, [sp, #12]
 801131a:	9302      	str	r3, [sp, #8]
 801131c:	9d01      	ldr	r5, [sp, #4]
 801131e:	ee18 0a10 	vmov	r0, s16
 8011322:	4631      	mov	r1, r6
 8011324:	f7ff f9dc 	bl	80106e0 <quorem>
 8011328:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801132c:	9b01      	ldr	r3, [sp, #4]
 801132e:	f805 ab01 	strb.w	sl, [r5], #1
 8011332:	1aea      	subs	r2, r5, r3
 8011334:	9b02      	ldr	r3, [sp, #8]
 8011336:	4293      	cmp	r3, r2
 8011338:	dd09      	ble.n	801134e <_dtoa_r+0xb56>
 801133a:	ee18 1a10 	vmov	r1, s16
 801133e:	2300      	movs	r3, #0
 8011340:	220a      	movs	r2, #10
 8011342:	4620      	mov	r0, r4
 8011344:	f000 f994 	bl	8011670 <__multadd>
 8011348:	ee08 0a10 	vmov	s16, r0
 801134c:	e7e7      	b.n	801131e <_dtoa_r+0xb26>
 801134e:	9b02      	ldr	r3, [sp, #8]
 8011350:	2b00      	cmp	r3, #0
 8011352:	bfc8      	it	gt
 8011354:	461d      	movgt	r5, r3
 8011356:	9b01      	ldr	r3, [sp, #4]
 8011358:	bfd8      	it	le
 801135a:	2501      	movle	r5, #1
 801135c:	441d      	add	r5, r3
 801135e:	f04f 0800 	mov.w	r8, #0
 8011362:	ee18 1a10 	vmov	r1, s16
 8011366:	2201      	movs	r2, #1
 8011368:	4620      	mov	r0, r4
 801136a:	f000 fb31 	bl	80119d0 <__lshift>
 801136e:	4631      	mov	r1, r6
 8011370:	ee08 0a10 	vmov	s16, r0
 8011374:	f000 fb9c 	bl	8011ab0 <__mcmp>
 8011378:	2800      	cmp	r0, #0
 801137a:	dc91      	bgt.n	80112a0 <_dtoa_r+0xaa8>
 801137c:	d102      	bne.n	8011384 <_dtoa_r+0xb8c>
 801137e:	f01a 0f01 	tst.w	sl, #1
 8011382:	d18d      	bne.n	80112a0 <_dtoa_r+0xaa8>
 8011384:	462b      	mov	r3, r5
 8011386:	461d      	mov	r5, r3
 8011388:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801138c:	2a30      	cmp	r2, #48	; 0x30
 801138e:	d0fa      	beq.n	8011386 <_dtoa_r+0xb8e>
 8011390:	e6d7      	b.n	8011142 <_dtoa_r+0x94a>
 8011392:	9a01      	ldr	r2, [sp, #4]
 8011394:	429a      	cmp	r2, r3
 8011396:	d184      	bne.n	80112a2 <_dtoa_r+0xaaa>
 8011398:	9b00      	ldr	r3, [sp, #0]
 801139a:	3301      	adds	r3, #1
 801139c:	9300      	str	r3, [sp, #0]
 801139e:	2331      	movs	r3, #49	; 0x31
 80113a0:	7013      	strb	r3, [r2, #0]
 80113a2:	e6ce      	b.n	8011142 <_dtoa_r+0x94a>
 80113a4:	4b09      	ldr	r3, [pc, #36]	; (80113cc <_dtoa_r+0xbd4>)
 80113a6:	f7ff ba95 	b.w	80108d4 <_dtoa_r+0xdc>
 80113aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	f47f aa6e 	bne.w	801088e <_dtoa_r+0x96>
 80113b2:	4b07      	ldr	r3, [pc, #28]	; (80113d0 <_dtoa_r+0xbd8>)
 80113b4:	f7ff ba8e 	b.w	80108d4 <_dtoa_r+0xdc>
 80113b8:	9b02      	ldr	r3, [sp, #8]
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	dcae      	bgt.n	801131c <_dtoa_r+0xb24>
 80113be:	9b06      	ldr	r3, [sp, #24]
 80113c0:	2b02      	cmp	r3, #2
 80113c2:	f73f aea8 	bgt.w	8011116 <_dtoa_r+0x91e>
 80113c6:	e7a9      	b.n	801131c <_dtoa_r+0xb24>
 80113c8:	0801444b 	.word	0x0801444b
 80113cc:	080143a8 	.word	0x080143a8
 80113d0:	080143cc 	.word	0x080143cc

080113d4 <__sflush_r>:
 80113d4:	898a      	ldrh	r2, [r1, #12]
 80113d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113da:	4605      	mov	r5, r0
 80113dc:	0710      	lsls	r0, r2, #28
 80113de:	460c      	mov	r4, r1
 80113e0:	d458      	bmi.n	8011494 <__sflush_r+0xc0>
 80113e2:	684b      	ldr	r3, [r1, #4]
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	dc05      	bgt.n	80113f4 <__sflush_r+0x20>
 80113e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	dc02      	bgt.n	80113f4 <__sflush_r+0x20>
 80113ee:	2000      	movs	r0, #0
 80113f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80113f6:	2e00      	cmp	r6, #0
 80113f8:	d0f9      	beq.n	80113ee <__sflush_r+0x1a>
 80113fa:	2300      	movs	r3, #0
 80113fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011400:	682f      	ldr	r7, [r5, #0]
 8011402:	602b      	str	r3, [r5, #0]
 8011404:	d032      	beq.n	801146c <__sflush_r+0x98>
 8011406:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011408:	89a3      	ldrh	r3, [r4, #12]
 801140a:	075a      	lsls	r2, r3, #29
 801140c:	d505      	bpl.n	801141a <__sflush_r+0x46>
 801140e:	6863      	ldr	r3, [r4, #4]
 8011410:	1ac0      	subs	r0, r0, r3
 8011412:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011414:	b10b      	cbz	r3, 801141a <__sflush_r+0x46>
 8011416:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011418:	1ac0      	subs	r0, r0, r3
 801141a:	2300      	movs	r3, #0
 801141c:	4602      	mov	r2, r0
 801141e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011420:	6a21      	ldr	r1, [r4, #32]
 8011422:	4628      	mov	r0, r5
 8011424:	47b0      	blx	r6
 8011426:	1c43      	adds	r3, r0, #1
 8011428:	89a3      	ldrh	r3, [r4, #12]
 801142a:	d106      	bne.n	801143a <__sflush_r+0x66>
 801142c:	6829      	ldr	r1, [r5, #0]
 801142e:	291d      	cmp	r1, #29
 8011430:	d82c      	bhi.n	801148c <__sflush_r+0xb8>
 8011432:	4a2a      	ldr	r2, [pc, #168]	; (80114dc <__sflush_r+0x108>)
 8011434:	40ca      	lsrs	r2, r1
 8011436:	07d6      	lsls	r6, r2, #31
 8011438:	d528      	bpl.n	801148c <__sflush_r+0xb8>
 801143a:	2200      	movs	r2, #0
 801143c:	6062      	str	r2, [r4, #4]
 801143e:	04d9      	lsls	r1, r3, #19
 8011440:	6922      	ldr	r2, [r4, #16]
 8011442:	6022      	str	r2, [r4, #0]
 8011444:	d504      	bpl.n	8011450 <__sflush_r+0x7c>
 8011446:	1c42      	adds	r2, r0, #1
 8011448:	d101      	bne.n	801144e <__sflush_r+0x7a>
 801144a:	682b      	ldr	r3, [r5, #0]
 801144c:	b903      	cbnz	r3, 8011450 <__sflush_r+0x7c>
 801144e:	6560      	str	r0, [r4, #84]	; 0x54
 8011450:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011452:	602f      	str	r7, [r5, #0]
 8011454:	2900      	cmp	r1, #0
 8011456:	d0ca      	beq.n	80113ee <__sflush_r+0x1a>
 8011458:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801145c:	4299      	cmp	r1, r3
 801145e:	d002      	beq.n	8011466 <__sflush_r+0x92>
 8011460:	4628      	mov	r0, r5
 8011462:	f000 fc3d 	bl	8011ce0 <_free_r>
 8011466:	2000      	movs	r0, #0
 8011468:	6360      	str	r0, [r4, #52]	; 0x34
 801146a:	e7c1      	b.n	80113f0 <__sflush_r+0x1c>
 801146c:	6a21      	ldr	r1, [r4, #32]
 801146e:	2301      	movs	r3, #1
 8011470:	4628      	mov	r0, r5
 8011472:	47b0      	blx	r6
 8011474:	1c41      	adds	r1, r0, #1
 8011476:	d1c7      	bne.n	8011408 <__sflush_r+0x34>
 8011478:	682b      	ldr	r3, [r5, #0]
 801147a:	2b00      	cmp	r3, #0
 801147c:	d0c4      	beq.n	8011408 <__sflush_r+0x34>
 801147e:	2b1d      	cmp	r3, #29
 8011480:	d001      	beq.n	8011486 <__sflush_r+0xb2>
 8011482:	2b16      	cmp	r3, #22
 8011484:	d101      	bne.n	801148a <__sflush_r+0xb6>
 8011486:	602f      	str	r7, [r5, #0]
 8011488:	e7b1      	b.n	80113ee <__sflush_r+0x1a>
 801148a:	89a3      	ldrh	r3, [r4, #12]
 801148c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011490:	81a3      	strh	r3, [r4, #12]
 8011492:	e7ad      	b.n	80113f0 <__sflush_r+0x1c>
 8011494:	690f      	ldr	r7, [r1, #16]
 8011496:	2f00      	cmp	r7, #0
 8011498:	d0a9      	beq.n	80113ee <__sflush_r+0x1a>
 801149a:	0793      	lsls	r3, r2, #30
 801149c:	680e      	ldr	r6, [r1, #0]
 801149e:	bf08      	it	eq
 80114a0:	694b      	ldreq	r3, [r1, #20]
 80114a2:	600f      	str	r7, [r1, #0]
 80114a4:	bf18      	it	ne
 80114a6:	2300      	movne	r3, #0
 80114a8:	eba6 0807 	sub.w	r8, r6, r7
 80114ac:	608b      	str	r3, [r1, #8]
 80114ae:	f1b8 0f00 	cmp.w	r8, #0
 80114b2:	dd9c      	ble.n	80113ee <__sflush_r+0x1a>
 80114b4:	6a21      	ldr	r1, [r4, #32]
 80114b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80114b8:	4643      	mov	r3, r8
 80114ba:	463a      	mov	r2, r7
 80114bc:	4628      	mov	r0, r5
 80114be:	47b0      	blx	r6
 80114c0:	2800      	cmp	r0, #0
 80114c2:	dc06      	bgt.n	80114d2 <__sflush_r+0xfe>
 80114c4:	89a3      	ldrh	r3, [r4, #12]
 80114c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80114ca:	81a3      	strh	r3, [r4, #12]
 80114cc:	f04f 30ff 	mov.w	r0, #4294967295
 80114d0:	e78e      	b.n	80113f0 <__sflush_r+0x1c>
 80114d2:	4407      	add	r7, r0
 80114d4:	eba8 0800 	sub.w	r8, r8, r0
 80114d8:	e7e9      	b.n	80114ae <__sflush_r+0xda>
 80114da:	bf00      	nop
 80114dc:	20400001 	.word	0x20400001

080114e0 <_fflush_r>:
 80114e0:	b538      	push	{r3, r4, r5, lr}
 80114e2:	690b      	ldr	r3, [r1, #16]
 80114e4:	4605      	mov	r5, r0
 80114e6:	460c      	mov	r4, r1
 80114e8:	b913      	cbnz	r3, 80114f0 <_fflush_r+0x10>
 80114ea:	2500      	movs	r5, #0
 80114ec:	4628      	mov	r0, r5
 80114ee:	bd38      	pop	{r3, r4, r5, pc}
 80114f0:	b118      	cbz	r0, 80114fa <_fflush_r+0x1a>
 80114f2:	6983      	ldr	r3, [r0, #24]
 80114f4:	b90b      	cbnz	r3, 80114fa <_fflush_r+0x1a>
 80114f6:	f7fe fa19 	bl	800f92c <__sinit>
 80114fa:	4b14      	ldr	r3, [pc, #80]	; (801154c <_fflush_r+0x6c>)
 80114fc:	429c      	cmp	r4, r3
 80114fe:	d11b      	bne.n	8011538 <_fflush_r+0x58>
 8011500:	686c      	ldr	r4, [r5, #4]
 8011502:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011506:	2b00      	cmp	r3, #0
 8011508:	d0ef      	beq.n	80114ea <_fflush_r+0xa>
 801150a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801150c:	07d0      	lsls	r0, r2, #31
 801150e:	d404      	bmi.n	801151a <_fflush_r+0x3a>
 8011510:	0599      	lsls	r1, r3, #22
 8011512:	d402      	bmi.n	801151a <_fflush_r+0x3a>
 8011514:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011516:	f7fe facc 	bl	800fab2 <__retarget_lock_acquire_recursive>
 801151a:	4628      	mov	r0, r5
 801151c:	4621      	mov	r1, r4
 801151e:	f7ff ff59 	bl	80113d4 <__sflush_r>
 8011522:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011524:	07da      	lsls	r2, r3, #31
 8011526:	4605      	mov	r5, r0
 8011528:	d4e0      	bmi.n	80114ec <_fflush_r+0xc>
 801152a:	89a3      	ldrh	r3, [r4, #12]
 801152c:	059b      	lsls	r3, r3, #22
 801152e:	d4dd      	bmi.n	80114ec <_fflush_r+0xc>
 8011530:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011532:	f7fe fabf 	bl	800fab4 <__retarget_lock_release_recursive>
 8011536:	e7d9      	b.n	80114ec <_fflush_r+0xc>
 8011538:	4b05      	ldr	r3, [pc, #20]	; (8011550 <_fflush_r+0x70>)
 801153a:	429c      	cmp	r4, r3
 801153c:	d101      	bne.n	8011542 <_fflush_r+0x62>
 801153e:	68ac      	ldr	r4, [r5, #8]
 8011540:	e7df      	b.n	8011502 <_fflush_r+0x22>
 8011542:	4b04      	ldr	r3, [pc, #16]	; (8011554 <_fflush_r+0x74>)
 8011544:	429c      	cmp	r4, r3
 8011546:	bf08      	it	eq
 8011548:	68ec      	ldreq	r4, [r5, #12]
 801154a:	e7da      	b.n	8011502 <_fflush_r+0x22>
 801154c:	08014354 	.word	0x08014354
 8011550:	08014374 	.word	0x08014374
 8011554:	08014334 	.word	0x08014334

08011558 <_localeconv_r>:
 8011558:	4800      	ldr	r0, [pc, #0]	; (801155c <_localeconv_r+0x4>)
 801155a:	4770      	bx	lr
 801155c:	200002d0 	.word	0x200002d0

08011560 <_lseek_r>:
 8011560:	b538      	push	{r3, r4, r5, lr}
 8011562:	4d07      	ldr	r5, [pc, #28]	; (8011580 <_lseek_r+0x20>)
 8011564:	4604      	mov	r4, r0
 8011566:	4608      	mov	r0, r1
 8011568:	4611      	mov	r1, r2
 801156a:	2200      	movs	r2, #0
 801156c:	602a      	str	r2, [r5, #0]
 801156e:	461a      	mov	r2, r3
 8011570:	f7f0 fca6 	bl	8001ec0 <_lseek>
 8011574:	1c43      	adds	r3, r0, #1
 8011576:	d102      	bne.n	801157e <_lseek_r+0x1e>
 8011578:	682b      	ldr	r3, [r5, #0]
 801157a:	b103      	cbz	r3, 801157e <_lseek_r+0x1e>
 801157c:	6023      	str	r3, [r4, #0]
 801157e:	bd38      	pop	{r3, r4, r5, pc}
 8011580:	20006294 	.word	0x20006294

08011584 <malloc>:
 8011584:	4b02      	ldr	r3, [pc, #8]	; (8011590 <malloc+0xc>)
 8011586:	4601      	mov	r1, r0
 8011588:	6818      	ldr	r0, [r3, #0]
 801158a:	f7fe bacb 	b.w	800fb24 <_malloc_r>
 801158e:	bf00      	nop
 8011590:	2000017c 	.word	0x2000017c

08011594 <__malloc_lock>:
 8011594:	4801      	ldr	r0, [pc, #4]	; (801159c <__malloc_lock+0x8>)
 8011596:	f7fe ba8c 	b.w	800fab2 <__retarget_lock_acquire_recursive>
 801159a:	bf00      	nop
 801159c:	20006288 	.word	0x20006288

080115a0 <__malloc_unlock>:
 80115a0:	4801      	ldr	r0, [pc, #4]	; (80115a8 <__malloc_unlock+0x8>)
 80115a2:	f7fe ba87 	b.w	800fab4 <__retarget_lock_release_recursive>
 80115a6:	bf00      	nop
 80115a8:	20006288 	.word	0x20006288

080115ac <_Balloc>:
 80115ac:	b570      	push	{r4, r5, r6, lr}
 80115ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80115b0:	4604      	mov	r4, r0
 80115b2:	460d      	mov	r5, r1
 80115b4:	b976      	cbnz	r6, 80115d4 <_Balloc+0x28>
 80115b6:	2010      	movs	r0, #16
 80115b8:	f7ff ffe4 	bl	8011584 <malloc>
 80115bc:	4602      	mov	r2, r0
 80115be:	6260      	str	r0, [r4, #36]	; 0x24
 80115c0:	b920      	cbnz	r0, 80115cc <_Balloc+0x20>
 80115c2:	4b18      	ldr	r3, [pc, #96]	; (8011624 <_Balloc+0x78>)
 80115c4:	4818      	ldr	r0, [pc, #96]	; (8011628 <_Balloc+0x7c>)
 80115c6:	2166      	movs	r1, #102	; 0x66
 80115c8:	f000 fd44 	bl	8012054 <__assert_func>
 80115cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80115d0:	6006      	str	r6, [r0, #0]
 80115d2:	60c6      	str	r6, [r0, #12]
 80115d4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80115d6:	68f3      	ldr	r3, [r6, #12]
 80115d8:	b183      	cbz	r3, 80115fc <_Balloc+0x50>
 80115da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80115dc:	68db      	ldr	r3, [r3, #12]
 80115de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80115e2:	b9b8      	cbnz	r0, 8011614 <_Balloc+0x68>
 80115e4:	2101      	movs	r1, #1
 80115e6:	fa01 f605 	lsl.w	r6, r1, r5
 80115ea:	1d72      	adds	r2, r6, #5
 80115ec:	0092      	lsls	r2, r2, #2
 80115ee:	4620      	mov	r0, r4
 80115f0:	f000 fb60 	bl	8011cb4 <_calloc_r>
 80115f4:	b160      	cbz	r0, 8011610 <_Balloc+0x64>
 80115f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80115fa:	e00e      	b.n	801161a <_Balloc+0x6e>
 80115fc:	2221      	movs	r2, #33	; 0x21
 80115fe:	2104      	movs	r1, #4
 8011600:	4620      	mov	r0, r4
 8011602:	f000 fb57 	bl	8011cb4 <_calloc_r>
 8011606:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011608:	60f0      	str	r0, [r6, #12]
 801160a:	68db      	ldr	r3, [r3, #12]
 801160c:	2b00      	cmp	r3, #0
 801160e:	d1e4      	bne.n	80115da <_Balloc+0x2e>
 8011610:	2000      	movs	r0, #0
 8011612:	bd70      	pop	{r4, r5, r6, pc}
 8011614:	6802      	ldr	r2, [r0, #0]
 8011616:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801161a:	2300      	movs	r3, #0
 801161c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011620:	e7f7      	b.n	8011612 <_Balloc+0x66>
 8011622:	bf00      	nop
 8011624:	080143d9 	.word	0x080143d9
 8011628:	0801445c 	.word	0x0801445c

0801162c <_Bfree>:
 801162c:	b570      	push	{r4, r5, r6, lr}
 801162e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011630:	4605      	mov	r5, r0
 8011632:	460c      	mov	r4, r1
 8011634:	b976      	cbnz	r6, 8011654 <_Bfree+0x28>
 8011636:	2010      	movs	r0, #16
 8011638:	f7ff ffa4 	bl	8011584 <malloc>
 801163c:	4602      	mov	r2, r0
 801163e:	6268      	str	r0, [r5, #36]	; 0x24
 8011640:	b920      	cbnz	r0, 801164c <_Bfree+0x20>
 8011642:	4b09      	ldr	r3, [pc, #36]	; (8011668 <_Bfree+0x3c>)
 8011644:	4809      	ldr	r0, [pc, #36]	; (801166c <_Bfree+0x40>)
 8011646:	218a      	movs	r1, #138	; 0x8a
 8011648:	f000 fd04 	bl	8012054 <__assert_func>
 801164c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011650:	6006      	str	r6, [r0, #0]
 8011652:	60c6      	str	r6, [r0, #12]
 8011654:	b13c      	cbz	r4, 8011666 <_Bfree+0x3a>
 8011656:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011658:	6862      	ldr	r2, [r4, #4]
 801165a:	68db      	ldr	r3, [r3, #12]
 801165c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011660:	6021      	str	r1, [r4, #0]
 8011662:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011666:	bd70      	pop	{r4, r5, r6, pc}
 8011668:	080143d9 	.word	0x080143d9
 801166c:	0801445c 	.word	0x0801445c

08011670 <__multadd>:
 8011670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011674:	690d      	ldr	r5, [r1, #16]
 8011676:	4607      	mov	r7, r0
 8011678:	460c      	mov	r4, r1
 801167a:	461e      	mov	r6, r3
 801167c:	f101 0c14 	add.w	ip, r1, #20
 8011680:	2000      	movs	r0, #0
 8011682:	f8dc 3000 	ldr.w	r3, [ip]
 8011686:	b299      	uxth	r1, r3
 8011688:	fb02 6101 	mla	r1, r2, r1, r6
 801168c:	0c1e      	lsrs	r6, r3, #16
 801168e:	0c0b      	lsrs	r3, r1, #16
 8011690:	fb02 3306 	mla	r3, r2, r6, r3
 8011694:	b289      	uxth	r1, r1
 8011696:	3001      	adds	r0, #1
 8011698:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801169c:	4285      	cmp	r5, r0
 801169e:	f84c 1b04 	str.w	r1, [ip], #4
 80116a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80116a6:	dcec      	bgt.n	8011682 <__multadd+0x12>
 80116a8:	b30e      	cbz	r6, 80116ee <__multadd+0x7e>
 80116aa:	68a3      	ldr	r3, [r4, #8]
 80116ac:	42ab      	cmp	r3, r5
 80116ae:	dc19      	bgt.n	80116e4 <__multadd+0x74>
 80116b0:	6861      	ldr	r1, [r4, #4]
 80116b2:	4638      	mov	r0, r7
 80116b4:	3101      	adds	r1, #1
 80116b6:	f7ff ff79 	bl	80115ac <_Balloc>
 80116ba:	4680      	mov	r8, r0
 80116bc:	b928      	cbnz	r0, 80116ca <__multadd+0x5a>
 80116be:	4602      	mov	r2, r0
 80116c0:	4b0c      	ldr	r3, [pc, #48]	; (80116f4 <__multadd+0x84>)
 80116c2:	480d      	ldr	r0, [pc, #52]	; (80116f8 <__multadd+0x88>)
 80116c4:	21b5      	movs	r1, #181	; 0xb5
 80116c6:	f000 fcc5 	bl	8012054 <__assert_func>
 80116ca:	6922      	ldr	r2, [r4, #16]
 80116cc:	3202      	adds	r2, #2
 80116ce:	f104 010c 	add.w	r1, r4, #12
 80116d2:	0092      	lsls	r2, r2, #2
 80116d4:	300c      	adds	r0, #12
 80116d6:	f7fe f9ee 	bl	800fab6 <memcpy>
 80116da:	4621      	mov	r1, r4
 80116dc:	4638      	mov	r0, r7
 80116de:	f7ff ffa5 	bl	801162c <_Bfree>
 80116e2:	4644      	mov	r4, r8
 80116e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80116e8:	3501      	adds	r5, #1
 80116ea:	615e      	str	r6, [r3, #20]
 80116ec:	6125      	str	r5, [r4, #16]
 80116ee:	4620      	mov	r0, r4
 80116f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116f4:	0801444b 	.word	0x0801444b
 80116f8:	0801445c 	.word	0x0801445c

080116fc <__hi0bits>:
 80116fc:	0c03      	lsrs	r3, r0, #16
 80116fe:	041b      	lsls	r3, r3, #16
 8011700:	b9d3      	cbnz	r3, 8011738 <__hi0bits+0x3c>
 8011702:	0400      	lsls	r0, r0, #16
 8011704:	2310      	movs	r3, #16
 8011706:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801170a:	bf04      	itt	eq
 801170c:	0200      	lsleq	r0, r0, #8
 801170e:	3308      	addeq	r3, #8
 8011710:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011714:	bf04      	itt	eq
 8011716:	0100      	lsleq	r0, r0, #4
 8011718:	3304      	addeq	r3, #4
 801171a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801171e:	bf04      	itt	eq
 8011720:	0080      	lsleq	r0, r0, #2
 8011722:	3302      	addeq	r3, #2
 8011724:	2800      	cmp	r0, #0
 8011726:	db05      	blt.n	8011734 <__hi0bits+0x38>
 8011728:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801172c:	f103 0301 	add.w	r3, r3, #1
 8011730:	bf08      	it	eq
 8011732:	2320      	moveq	r3, #32
 8011734:	4618      	mov	r0, r3
 8011736:	4770      	bx	lr
 8011738:	2300      	movs	r3, #0
 801173a:	e7e4      	b.n	8011706 <__hi0bits+0xa>

0801173c <__lo0bits>:
 801173c:	6803      	ldr	r3, [r0, #0]
 801173e:	f013 0207 	ands.w	r2, r3, #7
 8011742:	4601      	mov	r1, r0
 8011744:	d00b      	beq.n	801175e <__lo0bits+0x22>
 8011746:	07da      	lsls	r2, r3, #31
 8011748:	d423      	bmi.n	8011792 <__lo0bits+0x56>
 801174a:	0798      	lsls	r0, r3, #30
 801174c:	bf49      	itett	mi
 801174e:	085b      	lsrmi	r3, r3, #1
 8011750:	089b      	lsrpl	r3, r3, #2
 8011752:	2001      	movmi	r0, #1
 8011754:	600b      	strmi	r3, [r1, #0]
 8011756:	bf5c      	itt	pl
 8011758:	600b      	strpl	r3, [r1, #0]
 801175a:	2002      	movpl	r0, #2
 801175c:	4770      	bx	lr
 801175e:	b298      	uxth	r0, r3
 8011760:	b9a8      	cbnz	r0, 801178e <__lo0bits+0x52>
 8011762:	0c1b      	lsrs	r3, r3, #16
 8011764:	2010      	movs	r0, #16
 8011766:	b2da      	uxtb	r2, r3
 8011768:	b90a      	cbnz	r2, 801176e <__lo0bits+0x32>
 801176a:	3008      	adds	r0, #8
 801176c:	0a1b      	lsrs	r3, r3, #8
 801176e:	071a      	lsls	r2, r3, #28
 8011770:	bf04      	itt	eq
 8011772:	091b      	lsreq	r3, r3, #4
 8011774:	3004      	addeq	r0, #4
 8011776:	079a      	lsls	r2, r3, #30
 8011778:	bf04      	itt	eq
 801177a:	089b      	lsreq	r3, r3, #2
 801177c:	3002      	addeq	r0, #2
 801177e:	07da      	lsls	r2, r3, #31
 8011780:	d403      	bmi.n	801178a <__lo0bits+0x4e>
 8011782:	085b      	lsrs	r3, r3, #1
 8011784:	f100 0001 	add.w	r0, r0, #1
 8011788:	d005      	beq.n	8011796 <__lo0bits+0x5a>
 801178a:	600b      	str	r3, [r1, #0]
 801178c:	4770      	bx	lr
 801178e:	4610      	mov	r0, r2
 8011790:	e7e9      	b.n	8011766 <__lo0bits+0x2a>
 8011792:	2000      	movs	r0, #0
 8011794:	4770      	bx	lr
 8011796:	2020      	movs	r0, #32
 8011798:	4770      	bx	lr
	...

0801179c <__i2b>:
 801179c:	b510      	push	{r4, lr}
 801179e:	460c      	mov	r4, r1
 80117a0:	2101      	movs	r1, #1
 80117a2:	f7ff ff03 	bl	80115ac <_Balloc>
 80117a6:	4602      	mov	r2, r0
 80117a8:	b928      	cbnz	r0, 80117b6 <__i2b+0x1a>
 80117aa:	4b05      	ldr	r3, [pc, #20]	; (80117c0 <__i2b+0x24>)
 80117ac:	4805      	ldr	r0, [pc, #20]	; (80117c4 <__i2b+0x28>)
 80117ae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80117b2:	f000 fc4f 	bl	8012054 <__assert_func>
 80117b6:	2301      	movs	r3, #1
 80117b8:	6144      	str	r4, [r0, #20]
 80117ba:	6103      	str	r3, [r0, #16]
 80117bc:	bd10      	pop	{r4, pc}
 80117be:	bf00      	nop
 80117c0:	0801444b 	.word	0x0801444b
 80117c4:	0801445c 	.word	0x0801445c

080117c8 <__multiply>:
 80117c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117cc:	4691      	mov	r9, r2
 80117ce:	690a      	ldr	r2, [r1, #16]
 80117d0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80117d4:	429a      	cmp	r2, r3
 80117d6:	bfb8      	it	lt
 80117d8:	460b      	movlt	r3, r1
 80117da:	460c      	mov	r4, r1
 80117dc:	bfbc      	itt	lt
 80117de:	464c      	movlt	r4, r9
 80117e0:	4699      	movlt	r9, r3
 80117e2:	6927      	ldr	r7, [r4, #16]
 80117e4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80117e8:	68a3      	ldr	r3, [r4, #8]
 80117ea:	6861      	ldr	r1, [r4, #4]
 80117ec:	eb07 060a 	add.w	r6, r7, sl
 80117f0:	42b3      	cmp	r3, r6
 80117f2:	b085      	sub	sp, #20
 80117f4:	bfb8      	it	lt
 80117f6:	3101      	addlt	r1, #1
 80117f8:	f7ff fed8 	bl	80115ac <_Balloc>
 80117fc:	b930      	cbnz	r0, 801180c <__multiply+0x44>
 80117fe:	4602      	mov	r2, r0
 8011800:	4b44      	ldr	r3, [pc, #272]	; (8011914 <__multiply+0x14c>)
 8011802:	4845      	ldr	r0, [pc, #276]	; (8011918 <__multiply+0x150>)
 8011804:	f240 115d 	movw	r1, #349	; 0x15d
 8011808:	f000 fc24 	bl	8012054 <__assert_func>
 801180c:	f100 0514 	add.w	r5, r0, #20
 8011810:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011814:	462b      	mov	r3, r5
 8011816:	2200      	movs	r2, #0
 8011818:	4543      	cmp	r3, r8
 801181a:	d321      	bcc.n	8011860 <__multiply+0x98>
 801181c:	f104 0314 	add.w	r3, r4, #20
 8011820:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011824:	f109 0314 	add.w	r3, r9, #20
 8011828:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801182c:	9202      	str	r2, [sp, #8]
 801182e:	1b3a      	subs	r2, r7, r4
 8011830:	3a15      	subs	r2, #21
 8011832:	f022 0203 	bic.w	r2, r2, #3
 8011836:	3204      	adds	r2, #4
 8011838:	f104 0115 	add.w	r1, r4, #21
 801183c:	428f      	cmp	r7, r1
 801183e:	bf38      	it	cc
 8011840:	2204      	movcc	r2, #4
 8011842:	9201      	str	r2, [sp, #4]
 8011844:	9a02      	ldr	r2, [sp, #8]
 8011846:	9303      	str	r3, [sp, #12]
 8011848:	429a      	cmp	r2, r3
 801184a:	d80c      	bhi.n	8011866 <__multiply+0x9e>
 801184c:	2e00      	cmp	r6, #0
 801184e:	dd03      	ble.n	8011858 <__multiply+0x90>
 8011850:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011854:	2b00      	cmp	r3, #0
 8011856:	d05a      	beq.n	801190e <__multiply+0x146>
 8011858:	6106      	str	r6, [r0, #16]
 801185a:	b005      	add	sp, #20
 801185c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011860:	f843 2b04 	str.w	r2, [r3], #4
 8011864:	e7d8      	b.n	8011818 <__multiply+0x50>
 8011866:	f8b3 a000 	ldrh.w	sl, [r3]
 801186a:	f1ba 0f00 	cmp.w	sl, #0
 801186e:	d024      	beq.n	80118ba <__multiply+0xf2>
 8011870:	f104 0e14 	add.w	lr, r4, #20
 8011874:	46a9      	mov	r9, r5
 8011876:	f04f 0c00 	mov.w	ip, #0
 801187a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801187e:	f8d9 1000 	ldr.w	r1, [r9]
 8011882:	fa1f fb82 	uxth.w	fp, r2
 8011886:	b289      	uxth	r1, r1
 8011888:	fb0a 110b 	mla	r1, sl, fp, r1
 801188c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8011890:	f8d9 2000 	ldr.w	r2, [r9]
 8011894:	4461      	add	r1, ip
 8011896:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801189a:	fb0a c20b 	mla	r2, sl, fp, ip
 801189e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80118a2:	b289      	uxth	r1, r1
 80118a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80118a8:	4577      	cmp	r7, lr
 80118aa:	f849 1b04 	str.w	r1, [r9], #4
 80118ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80118b2:	d8e2      	bhi.n	801187a <__multiply+0xb2>
 80118b4:	9a01      	ldr	r2, [sp, #4]
 80118b6:	f845 c002 	str.w	ip, [r5, r2]
 80118ba:	9a03      	ldr	r2, [sp, #12]
 80118bc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80118c0:	3304      	adds	r3, #4
 80118c2:	f1b9 0f00 	cmp.w	r9, #0
 80118c6:	d020      	beq.n	801190a <__multiply+0x142>
 80118c8:	6829      	ldr	r1, [r5, #0]
 80118ca:	f104 0c14 	add.w	ip, r4, #20
 80118ce:	46ae      	mov	lr, r5
 80118d0:	f04f 0a00 	mov.w	sl, #0
 80118d4:	f8bc b000 	ldrh.w	fp, [ip]
 80118d8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80118dc:	fb09 220b 	mla	r2, r9, fp, r2
 80118e0:	4492      	add	sl, r2
 80118e2:	b289      	uxth	r1, r1
 80118e4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80118e8:	f84e 1b04 	str.w	r1, [lr], #4
 80118ec:	f85c 2b04 	ldr.w	r2, [ip], #4
 80118f0:	f8be 1000 	ldrh.w	r1, [lr]
 80118f4:	0c12      	lsrs	r2, r2, #16
 80118f6:	fb09 1102 	mla	r1, r9, r2, r1
 80118fa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80118fe:	4567      	cmp	r7, ip
 8011900:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011904:	d8e6      	bhi.n	80118d4 <__multiply+0x10c>
 8011906:	9a01      	ldr	r2, [sp, #4]
 8011908:	50a9      	str	r1, [r5, r2]
 801190a:	3504      	adds	r5, #4
 801190c:	e79a      	b.n	8011844 <__multiply+0x7c>
 801190e:	3e01      	subs	r6, #1
 8011910:	e79c      	b.n	801184c <__multiply+0x84>
 8011912:	bf00      	nop
 8011914:	0801444b 	.word	0x0801444b
 8011918:	0801445c 	.word	0x0801445c

0801191c <__pow5mult>:
 801191c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011920:	4615      	mov	r5, r2
 8011922:	f012 0203 	ands.w	r2, r2, #3
 8011926:	4606      	mov	r6, r0
 8011928:	460f      	mov	r7, r1
 801192a:	d007      	beq.n	801193c <__pow5mult+0x20>
 801192c:	4c25      	ldr	r4, [pc, #148]	; (80119c4 <__pow5mult+0xa8>)
 801192e:	3a01      	subs	r2, #1
 8011930:	2300      	movs	r3, #0
 8011932:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011936:	f7ff fe9b 	bl	8011670 <__multadd>
 801193a:	4607      	mov	r7, r0
 801193c:	10ad      	asrs	r5, r5, #2
 801193e:	d03d      	beq.n	80119bc <__pow5mult+0xa0>
 8011940:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011942:	b97c      	cbnz	r4, 8011964 <__pow5mult+0x48>
 8011944:	2010      	movs	r0, #16
 8011946:	f7ff fe1d 	bl	8011584 <malloc>
 801194a:	4602      	mov	r2, r0
 801194c:	6270      	str	r0, [r6, #36]	; 0x24
 801194e:	b928      	cbnz	r0, 801195c <__pow5mult+0x40>
 8011950:	4b1d      	ldr	r3, [pc, #116]	; (80119c8 <__pow5mult+0xac>)
 8011952:	481e      	ldr	r0, [pc, #120]	; (80119cc <__pow5mult+0xb0>)
 8011954:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011958:	f000 fb7c 	bl	8012054 <__assert_func>
 801195c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011960:	6004      	str	r4, [r0, #0]
 8011962:	60c4      	str	r4, [r0, #12]
 8011964:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011968:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801196c:	b94c      	cbnz	r4, 8011982 <__pow5mult+0x66>
 801196e:	f240 2171 	movw	r1, #625	; 0x271
 8011972:	4630      	mov	r0, r6
 8011974:	f7ff ff12 	bl	801179c <__i2b>
 8011978:	2300      	movs	r3, #0
 801197a:	f8c8 0008 	str.w	r0, [r8, #8]
 801197e:	4604      	mov	r4, r0
 8011980:	6003      	str	r3, [r0, #0]
 8011982:	f04f 0900 	mov.w	r9, #0
 8011986:	07eb      	lsls	r3, r5, #31
 8011988:	d50a      	bpl.n	80119a0 <__pow5mult+0x84>
 801198a:	4639      	mov	r1, r7
 801198c:	4622      	mov	r2, r4
 801198e:	4630      	mov	r0, r6
 8011990:	f7ff ff1a 	bl	80117c8 <__multiply>
 8011994:	4639      	mov	r1, r7
 8011996:	4680      	mov	r8, r0
 8011998:	4630      	mov	r0, r6
 801199a:	f7ff fe47 	bl	801162c <_Bfree>
 801199e:	4647      	mov	r7, r8
 80119a0:	106d      	asrs	r5, r5, #1
 80119a2:	d00b      	beq.n	80119bc <__pow5mult+0xa0>
 80119a4:	6820      	ldr	r0, [r4, #0]
 80119a6:	b938      	cbnz	r0, 80119b8 <__pow5mult+0x9c>
 80119a8:	4622      	mov	r2, r4
 80119aa:	4621      	mov	r1, r4
 80119ac:	4630      	mov	r0, r6
 80119ae:	f7ff ff0b 	bl	80117c8 <__multiply>
 80119b2:	6020      	str	r0, [r4, #0]
 80119b4:	f8c0 9000 	str.w	r9, [r0]
 80119b8:	4604      	mov	r4, r0
 80119ba:	e7e4      	b.n	8011986 <__pow5mult+0x6a>
 80119bc:	4638      	mov	r0, r7
 80119be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80119c2:	bf00      	nop
 80119c4:	080145a8 	.word	0x080145a8
 80119c8:	080143d9 	.word	0x080143d9
 80119cc:	0801445c 	.word	0x0801445c

080119d0 <__lshift>:
 80119d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80119d4:	460c      	mov	r4, r1
 80119d6:	6849      	ldr	r1, [r1, #4]
 80119d8:	6923      	ldr	r3, [r4, #16]
 80119da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80119de:	68a3      	ldr	r3, [r4, #8]
 80119e0:	4607      	mov	r7, r0
 80119e2:	4691      	mov	r9, r2
 80119e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80119e8:	f108 0601 	add.w	r6, r8, #1
 80119ec:	42b3      	cmp	r3, r6
 80119ee:	db0b      	blt.n	8011a08 <__lshift+0x38>
 80119f0:	4638      	mov	r0, r7
 80119f2:	f7ff fddb 	bl	80115ac <_Balloc>
 80119f6:	4605      	mov	r5, r0
 80119f8:	b948      	cbnz	r0, 8011a0e <__lshift+0x3e>
 80119fa:	4602      	mov	r2, r0
 80119fc:	4b2a      	ldr	r3, [pc, #168]	; (8011aa8 <__lshift+0xd8>)
 80119fe:	482b      	ldr	r0, [pc, #172]	; (8011aac <__lshift+0xdc>)
 8011a00:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011a04:	f000 fb26 	bl	8012054 <__assert_func>
 8011a08:	3101      	adds	r1, #1
 8011a0a:	005b      	lsls	r3, r3, #1
 8011a0c:	e7ee      	b.n	80119ec <__lshift+0x1c>
 8011a0e:	2300      	movs	r3, #0
 8011a10:	f100 0114 	add.w	r1, r0, #20
 8011a14:	f100 0210 	add.w	r2, r0, #16
 8011a18:	4618      	mov	r0, r3
 8011a1a:	4553      	cmp	r3, sl
 8011a1c:	db37      	blt.n	8011a8e <__lshift+0xbe>
 8011a1e:	6920      	ldr	r0, [r4, #16]
 8011a20:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011a24:	f104 0314 	add.w	r3, r4, #20
 8011a28:	f019 091f 	ands.w	r9, r9, #31
 8011a2c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011a30:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8011a34:	d02f      	beq.n	8011a96 <__lshift+0xc6>
 8011a36:	f1c9 0e20 	rsb	lr, r9, #32
 8011a3a:	468a      	mov	sl, r1
 8011a3c:	f04f 0c00 	mov.w	ip, #0
 8011a40:	681a      	ldr	r2, [r3, #0]
 8011a42:	fa02 f209 	lsl.w	r2, r2, r9
 8011a46:	ea42 020c 	orr.w	r2, r2, ip
 8011a4a:	f84a 2b04 	str.w	r2, [sl], #4
 8011a4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a52:	4298      	cmp	r0, r3
 8011a54:	fa22 fc0e 	lsr.w	ip, r2, lr
 8011a58:	d8f2      	bhi.n	8011a40 <__lshift+0x70>
 8011a5a:	1b03      	subs	r3, r0, r4
 8011a5c:	3b15      	subs	r3, #21
 8011a5e:	f023 0303 	bic.w	r3, r3, #3
 8011a62:	3304      	adds	r3, #4
 8011a64:	f104 0215 	add.w	r2, r4, #21
 8011a68:	4290      	cmp	r0, r2
 8011a6a:	bf38      	it	cc
 8011a6c:	2304      	movcc	r3, #4
 8011a6e:	f841 c003 	str.w	ip, [r1, r3]
 8011a72:	f1bc 0f00 	cmp.w	ip, #0
 8011a76:	d001      	beq.n	8011a7c <__lshift+0xac>
 8011a78:	f108 0602 	add.w	r6, r8, #2
 8011a7c:	3e01      	subs	r6, #1
 8011a7e:	4638      	mov	r0, r7
 8011a80:	612e      	str	r6, [r5, #16]
 8011a82:	4621      	mov	r1, r4
 8011a84:	f7ff fdd2 	bl	801162c <_Bfree>
 8011a88:	4628      	mov	r0, r5
 8011a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a8e:	f842 0f04 	str.w	r0, [r2, #4]!
 8011a92:	3301      	adds	r3, #1
 8011a94:	e7c1      	b.n	8011a1a <__lshift+0x4a>
 8011a96:	3904      	subs	r1, #4
 8011a98:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a9c:	f841 2f04 	str.w	r2, [r1, #4]!
 8011aa0:	4298      	cmp	r0, r3
 8011aa2:	d8f9      	bhi.n	8011a98 <__lshift+0xc8>
 8011aa4:	e7ea      	b.n	8011a7c <__lshift+0xac>
 8011aa6:	bf00      	nop
 8011aa8:	0801444b 	.word	0x0801444b
 8011aac:	0801445c 	.word	0x0801445c

08011ab0 <__mcmp>:
 8011ab0:	b530      	push	{r4, r5, lr}
 8011ab2:	6902      	ldr	r2, [r0, #16]
 8011ab4:	690c      	ldr	r4, [r1, #16]
 8011ab6:	1b12      	subs	r2, r2, r4
 8011ab8:	d10e      	bne.n	8011ad8 <__mcmp+0x28>
 8011aba:	f100 0314 	add.w	r3, r0, #20
 8011abe:	3114      	adds	r1, #20
 8011ac0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011ac4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011ac8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011acc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011ad0:	42a5      	cmp	r5, r4
 8011ad2:	d003      	beq.n	8011adc <__mcmp+0x2c>
 8011ad4:	d305      	bcc.n	8011ae2 <__mcmp+0x32>
 8011ad6:	2201      	movs	r2, #1
 8011ad8:	4610      	mov	r0, r2
 8011ada:	bd30      	pop	{r4, r5, pc}
 8011adc:	4283      	cmp	r3, r0
 8011ade:	d3f3      	bcc.n	8011ac8 <__mcmp+0x18>
 8011ae0:	e7fa      	b.n	8011ad8 <__mcmp+0x28>
 8011ae2:	f04f 32ff 	mov.w	r2, #4294967295
 8011ae6:	e7f7      	b.n	8011ad8 <__mcmp+0x28>

08011ae8 <__mdiff>:
 8011ae8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011aec:	460c      	mov	r4, r1
 8011aee:	4606      	mov	r6, r0
 8011af0:	4611      	mov	r1, r2
 8011af2:	4620      	mov	r0, r4
 8011af4:	4690      	mov	r8, r2
 8011af6:	f7ff ffdb 	bl	8011ab0 <__mcmp>
 8011afa:	1e05      	subs	r5, r0, #0
 8011afc:	d110      	bne.n	8011b20 <__mdiff+0x38>
 8011afe:	4629      	mov	r1, r5
 8011b00:	4630      	mov	r0, r6
 8011b02:	f7ff fd53 	bl	80115ac <_Balloc>
 8011b06:	b930      	cbnz	r0, 8011b16 <__mdiff+0x2e>
 8011b08:	4b3a      	ldr	r3, [pc, #232]	; (8011bf4 <__mdiff+0x10c>)
 8011b0a:	4602      	mov	r2, r0
 8011b0c:	f240 2132 	movw	r1, #562	; 0x232
 8011b10:	4839      	ldr	r0, [pc, #228]	; (8011bf8 <__mdiff+0x110>)
 8011b12:	f000 fa9f 	bl	8012054 <__assert_func>
 8011b16:	2301      	movs	r3, #1
 8011b18:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011b1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b20:	bfa4      	itt	ge
 8011b22:	4643      	movge	r3, r8
 8011b24:	46a0      	movge	r8, r4
 8011b26:	4630      	mov	r0, r6
 8011b28:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011b2c:	bfa6      	itte	ge
 8011b2e:	461c      	movge	r4, r3
 8011b30:	2500      	movge	r5, #0
 8011b32:	2501      	movlt	r5, #1
 8011b34:	f7ff fd3a 	bl	80115ac <_Balloc>
 8011b38:	b920      	cbnz	r0, 8011b44 <__mdiff+0x5c>
 8011b3a:	4b2e      	ldr	r3, [pc, #184]	; (8011bf4 <__mdiff+0x10c>)
 8011b3c:	4602      	mov	r2, r0
 8011b3e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011b42:	e7e5      	b.n	8011b10 <__mdiff+0x28>
 8011b44:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011b48:	6926      	ldr	r6, [r4, #16]
 8011b4a:	60c5      	str	r5, [r0, #12]
 8011b4c:	f104 0914 	add.w	r9, r4, #20
 8011b50:	f108 0514 	add.w	r5, r8, #20
 8011b54:	f100 0e14 	add.w	lr, r0, #20
 8011b58:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011b5c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011b60:	f108 0210 	add.w	r2, r8, #16
 8011b64:	46f2      	mov	sl, lr
 8011b66:	2100      	movs	r1, #0
 8011b68:	f859 3b04 	ldr.w	r3, [r9], #4
 8011b6c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011b70:	fa1f f883 	uxth.w	r8, r3
 8011b74:	fa11 f18b 	uxtah	r1, r1, fp
 8011b78:	0c1b      	lsrs	r3, r3, #16
 8011b7a:	eba1 0808 	sub.w	r8, r1, r8
 8011b7e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011b82:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011b86:	fa1f f888 	uxth.w	r8, r8
 8011b8a:	1419      	asrs	r1, r3, #16
 8011b8c:	454e      	cmp	r6, r9
 8011b8e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011b92:	f84a 3b04 	str.w	r3, [sl], #4
 8011b96:	d8e7      	bhi.n	8011b68 <__mdiff+0x80>
 8011b98:	1b33      	subs	r3, r6, r4
 8011b9a:	3b15      	subs	r3, #21
 8011b9c:	f023 0303 	bic.w	r3, r3, #3
 8011ba0:	3304      	adds	r3, #4
 8011ba2:	3415      	adds	r4, #21
 8011ba4:	42a6      	cmp	r6, r4
 8011ba6:	bf38      	it	cc
 8011ba8:	2304      	movcc	r3, #4
 8011baa:	441d      	add	r5, r3
 8011bac:	4473      	add	r3, lr
 8011bae:	469e      	mov	lr, r3
 8011bb0:	462e      	mov	r6, r5
 8011bb2:	4566      	cmp	r6, ip
 8011bb4:	d30e      	bcc.n	8011bd4 <__mdiff+0xec>
 8011bb6:	f10c 0203 	add.w	r2, ip, #3
 8011bba:	1b52      	subs	r2, r2, r5
 8011bbc:	f022 0203 	bic.w	r2, r2, #3
 8011bc0:	3d03      	subs	r5, #3
 8011bc2:	45ac      	cmp	ip, r5
 8011bc4:	bf38      	it	cc
 8011bc6:	2200      	movcc	r2, #0
 8011bc8:	441a      	add	r2, r3
 8011bca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011bce:	b17b      	cbz	r3, 8011bf0 <__mdiff+0x108>
 8011bd0:	6107      	str	r7, [r0, #16]
 8011bd2:	e7a3      	b.n	8011b1c <__mdiff+0x34>
 8011bd4:	f856 8b04 	ldr.w	r8, [r6], #4
 8011bd8:	fa11 f288 	uxtah	r2, r1, r8
 8011bdc:	1414      	asrs	r4, r2, #16
 8011bde:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011be2:	b292      	uxth	r2, r2
 8011be4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011be8:	f84e 2b04 	str.w	r2, [lr], #4
 8011bec:	1421      	asrs	r1, r4, #16
 8011bee:	e7e0      	b.n	8011bb2 <__mdiff+0xca>
 8011bf0:	3f01      	subs	r7, #1
 8011bf2:	e7ea      	b.n	8011bca <__mdiff+0xe2>
 8011bf4:	0801444b 	.word	0x0801444b
 8011bf8:	0801445c 	.word	0x0801445c

08011bfc <__d2b>:
 8011bfc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011c00:	4689      	mov	r9, r1
 8011c02:	2101      	movs	r1, #1
 8011c04:	ec57 6b10 	vmov	r6, r7, d0
 8011c08:	4690      	mov	r8, r2
 8011c0a:	f7ff fccf 	bl	80115ac <_Balloc>
 8011c0e:	4604      	mov	r4, r0
 8011c10:	b930      	cbnz	r0, 8011c20 <__d2b+0x24>
 8011c12:	4602      	mov	r2, r0
 8011c14:	4b25      	ldr	r3, [pc, #148]	; (8011cac <__d2b+0xb0>)
 8011c16:	4826      	ldr	r0, [pc, #152]	; (8011cb0 <__d2b+0xb4>)
 8011c18:	f240 310a 	movw	r1, #778	; 0x30a
 8011c1c:	f000 fa1a 	bl	8012054 <__assert_func>
 8011c20:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011c24:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011c28:	bb35      	cbnz	r5, 8011c78 <__d2b+0x7c>
 8011c2a:	2e00      	cmp	r6, #0
 8011c2c:	9301      	str	r3, [sp, #4]
 8011c2e:	d028      	beq.n	8011c82 <__d2b+0x86>
 8011c30:	4668      	mov	r0, sp
 8011c32:	9600      	str	r6, [sp, #0]
 8011c34:	f7ff fd82 	bl	801173c <__lo0bits>
 8011c38:	9900      	ldr	r1, [sp, #0]
 8011c3a:	b300      	cbz	r0, 8011c7e <__d2b+0x82>
 8011c3c:	9a01      	ldr	r2, [sp, #4]
 8011c3e:	f1c0 0320 	rsb	r3, r0, #32
 8011c42:	fa02 f303 	lsl.w	r3, r2, r3
 8011c46:	430b      	orrs	r3, r1
 8011c48:	40c2      	lsrs	r2, r0
 8011c4a:	6163      	str	r3, [r4, #20]
 8011c4c:	9201      	str	r2, [sp, #4]
 8011c4e:	9b01      	ldr	r3, [sp, #4]
 8011c50:	61a3      	str	r3, [r4, #24]
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	bf14      	ite	ne
 8011c56:	2202      	movne	r2, #2
 8011c58:	2201      	moveq	r2, #1
 8011c5a:	6122      	str	r2, [r4, #16]
 8011c5c:	b1d5      	cbz	r5, 8011c94 <__d2b+0x98>
 8011c5e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011c62:	4405      	add	r5, r0
 8011c64:	f8c9 5000 	str.w	r5, [r9]
 8011c68:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011c6c:	f8c8 0000 	str.w	r0, [r8]
 8011c70:	4620      	mov	r0, r4
 8011c72:	b003      	add	sp, #12
 8011c74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011c78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011c7c:	e7d5      	b.n	8011c2a <__d2b+0x2e>
 8011c7e:	6161      	str	r1, [r4, #20]
 8011c80:	e7e5      	b.n	8011c4e <__d2b+0x52>
 8011c82:	a801      	add	r0, sp, #4
 8011c84:	f7ff fd5a 	bl	801173c <__lo0bits>
 8011c88:	9b01      	ldr	r3, [sp, #4]
 8011c8a:	6163      	str	r3, [r4, #20]
 8011c8c:	2201      	movs	r2, #1
 8011c8e:	6122      	str	r2, [r4, #16]
 8011c90:	3020      	adds	r0, #32
 8011c92:	e7e3      	b.n	8011c5c <__d2b+0x60>
 8011c94:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011c98:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011c9c:	f8c9 0000 	str.w	r0, [r9]
 8011ca0:	6918      	ldr	r0, [r3, #16]
 8011ca2:	f7ff fd2b 	bl	80116fc <__hi0bits>
 8011ca6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011caa:	e7df      	b.n	8011c6c <__d2b+0x70>
 8011cac:	0801444b 	.word	0x0801444b
 8011cb0:	0801445c 	.word	0x0801445c

08011cb4 <_calloc_r>:
 8011cb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011cb6:	fba1 2402 	umull	r2, r4, r1, r2
 8011cba:	b94c      	cbnz	r4, 8011cd0 <_calloc_r+0x1c>
 8011cbc:	4611      	mov	r1, r2
 8011cbe:	9201      	str	r2, [sp, #4]
 8011cc0:	f7fd ff30 	bl	800fb24 <_malloc_r>
 8011cc4:	9a01      	ldr	r2, [sp, #4]
 8011cc6:	4605      	mov	r5, r0
 8011cc8:	b930      	cbnz	r0, 8011cd8 <_calloc_r+0x24>
 8011cca:	4628      	mov	r0, r5
 8011ccc:	b003      	add	sp, #12
 8011cce:	bd30      	pop	{r4, r5, pc}
 8011cd0:	220c      	movs	r2, #12
 8011cd2:	6002      	str	r2, [r0, #0]
 8011cd4:	2500      	movs	r5, #0
 8011cd6:	e7f8      	b.n	8011cca <_calloc_r+0x16>
 8011cd8:	4621      	mov	r1, r4
 8011cda:	f7fd fefa 	bl	800fad2 <memset>
 8011cde:	e7f4      	b.n	8011cca <_calloc_r+0x16>

08011ce0 <_free_r>:
 8011ce0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011ce2:	2900      	cmp	r1, #0
 8011ce4:	d044      	beq.n	8011d70 <_free_r+0x90>
 8011ce6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011cea:	9001      	str	r0, [sp, #4]
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	f1a1 0404 	sub.w	r4, r1, #4
 8011cf2:	bfb8      	it	lt
 8011cf4:	18e4      	addlt	r4, r4, r3
 8011cf6:	f7ff fc4d 	bl	8011594 <__malloc_lock>
 8011cfa:	4a1e      	ldr	r2, [pc, #120]	; (8011d74 <_free_r+0x94>)
 8011cfc:	9801      	ldr	r0, [sp, #4]
 8011cfe:	6813      	ldr	r3, [r2, #0]
 8011d00:	b933      	cbnz	r3, 8011d10 <_free_r+0x30>
 8011d02:	6063      	str	r3, [r4, #4]
 8011d04:	6014      	str	r4, [r2, #0]
 8011d06:	b003      	add	sp, #12
 8011d08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011d0c:	f7ff bc48 	b.w	80115a0 <__malloc_unlock>
 8011d10:	42a3      	cmp	r3, r4
 8011d12:	d908      	bls.n	8011d26 <_free_r+0x46>
 8011d14:	6825      	ldr	r5, [r4, #0]
 8011d16:	1961      	adds	r1, r4, r5
 8011d18:	428b      	cmp	r3, r1
 8011d1a:	bf01      	itttt	eq
 8011d1c:	6819      	ldreq	r1, [r3, #0]
 8011d1e:	685b      	ldreq	r3, [r3, #4]
 8011d20:	1949      	addeq	r1, r1, r5
 8011d22:	6021      	streq	r1, [r4, #0]
 8011d24:	e7ed      	b.n	8011d02 <_free_r+0x22>
 8011d26:	461a      	mov	r2, r3
 8011d28:	685b      	ldr	r3, [r3, #4]
 8011d2a:	b10b      	cbz	r3, 8011d30 <_free_r+0x50>
 8011d2c:	42a3      	cmp	r3, r4
 8011d2e:	d9fa      	bls.n	8011d26 <_free_r+0x46>
 8011d30:	6811      	ldr	r1, [r2, #0]
 8011d32:	1855      	adds	r5, r2, r1
 8011d34:	42a5      	cmp	r5, r4
 8011d36:	d10b      	bne.n	8011d50 <_free_r+0x70>
 8011d38:	6824      	ldr	r4, [r4, #0]
 8011d3a:	4421      	add	r1, r4
 8011d3c:	1854      	adds	r4, r2, r1
 8011d3e:	42a3      	cmp	r3, r4
 8011d40:	6011      	str	r1, [r2, #0]
 8011d42:	d1e0      	bne.n	8011d06 <_free_r+0x26>
 8011d44:	681c      	ldr	r4, [r3, #0]
 8011d46:	685b      	ldr	r3, [r3, #4]
 8011d48:	6053      	str	r3, [r2, #4]
 8011d4a:	4421      	add	r1, r4
 8011d4c:	6011      	str	r1, [r2, #0]
 8011d4e:	e7da      	b.n	8011d06 <_free_r+0x26>
 8011d50:	d902      	bls.n	8011d58 <_free_r+0x78>
 8011d52:	230c      	movs	r3, #12
 8011d54:	6003      	str	r3, [r0, #0]
 8011d56:	e7d6      	b.n	8011d06 <_free_r+0x26>
 8011d58:	6825      	ldr	r5, [r4, #0]
 8011d5a:	1961      	adds	r1, r4, r5
 8011d5c:	428b      	cmp	r3, r1
 8011d5e:	bf04      	itt	eq
 8011d60:	6819      	ldreq	r1, [r3, #0]
 8011d62:	685b      	ldreq	r3, [r3, #4]
 8011d64:	6063      	str	r3, [r4, #4]
 8011d66:	bf04      	itt	eq
 8011d68:	1949      	addeq	r1, r1, r5
 8011d6a:	6021      	streq	r1, [r4, #0]
 8011d6c:	6054      	str	r4, [r2, #4]
 8011d6e:	e7ca      	b.n	8011d06 <_free_r+0x26>
 8011d70:	b003      	add	sp, #12
 8011d72:	bd30      	pop	{r4, r5, pc}
 8011d74:	2000628c 	.word	0x2000628c

08011d78 <__ssputs_r>:
 8011d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d7c:	688e      	ldr	r6, [r1, #8]
 8011d7e:	429e      	cmp	r6, r3
 8011d80:	4682      	mov	sl, r0
 8011d82:	460c      	mov	r4, r1
 8011d84:	4690      	mov	r8, r2
 8011d86:	461f      	mov	r7, r3
 8011d88:	d838      	bhi.n	8011dfc <__ssputs_r+0x84>
 8011d8a:	898a      	ldrh	r2, [r1, #12]
 8011d8c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011d90:	d032      	beq.n	8011df8 <__ssputs_r+0x80>
 8011d92:	6825      	ldr	r5, [r4, #0]
 8011d94:	6909      	ldr	r1, [r1, #16]
 8011d96:	eba5 0901 	sub.w	r9, r5, r1
 8011d9a:	6965      	ldr	r5, [r4, #20]
 8011d9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011da0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011da4:	3301      	adds	r3, #1
 8011da6:	444b      	add	r3, r9
 8011da8:	106d      	asrs	r5, r5, #1
 8011daa:	429d      	cmp	r5, r3
 8011dac:	bf38      	it	cc
 8011dae:	461d      	movcc	r5, r3
 8011db0:	0553      	lsls	r3, r2, #21
 8011db2:	d531      	bpl.n	8011e18 <__ssputs_r+0xa0>
 8011db4:	4629      	mov	r1, r5
 8011db6:	f7fd feb5 	bl	800fb24 <_malloc_r>
 8011dba:	4606      	mov	r6, r0
 8011dbc:	b950      	cbnz	r0, 8011dd4 <__ssputs_r+0x5c>
 8011dbe:	230c      	movs	r3, #12
 8011dc0:	f8ca 3000 	str.w	r3, [sl]
 8011dc4:	89a3      	ldrh	r3, [r4, #12]
 8011dc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011dca:	81a3      	strh	r3, [r4, #12]
 8011dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8011dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011dd4:	6921      	ldr	r1, [r4, #16]
 8011dd6:	464a      	mov	r2, r9
 8011dd8:	f7fd fe6d 	bl	800fab6 <memcpy>
 8011ddc:	89a3      	ldrh	r3, [r4, #12]
 8011dde:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011de2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011de6:	81a3      	strh	r3, [r4, #12]
 8011de8:	6126      	str	r6, [r4, #16]
 8011dea:	6165      	str	r5, [r4, #20]
 8011dec:	444e      	add	r6, r9
 8011dee:	eba5 0509 	sub.w	r5, r5, r9
 8011df2:	6026      	str	r6, [r4, #0]
 8011df4:	60a5      	str	r5, [r4, #8]
 8011df6:	463e      	mov	r6, r7
 8011df8:	42be      	cmp	r6, r7
 8011dfa:	d900      	bls.n	8011dfe <__ssputs_r+0x86>
 8011dfc:	463e      	mov	r6, r7
 8011dfe:	6820      	ldr	r0, [r4, #0]
 8011e00:	4632      	mov	r2, r6
 8011e02:	4641      	mov	r1, r8
 8011e04:	f000 f968 	bl	80120d8 <memmove>
 8011e08:	68a3      	ldr	r3, [r4, #8]
 8011e0a:	1b9b      	subs	r3, r3, r6
 8011e0c:	60a3      	str	r3, [r4, #8]
 8011e0e:	6823      	ldr	r3, [r4, #0]
 8011e10:	4433      	add	r3, r6
 8011e12:	6023      	str	r3, [r4, #0]
 8011e14:	2000      	movs	r0, #0
 8011e16:	e7db      	b.n	8011dd0 <__ssputs_r+0x58>
 8011e18:	462a      	mov	r2, r5
 8011e1a:	f000 f977 	bl	801210c <_realloc_r>
 8011e1e:	4606      	mov	r6, r0
 8011e20:	2800      	cmp	r0, #0
 8011e22:	d1e1      	bne.n	8011de8 <__ssputs_r+0x70>
 8011e24:	6921      	ldr	r1, [r4, #16]
 8011e26:	4650      	mov	r0, sl
 8011e28:	f7ff ff5a 	bl	8011ce0 <_free_r>
 8011e2c:	e7c7      	b.n	8011dbe <__ssputs_r+0x46>
	...

08011e30 <_svfiprintf_r>:
 8011e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e34:	4698      	mov	r8, r3
 8011e36:	898b      	ldrh	r3, [r1, #12]
 8011e38:	061b      	lsls	r3, r3, #24
 8011e3a:	b09d      	sub	sp, #116	; 0x74
 8011e3c:	4607      	mov	r7, r0
 8011e3e:	460d      	mov	r5, r1
 8011e40:	4614      	mov	r4, r2
 8011e42:	d50e      	bpl.n	8011e62 <_svfiprintf_r+0x32>
 8011e44:	690b      	ldr	r3, [r1, #16]
 8011e46:	b963      	cbnz	r3, 8011e62 <_svfiprintf_r+0x32>
 8011e48:	2140      	movs	r1, #64	; 0x40
 8011e4a:	f7fd fe6b 	bl	800fb24 <_malloc_r>
 8011e4e:	6028      	str	r0, [r5, #0]
 8011e50:	6128      	str	r0, [r5, #16]
 8011e52:	b920      	cbnz	r0, 8011e5e <_svfiprintf_r+0x2e>
 8011e54:	230c      	movs	r3, #12
 8011e56:	603b      	str	r3, [r7, #0]
 8011e58:	f04f 30ff 	mov.w	r0, #4294967295
 8011e5c:	e0d1      	b.n	8012002 <_svfiprintf_r+0x1d2>
 8011e5e:	2340      	movs	r3, #64	; 0x40
 8011e60:	616b      	str	r3, [r5, #20]
 8011e62:	2300      	movs	r3, #0
 8011e64:	9309      	str	r3, [sp, #36]	; 0x24
 8011e66:	2320      	movs	r3, #32
 8011e68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011e6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8011e70:	2330      	movs	r3, #48	; 0x30
 8011e72:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801201c <_svfiprintf_r+0x1ec>
 8011e76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011e7a:	f04f 0901 	mov.w	r9, #1
 8011e7e:	4623      	mov	r3, r4
 8011e80:	469a      	mov	sl, r3
 8011e82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011e86:	b10a      	cbz	r2, 8011e8c <_svfiprintf_r+0x5c>
 8011e88:	2a25      	cmp	r2, #37	; 0x25
 8011e8a:	d1f9      	bne.n	8011e80 <_svfiprintf_r+0x50>
 8011e8c:	ebba 0b04 	subs.w	fp, sl, r4
 8011e90:	d00b      	beq.n	8011eaa <_svfiprintf_r+0x7a>
 8011e92:	465b      	mov	r3, fp
 8011e94:	4622      	mov	r2, r4
 8011e96:	4629      	mov	r1, r5
 8011e98:	4638      	mov	r0, r7
 8011e9a:	f7ff ff6d 	bl	8011d78 <__ssputs_r>
 8011e9e:	3001      	adds	r0, #1
 8011ea0:	f000 80aa 	beq.w	8011ff8 <_svfiprintf_r+0x1c8>
 8011ea4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011ea6:	445a      	add	r2, fp
 8011ea8:	9209      	str	r2, [sp, #36]	; 0x24
 8011eaa:	f89a 3000 	ldrb.w	r3, [sl]
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	f000 80a2 	beq.w	8011ff8 <_svfiprintf_r+0x1c8>
 8011eb4:	2300      	movs	r3, #0
 8011eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8011eba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011ebe:	f10a 0a01 	add.w	sl, sl, #1
 8011ec2:	9304      	str	r3, [sp, #16]
 8011ec4:	9307      	str	r3, [sp, #28]
 8011ec6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011eca:	931a      	str	r3, [sp, #104]	; 0x68
 8011ecc:	4654      	mov	r4, sl
 8011ece:	2205      	movs	r2, #5
 8011ed0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ed4:	4851      	ldr	r0, [pc, #324]	; (801201c <_svfiprintf_r+0x1ec>)
 8011ed6:	f7ee f993 	bl	8000200 <memchr>
 8011eda:	9a04      	ldr	r2, [sp, #16]
 8011edc:	b9d8      	cbnz	r0, 8011f16 <_svfiprintf_r+0xe6>
 8011ede:	06d0      	lsls	r0, r2, #27
 8011ee0:	bf44      	itt	mi
 8011ee2:	2320      	movmi	r3, #32
 8011ee4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011ee8:	0711      	lsls	r1, r2, #28
 8011eea:	bf44      	itt	mi
 8011eec:	232b      	movmi	r3, #43	; 0x2b
 8011eee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011ef2:	f89a 3000 	ldrb.w	r3, [sl]
 8011ef6:	2b2a      	cmp	r3, #42	; 0x2a
 8011ef8:	d015      	beq.n	8011f26 <_svfiprintf_r+0xf6>
 8011efa:	9a07      	ldr	r2, [sp, #28]
 8011efc:	4654      	mov	r4, sl
 8011efe:	2000      	movs	r0, #0
 8011f00:	f04f 0c0a 	mov.w	ip, #10
 8011f04:	4621      	mov	r1, r4
 8011f06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011f0a:	3b30      	subs	r3, #48	; 0x30
 8011f0c:	2b09      	cmp	r3, #9
 8011f0e:	d94e      	bls.n	8011fae <_svfiprintf_r+0x17e>
 8011f10:	b1b0      	cbz	r0, 8011f40 <_svfiprintf_r+0x110>
 8011f12:	9207      	str	r2, [sp, #28]
 8011f14:	e014      	b.n	8011f40 <_svfiprintf_r+0x110>
 8011f16:	eba0 0308 	sub.w	r3, r0, r8
 8011f1a:	fa09 f303 	lsl.w	r3, r9, r3
 8011f1e:	4313      	orrs	r3, r2
 8011f20:	9304      	str	r3, [sp, #16]
 8011f22:	46a2      	mov	sl, r4
 8011f24:	e7d2      	b.n	8011ecc <_svfiprintf_r+0x9c>
 8011f26:	9b03      	ldr	r3, [sp, #12]
 8011f28:	1d19      	adds	r1, r3, #4
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	9103      	str	r1, [sp, #12]
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	bfbb      	ittet	lt
 8011f32:	425b      	neglt	r3, r3
 8011f34:	f042 0202 	orrlt.w	r2, r2, #2
 8011f38:	9307      	strge	r3, [sp, #28]
 8011f3a:	9307      	strlt	r3, [sp, #28]
 8011f3c:	bfb8      	it	lt
 8011f3e:	9204      	strlt	r2, [sp, #16]
 8011f40:	7823      	ldrb	r3, [r4, #0]
 8011f42:	2b2e      	cmp	r3, #46	; 0x2e
 8011f44:	d10c      	bne.n	8011f60 <_svfiprintf_r+0x130>
 8011f46:	7863      	ldrb	r3, [r4, #1]
 8011f48:	2b2a      	cmp	r3, #42	; 0x2a
 8011f4a:	d135      	bne.n	8011fb8 <_svfiprintf_r+0x188>
 8011f4c:	9b03      	ldr	r3, [sp, #12]
 8011f4e:	1d1a      	adds	r2, r3, #4
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	9203      	str	r2, [sp, #12]
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	bfb8      	it	lt
 8011f58:	f04f 33ff 	movlt.w	r3, #4294967295
 8011f5c:	3402      	adds	r4, #2
 8011f5e:	9305      	str	r3, [sp, #20]
 8011f60:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801202c <_svfiprintf_r+0x1fc>
 8011f64:	7821      	ldrb	r1, [r4, #0]
 8011f66:	2203      	movs	r2, #3
 8011f68:	4650      	mov	r0, sl
 8011f6a:	f7ee f949 	bl	8000200 <memchr>
 8011f6e:	b140      	cbz	r0, 8011f82 <_svfiprintf_r+0x152>
 8011f70:	2340      	movs	r3, #64	; 0x40
 8011f72:	eba0 000a 	sub.w	r0, r0, sl
 8011f76:	fa03 f000 	lsl.w	r0, r3, r0
 8011f7a:	9b04      	ldr	r3, [sp, #16]
 8011f7c:	4303      	orrs	r3, r0
 8011f7e:	3401      	adds	r4, #1
 8011f80:	9304      	str	r3, [sp, #16]
 8011f82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f86:	4826      	ldr	r0, [pc, #152]	; (8012020 <_svfiprintf_r+0x1f0>)
 8011f88:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011f8c:	2206      	movs	r2, #6
 8011f8e:	f7ee f937 	bl	8000200 <memchr>
 8011f92:	2800      	cmp	r0, #0
 8011f94:	d038      	beq.n	8012008 <_svfiprintf_r+0x1d8>
 8011f96:	4b23      	ldr	r3, [pc, #140]	; (8012024 <_svfiprintf_r+0x1f4>)
 8011f98:	bb1b      	cbnz	r3, 8011fe2 <_svfiprintf_r+0x1b2>
 8011f9a:	9b03      	ldr	r3, [sp, #12]
 8011f9c:	3307      	adds	r3, #7
 8011f9e:	f023 0307 	bic.w	r3, r3, #7
 8011fa2:	3308      	adds	r3, #8
 8011fa4:	9303      	str	r3, [sp, #12]
 8011fa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011fa8:	4433      	add	r3, r6
 8011faa:	9309      	str	r3, [sp, #36]	; 0x24
 8011fac:	e767      	b.n	8011e7e <_svfiprintf_r+0x4e>
 8011fae:	fb0c 3202 	mla	r2, ip, r2, r3
 8011fb2:	460c      	mov	r4, r1
 8011fb4:	2001      	movs	r0, #1
 8011fb6:	e7a5      	b.n	8011f04 <_svfiprintf_r+0xd4>
 8011fb8:	2300      	movs	r3, #0
 8011fba:	3401      	adds	r4, #1
 8011fbc:	9305      	str	r3, [sp, #20]
 8011fbe:	4619      	mov	r1, r3
 8011fc0:	f04f 0c0a 	mov.w	ip, #10
 8011fc4:	4620      	mov	r0, r4
 8011fc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011fca:	3a30      	subs	r2, #48	; 0x30
 8011fcc:	2a09      	cmp	r2, #9
 8011fce:	d903      	bls.n	8011fd8 <_svfiprintf_r+0x1a8>
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d0c5      	beq.n	8011f60 <_svfiprintf_r+0x130>
 8011fd4:	9105      	str	r1, [sp, #20]
 8011fd6:	e7c3      	b.n	8011f60 <_svfiprintf_r+0x130>
 8011fd8:	fb0c 2101 	mla	r1, ip, r1, r2
 8011fdc:	4604      	mov	r4, r0
 8011fde:	2301      	movs	r3, #1
 8011fe0:	e7f0      	b.n	8011fc4 <_svfiprintf_r+0x194>
 8011fe2:	ab03      	add	r3, sp, #12
 8011fe4:	9300      	str	r3, [sp, #0]
 8011fe6:	462a      	mov	r2, r5
 8011fe8:	4b0f      	ldr	r3, [pc, #60]	; (8012028 <_svfiprintf_r+0x1f8>)
 8011fea:	a904      	add	r1, sp, #16
 8011fec:	4638      	mov	r0, r7
 8011fee:	f7fd fead 	bl	800fd4c <_printf_float>
 8011ff2:	1c42      	adds	r2, r0, #1
 8011ff4:	4606      	mov	r6, r0
 8011ff6:	d1d6      	bne.n	8011fa6 <_svfiprintf_r+0x176>
 8011ff8:	89ab      	ldrh	r3, [r5, #12]
 8011ffa:	065b      	lsls	r3, r3, #25
 8011ffc:	f53f af2c 	bmi.w	8011e58 <_svfiprintf_r+0x28>
 8012000:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012002:	b01d      	add	sp, #116	; 0x74
 8012004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012008:	ab03      	add	r3, sp, #12
 801200a:	9300      	str	r3, [sp, #0]
 801200c:	462a      	mov	r2, r5
 801200e:	4b06      	ldr	r3, [pc, #24]	; (8012028 <_svfiprintf_r+0x1f8>)
 8012010:	a904      	add	r1, sp, #16
 8012012:	4638      	mov	r0, r7
 8012014:	f7fe f93e 	bl	8010294 <_printf_i>
 8012018:	e7eb      	b.n	8011ff2 <_svfiprintf_r+0x1c2>
 801201a:	bf00      	nop
 801201c:	080145b4 	.word	0x080145b4
 8012020:	080145be 	.word	0x080145be
 8012024:	0800fd4d 	.word	0x0800fd4d
 8012028:	08011d79 	.word	0x08011d79
 801202c:	080145ba 	.word	0x080145ba

08012030 <_read_r>:
 8012030:	b538      	push	{r3, r4, r5, lr}
 8012032:	4d07      	ldr	r5, [pc, #28]	; (8012050 <_read_r+0x20>)
 8012034:	4604      	mov	r4, r0
 8012036:	4608      	mov	r0, r1
 8012038:	4611      	mov	r1, r2
 801203a:	2200      	movs	r2, #0
 801203c:	602a      	str	r2, [r5, #0]
 801203e:	461a      	mov	r2, r3
 8012040:	f7ef fede 	bl	8001e00 <_read>
 8012044:	1c43      	adds	r3, r0, #1
 8012046:	d102      	bne.n	801204e <_read_r+0x1e>
 8012048:	682b      	ldr	r3, [r5, #0]
 801204a:	b103      	cbz	r3, 801204e <_read_r+0x1e>
 801204c:	6023      	str	r3, [r4, #0]
 801204e:	bd38      	pop	{r3, r4, r5, pc}
 8012050:	20006294 	.word	0x20006294

08012054 <__assert_func>:
 8012054:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012056:	4614      	mov	r4, r2
 8012058:	461a      	mov	r2, r3
 801205a:	4b09      	ldr	r3, [pc, #36]	; (8012080 <__assert_func+0x2c>)
 801205c:	681b      	ldr	r3, [r3, #0]
 801205e:	4605      	mov	r5, r0
 8012060:	68d8      	ldr	r0, [r3, #12]
 8012062:	b14c      	cbz	r4, 8012078 <__assert_func+0x24>
 8012064:	4b07      	ldr	r3, [pc, #28]	; (8012084 <__assert_func+0x30>)
 8012066:	9100      	str	r1, [sp, #0]
 8012068:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801206c:	4906      	ldr	r1, [pc, #24]	; (8012088 <__assert_func+0x34>)
 801206e:	462b      	mov	r3, r5
 8012070:	f000 f80e 	bl	8012090 <fiprintf>
 8012074:	f000 faa0 	bl	80125b8 <abort>
 8012078:	4b04      	ldr	r3, [pc, #16]	; (801208c <__assert_func+0x38>)
 801207a:	461c      	mov	r4, r3
 801207c:	e7f3      	b.n	8012066 <__assert_func+0x12>
 801207e:	bf00      	nop
 8012080:	2000017c 	.word	0x2000017c
 8012084:	080145c5 	.word	0x080145c5
 8012088:	080145d2 	.word	0x080145d2
 801208c:	08014600 	.word	0x08014600

08012090 <fiprintf>:
 8012090:	b40e      	push	{r1, r2, r3}
 8012092:	b503      	push	{r0, r1, lr}
 8012094:	4601      	mov	r1, r0
 8012096:	ab03      	add	r3, sp, #12
 8012098:	4805      	ldr	r0, [pc, #20]	; (80120b0 <fiprintf+0x20>)
 801209a:	f853 2b04 	ldr.w	r2, [r3], #4
 801209e:	6800      	ldr	r0, [r0, #0]
 80120a0:	9301      	str	r3, [sp, #4]
 80120a2:	f000 f88b 	bl	80121bc <_vfiprintf_r>
 80120a6:	b002      	add	sp, #8
 80120a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80120ac:	b003      	add	sp, #12
 80120ae:	4770      	bx	lr
 80120b0:	2000017c 	.word	0x2000017c

080120b4 <__ascii_mbtowc>:
 80120b4:	b082      	sub	sp, #8
 80120b6:	b901      	cbnz	r1, 80120ba <__ascii_mbtowc+0x6>
 80120b8:	a901      	add	r1, sp, #4
 80120ba:	b142      	cbz	r2, 80120ce <__ascii_mbtowc+0x1a>
 80120bc:	b14b      	cbz	r3, 80120d2 <__ascii_mbtowc+0x1e>
 80120be:	7813      	ldrb	r3, [r2, #0]
 80120c0:	600b      	str	r3, [r1, #0]
 80120c2:	7812      	ldrb	r2, [r2, #0]
 80120c4:	1e10      	subs	r0, r2, #0
 80120c6:	bf18      	it	ne
 80120c8:	2001      	movne	r0, #1
 80120ca:	b002      	add	sp, #8
 80120cc:	4770      	bx	lr
 80120ce:	4610      	mov	r0, r2
 80120d0:	e7fb      	b.n	80120ca <__ascii_mbtowc+0x16>
 80120d2:	f06f 0001 	mvn.w	r0, #1
 80120d6:	e7f8      	b.n	80120ca <__ascii_mbtowc+0x16>

080120d8 <memmove>:
 80120d8:	4288      	cmp	r0, r1
 80120da:	b510      	push	{r4, lr}
 80120dc:	eb01 0402 	add.w	r4, r1, r2
 80120e0:	d902      	bls.n	80120e8 <memmove+0x10>
 80120e2:	4284      	cmp	r4, r0
 80120e4:	4623      	mov	r3, r4
 80120e6:	d807      	bhi.n	80120f8 <memmove+0x20>
 80120e8:	1e43      	subs	r3, r0, #1
 80120ea:	42a1      	cmp	r1, r4
 80120ec:	d008      	beq.n	8012100 <memmove+0x28>
 80120ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80120f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80120f6:	e7f8      	b.n	80120ea <memmove+0x12>
 80120f8:	4402      	add	r2, r0
 80120fa:	4601      	mov	r1, r0
 80120fc:	428a      	cmp	r2, r1
 80120fe:	d100      	bne.n	8012102 <memmove+0x2a>
 8012100:	bd10      	pop	{r4, pc}
 8012102:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012106:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801210a:	e7f7      	b.n	80120fc <memmove+0x24>

0801210c <_realloc_r>:
 801210c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012110:	4680      	mov	r8, r0
 8012112:	4614      	mov	r4, r2
 8012114:	460e      	mov	r6, r1
 8012116:	b921      	cbnz	r1, 8012122 <_realloc_r+0x16>
 8012118:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801211c:	4611      	mov	r1, r2
 801211e:	f7fd bd01 	b.w	800fb24 <_malloc_r>
 8012122:	b92a      	cbnz	r2, 8012130 <_realloc_r+0x24>
 8012124:	f7ff fddc 	bl	8011ce0 <_free_r>
 8012128:	4625      	mov	r5, r4
 801212a:	4628      	mov	r0, r5
 801212c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012130:	f000 faae 	bl	8012690 <_malloc_usable_size_r>
 8012134:	4284      	cmp	r4, r0
 8012136:	4607      	mov	r7, r0
 8012138:	d802      	bhi.n	8012140 <_realloc_r+0x34>
 801213a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801213e:	d812      	bhi.n	8012166 <_realloc_r+0x5a>
 8012140:	4621      	mov	r1, r4
 8012142:	4640      	mov	r0, r8
 8012144:	f7fd fcee 	bl	800fb24 <_malloc_r>
 8012148:	4605      	mov	r5, r0
 801214a:	2800      	cmp	r0, #0
 801214c:	d0ed      	beq.n	801212a <_realloc_r+0x1e>
 801214e:	42bc      	cmp	r4, r7
 8012150:	4622      	mov	r2, r4
 8012152:	4631      	mov	r1, r6
 8012154:	bf28      	it	cs
 8012156:	463a      	movcs	r2, r7
 8012158:	f7fd fcad 	bl	800fab6 <memcpy>
 801215c:	4631      	mov	r1, r6
 801215e:	4640      	mov	r0, r8
 8012160:	f7ff fdbe 	bl	8011ce0 <_free_r>
 8012164:	e7e1      	b.n	801212a <_realloc_r+0x1e>
 8012166:	4635      	mov	r5, r6
 8012168:	e7df      	b.n	801212a <_realloc_r+0x1e>

0801216a <__sfputc_r>:
 801216a:	6893      	ldr	r3, [r2, #8]
 801216c:	3b01      	subs	r3, #1
 801216e:	2b00      	cmp	r3, #0
 8012170:	b410      	push	{r4}
 8012172:	6093      	str	r3, [r2, #8]
 8012174:	da08      	bge.n	8012188 <__sfputc_r+0x1e>
 8012176:	6994      	ldr	r4, [r2, #24]
 8012178:	42a3      	cmp	r3, r4
 801217a:	db01      	blt.n	8012180 <__sfputc_r+0x16>
 801217c:	290a      	cmp	r1, #10
 801217e:	d103      	bne.n	8012188 <__sfputc_r+0x1e>
 8012180:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012184:	f000 b94a 	b.w	801241c <__swbuf_r>
 8012188:	6813      	ldr	r3, [r2, #0]
 801218a:	1c58      	adds	r0, r3, #1
 801218c:	6010      	str	r0, [r2, #0]
 801218e:	7019      	strb	r1, [r3, #0]
 8012190:	4608      	mov	r0, r1
 8012192:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012196:	4770      	bx	lr

08012198 <__sfputs_r>:
 8012198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801219a:	4606      	mov	r6, r0
 801219c:	460f      	mov	r7, r1
 801219e:	4614      	mov	r4, r2
 80121a0:	18d5      	adds	r5, r2, r3
 80121a2:	42ac      	cmp	r4, r5
 80121a4:	d101      	bne.n	80121aa <__sfputs_r+0x12>
 80121a6:	2000      	movs	r0, #0
 80121a8:	e007      	b.n	80121ba <__sfputs_r+0x22>
 80121aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80121ae:	463a      	mov	r2, r7
 80121b0:	4630      	mov	r0, r6
 80121b2:	f7ff ffda 	bl	801216a <__sfputc_r>
 80121b6:	1c43      	adds	r3, r0, #1
 80121b8:	d1f3      	bne.n	80121a2 <__sfputs_r+0xa>
 80121ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080121bc <_vfiprintf_r>:
 80121bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121c0:	460d      	mov	r5, r1
 80121c2:	b09d      	sub	sp, #116	; 0x74
 80121c4:	4614      	mov	r4, r2
 80121c6:	4698      	mov	r8, r3
 80121c8:	4606      	mov	r6, r0
 80121ca:	b118      	cbz	r0, 80121d4 <_vfiprintf_r+0x18>
 80121cc:	6983      	ldr	r3, [r0, #24]
 80121ce:	b90b      	cbnz	r3, 80121d4 <_vfiprintf_r+0x18>
 80121d0:	f7fd fbac 	bl	800f92c <__sinit>
 80121d4:	4b89      	ldr	r3, [pc, #548]	; (80123fc <_vfiprintf_r+0x240>)
 80121d6:	429d      	cmp	r5, r3
 80121d8:	d11b      	bne.n	8012212 <_vfiprintf_r+0x56>
 80121da:	6875      	ldr	r5, [r6, #4]
 80121dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80121de:	07d9      	lsls	r1, r3, #31
 80121e0:	d405      	bmi.n	80121ee <_vfiprintf_r+0x32>
 80121e2:	89ab      	ldrh	r3, [r5, #12]
 80121e4:	059a      	lsls	r2, r3, #22
 80121e6:	d402      	bmi.n	80121ee <_vfiprintf_r+0x32>
 80121e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80121ea:	f7fd fc62 	bl	800fab2 <__retarget_lock_acquire_recursive>
 80121ee:	89ab      	ldrh	r3, [r5, #12]
 80121f0:	071b      	lsls	r3, r3, #28
 80121f2:	d501      	bpl.n	80121f8 <_vfiprintf_r+0x3c>
 80121f4:	692b      	ldr	r3, [r5, #16]
 80121f6:	b9eb      	cbnz	r3, 8012234 <_vfiprintf_r+0x78>
 80121f8:	4629      	mov	r1, r5
 80121fa:	4630      	mov	r0, r6
 80121fc:	f000 f96e 	bl	80124dc <__swsetup_r>
 8012200:	b1c0      	cbz	r0, 8012234 <_vfiprintf_r+0x78>
 8012202:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012204:	07dc      	lsls	r4, r3, #31
 8012206:	d50e      	bpl.n	8012226 <_vfiprintf_r+0x6a>
 8012208:	f04f 30ff 	mov.w	r0, #4294967295
 801220c:	b01d      	add	sp, #116	; 0x74
 801220e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012212:	4b7b      	ldr	r3, [pc, #492]	; (8012400 <_vfiprintf_r+0x244>)
 8012214:	429d      	cmp	r5, r3
 8012216:	d101      	bne.n	801221c <_vfiprintf_r+0x60>
 8012218:	68b5      	ldr	r5, [r6, #8]
 801221a:	e7df      	b.n	80121dc <_vfiprintf_r+0x20>
 801221c:	4b79      	ldr	r3, [pc, #484]	; (8012404 <_vfiprintf_r+0x248>)
 801221e:	429d      	cmp	r5, r3
 8012220:	bf08      	it	eq
 8012222:	68f5      	ldreq	r5, [r6, #12]
 8012224:	e7da      	b.n	80121dc <_vfiprintf_r+0x20>
 8012226:	89ab      	ldrh	r3, [r5, #12]
 8012228:	0598      	lsls	r0, r3, #22
 801222a:	d4ed      	bmi.n	8012208 <_vfiprintf_r+0x4c>
 801222c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801222e:	f7fd fc41 	bl	800fab4 <__retarget_lock_release_recursive>
 8012232:	e7e9      	b.n	8012208 <_vfiprintf_r+0x4c>
 8012234:	2300      	movs	r3, #0
 8012236:	9309      	str	r3, [sp, #36]	; 0x24
 8012238:	2320      	movs	r3, #32
 801223a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801223e:	f8cd 800c 	str.w	r8, [sp, #12]
 8012242:	2330      	movs	r3, #48	; 0x30
 8012244:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012408 <_vfiprintf_r+0x24c>
 8012248:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801224c:	f04f 0901 	mov.w	r9, #1
 8012250:	4623      	mov	r3, r4
 8012252:	469a      	mov	sl, r3
 8012254:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012258:	b10a      	cbz	r2, 801225e <_vfiprintf_r+0xa2>
 801225a:	2a25      	cmp	r2, #37	; 0x25
 801225c:	d1f9      	bne.n	8012252 <_vfiprintf_r+0x96>
 801225e:	ebba 0b04 	subs.w	fp, sl, r4
 8012262:	d00b      	beq.n	801227c <_vfiprintf_r+0xc0>
 8012264:	465b      	mov	r3, fp
 8012266:	4622      	mov	r2, r4
 8012268:	4629      	mov	r1, r5
 801226a:	4630      	mov	r0, r6
 801226c:	f7ff ff94 	bl	8012198 <__sfputs_r>
 8012270:	3001      	adds	r0, #1
 8012272:	f000 80aa 	beq.w	80123ca <_vfiprintf_r+0x20e>
 8012276:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012278:	445a      	add	r2, fp
 801227a:	9209      	str	r2, [sp, #36]	; 0x24
 801227c:	f89a 3000 	ldrb.w	r3, [sl]
 8012280:	2b00      	cmp	r3, #0
 8012282:	f000 80a2 	beq.w	80123ca <_vfiprintf_r+0x20e>
 8012286:	2300      	movs	r3, #0
 8012288:	f04f 32ff 	mov.w	r2, #4294967295
 801228c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012290:	f10a 0a01 	add.w	sl, sl, #1
 8012294:	9304      	str	r3, [sp, #16]
 8012296:	9307      	str	r3, [sp, #28]
 8012298:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801229c:	931a      	str	r3, [sp, #104]	; 0x68
 801229e:	4654      	mov	r4, sl
 80122a0:	2205      	movs	r2, #5
 80122a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80122a6:	4858      	ldr	r0, [pc, #352]	; (8012408 <_vfiprintf_r+0x24c>)
 80122a8:	f7ed ffaa 	bl	8000200 <memchr>
 80122ac:	9a04      	ldr	r2, [sp, #16]
 80122ae:	b9d8      	cbnz	r0, 80122e8 <_vfiprintf_r+0x12c>
 80122b0:	06d1      	lsls	r1, r2, #27
 80122b2:	bf44      	itt	mi
 80122b4:	2320      	movmi	r3, #32
 80122b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80122ba:	0713      	lsls	r3, r2, #28
 80122bc:	bf44      	itt	mi
 80122be:	232b      	movmi	r3, #43	; 0x2b
 80122c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80122c4:	f89a 3000 	ldrb.w	r3, [sl]
 80122c8:	2b2a      	cmp	r3, #42	; 0x2a
 80122ca:	d015      	beq.n	80122f8 <_vfiprintf_r+0x13c>
 80122cc:	9a07      	ldr	r2, [sp, #28]
 80122ce:	4654      	mov	r4, sl
 80122d0:	2000      	movs	r0, #0
 80122d2:	f04f 0c0a 	mov.w	ip, #10
 80122d6:	4621      	mov	r1, r4
 80122d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80122dc:	3b30      	subs	r3, #48	; 0x30
 80122de:	2b09      	cmp	r3, #9
 80122e0:	d94e      	bls.n	8012380 <_vfiprintf_r+0x1c4>
 80122e2:	b1b0      	cbz	r0, 8012312 <_vfiprintf_r+0x156>
 80122e4:	9207      	str	r2, [sp, #28]
 80122e6:	e014      	b.n	8012312 <_vfiprintf_r+0x156>
 80122e8:	eba0 0308 	sub.w	r3, r0, r8
 80122ec:	fa09 f303 	lsl.w	r3, r9, r3
 80122f0:	4313      	orrs	r3, r2
 80122f2:	9304      	str	r3, [sp, #16]
 80122f4:	46a2      	mov	sl, r4
 80122f6:	e7d2      	b.n	801229e <_vfiprintf_r+0xe2>
 80122f8:	9b03      	ldr	r3, [sp, #12]
 80122fa:	1d19      	adds	r1, r3, #4
 80122fc:	681b      	ldr	r3, [r3, #0]
 80122fe:	9103      	str	r1, [sp, #12]
 8012300:	2b00      	cmp	r3, #0
 8012302:	bfbb      	ittet	lt
 8012304:	425b      	neglt	r3, r3
 8012306:	f042 0202 	orrlt.w	r2, r2, #2
 801230a:	9307      	strge	r3, [sp, #28]
 801230c:	9307      	strlt	r3, [sp, #28]
 801230e:	bfb8      	it	lt
 8012310:	9204      	strlt	r2, [sp, #16]
 8012312:	7823      	ldrb	r3, [r4, #0]
 8012314:	2b2e      	cmp	r3, #46	; 0x2e
 8012316:	d10c      	bne.n	8012332 <_vfiprintf_r+0x176>
 8012318:	7863      	ldrb	r3, [r4, #1]
 801231a:	2b2a      	cmp	r3, #42	; 0x2a
 801231c:	d135      	bne.n	801238a <_vfiprintf_r+0x1ce>
 801231e:	9b03      	ldr	r3, [sp, #12]
 8012320:	1d1a      	adds	r2, r3, #4
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	9203      	str	r2, [sp, #12]
 8012326:	2b00      	cmp	r3, #0
 8012328:	bfb8      	it	lt
 801232a:	f04f 33ff 	movlt.w	r3, #4294967295
 801232e:	3402      	adds	r4, #2
 8012330:	9305      	str	r3, [sp, #20]
 8012332:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012418 <_vfiprintf_r+0x25c>
 8012336:	7821      	ldrb	r1, [r4, #0]
 8012338:	2203      	movs	r2, #3
 801233a:	4650      	mov	r0, sl
 801233c:	f7ed ff60 	bl	8000200 <memchr>
 8012340:	b140      	cbz	r0, 8012354 <_vfiprintf_r+0x198>
 8012342:	2340      	movs	r3, #64	; 0x40
 8012344:	eba0 000a 	sub.w	r0, r0, sl
 8012348:	fa03 f000 	lsl.w	r0, r3, r0
 801234c:	9b04      	ldr	r3, [sp, #16]
 801234e:	4303      	orrs	r3, r0
 8012350:	3401      	adds	r4, #1
 8012352:	9304      	str	r3, [sp, #16]
 8012354:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012358:	482c      	ldr	r0, [pc, #176]	; (801240c <_vfiprintf_r+0x250>)
 801235a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801235e:	2206      	movs	r2, #6
 8012360:	f7ed ff4e 	bl	8000200 <memchr>
 8012364:	2800      	cmp	r0, #0
 8012366:	d03f      	beq.n	80123e8 <_vfiprintf_r+0x22c>
 8012368:	4b29      	ldr	r3, [pc, #164]	; (8012410 <_vfiprintf_r+0x254>)
 801236a:	bb1b      	cbnz	r3, 80123b4 <_vfiprintf_r+0x1f8>
 801236c:	9b03      	ldr	r3, [sp, #12]
 801236e:	3307      	adds	r3, #7
 8012370:	f023 0307 	bic.w	r3, r3, #7
 8012374:	3308      	adds	r3, #8
 8012376:	9303      	str	r3, [sp, #12]
 8012378:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801237a:	443b      	add	r3, r7
 801237c:	9309      	str	r3, [sp, #36]	; 0x24
 801237e:	e767      	b.n	8012250 <_vfiprintf_r+0x94>
 8012380:	fb0c 3202 	mla	r2, ip, r2, r3
 8012384:	460c      	mov	r4, r1
 8012386:	2001      	movs	r0, #1
 8012388:	e7a5      	b.n	80122d6 <_vfiprintf_r+0x11a>
 801238a:	2300      	movs	r3, #0
 801238c:	3401      	adds	r4, #1
 801238e:	9305      	str	r3, [sp, #20]
 8012390:	4619      	mov	r1, r3
 8012392:	f04f 0c0a 	mov.w	ip, #10
 8012396:	4620      	mov	r0, r4
 8012398:	f810 2b01 	ldrb.w	r2, [r0], #1
 801239c:	3a30      	subs	r2, #48	; 0x30
 801239e:	2a09      	cmp	r2, #9
 80123a0:	d903      	bls.n	80123aa <_vfiprintf_r+0x1ee>
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d0c5      	beq.n	8012332 <_vfiprintf_r+0x176>
 80123a6:	9105      	str	r1, [sp, #20]
 80123a8:	e7c3      	b.n	8012332 <_vfiprintf_r+0x176>
 80123aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80123ae:	4604      	mov	r4, r0
 80123b0:	2301      	movs	r3, #1
 80123b2:	e7f0      	b.n	8012396 <_vfiprintf_r+0x1da>
 80123b4:	ab03      	add	r3, sp, #12
 80123b6:	9300      	str	r3, [sp, #0]
 80123b8:	462a      	mov	r2, r5
 80123ba:	4b16      	ldr	r3, [pc, #88]	; (8012414 <_vfiprintf_r+0x258>)
 80123bc:	a904      	add	r1, sp, #16
 80123be:	4630      	mov	r0, r6
 80123c0:	f7fd fcc4 	bl	800fd4c <_printf_float>
 80123c4:	4607      	mov	r7, r0
 80123c6:	1c78      	adds	r0, r7, #1
 80123c8:	d1d6      	bne.n	8012378 <_vfiprintf_r+0x1bc>
 80123ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80123cc:	07d9      	lsls	r1, r3, #31
 80123ce:	d405      	bmi.n	80123dc <_vfiprintf_r+0x220>
 80123d0:	89ab      	ldrh	r3, [r5, #12]
 80123d2:	059a      	lsls	r2, r3, #22
 80123d4:	d402      	bmi.n	80123dc <_vfiprintf_r+0x220>
 80123d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80123d8:	f7fd fb6c 	bl	800fab4 <__retarget_lock_release_recursive>
 80123dc:	89ab      	ldrh	r3, [r5, #12]
 80123de:	065b      	lsls	r3, r3, #25
 80123e0:	f53f af12 	bmi.w	8012208 <_vfiprintf_r+0x4c>
 80123e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80123e6:	e711      	b.n	801220c <_vfiprintf_r+0x50>
 80123e8:	ab03      	add	r3, sp, #12
 80123ea:	9300      	str	r3, [sp, #0]
 80123ec:	462a      	mov	r2, r5
 80123ee:	4b09      	ldr	r3, [pc, #36]	; (8012414 <_vfiprintf_r+0x258>)
 80123f0:	a904      	add	r1, sp, #16
 80123f2:	4630      	mov	r0, r6
 80123f4:	f7fd ff4e 	bl	8010294 <_printf_i>
 80123f8:	e7e4      	b.n	80123c4 <_vfiprintf_r+0x208>
 80123fa:	bf00      	nop
 80123fc:	08014354 	.word	0x08014354
 8012400:	08014374 	.word	0x08014374
 8012404:	08014334 	.word	0x08014334
 8012408:	080145b4 	.word	0x080145b4
 801240c:	080145be 	.word	0x080145be
 8012410:	0800fd4d 	.word	0x0800fd4d
 8012414:	08012199 	.word	0x08012199
 8012418:	080145ba 	.word	0x080145ba

0801241c <__swbuf_r>:
 801241c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801241e:	460e      	mov	r6, r1
 8012420:	4614      	mov	r4, r2
 8012422:	4605      	mov	r5, r0
 8012424:	b118      	cbz	r0, 801242e <__swbuf_r+0x12>
 8012426:	6983      	ldr	r3, [r0, #24]
 8012428:	b90b      	cbnz	r3, 801242e <__swbuf_r+0x12>
 801242a:	f7fd fa7f 	bl	800f92c <__sinit>
 801242e:	4b21      	ldr	r3, [pc, #132]	; (80124b4 <__swbuf_r+0x98>)
 8012430:	429c      	cmp	r4, r3
 8012432:	d12b      	bne.n	801248c <__swbuf_r+0x70>
 8012434:	686c      	ldr	r4, [r5, #4]
 8012436:	69a3      	ldr	r3, [r4, #24]
 8012438:	60a3      	str	r3, [r4, #8]
 801243a:	89a3      	ldrh	r3, [r4, #12]
 801243c:	071a      	lsls	r2, r3, #28
 801243e:	d52f      	bpl.n	80124a0 <__swbuf_r+0x84>
 8012440:	6923      	ldr	r3, [r4, #16]
 8012442:	b36b      	cbz	r3, 80124a0 <__swbuf_r+0x84>
 8012444:	6923      	ldr	r3, [r4, #16]
 8012446:	6820      	ldr	r0, [r4, #0]
 8012448:	1ac0      	subs	r0, r0, r3
 801244a:	6963      	ldr	r3, [r4, #20]
 801244c:	b2f6      	uxtb	r6, r6
 801244e:	4283      	cmp	r3, r0
 8012450:	4637      	mov	r7, r6
 8012452:	dc04      	bgt.n	801245e <__swbuf_r+0x42>
 8012454:	4621      	mov	r1, r4
 8012456:	4628      	mov	r0, r5
 8012458:	f7ff f842 	bl	80114e0 <_fflush_r>
 801245c:	bb30      	cbnz	r0, 80124ac <__swbuf_r+0x90>
 801245e:	68a3      	ldr	r3, [r4, #8]
 8012460:	3b01      	subs	r3, #1
 8012462:	60a3      	str	r3, [r4, #8]
 8012464:	6823      	ldr	r3, [r4, #0]
 8012466:	1c5a      	adds	r2, r3, #1
 8012468:	6022      	str	r2, [r4, #0]
 801246a:	701e      	strb	r6, [r3, #0]
 801246c:	6963      	ldr	r3, [r4, #20]
 801246e:	3001      	adds	r0, #1
 8012470:	4283      	cmp	r3, r0
 8012472:	d004      	beq.n	801247e <__swbuf_r+0x62>
 8012474:	89a3      	ldrh	r3, [r4, #12]
 8012476:	07db      	lsls	r3, r3, #31
 8012478:	d506      	bpl.n	8012488 <__swbuf_r+0x6c>
 801247a:	2e0a      	cmp	r6, #10
 801247c:	d104      	bne.n	8012488 <__swbuf_r+0x6c>
 801247e:	4621      	mov	r1, r4
 8012480:	4628      	mov	r0, r5
 8012482:	f7ff f82d 	bl	80114e0 <_fflush_r>
 8012486:	b988      	cbnz	r0, 80124ac <__swbuf_r+0x90>
 8012488:	4638      	mov	r0, r7
 801248a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801248c:	4b0a      	ldr	r3, [pc, #40]	; (80124b8 <__swbuf_r+0x9c>)
 801248e:	429c      	cmp	r4, r3
 8012490:	d101      	bne.n	8012496 <__swbuf_r+0x7a>
 8012492:	68ac      	ldr	r4, [r5, #8]
 8012494:	e7cf      	b.n	8012436 <__swbuf_r+0x1a>
 8012496:	4b09      	ldr	r3, [pc, #36]	; (80124bc <__swbuf_r+0xa0>)
 8012498:	429c      	cmp	r4, r3
 801249a:	bf08      	it	eq
 801249c:	68ec      	ldreq	r4, [r5, #12]
 801249e:	e7ca      	b.n	8012436 <__swbuf_r+0x1a>
 80124a0:	4621      	mov	r1, r4
 80124a2:	4628      	mov	r0, r5
 80124a4:	f000 f81a 	bl	80124dc <__swsetup_r>
 80124a8:	2800      	cmp	r0, #0
 80124aa:	d0cb      	beq.n	8012444 <__swbuf_r+0x28>
 80124ac:	f04f 37ff 	mov.w	r7, #4294967295
 80124b0:	e7ea      	b.n	8012488 <__swbuf_r+0x6c>
 80124b2:	bf00      	nop
 80124b4:	08014354 	.word	0x08014354
 80124b8:	08014374 	.word	0x08014374
 80124bc:	08014334 	.word	0x08014334

080124c0 <__ascii_wctomb>:
 80124c0:	b149      	cbz	r1, 80124d6 <__ascii_wctomb+0x16>
 80124c2:	2aff      	cmp	r2, #255	; 0xff
 80124c4:	bf85      	ittet	hi
 80124c6:	238a      	movhi	r3, #138	; 0x8a
 80124c8:	6003      	strhi	r3, [r0, #0]
 80124ca:	700a      	strbls	r2, [r1, #0]
 80124cc:	f04f 30ff 	movhi.w	r0, #4294967295
 80124d0:	bf98      	it	ls
 80124d2:	2001      	movls	r0, #1
 80124d4:	4770      	bx	lr
 80124d6:	4608      	mov	r0, r1
 80124d8:	4770      	bx	lr
	...

080124dc <__swsetup_r>:
 80124dc:	4b32      	ldr	r3, [pc, #200]	; (80125a8 <__swsetup_r+0xcc>)
 80124de:	b570      	push	{r4, r5, r6, lr}
 80124e0:	681d      	ldr	r5, [r3, #0]
 80124e2:	4606      	mov	r6, r0
 80124e4:	460c      	mov	r4, r1
 80124e6:	b125      	cbz	r5, 80124f2 <__swsetup_r+0x16>
 80124e8:	69ab      	ldr	r3, [r5, #24]
 80124ea:	b913      	cbnz	r3, 80124f2 <__swsetup_r+0x16>
 80124ec:	4628      	mov	r0, r5
 80124ee:	f7fd fa1d 	bl	800f92c <__sinit>
 80124f2:	4b2e      	ldr	r3, [pc, #184]	; (80125ac <__swsetup_r+0xd0>)
 80124f4:	429c      	cmp	r4, r3
 80124f6:	d10f      	bne.n	8012518 <__swsetup_r+0x3c>
 80124f8:	686c      	ldr	r4, [r5, #4]
 80124fa:	89a3      	ldrh	r3, [r4, #12]
 80124fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012500:	0719      	lsls	r1, r3, #28
 8012502:	d42c      	bmi.n	801255e <__swsetup_r+0x82>
 8012504:	06dd      	lsls	r5, r3, #27
 8012506:	d411      	bmi.n	801252c <__swsetup_r+0x50>
 8012508:	2309      	movs	r3, #9
 801250a:	6033      	str	r3, [r6, #0]
 801250c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012510:	81a3      	strh	r3, [r4, #12]
 8012512:	f04f 30ff 	mov.w	r0, #4294967295
 8012516:	e03e      	b.n	8012596 <__swsetup_r+0xba>
 8012518:	4b25      	ldr	r3, [pc, #148]	; (80125b0 <__swsetup_r+0xd4>)
 801251a:	429c      	cmp	r4, r3
 801251c:	d101      	bne.n	8012522 <__swsetup_r+0x46>
 801251e:	68ac      	ldr	r4, [r5, #8]
 8012520:	e7eb      	b.n	80124fa <__swsetup_r+0x1e>
 8012522:	4b24      	ldr	r3, [pc, #144]	; (80125b4 <__swsetup_r+0xd8>)
 8012524:	429c      	cmp	r4, r3
 8012526:	bf08      	it	eq
 8012528:	68ec      	ldreq	r4, [r5, #12]
 801252a:	e7e6      	b.n	80124fa <__swsetup_r+0x1e>
 801252c:	0758      	lsls	r0, r3, #29
 801252e:	d512      	bpl.n	8012556 <__swsetup_r+0x7a>
 8012530:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012532:	b141      	cbz	r1, 8012546 <__swsetup_r+0x6a>
 8012534:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012538:	4299      	cmp	r1, r3
 801253a:	d002      	beq.n	8012542 <__swsetup_r+0x66>
 801253c:	4630      	mov	r0, r6
 801253e:	f7ff fbcf 	bl	8011ce0 <_free_r>
 8012542:	2300      	movs	r3, #0
 8012544:	6363      	str	r3, [r4, #52]	; 0x34
 8012546:	89a3      	ldrh	r3, [r4, #12]
 8012548:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801254c:	81a3      	strh	r3, [r4, #12]
 801254e:	2300      	movs	r3, #0
 8012550:	6063      	str	r3, [r4, #4]
 8012552:	6923      	ldr	r3, [r4, #16]
 8012554:	6023      	str	r3, [r4, #0]
 8012556:	89a3      	ldrh	r3, [r4, #12]
 8012558:	f043 0308 	orr.w	r3, r3, #8
 801255c:	81a3      	strh	r3, [r4, #12]
 801255e:	6923      	ldr	r3, [r4, #16]
 8012560:	b94b      	cbnz	r3, 8012576 <__swsetup_r+0x9a>
 8012562:	89a3      	ldrh	r3, [r4, #12]
 8012564:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012568:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801256c:	d003      	beq.n	8012576 <__swsetup_r+0x9a>
 801256e:	4621      	mov	r1, r4
 8012570:	4630      	mov	r0, r6
 8012572:	f000 f84d 	bl	8012610 <__smakebuf_r>
 8012576:	89a0      	ldrh	r0, [r4, #12]
 8012578:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801257c:	f010 0301 	ands.w	r3, r0, #1
 8012580:	d00a      	beq.n	8012598 <__swsetup_r+0xbc>
 8012582:	2300      	movs	r3, #0
 8012584:	60a3      	str	r3, [r4, #8]
 8012586:	6963      	ldr	r3, [r4, #20]
 8012588:	425b      	negs	r3, r3
 801258a:	61a3      	str	r3, [r4, #24]
 801258c:	6923      	ldr	r3, [r4, #16]
 801258e:	b943      	cbnz	r3, 80125a2 <__swsetup_r+0xc6>
 8012590:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012594:	d1ba      	bne.n	801250c <__swsetup_r+0x30>
 8012596:	bd70      	pop	{r4, r5, r6, pc}
 8012598:	0781      	lsls	r1, r0, #30
 801259a:	bf58      	it	pl
 801259c:	6963      	ldrpl	r3, [r4, #20]
 801259e:	60a3      	str	r3, [r4, #8]
 80125a0:	e7f4      	b.n	801258c <__swsetup_r+0xb0>
 80125a2:	2000      	movs	r0, #0
 80125a4:	e7f7      	b.n	8012596 <__swsetup_r+0xba>
 80125a6:	bf00      	nop
 80125a8:	2000017c 	.word	0x2000017c
 80125ac:	08014354 	.word	0x08014354
 80125b0:	08014374 	.word	0x08014374
 80125b4:	08014334 	.word	0x08014334

080125b8 <abort>:
 80125b8:	b508      	push	{r3, lr}
 80125ba:	2006      	movs	r0, #6
 80125bc:	f000 f898 	bl	80126f0 <raise>
 80125c0:	2001      	movs	r0, #1
 80125c2:	f7ef fc13 	bl	8001dec <_exit>

080125c6 <__swhatbuf_r>:
 80125c6:	b570      	push	{r4, r5, r6, lr}
 80125c8:	460e      	mov	r6, r1
 80125ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80125ce:	2900      	cmp	r1, #0
 80125d0:	b096      	sub	sp, #88	; 0x58
 80125d2:	4614      	mov	r4, r2
 80125d4:	461d      	mov	r5, r3
 80125d6:	da08      	bge.n	80125ea <__swhatbuf_r+0x24>
 80125d8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80125dc:	2200      	movs	r2, #0
 80125de:	602a      	str	r2, [r5, #0]
 80125e0:	061a      	lsls	r2, r3, #24
 80125e2:	d410      	bmi.n	8012606 <__swhatbuf_r+0x40>
 80125e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80125e8:	e00e      	b.n	8012608 <__swhatbuf_r+0x42>
 80125ea:	466a      	mov	r2, sp
 80125ec:	f000 f89c 	bl	8012728 <_fstat_r>
 80125f0:	2800      	cmp	r0, #0
 80125f2:	dbf1      	blt.n	80125d8 <__swhatbuf_r+0x12>
 80125f4:	9a01      	ldr	r2, [sp, #4]
 80125f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80125fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80125fe:	425a      	negs	r2, r3
 8012600:	415a      	adcs	r2, r3
 8012602:	602a      	str	r2, [r5, #0]
 8012604:	e7ee      	b.n	80125e4 <__swhatbuf_r+0x1e>
 8012606:	2340      	movs	r3, #64	; 0x40
 8012608:	2000      	movs	r0, #0
 801260a:	6023      	str	r3, [r4, #0]
 801260c:	b016      	add	sp, #88	; 0x58
 801260e:	bd70      	pop	{r4, r5, r6, pc}

08012610 <__smakebuf_r>:
 8012610:	898b      	ldrh	r3, [r1, #12]
 8012612:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012614:	079d      	lsls	r5, r3, #30
 8012616:	4606      	mov	r6, r0
 8012618:	460c      	mov	r4, r1
 801261a:	d507      	bpl.n	801262c <__smakebuf_r+0x1c>
 801261c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012620:	6023      	str	r3, [r4, #0]
 8012622:	6123      	str	r3, [r4, #16]
 8012624:	2301      	movs	r3, #1
 8012626:	6163      	str	r3, [r4, #20]
 8012628:	b002      	add	sp, #8
 801262a:	bd70      	pop	{r4, r5, r6, pc}
 801262c:	ab01      	add	r3, sp, #4
 801262e:	466a      	mov	r2, sp
 8012630:	f7ff ffc9 	bl	80125c6 <__swhatbuf_r>
 8012634:	9900      	ldr	r1, [sp, #0]
 8012636:	4605      	mov	r5, r0
 8012638:	4630      	mov	r0, r6
 801263a:	f7fd fa73 	bl	800fb24 <_malloc_r>
 801263e:	b948      	cbnz	r0, 8012654 <__smakebuf_r+0x44>
 8012640:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012644:	059a      	lsls	r2, r3, #22
 8012646:	d4ef      	bmi.n	8012628 <__smakebuf_r+0x18>
 8012648:	f023 0303 	bic.w	r3, r3, #3
 801264c:	f043 0302 	orr.w	r3, r3, #2
 8012650:	81a3      	strh	r3, [r4, #12]
 8012652:	e7e3      	b.n	801261c <__smakebuf_r+0xc>
 8012654:	4b0d      	ldr	r3, [pc, #52]	; (801268c <__smakebuf_r+0x7c>)
 8012656:	62b3      	str	r3, [r6, #40]	; 0x28
 8012658:	89a3      	ldrh	r3, [r4, #12]
 801265a:	6020      	str	r0, [r4, #0]
 801265c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012660:	81a3      	strh	r3, [r4, #12]
 8012662:	9b00      	ldr	r3, [sp, #0]
 8012664:	6163      	str	r3, [r4, #20]
 8012666:	9b01      	ldr	r3, [sp, #4]
 8012668:	6120      	str	r0, [r4, #16]
 801266a:	b15b      	cbz	r3, 8012684 <__smakebuf_r+0x74>
 801266c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012670:	4630      	mov	r0, r6
 8012672:	f000 f86b 	bl	801274c <_isatty_r>
 8012676:	b128      	cbz	r0, 8012684 <__smakebuf_r+0x74>
 8012678:	89a3      	ldrh	r3, [r4, #12]
 801267a:	f023 0303 	bic.w	r3, r3, #3
 801267e:	f043 0301 	orr.w	r3, r3, #1
 8012682:	81a3      	strh	r3, [r4, #12]
 8012684:	89a0      	ldrh	r0, [r4, #12]
 8012686:	4305      	orrs	r5, r0
 8012688:	81a5      	strh	r5, [r4, #12]
 801268a:	e7cd      	b.n	8012628 <__smakebuf_r+0x18>
 801268c:	0800f8c5 	.word	0x0800f8c5

08012690 <_malloc_usable_size_r>:
 8012690:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012694:	1f18      	subs	r0, r3, #4
 8012696:	2b00      	cmp	r3, #0
 8012698:	bfbc      	itt	lt
 801269a:	580b      	ldrlt	r3, [r1, r0]
 801269c:	18c0      	addlt	r0, r0, r3
 801269e:	4770      	bx	lr

080126a0 <_raise_r>:
 80126a0:	291f      	cmp	r1, #31
 80126a2:	b538      	push	{r3, r4, r5, lr}
 80126a4:	4604      	mov	r4, r0
 80126a6:	460d      	mov	r5, r1
 80126a8:	d904      	bls.n	80126b4 <_raise_r+0x14>
 80126aa:	2316      	movs	r3, #22
 80126ac:	6003      	str	r3, [r0, #0]
 80126ae:	f04f 30ff 	mov.w	r0, #4294967295
 80126b2:	bd38      	pop	{r3, r4, r5, pc}
 80126b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80126b6:	b112      	cbz	r2, 80126be <_raise_r+0x1e>
 80126b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80126bc:	b94b      	cbnz	r3, 80126d2 <_raise_r+0x32>
 80126be:	4620      	mov	r0, r4
 80126c0:	f000 f830 	bl	8012724 <_getpid_r>
 80126c4:	462a      	mov	r2, r5
 80126c6:	4601      	mov	r1, r0
 80126c8:	4620      	mov	r0, r4
 80126ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80126ce:	f000 b817 	b.w	8012700 <_kill_r>
 80126d2:	2b01      	cmp	r3, #1
 80126d4:	d00a      	beq.n	80126ec <_raise_r+0x4c>
 80126d6:	1c59      	adds	r1, r3, #1
 80126d8:	d103      	bne.n	80126e2 <_raise_r+0x42>
 80126da:	2316      	movs	r3, #22
 80126dc:	6003      	str	r3, [r0, #0]
 80126de:	2001      	movs	r0, #1
 80126e0:	e7e7      	b.n	80126b2 <_raise_r+0x12>
 80126e2:	2400      	movs	r4, #0
 80126e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80126e8:	4628      	mov	r0, r5
 80126ea:	4798      	blx	r3
 80126ec:	2000      	movs	r0, #0
 80126ee:	e7e0      	b.n	80126b2 <_raise_r+0x12>

080126f0 <raise>:
 80126f0:	4b02      	ldr	r3, [pc, #8]	; (80126fc <raise+0xc>)
 80126f2:	4601      	mov	r1, r0
 80126f4:	6818      	ldr	r0, [r3, #0]
 80126f6:	f7ff bfd3 	b.w	80126a0 <_raise_r>
 80126fa:	bf00      	nop
 80126fc:	2000017c 	.word	0x2000017c

08012700 <_kill_r>:
 8012700:	b538      	push	{r3, r4, r5, lr}
 8012702:	4d07      	ldr	r5, [pc, #28]	; (8012720 <_kill_r+0x20>)
 8012704:	2300      	movs	r3, #0
 8012706:	4604      	mov	r4, r0
 8012708:	4608      	mov	r0, r1
 801270a:	4611      	mov	r1, r2
 801270c:	602b      	str	r3, [r5, #0]
 801270e:	f7ef fb5d 	bl	8001dcc <_kill>
 8012712:	1c43      	adds	r3, r0, #1
 8012714:	d102      	bne.n	801271c <_kill_r+0x1c>
 8012716:	682b      	ldr	r3, [r5, #0]
 8012718:	b103      	cbz	r3, 801271c <_kill_r+0x1c>
 801271a:	6023      	str	r3, [r4, #0]
 801271c:	bd38      	pop	{r3, r4, r5, pc}
 801271e:	bf00      	nop
 8012720:	20006294 	.word	0x20006294

08012724 <_getpid_r>:
 8012724:	f7ef bb4a 	b.w	8001dbc <_getpid>

08012728 <_fstat_r>:
 8012728:	b538      	push	{r3, r4, r5, lr}
 801272a:	4d07      	ldr	r5, [pc, #28]	; (8012748 <_fstat_r+0x20>)
 801272c:	2300      	movs	r3, #0
 801272e:	4604      	mov	r4, r0
 8012730:	4608      	mov	r0, r1
 8012732:	4611      	mov	r1, r2
 8012734:	602b      	str	r3, [r5, #0]
 8012736:	f7ef fba8 	bl	8001e8a <_fstat>
 801273a:	1c43      	adds	r3, r0, #1
 801273c:	d102      	bne.n	8012744 <_fstat_r+0x1c>
 801273e:	682b      	ldr	r3, [r5, #0]
 8012740:	b103      	cbz	r3, 8012744 <_fstat_r+0x1c>
 8012742:	6023      	str	r3, [r4, #0]
 8012744:	bd38      	pop	{r3, r4, r5, pc}
 8012746:	bf00      	nop
 8012748:	20006294 	.word	0x20006294

0801274c <_isatty_r>:
 801274c:	b538      	push	{r3, r4, r5, lr}
 801274e:	4d06      	ldr	r5, [pc, #24]	; (8012768 <_isatty_r+0x1c>)
 8012750:	2300      	movs	r3, #0
 8012752:	4604      	mov	r4, r0
 8012754:	4608      	mov	r0, r1
 8012756:	602b      	str	r3, [r5, #0]
 8012758:	f7ef fba7 	bl	8001eaa <_isatty>
 801275c:	1c43      	adds	r3, r0, #1
 801275e:	d102      	bne.n	8012766 <_isatty_r+0x1a>
 8012760:	682b      	ldr	r3, [r5, #0]
 8012762:	b103      	cbz	r3, 8012766 <_isatty_r+0x1a>
 8012764:	6023      	str	r3, [r4, #0]
 8012766:	bd38      	pop	{r3, r4, r5, pc}
 8012768:	20006294 	.word	0x20006294

0801276c <_init>:
 801276c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801276e:	bf00      	nop
 8012770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012772:	bc08      	pop	{r3}
 8012774:	469e      	mov	lr, r3
 8012776:	4770      	bx	lr

08012778 <_fini>:
 8012778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801277a:	bf00      	nop
 801277c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801277e:	bc08      	pop	{r3}
 8012780:	469e      	mov	lr, r3
 8012782:	4770      	bx	lr
